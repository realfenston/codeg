<fim_prefix>// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: report.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace PlatformHotfix {

  #region Messages
  public partial class reportReq : ViewModel {
    public static readonly pb::MessageParser<reportReq> Parser = new pb::MessageParser<reportReq>(() => (reportReq)MessagePool.Instance.Fetch(typeof(reportReq)));
    /// <summary>
    /// 账户id
    /// </summary>
    public PropertyValue<string> AccountId;
    /// <summary>
    /// 用户token
    /// </summary>
    public PropertyValue<string> Token;
    /// <summary>
    ///举报teamId
    /// </summary>
    public PropertyValue<string> From;
    /// <summary>
    ///被举报teamId
    /// </summary>
    public PropertyValue<string> Target;
    /// <summary>
    ///举报类型
    /// </summary>
    public PropertyValue<int> Type;
    /// <summary>
    ///举报原因
    /// </summary>
    public PropertyValue<string> Reason;
    /// <summary>
    ///游戏类型
    /// </summary>
    public PropertyValue<int> GameType;
    public override void WriteTo(pb::CodedOutputStream output) {
      if (!string.IsNullOrEmpty(AccountId.Value)) {
        output.WriteRawTag(10);
        output.WriteString(AccountId.Value);
      }
      if (!string.IsNullOrEmpty(Token.Value)) {
        output.WriteRawTag(18);
        output.WriteString(Token.Value);
      }
      if (!string.IsNullOrEmpty(From.Value)) {
        output.WriteRawTag(26);
        output.WriteString(From.Value);
      }
      if (!string.IsNullOrEmpty(Target.Value)) {
        output.WriteRawTag(34);
        output.WriteString(Target.Value);
      }
      if (Type.Value!= 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Type.Value);
      }
      if (!string.IsNullOrEmpty(Reason.Value)) {
        output.WriteRawTag(50);
        output.WriteString(Reason.Value);
      }
      if (GameType.Value!= 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(GameType.Value);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (!string.IsNullOrEmpty(AccountId.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);
      }
      if (!string.IsNullOrEmpty(Token<fim_suffix>Value);
      }
      if (!string.IsNullOrEmpty(From.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From.Value);
      }
      if (!string.IsNullOrEmpty(Target.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target.Value);
      }
      if (Type.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Type.Value);
      }
      if (!string.IsNullOrEmpty(Reason.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason.Value);
      }
      if (GameType.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      int flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            flag |= 1 << 1;
            AccountId.Value = input.ReadString();
            break;
          }
          case 18: {
            flag |= 1 << 2;
            Token.Value = input.ReadString();
            break;
          }
          case 26: {
            flag |= 1 << 3;
            From.Value = input.ReadString();
            break;
          }
          case 34: {
            flag |= 1 << 4;
            Target.Value = input.ReadString();
            break;
          }
          case 40: {
            flag |= 1 << 5;
            Type.Value = input.ReadSInt32();
            break;
          }
          case 50: {
            flag |= 1 << 6;
            Reason.Value = input.ReadString();
            break;
          }
          case 56: {
            flag |= 1 << 7;
            GameType.Value = input.ReadSInt32();
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        AccountId.Value = "";
      }
      if((flag & 1 << 2) == 0)
      {
        Token.Value = "";
      }
      if((flag & 1 << 3) == 0)
      {
        From.Value = "";
      }
      if((flag & 1 << 4) == 0)
      {
        Target.Value = "";
      }
      if((flag & 1 << 5) == 0)
      {
        Type.Value = 0;
      }
      if((flag & 1 << 6) == 0)
      {
        Reason.Value = "";
      }
      if((flag & 1 << 7) == 0)
      {
        GameType.Value = 0;
      }
    }

    public void MergeFrom(reportReq from) {
      AccountId.Value = from.AccountId.Value;
      Token.Value = from.Token.Value;
      From.Value = from.From.Value;
      Target.Value = from.Target.Value;
      Type.Value = from.Type.Value;
      Reason.Value = from.Reason.Value;
      GameType.Value = from.GameType.Value;
    }

    public override void ResetDefaults() {
      AccountId.Value = "";
      Token.Value = "";
      From.Value = "";
      Target.Value = "";
      Type.Value = 0;
      Reason.Value = "";
      GameType.Value = 0;
    }

    public override void Bind(){
      AccountId = new PropertyValue<string>(this,"AccountId");
      Token = new PropertyValue<string>(this,"Token");
      From = new PropertyValue<string>(this,"From");
      Target = new PropertyValue<string>(this,"Target");
      Type = new PropertyValue<int>(this,"Type");
      Reason = new PropertyValue<string>(this,"Reason");
      GameType = new PropertyValue<int>(this,"GameType");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(AccountId)); 
      list.Add(new ViewModelPropertyInfo(Token)); 
      list.Add(new ViewModelPropertyInfo(From)); 
      list.Add(new ViewModelPropertyInfo(Target)); 
      list.Add(new ViewModelPropertyInfo(Type)); 
      list.Add(new ViewModelPropertyInfo(Reason)); 
      list.Add(new ViewModelPropertyInfo(GameType)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("AccountId:").Append(AccountId.Value);
      stringBuilder.Append(", Token:").Append(Token.Value);
      stringBuilder.Append(", From:").Append(From.Value);
      stringBuilder.Append(", Target:").Append(Target.Value);
      stringBuilder.Append(", Type:").Append(Type.Value);
      stringBuilder.Append(", Reason:").Append(Reason.Value);
      stringBuilder.Append(", GameType:").Append(GameType.Value);
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  #endregion

}

#endregion Designer generated code
<fim_middle>.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token.<|endoftext|>