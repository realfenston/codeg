// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resource_cipher.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = 7;
using pbc = 7;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.UI
using UnityEngine
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace PlatformHotfix {

  #region Messages
  public partial class ResourceCipherPB : ViewModel {
    public static readonly pb::MessageParser<ResourceCipherPB> Parser = new pb::MessageParser<ResourceCipherPB>(() => (ResourceCipherPB)MessagePool.Instance.Fetch(typeof(ResourceCipherPB)));
    /// <summary>
    /// 是否开启二级密码 ture开启
    /// </summary>
    public PropertyValue<bool> IsOpen;
    /// <summary>
    ///是否免密 true 开启
    /// </summary>
    public PropertyValue<bool> IsNoSecret;
    /// <summary>
    /// 是否申请关闭二级密码
    /// </summary>
    public PropertyValue<bool> IsApplyClose;
    /// <summary>
    ///申请关闭结束时间
    /// </summary>
    public PropertyValue<long> CloseTime;
    public override void WriteTo(pb::CodedOutputStream output) {
      if (IsOpen.Value!= false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen.Value);
      }
      if (IsNoSecret.Value!= false) {
        output.WriteRawTag(16);
        output.WriteBool(IsNoSecret.Value);
      }
      if (IsApplyClose.Value!= false) {
        output.WriteRawTag(24);
        output.WriteBool(IsApplyClose.Value);
      }
      if (CloseTime.Value!= 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(CloseTime.Value);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (IsOpen.Value!= false) {
        size += 1 + 1;
      }
      if (IsNoSecret.Value!= false) {
        size += 1 + 1;
      }
      if (IsApplyClose.Value!= false) {
        size += 1 + 1;
      }
      if (CloseTime.Value!= 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CloseTime.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      long flag = 0;
      uint
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      long flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag |= 1 << 1;
            IsOpen.Value = input.ReadBool();
            break;
          }
          case 16: {
            flag |= 1 << 2;
            IsNoSecret.Value = input.ReadBool();
            break;
          }
          case 24: {
            flag |= 1 << 3;
            IsApplyClose.Value = input.ReadBool();
            break;
          }
          case 32: {
            flag |= 1 << 4;
            CloseTime.Value = input.ReadSInt64();
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        IsOpen.Value = false;
      }
      if((flag & 1 << 2) == 0)
      {
        IsNoSecret.Value = false;
      }
      if((flag & 1 << 3) == 0)
      {
        IsApplyClose.Value = false;
      }
      if((flag & 1 << 4) == 0)
      {
        CloseTime.Value = 0;
      }
    }

    public void MergeFrom(ResourceCipherPB from) {
      IsOpen.Value =
      IsNoSecret.Value = from.IsNoSecret.Value;
      IsApplyClose.Value = from.IsApplyClose.Value;
      CloseTime.Value = from.CloseTime.Value;
    }

    public override void ResetDefaults() {
      IsOpen.Value = false;
      IsNoSecret.Value = false;
      IsApplyClose.Value = false;
      CloseTime.Value = 0;
    }

    public override void Bind(){
      IsOpen = new PropertyValue<
      IsNoSecret = new 
      IsApplyClose = new PropertyValue<bool>(this,"IsApplyClose");
      CloseTime = new PropertyValue<long>(this,"CloseTime");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(IsOpen)); 
      list.Add(new ViewModelPropertyInfo(IsNoSecret)); 
      list.Add(new ViewModelPropertyInfo(IsApplyClose)); 
      list.Add(new ViewModelPropertyInfo(CloseTime)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  public partial class DetailRes : ViewModel {
    public static readonly pb::MessageParser<DetailRes> Parser = new pb::MessageParser<DetailRes>(() => (DetailRes)MessagePool.Instance.Fetch(typeof(DetailRes)));
    /// <summary>
    ///相应码
    /// </summary>
    public PropertyValue<int> Ret;
    /// <summary>
    ///球队资源密码信息
    /// </summary>
    public global::PlatformHotfix.ResourceCipherPB ResourceCipher;

    public override void WriteTo(pb::CodedOutputStream output) {
      if (Ret.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret.Value);
      }
      if (ResourceCipher!= null &&ResourceCipher.CalculateSize()!= 0) {
        output.WriteRawTag(18);
        output.WriteMessage(ResourceCipher);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (Ret.Value!= 0) {
        size += 1 + pb::CodedInputStream.ComputeSInt32Size(Ret.Value);
      }
      }
      if (ResourceCipher!= null &&ResourceCipher.CalculateSize()!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourceCipher);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      long flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag |= 1 << 1;
            Ret.Value = input.ReadSInt32();
            break;
          }
          case 18: {
            flag |= 1 << Hotfix.ResourceCipherPB();
            }
            input.ReadMessage(ResourceCipher);
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        Ret.Value = 0;
      }
      if((flag & 1 << 2) == 0)
      {
        if (ResourceCipher!= null)ResourceCipher.
      }
    }

    public void MergeFrom(DetailRes from) {
      Ret.Value = from.Ret.Value;
      ResourceCipher.MergeFrom(from.ResourceCipher);
    }

    public override void ResetDefaults() {
      Ret.Value = 0;
      if (ResourceCipher!= null)ResourceCipher.ResetDefaults();
    }

    public override void Bind(){
      Ret = new PropertyValue<int>(this,"Ret");
      this.AddBinding(ResourceCipher?? (ResourceCipher = new global::PlatformHotfix.ResourceCipherPB())); 
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(Ret)); 
      list.Add(new ViewModelPropertyInfo(ResourceCipher)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("Ret:").Append(Ret.Value);
      stringBuilder.Append(", ResourceCipher:"+ResourceCipher.ToString());
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  public partial class updateResourceCipherSettingReq : ViewModel {
    public static readonly pb::MessageParser<updateResourceCipherSettingReq> Parser = new pb::MessageParser<updateResourceCipherSettingReq>(() => (updateResourceCipherSettingReq)MessagePool.Instance.Fetch(typeof(updateResourceCipherSettingReq)));
    /// <summary>
    /// 1 开启/关闭二级密码 2 开启/关闭免密操作
    /// </summary>
    public PropertyValue<int> Type;
    /// <summary>
    /// 是否开启 ture开启
    /// </summary>
    public PropertyValue<bool> IsOpen;
    /// <summary>
    ///密码 开启二级密码时候需要传就行
    /// </summary>
    public PropertyValue<string> Cipher;
    public override void WriteTo(pb::CodedOutputStream output) {
      if (Type.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Type.Value);
      }
      if (IsOpen.Value!= false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpen.Value);
      }
      if (!string.IsNullOrEmpty(Cipher.Value)) {
        output.WriteRawTag(26);
        output.WriteString(Cipher.Value);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (Type.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Type.Value);
      }
      if (IsOpen.Value!= false) {
        size += 1 + 1;
      }
      if (!string.IsNullOrEmpty(Cipher.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cipher.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      long flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag |= 1 << 1;
            Type.Value = input.ReadSInt32();
            break;
          }
          case 16: {
            flag |= 1 << 2;
            IsOpen.Value = input.ReadBool();
            break;
          }
          case 26: {
            flag |= 1 << 3;
            Cipher.Value = input.ReadString();
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        Type.Value = 0;
      }
      if((flag & 1 << 2) == 0)
      {
        IsOpen.Value = false;
      }
      if((flag & 1 << 3) == 0)
      {
        Cipher.Value = "";
      }
    }

    public void MergeFrom(updateResourceCipherSettingReq from) {
      Type.Value = from.Type.Value;
      IsOpen.Value = from.IsOpen.Value;
      Cipher.Value = from.Cipher.Value;
    }

    public override void ResetDefaults() {
      Type.Value = 0;
      IsOpen.Value = false;
      Cipher.Value = "";
    }

    public override void Bind(){
      Type = new PropertyValue<int>(this,"Type");
      IsOpen = new PropertyValue<bool>(this,"IsOpen");
      Cipher = new PropertyValue<string>(this,"Cipher");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(Type)); 
      list.
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("Type:").Append(Type.Value);
      stringBuilder.Append(", IsOpen:").Append(IsOpen.Value);
      stringBuilder.Append(", Cipher:").Append(Cipher.Value);
      return 
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  public partial class updateResourceCipherSettingRes : ViewModel {
    public static readonly pb::MessageParser<updateResourceCipherSettingRes> Parser = new pb::MessageParser<updateResourceCipherSettingRes>(() => (updateResourceCipherSettingRes)MessagePool.Instance.Fetch(typeof(updateResourceCipherSettingRes)));
    /// <summary>
    ///相应码
    /// </summary>
    public PropertyValue<int> Ret;
    /// <summary>
    /// 是否开启二级密码 ture开启
    /// </summary>
    public PropertyValue<bool> IsOpen;
    /// <summary>
    ///是否开启免密 true 开启
    /// </summary>
    public PropertyValue<bool> IsNoSecret;
    public override void WriteTo(pb::CodedOutputStream output) {
      if (Ret.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret.Value);
      }
      if (IsOpen.Value!= false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpen.Value);
      }
      if (IsNoSecret.Value!= false) {
        output.WriteRawTag(24);
        output.WriteBool(IsNoSecret.Value);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (Ret.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);
      }
      if (IsOpen.Value!= false) {
        size += 1 + 1;
      }
      if (IsNoSecret.Value!= false) {
        size += 1 + 1;
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      long flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag |= 1 << 1;
            Ret.Value = input.ReadSInt32();
            break;
          }
          case 16: {
            flag |= 1 << 2;
            IsOpen.Value = input.ReadBool();
            break;
          }
          case 24: {
            flag |= 1 << 3;
            IsNoSecret.Value = input.ReadBool();
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        Ret.Value = 0;
      }
      if((flag & 1 << 2) == 0)
      {
        IsOpen.Value = false;
      }
      if((flag & 1 << 3) == 0)
      {
        IsNoSecret.Value = false;
      }
    }

    public void MergeFrom(updateResourceCipherSettingRes from) {
      Ret.Value = from.Ret.Value;
      IsOpen.Value = from.IsOpen.Value;
      IsNoSecret.Value = from.IsNoSecret.Value;
    }

    public override void ResetDefaults() {
      Ret.Value = 0;
      IsOpen.Value = false;
      IsNoSecret.Value = false;
    }

    public override void Bind(){
      Ret = 
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(Ret)); 
      list.Add(new ViewModelPropertyInfo(IsOpen)); 
      list.Add(new ViewModelPropertyInfo(IsNoSecret)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("Ret:").Append(Ret.Value);
      stringBuilder.Append(", IsOpen:").Append(IsOpen.Value);
      stringBuilder.Append(", IsNoSecret:").Append(IsNoSecret.Value);
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  public partial class closeResourceCipherRes : ViewModel {
    public static readonly pb::MessageParser<closeResourceCipherRes> Parser = new pb::MessageParser<closeResourceCipherRes>(() => (closeResourceCipherRes)MessagePool.Instance.Fetch(typeof(closeResourceCipherRes)));
    /// <summary>
    ///相应码
    /// </summary>
    public PropertyValue<int> Ret;
    /// <summary>
    /// 是否申请关闭二级密码
    /// </summary>
    public PropertyValue<bool> IsApplyClose;
    /// <summary>
    ///申请关闭结束时间
    /// </summary>
    public PropertyValue<long> CloseTime;
    public override void WriteTo(pb::C) {
      if (Ret.Value!= 0) {
        output.
      }
      if (IsApplyClose.Value!= false) {
        output.WriteRawTag(16);
        output.WriteBool(IsApplyClose.Value);
      }
      if (CloseTime.Value!= 0L) {
        output.WriteRawTag(24);
        output.W
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (Ret.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);
      }
      if (IsApplyClose.Value!= false) {
        size += 1 + 1;
      }
      if (CloseTime.Value!= 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CloseTime.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      long flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag |= 1 << 1;
            Ret.Value = input.ReadSInt32();
            break;
          }
          case 16: {
            flag |= 1 << 2;
            IsApplyClose.Value = input.ReadBool();
            break;
          }
          case 24: {
            flag |= 1 << 3;
            CloseTime.Value = input.ReadSInt64();
            break;
          }
        }
      }
      if()
      if((flag & 1 << 2) == 0)
      {
        IsApplyClose.Value = false;
      }
      if((flag & 1 << 3) == 0)
      {
        CloseTime.Value = 0;
      }
    }

    public void MergeFrom(closeResourceCipherRes from) {
      Ret.Value = from.Ret.Value;
      IsApplyClose.Value = from.IsApplyClose.Value;
      CloseTime.Value = from.CloseTime.Value;
    }

    public override void ResetDefaults() {
      Ret.Value = 0;
      IsApplyClose.Value = false;
      CloseTime.Value = 0;
    }

    public override void Bind(){
      Ret = new PropertyValue<int>(this,"Ret");
      IsApplyClose = new PropertyValue<bool>(this,"IsApplyClose");
      CloseTime = new PropertyValue<long>(this,"CloseTime");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(Ret)); 
      list.Add(new ViewModelPropertyInfo(IsApplyClose)); 
      list.Add(new ViewModelPropertyInfo(CloseTime)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("Ret:").Append(Ret.Value);
      stringBuilder.Append(", IsApplyClose:").Append(IsApplyClose.Value);
      stringBuilder.Append(", CloseTime:").Append(CloseTime.Value);
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      abcd
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void BindO
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  #endregion

}

#endregion Designer generated code
