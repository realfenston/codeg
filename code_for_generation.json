{"inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: resource_cipher.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class ResourceCipherPB : ViewModel {\n    public static readonly pb::MessageParser<ResourceCipherPB> Parser = new pb::MessageParser<ResourceCipherPB>(() => (ResourceCipherPB)MessagePool.Instance.Fetch(typeof(ResourceCipherPB)));\n    /// <summary>\n    /// \u662f\u5426\u5f00\u542f\u4e8c\u7ea7\u5bc6\u7801 ture\u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsOpen;\n    /// <summary>\n    ///\u662f\u5426\u514d\u5bc6 true \u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsNoSecret;\n    /// <summary>\n    /// \u662f\u5426\u7533\u8bf7\u5173\u95ed\u4e8c\u7ea7\u5bc6\u7801\n    /// </summary>\n    public PropertyValue<bool> IsApplyClose;\n    /// <summary>\n    ///\u7533\u8bf7\u5173\u95ed\u7ed3\u675f\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> CloseTime;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (IsOpen.Value != false) {\n        output.WriteRawTag(8);\n        output.WriteBool(IsOpen.Value);\n      }\n      if (IsNoSecret.Value != false) {\n        output.WriteRawTag(16);\n        output.WriteBool(IsNoSecret.Value);\n      }\n      if (IsApplyClose.Value != false) {\n        output.WriteRawTag(24);\n        output.WriteBool(IsApplyClose.Value);\n      }\n      if (CloseTime.Value != 0L) {\n        output.WriteRawTag(32);\n        output.WriteSInt64(CloseTime.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (IsOpen.Value != false) {\n        size += 1 + 1;\n      }\n      if (IsNoSecret.Value != false) {\n        size += 1 + 1;\n      }\n      if (IsApplyClose.Value != false) {\n        size += 1 + 1;\n      }\n      if (CloseTime.Value != 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CloseTime.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            IsOpen.Value = input.ReadBool();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            IsNoSecret.Value = input.ReadBool();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            IsApplyClose.Value = input.ReadBool();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            CloseTime.Value = input.ReadSInt64();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        IsOpen.Value = false;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        IsNoSecret.Value = false;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        IsApplyClose.Value = false;\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        CloseTime.Value = 0;\n      }\n    }\n\n    public void MergeFrom(ResourceCipherPB from) {\n      IsOpen.Value = from.IsOpen.Value;\n      IsNoSecret.Value = from.IsNoSecret.Value;\n      IsApplyClose.Value = from.IsApplyClose.Value;\n      CloseTime.Value = from.CloseTime.Value;\n    }\n\n    public override void ResetDefaults() {\n      IsOpen.Value = false;\n      IsNoSecret.Value = false;\n      IsApplyClose.Value = false;\n      CloseTime.Value = 0;\n    }\n\n    public override void Bind(){\n      IsOpen = new PropertyValue<bool>(this,\"IsOpen\");\n      IsNoSecret = new PropertyValue<bool>(this,\"IsNoSecret\");\n      IsApplyClose = new PropertyValue<bool>(this,\"IsApplyClose\");\n      CloseTime = new PropertyValue<long>(this,\"CloseTime\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(IsOpen)); \n      list.Add(new ViewModelPropertyInfo(IsNoSecret)); \n      list.Add(new ViewModelPropertyInfo(IsApplyClose)); \n      list.Add(new ViewModelPropertyInfo(CloseTime)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"IsOpen:\").Append(IsOpen.Value);\n      stringBuilder.Append(\", IsNoSecret:\").Append(IsNoSecret.Value);\n      stringBuilder.Append(\", IsApplyClose:\").Append(IsApplyClose.Value);\n      stringBuilder.Append(\", CloseTime:\").Append(CloseTime.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class DetailRes : ViewModel {\n    public static readonly pb::MessageParser<DetailRes> Parser = new pb::MessageParser<DetailRes>(() => (DetailRes)MessagePool.Instance.Fetch(typeof(DetailRes)));\n    /// <summary>\n    ///\u76f8\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///\u7403\u961f\u8d44\u6e90\u5bc6\u7801\u4fe1\u606f\n    /// </summary>\n    public global::PlatformHotfix.ResourceCipherPB ResourceCipher;\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (ResourceCipher != null &&ResourceCipher.CalculateSize()!= 0) {\n        output.WriteRawTag(18);\n        output.WriteMessage(ResourceCipher);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (ResourceCipher != null &&ResourceCipher.CalculateSize()!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourceCipher);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            if (ResourceCipher == null) {\n              ResourceCipher = new global::PlatformHotfix.ResourceCipherPB();\n            }\n            input.ReadMessage(ResourceCipher);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        if (ResourceCipher != null)ResourceCipher.ResetDefaults();\n      }\n    }\n\n    public void MergeFrom(DetailRes from) {\n      Ret.Value = from.Ret.Value;\n      ResourceCipher.MergeFrom(from.ResourceCipher);\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      if (ResourceCipher != null)ResourceCipher.ResetDefaults();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      this.AddBinding(ResourceCipher ?? (ResourceCipher = new global::PlatformHotfix.ResourceCipherPB())); \n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(ResourceCipher)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", ResourceCipher:\"+ResourceCipher.ToString());\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class updateResourceCipherSettingReq : ViewModel {\n    public static readonly pb::MessageParser<updateResourceCipherSettingReq> Parser = new pb::MessageParser<updateResourceCipherSettingReq>(() => (updateResourceCipherSettingReq)MessagePool.Instance.Fetch(typeof(updateResourceCipherSettingReq)));\n    /// <summary>\n    /// 1 \u5f00\u542f/\u5173\u95ed\u4e8c\u7ea7\u5bc6\u7801 2 \u5f00\u542f/\u5173\u95ed\u514d\u5bc6\u64cd\u4f5c\n    /// </summary>\n    public PropertyValue<int> Type;\n    /// <summary>\n    /// \u662f\u5426\u5f00\u542f ture\u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsOpen;\n    /// <summary>\n    ///\u5bc6\u7801 \u5f00\u542f\u4e8c\u7ea7\u5bc6\u7801\u65f6\u5019\u9700\u8981\u4f20\u5c31\u884c\n    /// </summary>\n    public PropertyValue<string> Cipher;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Type.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Type.Value);\n      }\n      if (IsOpen.Value != false) {\n        output.WriteRawTag(16);\n        output.WriteBool(IsOpen.Value);\n      }\n      if (!string.IsNullOrEmpty(Cipher.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(Cipher.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Type.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Type.Value);\n      }\n      if (IsOpen.Value != false) {\n        size += 1 + 1;\n      }\n      if (!string.IsNullOrEmpty(Cipher.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cipher.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Type.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            IsOpen.Value = input.ReadBool();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            Cipher.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Type.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        IsOpen.Value = false;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Cipher.Value = \"\";\n      }\n    }\n\n    public void MergeFrom(updateResourceCipherSettingReq from) {\n      Type.Value = from.Type.Value;\n      IsOpen.Value = from.IsOpen.Value;\n      Cipher.Value = from.Cipher.Value;\n    }\n\n    public override void ResetDefaults() {\n      Type.Value = 0;\n      IsOpen.Value = false;\n      Cipher.Value = \"\";\n    }\n\n    public override void Bind(){\n      Type = new PropertyValue<int>(this,\"Type\");\n      IsOpen = new PropertyValue<bool>(this,\"IsOpen\");\n      Cipher = new PropertyValue<string>(this,\"Cipher\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Type)); \n      list.Add(new ViewModelPropertyInfo(IsOpen)); \n      list.Add(new ViewModelPropertyInfo(Cipher)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Type:\").Append(Type.Value);\n      stringBuilder.Append(\", IsOpen:\").Append(IsOpen.Value);\n      stringBuilder.Append(\", Cipher:\").Append(Cipher.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class updateResourceCipherSettingRes : ViewModel {\n    public static readonly pb::MessageParser<updateResourceCipherSettingRes> Parser = new pb::MessageParser<updateResourceCipherSettingRes>(() => (updateResourceCipherSettingRes)MessagePool.Instance.Fetch(typeof(updateResourceCipherSettingRes)));\n    /// <summary>\n    ///\u76f8\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    /// \u662f\u5426\u5f00\u542f\u4e8c\u7ea7\u5bc6\u7801 ture\u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsOpen;\n    /// <summary>\n    ///\u662f\u5426\u5f00\u542f\u514d\u5bc6 true \u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsNoSecret;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (IsOpen.Value != false) {\n        output.WriteRawTag(16);\n        output.WriteBool(IsOpen.Value);\n      }\n      if (IsNoSecret.Value != false) {\n        output.WriteRawTag(24);\n        output.WriteBool(IsNoSecret.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (IsOpen.Value != false) {\n        size += 1 + 1;\n      }\n      if (IsNoSecret.Value != false) {\n        size += 1 + 1;\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            IsOpen.Value = input.ReadBool();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            IsNoSecret.Value = input.ReadBool();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        IsOpen.Value = false;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        IsNoSecret.Value = false;\n      }\n    }\n\n    public void MergeFrom(updateResourceCipherSettingRes from) {\n      Ret.Value = from.Ret.Value;\n      IsOpen.Value = from.IsOpen.Value;\n      IsNoSecret.Value = from.IsNoSecret.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      IsOpen.Value = false;\n      IsNoSecret.Value = false;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      IsOpen = new PropertyValue<bool>(this,\"IsOpen\");\n      IsNoSecret = new PropertyValue<bool>(this,\"IsNoSecret\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(IsOpen)); \n      list.Add(new ViewModelPropertyInfo(IsNoSecret)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", IsOpen:\").Append(IsOpen.Value);\n      stringBuilder.Append(\", IsNoSecret:\").Append(IsNoSecret.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class closeResourceCipherRes : ViewModel {\n    public static readonly pb::MessageParser<closeResourceCipherRes> Parser = new pb::MessageParser<closeResourceCipherRes>(() => (closeResourceCipherRes)MessagePool.Instance.Fetch(typeof(closeResourceCipherRes)));\n    /// <summary>\n    ///\u76f8\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    /// \u662f\u5426\u7533\u8bf7\u5173\u95ed\u4e8c\u7ea7\u5bc6\u7801\n    /// </summary>\n    public PropertyValue<bool> IsApplyClose;\n    /// <summary>\n    ///\u7533\u8bf7\u5173\u95ed\u7ed3\u675f\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> CloseTime;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (IsApplyClose.Value != false) {\n        output.WriteRawTag(16);\n        output.WriteBool(IsApplyClose.Value);\n      }\n      if (CloseTime.Value != 0L) {\n        output.WriteRawTag(24);\n        output.WriteSInt64(CloseTime.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (IsApplyClose.Value != false) {\n        size += 1 + 1;\n      }\n      if (CloseTime.Value != 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CloseTime.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            IsApplyClose.Value = input.ReadBool();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            CloseTime.Value = input.ReadSInt64();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        IsApplyClose.Value = false;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        CloseTime.Value = 0;\n      }\n    }\n\n    public void MergeFrom(closeResourceCipherRes from) {\n      Ret.Value = from.Ret.Value;\n      IsApplyClose.Value = from.IsApplyClose.Value;\n      CloseTime.Value = from.CloseTime.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      IsApplyClose.Value = false;\n      CloseTime.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      IsApplyClose = new PropertyValue<bool>(this,\"IsApplyClose\");\n      CloseTime = new PropertyValue<long>(this,\"CloseTime\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(IsApplyClose)); \n      list.Add(new ViewModelPropertyInfo(CloseTime)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", IsApplyClose:\").Append(IsApplyClose.Value);\n      stringBuilder.Append(\", CloseTime:\").Append(CloseTime.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "cropped_inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: resource_cipher.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class ResourceCipherPB : ViewModel {\n    public static readonly pb::MessageParser<ResourceCipherPB> Parser = new pb::MessageParser<ResourceCipherPB>(() => (ResourceCipherPB)MessagePool.Instance.Fetch(typeof(ResourceCipherPB)));\n    /// <summary>\n    /// \u662f\u5426\u5f00\u542f\u4e8c\u7ea7\u5bc6\u7801 ture\u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsOpen;\n    /// <summary>\n    ///\u662f\u5426\u514d\u5bc6 true \u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsNoSecret;\n    /// <summary>\n    /// \u662f\u5426\u7533\u8bf7\u5173\u95ed\u4e8c\u7ea7\u5bc6\u7801\n    /// </summary>\n    public PropertyValue<bool> IsApplyClose;\n    /// <summary>\n    ///\u7533\u8bf7\u5173\u95ed\u7ed3\u675f\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> CloseTime;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (IsOpen.Value!= false) {\n        output.WriteRawTag(8);\n        output.WriteBool(IsOpen.Value);\n      }\n      if (IsNoSecret.Value!= false) {\n        output.WriteRawTag(16);\n        output.WriteBool(IsNoSecret.Value);\n      }\n      if (IsApplyClose.Value!= false) {\n        output.WriteRawTag(24);\n        output.WriteBool(IsApplyClose.Value);\n      }\n      if (CloseTime.Value!= 0L) {\n        output.WriteRawTag(32);\n        output.WriteSInt64(CloseTime.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (IsOpen.Value!= false) {\n        size += 1 + 1;\n      }\n      if (IsNoSecret.Value!= false) {\n        size += 1 + 1;\n      }\n      if (IsApplyClose.Value!= false) {\n        size += 1 + 1;\n      }\n      if (CloseTime.Value!= 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CloseTime.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            IsOpen.Value = input.ReadBool();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            IsNoSecret.Value = input.ReadBool();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            IsApplyClose.Value = input.ReadBool();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            CloseTime.Value = input.ReadSInt64();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        IsOpen.Value = false;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        IsNoSecret.Value = false;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        IsApplyClose.Value = false;\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        CloseTime.Value = 0;\n      }\n    }\n\n    public void MergeFrom(ResourceCipherPB from) {\n      IsOpen.Value = from.IsOpen.Value;\n      IsNoSecret.Value = from.IsNoSecret.Value;\n      IsApplyClose.Value = from.IsApplyClose.Value;\n      CloseTime.Value = from.CloseTime.Value;\n    }\n\n    public override void ResetDefaults() {\n      IsOpen.Value = false;\n      IsNoSecret.Value = false;\n      IsApplyClose.Value = false;\n      CloseTime.Value = 0;\n    }\n\n    public override void Bind(){\n      IsOpen = new PropertyValue<bool>(this,\"IsOpen\");\n      IsNoSecret = new PropertyValue<bool>(this,\"IsNoSecret\");\n      IsApplyClose = new PropertyValue<bool>(this,\"IsApplyClose\");\n      CloseTime = new PropertyValue<long>(this,\"CloseTime\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(IsOpen)); \n      list.Add(new ViewModelPropertyInfo(IsNoSecret)); \n      list.Add(new ViewModelPropertyInfo(IsApplyClose)); \n      list.Add(new ViewModelPropertyInfo(CloseTime)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"IsOpen:\").Append(IsOpen.Value);\n      stringBuilder.Append(\", IsNoSecret:\").Append(IsNoSecret.Value);\n      stringBuilder.Append(\", IsApplyClose:\").Append(IsApplyClose.Value);\n      stringBuilder.Append(\", CloseTime:\").Append(CloseTime.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class DetailRes : ViewModel {\n    public static readonly pb::MessageParser<DetailRes> Parser = new pb::MessageParser<DetailRes>(() => (DetailRes)MessagePool.Instance.Fetch(typeof(DetailRes)));\n    /// <summary>\n    ///\u76f8\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///\u7403\u961f\u8d44\u6e90\u5bc6\u7801\u4fe1\u606f\n    /// </summary>\n    public global::PlatformHotfix.ResourceCipherPB ResourceCipher;\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (ResourceCipher!= null &&ResourceCipher.CalculateSize()!= 0) {\n        output.WriteRawTag(18);\n        output.WriteMessage(ResourceCipher);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (ResourceCipher!= null &&ResourceCipher.CalculateSize()!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourceCipher);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 <<Hotfix.ResourceCipherPB();\n            }\n            input.ReadMessage(ResourceCipher);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        if (ResourceCipher!= null)ResourceCipher.ResetDefaults();\n      }\n    }\n\n    public void MergeFrom(DetailRes from) {\n      Ret.Value = from.Ret.Value;\n      ResourceCipher.MergeFrom(from.ResourceCipher);\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      if (ResourceCipher!= null)ResourceCipher.ResetDefaults();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      this.AddBinding(ResourceCipher?? (ResourceCipher = new global::PlatformHotfix.ResourceCipherPB())); \n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(ResourceCipher)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", ResourceCipher:\"+ResourceCipher.ToString());\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class updateResourceCipherSettingReq : ViewModel {\n    public static readonly pb::MessageParser<updateResourceCipherSettingReq> Parser = new pb::MessageParser<updateResourceCipherSettingReq>(() => (updateResourceCipherSettingReq)MessagePool.Instance.Fetch(typeof(updateResourceCipherSettingReq)));\n    /// <summary>\n    /// 1 \u5f00\u542f/\u5173\u95ed\u4e8c\u7ea7\u5bc6\u7801 2 \u5f00\u542f/\u5173\u95ed\u514d\u5bc6\u64cd\u4f5c\n    /// </summary>\n    public PropertyValue<int> Type;\n    /// <summary>\n    /// \u662f\u5426\u5f00\u542f ture\u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsOpen;\n    /// <summary>\n    ///\u5bc6\u7801 \u5f00\u542f\u4e8c\u7ea7\u5bc6\u7801\u65f6\u5019\u9700\u8981\u4f20\u5c31\u884c\n    /// </summary>\n    public PropertyValue<string> Cipher;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Type.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Type.Value);\n      }\n      if (IsOpen.Value!= false) {\n        output.WriteRawTag(16);\n        output.WriteBool(IsOpen.Value);\n      }\n      if (!string.IsNullOrEmpty(Cipher.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(Cipher.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Type.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Type.Value);\n      }\n      if (IsOpen.Value!= false) {\n        size += 1 + 1;\n      }\n      if (!string.IsNullOrEmpty(Cipher.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cipher.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Type.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            IsOpen.Value = input.ReadBool();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            Cipher.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Type.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        IsOpen.Value = false;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Cipher.Value = \"\";\n      }\n    }\n\n    public void MergeFrom(updateResourceCipherSettingReq from) {\n      Type.Value = from.Type.Value;\n      IsOpen.Value = from.IsOpen.Value;\n      Cipher.Value = from.Cipher.Value;\n    }\n\n    public override void ResetDefaults() {\n      Type.Value = 0;\n      IsOpen.Value = false;\n      Cipher.Value = \"\";\n    }\n\n    public override void Bind(){\n      Type = new PropertyValue<int>(this,\"Type\");\n      IsOpen = new PropertyValue<bool>(this,\"IsOpen\");\n      Cipher = new PropertyValue<string>(this,\"Cipher\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Type)); \n      list.Add(new ViewModelPropertyInfo(IsOpen)); \n      list.Add(new ViewModelPropertyInfo(Cipher)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Type:\").Append(Type.Value);\n      stringBuilder.Append(\", IsOpen:\").Append(IsOpen.Value);\n      stringBuilder.Append(\", Cipher:\").Append(Cipher.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class updateResourceCipherSettingRes : ViewModel {\n    public static readonly pb::MessageParser<updateResourceCipherSettingRes> Parser = new pb::MessageParser<updateResourceCipherSettingRes>(() => (updateResourceCipherSettingRes)MessagePool.Instance.Fetch(typeof(updateResourceCipherSettingRes)));\n    /// <summary>\n    ///\u76f8\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    /// \u662f\u5426\u5f00\u542f\u4e8c\u7ea7\u5bc6\u7801 ture\u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsOpen;\n    /// <summary>\n    ///\u662f\u5426\u5f00\u542f\u514d\u5bc6 true \u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsNoSecret;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (IsOpen.Value!= false) {\n        output.WriteRawTag(16);\n        output.WriteBool(IsOpen.Value);\n      }\n      if (IsNoSecret.Value!= false) {\n        output.WriteRawTag(24);\n        output.WriteBool(IsNoSecret.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (IsOpen.Value!= false) {\n        size += 1 + 1;\n      }\n      if (IsNoSecret.Value!= false) {\n        size += 1 + 1;\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            IsOpen.Value = input.ReadBool();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            IsNoSecret.Value = input.ReadBool();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        IsOpen.Value = false;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        IsNoSecret.Value = false;\n      }\n    }\n\n    public void MergeFrom(updateResourceCipherSettingRes from) {\n      Ret.Value = from.Ret.Value;\n      IsOpen.Value = from.IsOpen.Value;\n      IsNoSecret.Value = from.IsNoSecret.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      IsOpen.Value = false;\n      IsNoSecret.Value = false;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      IsOpen = new PropertyValue<bool>(this,\"IsOpen\");\n      IsNoSecret = new PropertyValue<bool>(this,\"IsNoSecret\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(IsOpen)); \n      list.Add(new ViewModelPropertyInfo(IsNoSecret)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", IsOpen:\").Append(IsOpen.Value);\n      stringBuilder.Append(\", IsNoSecret:\").Append(IsNoSecret.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class closeResourceCipherRes : ViewModel {\n    public static readonly pb::MessageParser<closeResourceCipherRes> Parser = new pb::MessageParser<closeResourceCipherRes>(() => (closeResourceCipherRes)MessagePool.Instance.Fetch(typeof(closeResourceCipherRes)));\n    /// <summary>\n    ///\u76f8\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    /// \u662f\u5426\u7533\u8bf7\u5173\u95ed\u4e8c\u7ea7\u5bc6\u7801\n    /// </summary>\n    public PropertyValue<bool> IsApplyClose;\n    /// <summary>\n    ///\u7533\u8bf7\u5173\u95ed\u7ed3\u675f\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> CloseTime;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (IsApplyClose.Value!= false) {\n        output.WriteRawTag(16);\n        output.WriteBool(IsApplyClose.Value);\n      }\n      if (CloseTime.Value!= 0L) {\n        output.WriteRawTag(24);\n        output.WriteSInt64(CloseTime.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (IsApplyClose.Value!= false) {\n        size += 1 + 1;\n      }\n      if (CloseTime.Value!= 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CloseTime.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            IsApplyClose.Value = input.ReadBool();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            CloseTime.Value = input.ReadSInt64();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        IsApplyClose.Value = false;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        CloseTime.Value = 0;\n      }\n    }\n\n    public void MergeFrom(closeResourceCipherRes from) {\n      Ret.Value = from.Ret.Value;\n      IsApplyClose.Value = from.IsApplyClose.Value;\n      CloseTime.Value = from.CloseTime.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      IsApplyClose.Value = false;\n      CloseTime.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      IsApplyClose = new PropertyValue<bool>(this,\"IsApplyClose\");\n      CloseTime = new PropertyValue<long>(this,\"CloseTime\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(IsApplyClose)); \n      list.Add(new ViewModelPropertyInfo(CloseTime)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", IsApplyClose:\").Append(IsApplyClose.Value);\n      stringBuilder.Append(\", CloseTime:\").Append(CloseTime.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "starcoder_inputs": "<fim_prefix>// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: resource_cipher.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class ResourceCipherPB : ViewModel {\n    public static readonly pb::MessageParser<ResourceCipherPB> Parser = new pb::MessageParser<ResourceCipherPB>(() => (ResourceCipherPB)MessagePool.Instance.Fetch(typeof(ResourceCipherPB)));\n    /// <summary>\n    /// \u662f\u5426\u5f00\u542f\u4e8c\u7ea7\u5bc6\u7801 ture\u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsOpen;\n    /// <summary>\n    ///\u662f\u5426\u514d\u5bc6 true \u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsNoSecret;\n    /// <summary>\n    /// \u662f\u5426\u7533\u8bf7\u5173\u95ed\u4e8c\u7ea7\u5bc6\u7801\n    /// </summary>\n    public PropertyValue<bool> IsApplyClose;\n    /// <summary>\n    ///\u7533\u8bf7\u5173\u95ed\u7ed3\u675f\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> CloseTime;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (IsOpen.Value!= false) {\n        output.WriteRawTag(8);\n        output.WriteBool(IsOpen.Value);\n      }\n      if (IsNoSecret.Value!= false) {\n        output.WriteRawTag(16);\n        output.WriteBool(IsNoSecret.Value);\n      }\n      if (IsApplyClose.Value!= false) {\n        output.WriteRawTag(24);\n        output.WriteBool(IsApplyClose.Value);\n      }\n      if (CloseTime.Value!= 0L) {\n        output.WriteRawTag(32);\n        output.WriteSInt64(CloseTime.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (IsOpen.Value!= false) {\n        size += 1 + 1;\n      }\n      if (IsNoSecret.Value!= false) {\n        size += 1 + 1;\n      }\n      if (IsApplyClose.Value!= false) {\n        size += 1 + 1;\n      }\n      if (CloseTime.Value!= 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CloseTime.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            IsOpen.Value = input.ReadBool();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            IsNoSecret.Value = input.ReadBool();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            IsApplyClose.Value = input.ReadBool();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            CloseTime.Value = input.ReadSInt64();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        IsOpen.Value = false;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        IsNoSecret.Value = false;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        IsApplyClose.Value = false;\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        CloseTime.Value = 0;\n      }\n    }\n\n    public void MergeFrom(ResourceCipherPB from) {\n      IsOpen.Value = from.IsOpen.Value;\n      IsNoSecret.Value = from.IsNoSecret.Value;\n      IsApplyClose.Value = from.IsApplyClose.Value;\n      CloseTime.Value = from.CloseTime.Value;\n    }\n\n    public override void ResetDefaults() {\n      IsOpen.Value = false;\n      IsNoSecret.Value = false;\n      IsApplyClose.Value = false;\n      CloseTime.Value = 0;\n    }\n\n    public override void Bind(){\n      IsOpen = new PropertyValue<bool>(this,\"IsOpen\");\n      IsNoSecret = new PropertyValue<bool>(this,\"IsNoSecret\");\n      IsApplyClose = new PropertyValue<bool>(this,\"IsApplyClose\");\n      CloseTime = new PropertyValue<long>(this,\"CloseTime\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(IsOpen)); \n      list.Add(new ViewModelPropertyInfo(IsNoSecret)); \n      list.Add(new ViewModelPropertyInfo(IsApplyClose)); \n      list.Add(new ViewModelPropertyInfo(CloseTime)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"IsOpen:\").Append(IsOpen.Value);\n      stringBuilder.Append(\", IsNoSecret:\").Append(IsNoSecret.Value);\n      stringBuilder.Append(\", IsApplyClose:\").Append(IsApplyClose.Value);\n      stringBuilder.Append(\", CloseTime:\").Append(CloseTime.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class DetailRes : ViewModel {\n    public static readonly pb::MessageParser<DetailRes> Parser = new pb::MessageParser<DetailRes>(() => (DetailRes)MessagePool.Instance.Fetch(typeof(DetailRes)));\n    /// <summary>\n    ///\u76f8\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///\u7403\u961f\u8d44\u6e90\u5bc6\u7801\u4fe1\u606f\n    /// </summary>\n    public global::PlatformHotfix.ResourceCipherPB ResourceCipher;\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (ResourceCipher!= null &&ResourceCipher.CalculateSize()!= 0) {\n        output.WriteRawTag(18);\n        output.WriteMessage(ResourceCipher);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (ResourceCipher!= null &&ResourceCipher.CalculateSize()!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourceCipher);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 <<<fim_suffix>Hotfix.ResourceCipherPB();\n            }\n            input.ReadMessage(ResourceCipher);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        if (ResourceCipher!= null)ResourceCipher.ResetDefaults();\n      }\n    }\n\n    public void MergeFrom(DetailRes from) {\n      Ret.Value = from.Ret.Value;\n      ResourceCipher.MergeFrom(from.ResourceCipher);\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      if (ResourceCipher!= null)ResourceCipher.ResetDefaults();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      this.AddBinding(ResourceCipher?? (ResourceCipher = new global::PlatformHotfix.ResourceCipherPB())); \n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(ResourceCipher)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", ResourceCipher:\"+ResourceCipher.ToString());\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class updateResourceCipherSettingReq : ViewModel {\n    public static readonly pb::MessageParser<updateResourceCipherSettingReq> Parser = new pb::MessageParser<updateResourceCipherSettingReq>(() => (updateResourceCipherSettingReq)MessagePool.Instance.Fetch(typeof(updateResourceCipherSettingReq)));\n    /// <summary>\n    /// 1 \u5f00\u542f/\u5173\u95ed\u4e8c\u7ea7\u5bc6\u7801 2 \u5f00\u542f/\u5173\u95ed\u514d\u5bc6\u64cd\u4f5c\n    /// </summary>\n    public PropertyValue<int> Type;\n    /// <summary>\n    /// \u662f\u5426\u5f00\u542f ture\u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsOpen;\n    /// <summary>\n    ///\u5bc6\u7801 \u5f00\u542f\u4e8c\u7ea7\u5bc6\u7801\u65f6\u5019\u9700\u8981\u4f20\u5c31\u884c\n    /// </summary>\n    public PropertyValue<string> Cipher;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Type.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Type.Value);\n      }\n      if (IsOpen.Value!= false) {\n        output.WriteRawTag(16);\n        output.WriteBool(IsOpen.Value);\n      }\n      if (!string.IsNullOrEmpty(Cipher.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(Cipher.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Type.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Type.Value);\n      }\n      if (IsOpen.Value!= false) {\n        size += 1 + 1;\n      }\n      if (!string.IsNullOrEmpty(Cipher.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cipher.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Type.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            IsOpen.Value = input.ReadBool();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            Cipher.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Type.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        IsOpen.Value = false;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Cipher.Value = \"\";\n      }\n    }\n\n    public void MergeFrom(updateResourceCipherSettingReq from) {\n      Type.Value = from.Type.Value;\n      IsOpen.Value = from.IsOpen.Value;\n      Cipher.Value = from.Cipher.Value;\n    }\n\n    public override void ResetDefaults() {\n      Type.Value = 0;\n      IsOpen.Value = false;\n      Cipher.Value = \"\";\n    }\n\n    public override void Bind(){\n      Type = new PropertyValue<int>(this,\"Type\");\n      IsOpen = new PropertyValue<bool>(this,\"IsOpen\");\n      Cipher = new PropertyValue<string>(this,\"Cipher\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Type)); \n      list.Add(new ViewModelPropertyInfo(IsOpen)); \n      list.Add(new ViewModelPropertyInfo(Cipher)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Type:\").Append(Type.Value);\n      stringBuilder.Append(\", IsOpen:\").Append(IsOpen.Value);\n      stringBuilder.Append(\", Cipher:\").Append(Cipher.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class updateResourceCipherSettingRes : ViewModel {\n    public static readonly pb::MessageParser<updateResourceCipherSettingRes> Parser = new pb::MessageParser<updateResourceCipherSettingRes>(() => (updateResourceCipherSettingRes)MessagePool.Instance.Fetch(typeof(updateResourceCipherSettingRes)));\n    /// <summary>\n    ///\u76f8\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    /// \u662f\u5426\u5f00\u542f\u4e8c\u7ea7\u5bc6\u7801 ture\u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsOpen;\n    /// <summary>\n    ///\u662f\u5426\u5f00\u542f\u514d\u5bc6 true \u5f00\u542f\n    /// </summary>\n    public PropertyValue<bool> IsNoSecret;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (IsOpen.Value!= false) {\n        output.WriteRawTag(16);\n        output.WriteBool(IsOpen.Value);\n      }\n      if (IsNoSecret.Value!= false) {\n        output.WriteRawTag(24);\n        output.WriteBool(IsNoSecret.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (IsOpen.Value!= false) {\n        size += 1 + 1;\n      }\n      if (IsNoSecret.Value!= false) {\n        size += 1 + 1;\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            IsOpen.Value = input.ReadBool();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            IsNoSecret.Value = input.ReadBool();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        IsOpen.Value = false;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        IsNoSecret.Value = false;\n      }\n    }\n\n    public void MergeFrom(updateResourceCipherSettingRes from) {\n      Ret.Value = from.Ret.Value;\n      IsOpen.Value = from.IsOpen.Value;\n      IsNoSecret.Value = from.IsNoSecret.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      IsOpen.Value = false;\n      IsNoSecret.Value = false;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      IsOpen = new PropertyValue<bool>(this,\"IsOpen\");\n      IsNoSecret = new PropertyValue<bool>(this,\"IsNoSecret\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(IsOpen)); \n      list.Add(new ViewModelPropertyInfo(IsNoSecret)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", IsOpen:\").Append(IsOpen.Value);\n      stringBuilder.Append(\", IsNoSecret:\").Append(IsNoSecret.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class closeResourceCipherRes : ViewModel {\n    public static readonly pb::MessageParser<closeResourceCipherRes> Parser = new pb::MessageParser<closeResourceCipherRes>(() => (closeResourceCipherRes)MessagePool.Instance.Fetch(typeof(closeResourceCipherRes)));\n    /// <summary>\n    ///\u76f8\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    /// \u662f\u5426\u7533\u8bf7\u5173\u95ed\u4e8c\u7ea7\u5bc6\u7801\n    /// </summary>\n    public PropertyValue<bool> IsApplyClose;\n    /// <summary>\n    ///\u7533\u8bf7\u5173\u95ed\u7ed3\u675f\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> CloseTime;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (IsApplyClose.Value!= false) {\n        output.WriteRawTag(16);\n        output.WriteBool(IsApplyClose.Value);\n      }\n      if (CloseTime.Value!= 0L) {\n        output.WriteRawTag(24);\n        output.WriteSInt64(CloseTime.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (IsApplyClose.Value!= false) {\n        size += 1 + 1;\n      }\n      if (CloseTime.Value!= 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CloseTime.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            IsApplyClose.Value = input.ReadBool();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            CloseTime.Value = input.ReadSInt64();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        IsApplyClose.Value = false;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        CloseTime.Value = 0;\n      }\n    }\n\n    public void MergeFrom(closeResourceCipherRes from) {\n      Ret.Value = from.Ret.Value;\n      IsApplyClose.Value = from.IsApplyClose.Value;\n      CloseTime.Value = from.CloseTime.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      IsApplyClose.Value = false;\n      CloseTime.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      IsApplyClose = new PropertyValue<bool>(this,\"IsApplyClose\");\n      CloseTime = new PropertyValue<long>(this,\"CloseTime\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(IsApplyClose)); \n      list.Add(new ViewModelPropertyInfo(CloseTime)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", IsApplyClose:\").Append(IsApplyClose.Value);\n      stringBuilder.Append(\", CloseTime:\").Append(CloseTime.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n<fim_middle>"}
{"inputs": "\ufeff// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: marquee.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  /// <summary>\n  /// \u8dd1\u9a6c\u706f\u8fd4\u56de\n  /// </summary>\n  public partial class MarqueeRes : ViewModel {\n    public static readonly pb::MessageParser<MarqueeRes> Parser = new pb::MessageParser<MarqueeRes>(() => (MarqueeRes)MessagePool.Instance.Fetch(typeof(MarqueeRes)));\n    /// <summary>\n    ///\u54cd\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///\u6587\u6848\n    /// </summary>\n    public PropertyValue<string> Content;\n    /// <summary>\n    ///\u53d1\u9001\u9891\u7387\n    /// </summary>\n    public PropertyValue<int> Frequency;\n    /// <summary>\n    ///\u53d1\u9001\u901f\u5ea6\n    /// </summary>\n    public PropertyValue<int> Rate;\n    /// <summary>\n    ///\u53d1\u9001\u6b21\u6570\n    /// </summary>\n    public PropertyValue<int> Num;\n    /// <summary>\n    ///\u6d3b\u52a8\u5f00\u59cb\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> BeginDate;\n    /// <summary>\n    ///\u6d3b\u52a8\u7ed3\u675f\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> EndDate;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (!string.IsNullOrEmpty(Content.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Content.Value);\n      }\n      if (Frequency.Value != 0) {\n        output.WriteRawTag(24);\n        output.WriteSInt32(Frequency.Value);\n      }\n      if (Rate.Value != 0) {\n        output.WriteRawTag(32);\n        output.WriteSInt32(Rate.Value);\n      }\n      if (Num.Value != 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(Num.Value);\n      }\n      if (BeginDate.Value != 0L) {\n        output.WriteRawTag(48);\n        output.WriteSInt64(BeginDate.Value);\n      }\n      if (EndDate.Value != 0L) {\n        output.WriteRawTag(56);\n        output.WriteSInt64(EndDate.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (!string.IsNullOrEmpty(Content.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content.Value);\n      }\n      if (Frequency.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Frequency.Value);\n      }\n      if (Rate.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Rate.Value);\n      }\n      if (Num.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Num.Value);\n      }\n      if (BeginDate.Value != 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BeginDate.Value);\n      }\n      if (EndDate.Value != 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndDate.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Content.Value = input.ReadString();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            Frequency.Value = input.ReadSInt32();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            Rate.Value = input.ReadSInt32();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            Num.Value = input.ReadSInt32();\n            break;\n          }\n          case 48: {\n            flag |= 1 << 6;\n            BeginDate.Value = input.ReadSInt64();\n            break;\n          }\n          case 56: {\n            flag |= 1 << 7;\n            EndDate.Value = input.ReadSInt64();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Content.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Frequency.Value = 0;\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        Rate.Value = 0;\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        Num.Value = 0;\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        BeginDate.Value = 0;\n      }\n      if((flag & 1 << 7) == 0)\n      {\n        EndDate.Value = 0;\n      }\n    }\n\n    public void MergeFrom(MarqueeRes from) {\n      Ret.Value = from.Ret.Value;\n      Content.Value = from.Content.Value;\n      Frequency.Value = from.Frequency.Value;\n      Rate.Value = from.Rate.Value;\n      Num.Value = from.Num.Value;\n      BeginDate.Value = from.BeginDate.Value;\n      EndDate.Value = from.EndDate.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      Content.Value = \"\";\n      Frequency.Value = 0;\n      Rate.Value = 0;\n      Num.Value = 0;\n      BeginDate.Value = 0;\n      EndDate.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      Content = new PropertyValue<string>(this,\"Content\");\n      Frequency = new PropertyValue<int>(this,\"Frequency\");\n      Rate = new PropertyValue<int>(this,\"Rate\");\n      Num = new PropertyValue<int>(this,\"Num\");\n      BeginDate = new PropertyValue<long>(this,\"BeginDate\");\n      EndDate = new PropertyValue<long>(this,\"EndDate\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(Content)); \n      list.Add(new ViewModelPropertyInfo(Frequency)); \n      list.Add(new ViewModelPropertyInfo(Rate)); \n      list.Add(new ViewModelPropertyInfo(Num)); \n      list.Add(new ViewModelPropertyInfo(BeginDate)); \n      list.Add(new ViewModelPropertyInfo(EndDate)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", Content:\").Append(Content.Value);\n      stringBuilder.Append(\", Frequency:\").Append(Frequency.Value);\n      stringBuilder.Append(\", Rate:\").Append(Rate.Value);\n      stringBuilder.Append(\", Num:\").Append(Num.Value);\n      stringBuilder.Append(\", BeginDate:\").Append(BeginDate.Value);\n      stringBuilder.Append(\", EndDate:\").Append(EndDate.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "cropped_inputs": "\ufeff// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: marquee.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  /// <summary>\n  /// \u8dd1\u9a6c\u706f\u8fd4\u56de\n  /// </summary>\n  public partial class MarqueeRes : ViewModel {\n    public static readonly pb::MessageParser<MarqueeRes> Parser = new pb::MessageParser<MarqueeRes>(() => (MarqueeRes)MessagePool.Instance.Fetch(typeof(MarqueeRes)));\n    /// <summary>\n    ///\u54cd\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///\u6587\u6848\n    /// </summary>\n    public PropertyValue<string> Content;\n    /// <summary>\n    ///\u53d1\u9001\u9891\u7387\n    /// </summary>\n    public PropertyValue<int> Frequency;\n    /// <summary>\n    ///\u53d1\u9001\u901f\u5ea6\n    /// </summary>\n    public PropertyValue<int> Rate;\n    /// <summary>\n    ///\u53d1\u9001\u6b21\u6570\n    /// </summary>\n    public PropertyValue<int> Num;\n    /// <summary>\n    ///\u6d3b\u52a8\u5f00\u59cb\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> BeginDate;\n    /// <summary>\n    ///\u6d3b\u52a8\u7ed3\u675f\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> EndDate;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (!string.IsNullOrEmpty(Content.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Content.Value);\n      }\n      if (Frequency.Value!= 0) {\n        output.WriteRawTag(24);\n        output.WriteSInt32(Frequency.Value);\n      }\n      if (Rate.Value!= 0) {\n        output.WriteRawTag(32);\n        output.WriteSInt32(Rate.Value);\n      }\n      if (Num.Value!= 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(Num.Value);\n      }\n      if (BeginDate.Value!= 0L) {\n        output.WriteRawTag(48);\n        output.WriteSInt64(BeginDate.Value);\n      }\n      if (EndDate.Value!= 0L) {\n        output.WriteRawTag(56);\n        output.WriteSInt64(EndDate.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n     ::CodedOutputStream.ComputeStringSize(Content.Value);\n      }\n      if (Frequency.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Frequency.Value);\n      }\n      if (Rate.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Rate.Value);\n      }\n      if (Num.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Num.Value);\n      }\n      if (BeginDate.Value!= 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BeginDate.Value);\n      }\n      if (EndDate.Value!= 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndDate.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Content.Value = input.ReadString();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            Frequency.Value = input.ReadSInt32();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            Rate.Value = input.ReadSInt32();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            Num.Value = input.ReadSInt32();\n            break;\n          }\n          case 48: {\n            flag |= 1 << 6;\n            BeginDate.Value = input.ReadSInt64();\n            break;\n          }\n          case 56: {\n            flag |= 1 << 7;\n            EndDate.Value = input.ReadSInt64();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Content.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Frequency.Value = 0;\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        Rate.Value = 0;\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        Num.Value = 0;\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        BeginDate.Value = 0;\n      }\n      if((flag & 1 << 7) == 0)\n      {\n        EndDate.Value = 0;\n      }\n    }\n\n    public void MergeFrom(MarqueeRes from) {\n      Ret.Value = from.Ret.Value;\n      Content.Value = from.Content.Value;\n      Frequency.Value = from.Frequency.Value;\n      Rate.Value = from.Rate.Value;\n      Num.Value = from.Num.Value;\n      BeginDate.Value = from.BeginDate.Value;\n      EndDate.Value = from.EndDate.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      Content.Value = \"\";\n      Frequency.Value = 0;\n      Rate.Value = 0;\n      Num.Value = 0;\n      BeginDate.Value = 0;\n      EndDate.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      Content = new PropertyValue<string>(this,\"Content\");\n      Frequency = new PropertyValue<int>(this,\"Frequency\");\n      Rate = new PropertyValue<int>(this,\"Rate\");\n      Num = new PropertyValue<int>(this,\"Num\");\n      BeginDate = new PropertyValue<long>(this,\"BeginDate\");\n      EndDate = new PropertyValue<long>(this,\"EndDate\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(Content)); \n      list.Add(new ViewModelPropertyInfo(Frequency)); \n      list.Add(new ViewModelPropertyInfo(Rate)); \n      list.Add(new ViewModelPropertyInfo(Num)); \n      list.Add(new ViewModelPropertyInfo(BeginDate)); \n      list.Add(new ViewModelPropertyInfo(EndDate)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", Content:\").Append(Content.Value);\n      stringBuilder.Append(\", Frequency:\").Append(Frequency.Value);\n      stringBuilder.Append(\", Rate:\").Append(Rate.Value);\n      stringBuilder.Append(\", Num:\").Append(Num.Value);\n      stringBuilder.Append(\", BeginDate:\").Append(BeginDate.Value);\n      stringBuilder.Append(\", EndDate:\").Append(EndDate.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "starcoder_inputs": "<fim_prefix>\ufeff// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: marquee.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  /// <summary>\n  /// \u8dd1\u9a6c\u706f\u8fd4\u56de\n  /// </summary>\n  public partial class MarqueeRes : ViewModel {\n    public static readonly pb::MessageParser<MarqueeRes> Parser = new pb::MessageParser<MarqueeRes>(() => (MarqueeRes)MessagePool.Instance.Fetch(typeof(MarqueeRes)));\n    /// <summary>\n    ///\u54cd\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///\u6587\u6848\n    /// </summary>\n    public PropertyValue<string> Content;\n    /// <summary>\n    ///\u53d1\u9001\u9891\u7387\n    /// </summary>\n    public PropertyValue<int> Frequency;\n    /// <summary>\n    ///\u53d1\u9001\u901f\u5ea6\n    /// </summary>\n    public PropertyValue<int> Rate;\n    /// <summary>\n    ///\u53d1\u9001\u6b21\u6570\n    /// </summary>\n    public PropertyValue<int> Num;\n    /// <summary>\n    ///\u6d3b\u52a8\u5f00\u59cb\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> BeginDate;\n    /// <summary>\n    ///\u6d3b\u52a8\u7ed3\u675f\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> EndDate;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (!string.IsNullOrEmpty(Content.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Content.Value);\n      }\n      if (Frequency.Value!= 0) {\n        output.WriteRawTag(24);\n        output.WriteSInt32(Frequency.Value);\n      }\n      if (Rate.Value!= 0) {\n        output.WriteRawTag(32);\n        output.WriteSInt32(Rate.Value);\n      }\n      if (Num.Value!= 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(Num.Value);\n      }\n      if (BeginDate.Value!= 0L) {\n        output.WriteRawTag(48);\n        output.WriteSInt64(BeginDate.Value);\n      }\n      if (EndDate.Value!= 0L) {\n        output.WriteRawTag(56);\n        output.WriteSInt64(EndDate.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n     <fim_suffix>::CodedOutputStream.ComputeStringSize(Content.Value);\n      }\n      if (Frequency.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Frequency.Value);\n      }\n      if (Rate.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Rate.Value);\n      }\n      if (Num.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Num.Value);\n      }\n      if (BeginDate.Value!= 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BeginDate.Value);\n      }\n      if (EndDate.Value!= 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndDate.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Content.Value = input.ReadString();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            Frequency.Value = input.ReadSInt32();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            Rate.Value = input.ReadSInt32();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            Num.Value = input.ReadSInt32();\n            break;\n          }\n          case 48: {\n            flag |= 1 << 6;\n            BeginDate.Value = input.ReadSInt64();\n            break;\n          }\n          case 56: {\n            flag |= 1 << 7;\n            EndDate.Value = input.ReadSInt64();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Content.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Frequency.Value = 0;\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        Rate.Value = 0;\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        Num.Value = 0;\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        BeginDate.Value = 0;\n      }\n      if((flag & 1 << 7) == 0)\n      {\n        EndDate.Value = 0;\n      }\n    }\n\n    public void MergeFrom(MarqueeRes from) {\n      Ret.Value = from.Ret.Value;\n      Content.Value = from.Content.Value;\n      Frequency.Value = from.Frequency.Value;\n      Rate.Value = from.Rate.Value;\n      Num.Value = from.Num.Value;\n      BeginDate.Value = from.BeginDate.Value;\n      EndDate.Value = from.EndDate.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      Content.Value = \"\";\n      Frequency.Value = 0;\n      Rate.Value = 0;\n      Num.Value = 0;\n      BeginDate.Value = 0;\n      EndDate.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      Content = new PropertyValue<string>(this,\"Content\");\n      Frequency = new PropertyValue<int>(this,\"Frequency\");\n      Rate = new PropertyValue<int>(this,\"Rate\");\n      Num = new PropertyValue<int>(this,\"Num\");\n      BeginDate = new PropertyValue<long>(this,\"BeginDate\");\n      EndDate = new PropertyValue<long>(this,\"EndDate\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(Content)); \n      list.Add(new ViewModelPropertyInfo(Frequency)); \n      list.Add(new ViewModelPropertyInfo(Rate)); \n      list.Add(new ViewModelPropertyInfo(Num)); \n      list.Add(new ViewModelPropertyInfo(BeginDate)); \n      list.Add(new ViewModelPropertyInfo(EndDate)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", Content:\").Append(Content.Value);\n      stringBuilder.Append(\", Frequency:\").Append(Frequency.Value);\n      stringBuilder.Append(\", Rate:\").Append(Rate.Value);\n      stringBuilder.Append(\", Num:\").Append(Num.Value);\n      stringBuilder.Append(\", BeginDate:\").Append(BeginDate.Value);\n      stringBuilder.Append(\", EndDate:\").Append(EndDate.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n<fim_middle>"}
{"inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: report.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class reportReq : ViewModel {\n    public static readonly pb::MessageParser<reportReq> Parser = new pb::MessageParser<reportReq>(() => (reportReq)MessagePool.Instance.Fetch(typeof(reportReq)));\n    /// <summary>\n    /// \u8d26\u6237id\n    /// </summary>\n    public PropertyValue<string> AccountId;\n    /// <summary>\n    /// \u7528\u6237token\n    /// </summary>\n    public PropertyValue<string> Token;\n    /// <summary>\n    ///\u4e3e\u62a5teamId\n    /// </summary>\n    public PropertyValue<string> From;\n    /// <summary>\n    ///\u88ab\u4e3e\u62a5teamId\n    /// </summary>\n    public PropertyValue<string> Target;\n    /// <summary>\n    ///\u4e3e\u62a5\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> Type;\n    /// <summary>\n    ///\u4e3e\u62a5\u539f\u56e0\n    /// </summary>\n    public PropertyValue<string> Reason;\n    /// <summary>\n    ///\u6e38\u620f\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> GameType;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(From.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(From.Value);\n      }\n      if (!string.IsNullOrEmpty(Target.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(Target.Value);\n      }\n      if (Type.Value != 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(Type.Value);\n      }\n      if (!string.IsNullOrEmpty(Reason.Value)) {\n        output.WriteRawTag(50);\n        output.WriteString(Reason.Value);\n      }\n      if (GameType.Value != 0) {\n        output.WriteRawTag(56);\n        output.WriteSInt32(GameType.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(From.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(From.Value);\n      }\n      if (!string.IsNullOrEmpty(Target.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target.Value);\n      }\n      if (Type.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Type.Value);\n      }\n      if (!string.IsNullOrEmpty(Reason.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason.Value);\n      }\n      if (GameType.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            flag |= 1 << 1;\n            AccountId.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Token.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            From.Value = input.ReadString();\n            break;\n          }\n          case 34: {\n            flag |= 1 << 4;\n            Target.Value = input.ReadString();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            Type.Value = input.ReadSInt32();\n            break;\n          }\n          case 50: {\n            flag |= 1 << 6;\n            Reason.Value = input.ReadString();\n            break;\n          }\n          case 56: {\n            flag |= 1 << 7;\n            GameType.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        AccountId.Value = \"\";\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Token.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        From.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        Target.Value = \"\";\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        Type.Value = 0;\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        Reason.Value = \"\";\n      }\n      if((flag & 1 << 7) == 0)\n      {\n        GameType.Value = 0;\n      }\n    }\n\n    public void MergeFrom(reportReq from) {\n      AccountId.Value = from.AccountId.Value;\n      Token.Value = from.Token.Value;\n      From.Value = from.From.Value;\n      Target.Value = from.Target.Value;\n      Type.Value = from.Type.Value;\n      Reason.Value = from.Reason.Value;\n      GameType.Value = from.GameType.Value;\n    }\n\n    public override void ResetDefaults() {\n      AccountId.Value = \"\";\n      Token.Value = \"\";\n      From.Value = \"\";\n      Target.Value = \"\";\n      Type.Value = 0;\n      Reason.Value = \"\";\n      GameType.Value = 0;\n    }\n\n    public override void Bind(){\n      AccountId = new PropertyValue<string>(this,\"AccountId\");\n      Token = new PropertyValue<string>(this,\"Token\");\n      From = new PropertyValue<string>(this,\"From\");\n      Target = new PropertyValue<string>(this,\"Target\");\n      Type = new PropertyValue<int>(this,\"Type\");\n      Reason = new PropertyValue<string>(this,\"Reason\");\n      GameType = new PropertyValue<int>(this,\"GameType\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(AccountId)); \n      list.Add(new ViewModelPropertyInfo(Token)); \n      list.Add(new ViewModelPropertyInfo(From)); \n      list.Add(new ViewModelPropertyInfo(Target)); \n      list.Add(new ViewModelPropertyInfo(Type)); \n      list.Add(new ViewModelPropertyInfo(Reason)); \n      list.Add(new ViewModelPropertyInfo(GameType)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"AccountId:\").Append(AccountId.Value);\n      stringBuilder.Append(\", Token:\").Append(Token.Value);\n      stringBuilder.Append(\", From:\").Append(From.Value);\n      stringBuilder.Append(\", Target:\").Append(Target.Value);\n      stringBuilder.Append(\", Type:\").Append(Type.Value);\n      stringBuilder.Append(\", Reason:\").Append(Reason.Value);\n      stringBuilder.Append(\", GameType:\").Append(GameType.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "cropped_inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: report.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class reportReq : ViewModel {\n    public static readonly pb::MessageParser<reportReq> Parser = new pb::MessageParser<reportReq>(() => (reportReq)MessagePool.Instance.Fetch(typeof(reportReq)));\n    /// <summary>\n    /// \u8d26\u6237id\n    /// </summary>\n    public PropertyValue<string> AccountId;\n    /// <summary>\n    /// \u7528\u6237token\n    /// </summary>\n    public PropertyValue<string> Token;\n    /// <summary>\n    ///\u4e3e\u62a5teamId\n    /// </summary>\n    public PropertyValue<string> From;\n    /// <summary>\n    ///\u88ab\u4e3e\u62a5teamId\n    /// </summary>\n    public PropertyValue<string> Target;\n    /// <summary>\n    ///\u4e3e\u62a5\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> Type;\n    /// <summary>\n    ///\u4e3e\u62a5\u539f\u56e0\n    /// </summary>\n    public PropertyValue<string> Reason;\n    /// <summary>\n    ///\u6e38\u620f\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> GameType;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(From.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(From.Value);\n      }\n      if (!string.IsNullOrEmpty(Target.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(Target.Value);\n      }\n      if (Type.Value!= 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(Type.Value);\n      }\n      if (!string.IsNullOrEmpty(Reason.Value)) {\n        output.WriteRawTag(50);\n        output.WriteString(Reason.Value);\n      }\n      if (GameType.Value!= 0) {\n        output.WriteRawTag(56);\n        output.WriteSInt32(GameType.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(TokenValue);\n      }\n      if (!string.IsNullOrEmpty(From.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(From.Value);\n      }\n      if (!string.IsNullOrEmpty(Target.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target.Value);\n      }\n      if (Type.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Type.Value);\n      }\n      if (!string.IsNullOrEmpty(Reason.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason.Value);\n      }\n      if (GameType.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            flag |= 1 << 1;\n            AccountId.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Token.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            From.Value = input.ReadString();\n            break;\n          }\n          case 34: {\n            flag |= 1 << 4;\n            Target.Value = input.ReadString();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            Type.Value = input.ReadSInt32();\n            break;\n          }\n          case 50: {\n            flag |= 1 << 6;\n            Reason.Value = input.ReadString();\n            break;\n          }\n          case 56: {\n            flag |= 1 << 7;\n            GameType.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        AccountId.Value = \"\";\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Token.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        From.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        Target.Value = \"\";\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        Type.Value = 0;\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        Reason.Value = \"\";\n      }\n      if((flag & 1 << 7) == 0)\n      {\n        GameType.Value = 0;\n      }\n    }\n\n    public void MergeFrom(reportReq from) {\n      AccountId.Value = from.AccountId.Value;\n      Token.Value = from.Token.Value;\n      From.Value = from.From.Value;\n      Target.Value = from.Target.Value;\n      Type.Value = from.Type.Value;\n      Reason.Value = from.Reason.Value;\n      GameType.Value = from.GameType.Value;\n    }\n\n    public override void ResetDefaults() {\n      AccountId.Value = \"\";\n      Token.Value = \"\";\n      From.Value = \"\";\n      Target.Value = \"\";\n      Type.Value = 0;\n      Reason.Value = \"\";\n      GameType.Value = 0;\n    }\n\n    public override void Bind(){\n      AccountId = new PropertyValue<string>(this,\"AccountId\");\n      Token = new PropertyValue<string>(this,\"Token\");\n      From = new PropertyValue<string>(this,\"From\");\n      Target = new PropertyValue<string>(this,\"Target\");\n      Type = new PropertyValue<int>(this,\"Type\");\n      Reason = new PropertyValue<string>(this,\"Reason\");\n      GameType = new PropertyValue<int>(this,\"GameType\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(AccountId)); \n      list.Add(new ViewModelPropertyInfo(Token)); \n      list.Add(new ViewModelPropertyInfo(From)); \n      list.Add(new ViewModelPropertyInfo(Target)); \n      list.Add(new ViewModelPropertyInfo(Type)); \n      list.Add(new ViewModelPropertyInfo(Reason)); \n      list.Add(new ViewModelPropertyInfo(GameType)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"AccountId:\").Append(AccountId.Value);\n      stringBuilder.Append(\", Token:\").Append(Token.Value);\n      stringBuilder.Append(\", From:\").Append(From.Value);\n      stringBuilder.Append(\", Target:\").Append(Target.Value);\n      stringBuilder.Append(\", Type:\").Append(Type.Value);\n      stringBuilder.Append(\", Reason:\").Append(Reason.Value);\n      stringBuilder.Append(\", GameType:\").Append(GameType.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "starcoder_inputs": "<fim_prefix>// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: report.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class reportReq : ViewModel {\n    public static readonly pb::MessageParser<reportReq> Parser = new pb::MessageParser<reportReq>(() => (reportReq)MessagePool.Instance.Fetch(typeof(reportReq)));\n    /// <summary>\n    /// \u8d26\u6237id\n    /// </summary>\n    public PropertyValue<string> AccountId;\n    /// <summary>\n    /// \u7528\u6237token\n    /// </summary>\n    public PropertyValue<string> Token;\n    /// <summary>\n    ///\u4e3e\u62a5teamId\n    /// </summary>\n    public PropertyValue<string> From;\n    /// <summary>\n    ///\u88ab\u4e3e\u62a5teamId\n    /// </summary>\n    public PropertyValue<string> Target;\n    /// <summary>\n    ///\u4e3e\u62a5\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> Type;\n    /// <summary>\n    ///\u4e3e\u62a5\u539f\u56e0\n    /// </summary>\n    public PropertyValue<string> Reason;\n    /// <summary>\n    ///\u6e38\u620f\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> GameType;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(From.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(From.Value);\n      }\n      if (!string.IsNullOrEmpty(Target.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(Target.Value);\n      }\n      if (Type.Value!= 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(Type.Value);\n      }\n      if (!string.IsNullOrEmpty(Reason.Value)) {\n        output.WriteRawTag(50);\n        output.WriteString(Reason.Value);\n      }\n      if (GameType.Value!= 0) {\n        output.WriteRawTag(56);\n        output.WriteSInt32(GameType.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token<fim_suffix>Value);\n      }\n      if (!string.IsNullOrEmpty(From.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(From.Value);\n      }\n      if (!string.IsNullOrEmpty(Target.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target.Value);\n      }\n      if (Type.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Type.Value);\n      }\n      if (!string.IsNullOrEmpty(Reason.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason.Value);\n      }\n      if (GameType.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            flag |= 1 << 1;\n            AccountId.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Token.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            From.Value = input.ReadString();\n            break;\n          }\n          case 34: {\n            flag |= 1 << 4;\n            Target.Value = input.ReadString();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            Type.Value = input.ReadSInt32();\n            break;\n          }\n          case 50: {\n            flag |= 1 << 6;\n            Reason.Value = input.ReadString();\n            break;\n          }\n          case 56: {\n            flag |= 1 << 7;\n            GameType.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        AccountId.Value = \"\";\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Token.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        From.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        Target.Value = \"\";\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        Type.Value = 0;\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        Reason.Value = \"\";\n      }\n      if((flag & 1 << 7) == 0)\n      {\n        GameType.Value = 0;\n      }\n    }\n\n    public void MergeFrom(reportReq from) {\n      AccountId.Value = from.AccountId.Value;\n      Token.Value = from.Token.Value;\n      From.Value = from.From.Value;\n      Target.Value = from.Target.Value;\n      Type.Value = from.Type.Value;\n      Reason.Value = from.Reason.Value;\n      GameType.Value = from.GameType.Value;\n    }\n\n    public override void ResetDefaults() {\n      AccountId.Value = \"\";\n      Token.Value = \"\";\n      From.Value = \"\";\n      Target.Value = \"\";\n      Type.Value = 0;\n      Reason.Value = \"\";\n      GameType.Value = 0;\n    }\n\n    public override void Bind(){\n      AccountId = new PropertyValue<string>(this,\"AccountId\");\n      Token = new PropertyValue<string>(this,\"Token\");\n      From = new PropertyValue<string>(this,\"From\");\n      Target = new PropertyValue<string>(this,\"Target\");\n      Type = new PropertyValue<int>(this,\"Type\");\n      Reason = new PropertyValue<string>(this,\"Reason\");\n      GameType = new PropertyValue<int>(this,\"GameType\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(AccountId)); \n      list.Add(new ViewModelPropertyInfo(Token)); \n      list.Add(new ViewModelPropertyInfo(From)); \n      list.Add(new ViewModelPropertyInfo(Target)); \n      list.Add(new ViewModelPropertyInfo(Type)); \n      list.Add(new ViewModelPropertyInfo(Reason)); \n      list.Add(new ViewModelPropertyInfo(GameType)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"AccountId:\").Append(AccountId.Value);\n      stringBuilder.Append(\", Token:\").Append(Token.Value);\n      stringBuilder.Append(\", From:\").Append(From.Value);\n      stringBuilder.Append(\", Target:\").Append(Target.Value);\n      stringBuilder.Append(\", Type:\").Append(Type.Value);\n      stringBuilder.Append(\", Reason:\").Append(Reason.Value);\n      stringBuilder.Append(\", GameType:\").Append(GameType.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n<fim_middle>"}
{"inputs": "\ufeffusing Google.Protobuf;\nusing System;\nusing System.Collections.Generic;\nnamespace PlatformHotfix\n{\n     public static class SimpleCollectionExt\n    {\n        public static T Find<T, C>(this SimpleCollection<T> ts, C value, Func<T, C, bool> func)\n        {\n            for (int i = 0; i < ts.Count; i++)\n            {\n                if (func(ts[i], value))\n                {\n                    return ts[i];\n                }\n            }\n            return default(T);\n        }\n\n        public static int FindIndex<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            for (int i = 0, count = list.Count; i < count; ++i)\n            {\n                if (match(list[i], ctx))\n                {\n                    return i;\n                }\n            }\n            return -1;\n        }\n\n        public static int FindLastIndex<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            for (int i = list.Count - 1; i >= 0; --i)\n            {\n                if (match(list[i], ctx))\n                {\n                    return i;\n                }\n            }\n            return -1;\n        }\n\n        public static bool RemoveFirstOf<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            var index = list.FindIndex(ctx, match);\n            if (index != -1)\n            {\n                list.RemoveAt(index);\n                return true;\n            }\n            return false;\n        }\n\n        public static bool RemoveLastOf<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            var index = list.FindLastIndex(ctx, match);\n            if (index != -1)\n            {\n                list.RemoveAt(index);\n                return true;\n            }\n            return false;\n        }\n\n        public static int RemoveAllNull<T>(this SimpleCollection<T> list) where T : class\n        {\n            var count = list.Count;\n            var removeCount = 0;\n            for (var i = 0; i < count; ++i)\n            {\n                if (list[i] == null)\n                {\n                    var newCount = i++;\n                    for (; i < count; ++i)\n                    {\n                        if (list[i] != null)\n                        {\n                            list[newCount++] = list[i];\n                        }\n                    }\n                    removeCount = count - newCount;\n                    list.RemoveRange(newCount, removeCount);\n                    break;\n                }\n            }\n            return removeCount;\n        }\n\n        public static int RemoveAllNullUnordered<T>(this SimpleCollection<T> list) where T : class\n        {\n            var count = list.Count;\n            var last = count - 1;\n            var removeCount = 0;\n            for (var i = 0; i <= last;)\n            {\n                if (list[i] == null)\n                {\n                    if (last != i)\n                    {\n                        list[i] = list[last];\n                    }\n                    --last;\n                    ++removeCount;\n                }\n                else\n                {\n                    ++i;\n                }\n            }\n            if (removeCount > 0)\n            {\n                list.RemoveRange(count - removeCount, removeCount);\n            }\n            return removeCount;\n        }\n\n        public static int RemoveAll<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            var count = list.Count;\n            var removeCount = 0;\n            for (var i = 0; i < count; ++i)\n            {\n                if (match(list[i], ctx))\n                {\n                    var newCount = i++;\n                    for (; i < count; ++i)\n                    {\n                        if (!match(list[i], ctx))\n                        {\n                            list[newCount++] = list[i];\n                        }\n                    }\n                    removeCount = count - newCount;\n                    list.RemoveRange(newCount, removeCount);\n                    break;\n                }\n            }\n            return removeCount;\n        }\n\n        public static int RemoveAllUnordered<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            var count = list.Count;\n            var last = count - 1;\n            var removeCount = 0;\n            for (var i = 0; i <= last;)\n            {\n                if (match(list[i], ctx))\n                {\n                    if (last != i)\n                    {\n                        list[i] = list[last];\n                    }\n                    --last;\n                    ++removeCount;\n                }\n                else\n                {\n                    ++i;\n                }\n            }\n            if (removeCount > 0)\n            {\n                list.RemoveRange(count - removeCount, removeCount);\n            }\n            return removeCount;\n        }\n    }\n    \n    public class SimpleCollection<T>: ObservableCollection<T>\n    {\n        public Type ValueType\n        {\n            get\n            {\n                return typeof(ICollection<T>);\n            }\n        }\n\n        public void RemoveRange(int index, int count)\n        {\n            if (count > 0)\n            {\n                while (count > 0)\n                {\n                    count--;\n                    if (this.Items.Count <= index)\n                    {\n                        break;\n                    }\n                    this.Items.RemoveAt(index);\n                }\n            }\n        }\n\n\n        public void ReplaceRange(IList<T> ts)\n        {\n            this.Clear();\n            this.AddRange(ts);\n        }\n\n\n        public void AddEntriesFrom(CodedInputStream input, FieldCodec<T> codec)\n        {\n            uint tag = input.LastTag;\n            var reader = codec.ValueReader;\n            if (FieldCodec<T>.IsPackedRepeatedField(tag))\n            {\n                int length = input.ReadLength();\n                if (length > 0)\n                {\n                    int oldLimit = input.PushLimit(length);\n                    while (!input.ReachedLimit)\n                    {\n                        Add(reader(input));\n                    }\n                    input.PopLimit(oldLimit);\n                }\n            }\n            else\n            {\n                do\n                {\n                    Add(reader(input));\n                } while (input.MaybeConsumeTag(tag));\n            }\n        }\n\n        public int CalculateSize(FieldCodec<T> codec)\n        {\n            if (Count == 0)\n            {\n                return 0;\n            }\n            uint tag = codec.Tag;\n            if (codec.PackedRepeatedField)\n            {\n                int num = CalculatePackedDataSize(codec);\n                return CodedOutputStream.ComputeRawVarint32Size(tag) + CodedOutputStream.ComputeLengthSize(num) + num;\n            }\n            Func<T, int> valueSizeCalculator = codec.ValueSizeCalculator;\n            int num2 = Count * CodedOutputStream.ComputeRawVarint32Size(tag);\n            for (int i = 0; i < Count; i++)\n            {\n                num2 += valueSizeCalculator(this[i]);\n            }\n            return num2;\n        }\n\n        private int CalculatePackedDataSize(FieldCodec<T> codec)\n        {\n            int fixedSize = codec.FixedSize;\n            if (fixedSize == 0)\n            {\n                Func<T, int> valueSizeCalculator = codec.ValueSizeCalculator;\n                int num = 0;\n                for (int i = 0; i < Count; i++)\n                {\n                    num += valueSizeCalculator(this[i]);\n                }\n                return num;\n            }\n            return fixedSize * Count;\n        }\n\n        public void WriteTo(CodedOutputStream output, FieldCodec<T> codec)\n        {\n            if (Count == 0)\n            {\n                return;\n            }\n            Action<CodedOutputStream, T> valueWriter = codec.ValueWriter;\n            uint tag = codec.Tag;\n            if (codec.PackedRepeatedField)\n            {\n                uint value = (uint)CalculatePackedDataSize(codec);\n                output.WriteTag(tag);\n                output.WriteRawVarint32(value);\n                for (int i = 0; i < Count; i++)\n                {\n                    valueWriter(output, this[i]);\n                }\n            }\n            else\n            {\n                for (int j = 0; j < Count; j++)\n                {\n                    output.WriteTag(tag);\n                    valueWriter(output, this[j]);\n                }\n            }\n        }\n    }\n}", "cropped_inputs": "\ufeffusing Google.Protobuf;\nusing System;\nusing System.Collections.Generic;\nnamespace PlatformHotfix\n{\n     public static class SimpleCollectionExt\n    {\n        public static T Find<T, C>(this SimpleCollection<T> ts, C value, Func<T, C, bool> func)\n        {\n            for (int i = 0; i < ts.Count; i++)\n            {\n                if (func(ts[i], value))\n                {\n                    return ts[i];\n                }\n            }\n            return default(T);\n        }\n\n        public static int FindIndex<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            for (int i = 0, count = list.Count; i < count; ++i)\n            {\n                if (match(list[i], ctx))\n                {\n                    return i;\n                }\n            }\n            return -1;\n        }\n\n        public static int FindLastIndex<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            for (int i = list.Count - 1; i >= 0; --i)\n            {\n                if (match(list[i], ctx))\n                {\n                    return i;\n                }\n            }\n            return -1;\n        }\n\n        public static bool RemoveFirstOf<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            var index = list.FindIndex(ctx, match);\n            if (index!= -1)\n            {\n                list.RemoveAt(index);\n                return true;\n            }\n            return false;\n        }\n\n        public static bool RemoveLastOf<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            var index = list.FindLastIndex(ctx, match);\n            if (index!= -1)\n            {\n                list.RemoveAt(index);\n                return true;\n            }\n            return false;\n        }\n\n        public static int RemoveAllNull<T>(this SimpleCollection<T> list) where T : class\n        {\n            var count = list.Count;\n            var removeCount = 0;\n            for (var i = 0; i < count; ++i)\n            {\n                if (list[i] == null)\n                {\n                    var newCount = i++;\n                    for (; i < count; ++i)\n                    {\n                        if (list[i]!= null)\n                        {\n                            list[newCount++] = list[i];\n                        }\n                    }\n                    removeCount = count - newCount;\n                    list.RemoveRange(newCount, removeCount);\n                    break;\n                }\n            }\n            return removeCount;\n        }\n\n        public static int RemoveAllNullUnordered< list.Count;\n            var last = count - 1;\n            var removeCount = 0;\n            for (var i = 0; i <= last;)\n            {\n                if (list[i] == null)\n                {\n                    if (last!= i)\n                    {\n                        list[i] = list[last];\n                    }\n                    --last;\n                    ++removeCount;\n                }\n                else\n                {\n                    ++i;\n                }\n            }\n            if (removeCount > 0)\n            {\n                list.RemoveRange(count - removeCount, removeCount);\n            }\n            return removeCount;\n        }\n\n        public static int RemoveAll<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            var count = list.Count;\n            var removeCount = 0;\n            for (var i = 0; i < count; ++i)\n            {\n                if (match(list[i], ctx))\n                {\n                    var newCount = i++;\n                    for (; i < count; ++i)\n                    {\n                        if (!match(list[i], ctx))\n                        {\n                            list[newCount++] = list[i];\n                        }\n                    }\n                    removeCount = count - newCount;\n                    list.RemoveRange(newCount, removeCount);\n                    break;\n                }\n            }\n            return removeCount;\n        }\n\n        public static int RemoveAllUnordered<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            var count = list.Count;\n            var last = count - 1;\n            var removeCount = 0;\n            for (var i = 0; i <= last;)\n            {\n                if (match(list[i], ctx))\n                {\n                    if (last!= i)\n                    {\n                        list[i] = list[last];\n                    }\n                    --last;\n                    ++removeCount;\n                }\n                else\n                {\n                    ++i;\n                }\n            }\n            if (removeCount > 0)\n            {\n                list.RemoveRange(count - removeCount, removeCount);\n            }\n            return removeCount;\n        }\n    }\n    \n    public class SimpleCollection<T>: ObservableCollection<T>\n    {\n        public Type ValueType\n        {\n            get\n            {\n                return typeof(ICollection<T>);\n            }\n        }\n\n        public void RemoveRange(int index, int count)\n        {\n            if (count > 0)\n            {\n                while (count > 0)\n                {\n                    count--;\n                    if (this.Items.Count <= index)\n                    {\n                        break;\n                    }\n                    this.Items.RemoveAt(index);\n                }\n            }\n        }\n\n\n        public void ReplaceRange(IList<T> ts)\n        {\n            this.Clear();\n            this.AddRange(ts);\n        }\n\n\n        public void AddEntriesFrom(CodedInputStream input, FieldCodec<T> codec)\n        {\n            uint tag = input.LastTag;\n            var reader = codec.ValueReader;\n            if (FieldCodec<T>.IsPackedRepeatedField(tag))\n            {\n                int length = input.ReadLength();\n                if (length > 0)\n                {\n                    int oldLimit = input.PushLimit(length);\n                    while (!input.ReachedLimit)\n                    {\n                        Add(reader(input));\n                    }\n                    input.PopLimit(oldLimit);\n                }\n            }\n            else\n            {\n                do\n                {\n                    Add(reader(input));\n                } while (input.MaybeConsumeTag(tag));\n            }\n        }\n\n        public int CalculateSize(FieldCodec<T> codec)\n        {\n            if (Count == 0)\n            {\n                return 0;\n            }\n            uint tag = codec.Tag;\n            if (codec.PackedRepeatedField)\n            {\n                int num = CalculatePackedDataSize(codec);\n                return CodedOutputStream.ComputeRawVarint32Size(tag) + CodedOutputStream.ComputeLengthSize(num) + num;\n            }\n            Func<T, int> valueSizeCalculator = codec.ValueSizeCalculator;\n            int num2 = Count * CodedOutputStream.ComputeRawVarint32Size(tag);\n            for (int i = 0; i < Count; i++)\n            {\n                num2 += valueSizeCalculator(this[i]);\n            }\n            return num2;\n        }\n\n        private int CalculatePackedDataSize(FieldCodec<T> codec)\n        {\n            int fixedSize = codec.FixedSize;\n            if (fixedSize == 0)\n            {\n                Func<T, int> valueSizeCalculator = codec.ValueSizeCalculator;\n                int num = 0;\n                for (int i = 0; i < Count; i++)\n                {\n                    num += valueSizeCalculator(this[i]);\n                }\n                return num;\n            }\n            return fixedSize * Count;\n        }\n\n        public void WriteTo(CodedOutputStream output, FieldCodec<T> codec)\n        {\n            if (Count == 0)\n            {\n                return;\n            }\n            Action<CodedOutputStream, T> valueWriter = codec.ValueWriter;\n            uint tag = codec.Tag;\n            if (codec.PackedRepeatedField)\n            {\n                uint value = (uint)CalculatePackedDataSize(codec);\n                output.WriteTag(tag);\n                output.WriteRawVarint32(value);\n                for (int i = 0; i < Count; i++)\n                {\n                    valueWriter(output, this[i]);\n                }\n            }\n            else\n            {\n                for (int j = 0; j < Count; j++)\n                {\n                    output.WriteTag(tag);\n                    valueWriter(output, this[j]);\n                }\n            }\n        }\n    }\n}", "starcoder_inputs": "<fim_prefix>\ufeffusing Google.Protobuf;\nusing System;\nusing System.Collections.Generic;\nnamespace PlatformHotfix\n{\n     public static class SimpleCollectionExt\n    {\n        public static T Find<T, C>(this SimpleCollection<T> ts, C value, Func<T, C, bool> func)\n        {\n            for (int i = 0; i < ts.Count; i++)\n            {\n                if (func(ts[i], value))\n                {\n                    return ts[i];\n                }\n            }\n            return default(T);\n        }\n\n        public static int FindIndex<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            for (int i = 0, count = list.Count; i < count; ++i)\n            {\n                if (match(list[i], ctx))\n                {\n                    return i;\n                }\n            }\n            return -1;\n        }\n\n        public static int FindLastIndex<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            for (int i = list.Count - 1; i >= 0; --i)\n            {\n                if (match(list[i], ctx))\n                {\n                    return i;\n                }\n            }\n            return -1;\n        }\n\n        public static bool RemoveFirstOf<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            var index = list.FindIndex(ctx, match);\n            if (index!= -1)\n            {\n                list.RemoveAt(index);\n                return true;\n            }\n            return false;\n        }\n\n        public static bool RemoveLastOf<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            var index = list.FindLastIndex(ctx, match);\n            if (index!= -1)\n            {\n                list.RemoveAt(index);\n                return true;\n            }\n            return false;\n        }\n\n        public static int RemoveAllNull<T>(this SimpleCollection<T> list) where T : class\n        {\n            var count = list.Count;\n            var removeCount = 0;\n            for (var i = 0; i < count; ++i)\n            {\n                if (list[i] == null)\n                {\n                    var newCount = i++;\n                    for (; i < count; ++i)\n                    {\n                        if (list[i]!= null)\n                        {\n                            list[newCount++] = list[i];\n                        }\n                    }\n                    removeCount = count - newCount;\n                    list.RemoveRange(newCount, removeCount);\n                    break;\n                }\n            }\n            return removeCount;\n        }\n\n        public static int RemoveAllNullUnordered<<fim_suffix> list.Count;\n            var last = count - 1;\n            var removeCount = 0;\n            for (var i = 0; i <= last;)\n            {\n                if (list[i] == null)\n                {\n                    if (last!= i)\n                    {\n                        list[i] = list[last];\n                    }\n                    --last;\n                    ++removeCount;\n                }\n                else\n                {\n                    ++i;\n                }\n            }\n            if (removeCount > 0)\n            {\n                list.RemoveRange(count - removeCount, removeCount);\n            }\n            return removeCount;\n        }\n\n        public static int RemoveAll<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            var count = list.Count;\n            var removeCount = 0;\n            for (var i = 0; i < count; ++i)\n            {\n                if (match(list[i], ctx))\n                {\n                    var newCount = i++;\n                    for (; i < count; ++i)\n                    {\n                        if (!match(list[i], ctx))\n                        {\n                            list[newCount++] = list[i];\n                        }\n                    }\n                    removeCount = count - newCount;\n                    list.RemoveRange(newCount, removeCount);\n                    break;\n                }\n            }\n            return removeCount;\n        }\n\n        public static int RemoveAllUnordered<T, C>(this SimpleCollection<T> list, C ctx, Func<T, C, bool> match)\n        {\n            var count = list.Count;\n            var last = count - 1;\n            var removeCount = 0;\n            for (var i = 0; i <= last;)\n            {\n                if (match(list[i], ctx))\n                {\n                    if (last!= i)\n                    {\n                        list[i] = list[last];\n                    }\n                    --last;\n                    ++removeCount;\n                }\n                else\n                {\n                    ++i;\n                }\n            }\n            if (removeCount > 0)\n            {\n                list.RemoveRange(count - removeCount, removeCount);\n            }\n            return removeCount;\n        }\n    }\n    \n    public class SimpleCollection<T>: ObservableCollection<T>\n    {\n        public Type ValueType\n        {\n            get\n            {\n                return typeof(ICollection<T>);\n            }\n        }\n\n        public void RemoveRange(int index, int count)\n        {\n            if (count > 0)\n            {\n                while (count > 0)\n                {\n                    count--;\n                    if (this.Items.Count <= index)\n                    {\n                        break;\n                    }\n                    this.Items.RemoveAt(index);\n                }\n            }\n        }\n\n\n        public void ReplaceRange(IList<T> ts)\n        {\n            this.Clear();\n            this.AddRange(ts);\n        }\n\n\n        public void AddEntriesFrom(CodedInputStream input, FieldCodec<T> codec)\n        {\n            uint tag = input.LastTag;\n            var reader = codec.ValueReader;\n            if (FieldCodec<T>.IsPackedRepeatedField(tag))\n            {\n                int length = input.ReadLength();\n                if (length > 0)\n                {\n                    int oldLimit = input.PushLimit(length);\n                    while (!input.ReachedLimit)\n                    {\n                        Add(reader(input));\n                    }\n                    input.PopLimit(oldLimit);\n                }\n            }\n            else\n            {\n                do\n                {\n                    Add(reader(input));\n                } while (input.MaybeConsumeTag(tag));\n            }\n        }\n\n        public int CalculateSize(FieldCodec<T> codec)\n        {\n            if (Count == 0)\n            {\n                return 0;\n            }\n            uint tag = codec.Tag;\n            if (codec.PackedRepeatedField)\n            {\n                int num = CalculatePackedDataSize(codec);\n                return CodedOutputStream.ComputeRawVarint32Size(tag) + CodedOutputStream.ComputeLengthSize(num) + num;\n            }\n            Func<T, int> valueSizeCalculator = codec.ValueSizeCalculator;\n            int num2 = Count * CodedOutputStream.ComputeRawVarint32Size(tag);\n            for (int i = 0; i < Count; i++)\n            {\n                num2 += valueSizeCalculator(this[i]);\n            }\n            return num2;\n        }\n\n        private int CalculatePackedDataSize(FieldCodec<T> codec)\n        {\n            int fixedSize = codec.FixedSize;\n            if (fixedSize == 0)\n            {\n                Func<T, int> valueSizeCalculator = codec.ValueSizeCalculator;\n                int num = 0;\n                for (int i = 0; i < Count; i++)\n                {\n                    num += valueSizeCalculator(this[i]);\n                }\n                return num;\n            }\n            return fixedSize * Count;\n        }\n\n        public void WriteTo(CodedOutputStream output, FieldCodec<T> codec)\n        {\n            if (Count == 0)\n            {\n                return;\n            }\n            Action<CodedOutputStream, T> valueWriter = codec.ValueWriter;\n            uint tag = codec.Tag;\n            if (codec.PackedRepeatedField)\n            {\n                uint value = (uint)CalculatePackedDataSize(codec);\n                output.WriteTag(tag);\n                output.WriteRawVarint32(value);\n                for (int i = 0; i < Count; i++)\n                {\n                    valueWriter(output, this[i]);\n                }\n            }\n            else\n            {\n                for (int j = 0; j < Count; j++)\n                {\n                    output.WriteTag(tag);\n                    valueWriter(output, this[j]);\n                }\n            }\n        }\n    }\n}<fim_middle>"}
{"inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: frame_room.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  /// <summary>\n  /// </summary>\n  public partial class SimpleFramePB : ViewModel {\n    private static readonly pb::MessageParser<SimpleFramePB> _parser = new pb::MessageParser<SimpleFramePB>(() => (SimpleFramePB)MessagePool.Instance.Fetch(typeof(SimpleFramePB)));\n    public static pb::MessageParser<SimpleFramePB> Parser { get { return _parser; } }\n\n    private PropertyValue<int> turnId_;\n    /// <summary>\n    ///\u903b\u8f91\u5e27id\n    /// </summary>\n    public PropertyValue<int> TurnId {\n      get { return turnId_; }\n      set {\n        turnId_ = value;\n      }\n    }\n\n    private static readonly pb::FieldCodec<string> _repeated_ctrls_codec\n        = pb::FieldCodec.ForString(18);\n    private ModelCollection<string> ctrls_;\n    /// <summary>\n    ///\u64cd\u4f5c\n    /// </summary>\n    public ModelCollection<string> Ctrls {\n      get { return ctrls_; }\n      set { ctrls_ = value; }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (TurnId.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(TurnId.Value);\n      }\n      ctrls_.WriteTo(output, _repeated_ctrls_codec);\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (TurnId.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TurnId.Value);\n      }\n      size += ctrls_.CalculateSize(_repeated_ctrls_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            TurnId.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            ctrls_.AddEntriesFrom(input, _repeated_ctrls_codec);\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///turnId\n      turnId_.Value = 0;\n      ctrls_.Clear();\n    }\n\n    public override void Bind(){\n      TurnId = new PropertyValue<int>(this,\"TurnId\");\n      Ctrls = new ModelCollection<string>(this,\"Ctrls\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TurnId)); \n      list.Add(new ViewModelPropertyInfo(Ctrls)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class OnceSend : ViewModel {\n    private static readonly pb::MessageParser<OnceSend> _parser = new pb::MessageParser<OnceSend>(() => (OnceSend)MessagePool.Instance.Fetch(typeof(OnceSend)));\n    public static pb::MessageParser<OnceSend> Parser { get { return _parser; } }\n\n    private static readonly pb::FieldCodec<global::PlatformHotfix.SimpleFramePB> _repeated_frames_codec\n        = pb::FieldCodec.ForMessage(10, global::PlatformHotfix.SimpleFramePB.Parser);\n    private ModelCollection<global::PlatformHotfix.SimpleFramePB> frames_ ;\n    public ModelCollection<global::PlatformHotfix.SimpleFramePB> Frames {\n      get { return frames_; }\n      set { frames_ = value; }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      frames_.WriteTo(output, _repeated_frames_codec);\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      size += frames_.CalculateSize(_repeated_frames_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            frames_.AddEntriesFrom(input, _repeated_frames_codec);\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      for (int i = 0; i < frames_.Count; i++) { frames_[i].Destroy(); MessagePool.Instance.Recycle(frames_[i]); }\n      frames_.Clear();\n    }\n\n    public override void Bind(){\n      Frames = new ModelCollection<global::PlatformHotfix.SimpleFramePB>(this,\"Frames\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Frames)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class SyncTurnReq : ViewModel {\n    private static readonly pb::MessageParser<SyncTurnReq> _parser = new pb::MessageParser<SyncTurnReq>(() => (SyncTurnReq)MessagePool.Instance.Fetch(typeof(SyncTurnReq)));\n    public static pb::MessageParser<SyncTurnReq> Parser { get { return _parser; } }\n\n    private PropertyValue<int> turnId_;\n    /// <summary>\n    ///\u903b\u8f91\u5e27id\n    /// </summary>\n    public PropertyValue<int> TurnId {\n      get { return turnId_; }\n      set {\n        turnId_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (TurnId.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(TurnId.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (TurnId.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TurnId.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            TurnId.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///turnId\n      turnId_.Value = 0;\n    }\n\n    public override void Bind(){\n      TurnId = new PropertyValue<int>(this,\"TurnId\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TurnId)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class SyncTurnRes : ViewModel {\n    private static readonly pb::MessageParser<SyncTurnRes> _parser = new pb::MessageParser<SyncTurnRes>(() => (SyncTurnRes)MessagePool.Instance.Fetch(typeof(SyncTurnRes)));\n    public static pb::MessageParser<SyncTurnRes> Parser { get { return _parser; } }\n\n    private PropertyValue<int> ret_;\n    public PropertyValue<int> Ret {\n      get { return ret_; }\n      set {\n        ret_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///ret\n      ret_.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class OneOption : ViewModel {\n    private static readonly pb::MessageParser<OneOption> _parser = new pb::MessageParser<OneOption>(() => (OneOption)MessagePool.Instance.Fetch(typeof(OneOption)));\n    public static pb::MessageParser<OneOption> Parser { get { return _parser; } }\n\n    private PropertyValue<int> turnId_;\n    public PropertyValue<int> TurnId {\n      get { return turnId_; }\n      set {\n        turnId_ = value;\n      }\n    }\n\n    private PropertyValue<string> option_;\n    public PropertyValue<string> Option {\n      get { return option_; }\n      set {\n        option_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (TurnId.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(TurnId.Value);\n      }\n      if (!string.IsNullOrEmpty(Option.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Option.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (TurnId.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TurnId.Value);\n      }\n      if (!string.IsNullOrEmpty(Option.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Option.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            TurnId.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            Option.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///turnId\n      turnId_.Value = 0;\n      ///option\n      option_.Value = \"\";\n    }\n\n    public override void Bind(){\n      TurnId = new PropertyValue<int>(this,\"TurnId\");\n      Option = new PropertyValue<string>(this,\"Option\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TurnId)); \n      list.Add(new ViewModelPropertyInfo(Option)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "cropped_inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: frame_room.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  /// <summary>\n  /// </summary>\n  public partial class SimpleFramePB : ViewModel {\n    private static readonly pb::MessageParser<SimpleFramePB> _parser = new pb::MessageParser<SimpleFramePB>(() => (SimpleFramePB)MessagePool.Instance.Fetch(typeof(SimpleFramePB)));\n    public static pb::MessageParser<SimpleFramePB> Parser { get { return _parser; } }\n\n    private PropertyValue<int> turnId_;\n    /// <summary>\n    ///\u903b\u8f91\u5e27id\n    /// </summary>\n    public PropertyValue<int> TurnId {\n      get { return turnId_; }\n      set {\n        turnId_ = value;\n      }\n    }\n\n    private static readonly pb::FieldCodec<string> _repeated_ctrls_codec\n        = pb::FieldCodec.ForString(18);\n    private ModelCollection<string> ctrls_;\n    /// <summary>\n    ///\u64cd\u4f5c\n    /// </summary>\n    public ModelCollection<string> Ctrls {\n      get { return ctrls_; }\n      set { ctrls_ = value; }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (TurnId.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(TurnId.Value);\n      }\n      ctrls_.WriteTo(output, _repeated_ctrls_codec);\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (TurnId.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TurnId.Value);\n      }\n      size += ctrls_.CalculateSize(_repeated_ctrls_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            TurnId.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            ctrls_.AddEntriesFrom(input, _repeated_ctrls_codec);\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///turnId\n      turnId_.Value = 0;\n      ctrls_.Clear();\n    }\n\n    public override void Bind(){\n      TurnId = new PropertyValue<int>(this,\"TurnId\");\n      Ctrls = new ModelCollection<string>(this,\"Ctrls\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TurnId)); \n      list.Add(new ViewModelPropertyInfo(Ctrls)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class OnceSend : ViewModel {\n    private static readonly pb::MessageParser<OnceSend> _parser = new pb::MessageParser<OnceSend>(() => (OnceSend)MessagePool.Instance.Fetch(typeof(OnceSend)));\n    public static pb::MessageParser<OnceSend> Parser { get { return _parser; } }\n\n    private static readonly pb::FieldCodec<global::PlatformHotfix.SimpleFramePB> _repeated_frames_codec\n        = pb::FieldCodec.ForMessage(10, global::PlatformHotfix.SimpleFramePB.Parser);\n    private ModelCollection<global::PlatformHotfix.SimpleFramePB> frames_ ;\n    public ModelCollection<global::PlatformHotfix.SimpleFramePB> Frames {\n      get { return frames_; }\n      set { frames_ = value; }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      frames_.WriteTo( int size = 0;\n      size += frames_.CalculateSize(_repeated_frames_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            frames_.AddEntriesFrom(input, _repeated_frames_codec);\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      for (int i = 0; i < frames_.Count; i++) { frames_[i].Destroy(); MessagePool.Instance.Recycle(frames_[i]); }\n      frames_.Clear();\n    }\n\n    public override void Bind(){\n      Frames = new ModelCollection<global::PlatformHotfix.SimpleFramePB>(this,\"Frames\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Frames)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class SyncTurnReq : ViewModel {\n    private static readonly pb::MessageParser<SyncTurnReq> _parser = new pb::MessageParser<SyncTurnReq>(() => (SyncTurnReq)MessagePool.Instance.Fetch(typeof(SyncTurnReq)));\n    public static pb::MessageParser<SyncTurnReq> Parser { get { return _parser; } }\n\n    private PropertyValue<int> turnId_;\n    /// <summary>\n    ///\u903b\u8f91\u5e27id\n    /// </summary>\n    public PropertyValue<int> TurnId {\n      get { return turnId_; }\n      set {\n        turnId_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (TurnId.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(TurnId.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (TurnId.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TurnId.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            TurnId.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///turnId\n      turnId_.Value = 0;\n    }\n\n    public override void Bind(){\n      TurnId = new PropertyValue<int>(this,\"TurnId\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TurnId)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class SyncTurnRes : ViewModel {\n    private static readonly pb::MessageParser<SyncTurnRes> _parser = new pb::MessageParser<SyncTurnRes>(() => (SyncTurnRes)MessagePool.Instance.Fetch(typeof(SyncTurnRes)));\n    public static pb::MessageParser<SyncTurnRes> Parser { get { return _parser; } }\n\n    private PropertyValue<int> ret_;\n    public PropertyValue<int> Ret {\n      get { return ret_; }\n      set {\n        ret_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///ret\n      ret_.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class OneOption : ViewModel {\n    private static readonly pb::MessageParser<OneOption> _parser = new pb::MessageParser<OneOption>(() => (OneOption)MessagePool.Instance.Fetch(typeof(OneOption)));\n    public static pb::MessageParser<OneOption> Parser { get { return _parser; } }\n\n    private PropertyValue<int> turnId_;\n    public PropertyValue<int> TurnId {\n      get { return turnId_; }\n      set {\n        turnId_ = value;\n      }\n    }\n\n    private PropertyValue<string> option_;\n    public PropertyValue<string> Option {\n      get { return option_; }\n      set {\n        option_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (TurnId.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(TurnId.Value);\n      }\n      if (!string.IsNullOrEmpty(Option.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Option.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (TurnId.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TurnId.Value);\n      }\n      if (!string.IsNullOrEmpty(Option.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Option.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            TurnId.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            Option.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///turnId\n      turnId_.Value = 0;\n      ///option\n      option_.Value = \"\";\n    }\n\n    public override void Bind(){\n      TurnId = new PropertyValue<int>(this,\"TurnId\");\n      Option = new PropertyValue<string>(this,\"Option\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TurnId)); \n      list.Add(new ViewModelPropertyInfo(Option)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "starcoder_inputs": "<fim_prefix>// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: frame_room.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  /// <summary>\n  /// </summary>\n  public partial class SimpleFramePB : ViewModel {\n    private static readonly pb::MessageParser<SimpleFramePB> _parser = new pb::MessageParser<SimpleFramePB>(() => (SimpleFramePB)MessagePool.Instance.Fetch(typeof(SimpleFramePB)));\n    public static pb::MessageParser<SimpleFramePB> Parser { get { return _parser; } }\n\n    private PropertyValue<int> turnId_;\n    /// <summary>\n    ///\u903b\u8f91\u5e27id\n    /// </summary>\n    public PropertyValue<int> TurnId {\n      get { return turnId_; }\n      set {\n        turnId_ = value;\n      }\n    }\n\n    private static readonly pb::FieldCodec<string> _repeated_ctrls_codec\n        = pb::FieldCodec.ForString(18);\n    private ModelCollection<string> ctrls_;\n    /// <summary>\n    ///\u64cd\u4f5c\n    /// </summary>\n    public ModelCollection<string> Ctrls {\n      get { return ctrls_; }\n      set { ctrls_ = value; }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (TurnId.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(TurnId.Value);\n      }\n      ctrls_.WriteTo(output, _repeated_ctrls_codec);\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (TurnId.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TurnId.Value);\n      }\n      size += ctrls_.CalculateSize(_repeated_ctrls_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            TurnId.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            ctrls_.AddEntriesFrom(input, _repeated_ctrls_codec);\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///turnId\n      turnId_.Value = 0;\n      ctrls_.Clear();\n    }\n\n    public override void Bind(){\n      TurnId = new PropertyValue<int>(this,\"TurnId\");\n      Ctrls = new ModelCollection<string>(this,\"Ctrls\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TurnId)); \n      list.Add(new ViewModelPropertyInfo(Ctrls)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class OnceSend : ViewModel {\n    private static readonly pb::MessageParser<OnceSend> _parser = new pb::MessageParser<OnceSend>(() => (OnceSend)MessagePool.Instance.Fetch(typeof(OnceSend)));\n    public static pb::MessageParser<OnceSend> Parser { get { return _parser; } }\n\n    private static readonly pb::FieldCodec<global::PlatformHotfix.SimpleFramePB> _repeated_frames_codec\n        = pb::FieldCodec.ForMessage(10, global::PlatformHotfix.SimpleFramePB.Parser);\n    private ModelCollection<global::PlatformHotfix.SimpleFramePB> frames_ ;\n    public ModelCollection<global::PlatformHotfix.SimpleFramePB> Frames {\n      get { return frames_; }\n      set { frames_ = value; }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      frames_.WriteTo(<fim_suffix> int size = 0;\n      size += frames_.CalculateSize(_repeated_frames_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            frames_.AddEntriesFrom(input, _repeated_frames_codec);\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      for (int i = 0; i < frames_.Count; i++) { frames_[i].Destroy(); MessagePool.Instance.Recycle(frames_[i]); }\n      frames_.Clear();\n    }\n\n    public override void Bind(){\n      Frames = new ModelCollection<global::PlatformHotfix.SimpleFramePB>(this,\"Frames\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Frames)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class SyncTurnReq : ViewModel {\n    private static readonly pb::MessageParser<SyncTurnReq> _parser = new pb::MessageParser<SyncTurnReq>(() => (SyncTurnReq)MessagePool.Instance.Fetch(typeof(SyncTurnReq)));\n    public static pb::MessageParser<SyncTurnReq> Parser { get { return _parser; } }\n\n    private PropertyValue<int> turnId_;\n    /// <summary>\n    ///\u903b\u8f91\u5e27id\n    /// </summary>\n    public PropertyValue<int> TurnId {\n      get { return turnId_; }\n      set {\n        turnId_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (TurnId.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(TurnId.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (TurnId.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TurnId.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            TurnId.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///turnId\n      turnId_.Value = 0;\n    }\n\n    public override void Bind(){\n      TurnId = new PropertyValue<int>(this,\"TurnId\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TurnId)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class SyncTurnRes : ViewModel {\n    private static readonly pb::MessageParser<SyncTurnRes> _parser = new pb::MessageParser<SyncTurnRes>(() => (SyncTurnRes)MessagePool.Instance.Fetch(typeof(SyncTurnRes)));\n    public static pb::MessageParser<SyncTurnRes> Parser { get { return _parser; } }\n\n    private PropertyValue<int> ret_;\n    public PropertyValue<int> Ret {\n      get { return ret_; }\n      set {\n        ret_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///ret\n      ret_.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class OneOption : ViewModel {\n    private static readonly pb::MessageParser<OneOption> _parser = new pb::MessageParser<OneOption>(() => (OneOption)MessagePool.Instance.Fetch(typeof(OneOption)));\n    public static pb::MessageParser<OneOption> Parser { get { return _parser; } }\n\n    private PropertyValue<int> turnId_;\n    public PropertyValue<int> TurnId {\n      get { return turnId_; }\n      set {\n        turnId_ = value;\n      }\n    }\n\n    private PropertyValue<string> option_;\n    public PropertyValue<string> Option {\n      get { return option_; }\n      set {\n        option_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (TurnId.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(TurnId.Value);\n      }\n      if (!string.IsNullOrEmpty(Option.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Option.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (TurnId.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TurnId.Value);\n      }\n      if (!string.IsNullOrEmpty(Option.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Option.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            TurnId.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            Option.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///turnId\n      turnId_.Value = 0;\n      ///option\n      option_.Value = \"\";\n    }\n\n    public override void Bind(){\n      TurnId = new PropertyValue<int>(this,\"TurnId\");\n      Option = new PropertyValue<string>(this,\"Option\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TurnId)); \n      list.Add(new ViewModelPropertyInfo(Option)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n<fim_middle>"}
{"inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: team_coach.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  /// <summary>\n  ///\u4e3b\u6559\u7ec3\u9009\u62e9\u8bf7\u6c42\u5305\n  /// </summary>\n  public partial class AddCoachReq : ViewModel {\n    private static readonly pb::MessageParser<AddCoachReq> _parser = new pb::MessageParser<AddCoachReq>(() => (AddCoachReq)MessagePool.Instance.Fetch(typeof(AddCoachReq)));\n    public static pb::MessageParser<AddCoachReq> Parser { get { return _parser; } }\n\n    private PropertyValue<string> englishName_;\n    public PropertyValue<string> EnglishName {\n      get { return englishName_; }\n      set {\n        englishName_ = value;\n      }\n    }\n\n    private PropertyValue<string> chineseName_;\n    public PropertyValue<string> ChineseName {\n      get { return chineseName_; }\n      set {\n        chineseName_ = value;\n      }\n    }\n\n    private PropertyValue<int> nationality_;\n    public PropertyValue<int> Nationality {\n      get { return nationality_; }\n      set {\n        nationality_ = value;\n      }\n    }\n\n    private PropertyValue<string> nationalityName_;\n    public PropertyValue<string> NationalityName {\n      get { return nationalityName_; }\n      set {\n        nationalityName_ = value;\n      }\n    }\n\n    private PropertyValue<int> gender_;\n    public PropertyValue<int> Gender {\n      get { return gender_; }\n      set {\n        gender_ = value;\n      }\n    }\n\n    private PropertyValue<int> model_;\n    public PropertyValue<int> Model {\n      get { return model_; }\n      set {\n        model_ = value;\n      }\n    }\n\n    private PropertyValue<int> appearance_;\n    public PropertyValue<int> Appearance {\n      get { return appearance_; }\n      set {\n        appearance_ = value;\n      }\n    }\n\n    private PropertyValue<string> teamId_;\n    public PropertyValue<string> TeamId {\n      get { return teamId_; }\n      set {\n        teamId_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(EnglishName.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(EnglishName.Value);\n      }\n      if (!string.IsNullOrEmpty(ChineseName.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(ChineseName.Value);\n      }\n      if (Nationality.Value != 0) {\n        output.WriteRawTag(24);\n        output.WriteSInt32(Nationality.Value);\n      }\n      if (!string.IsNullOrEmpty(NationalityName.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(NationalityName.Value);\n      }\n      if (Gender.Value != 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(Gender.Value);\n      }\n      if (Model.Value != 0) {\n        output.WriteRawTag(48);\n        output.WriteSInt32(Model.Value);\n      }\n      if (Appearance.Value != 0) {\n        output.WriteRawTag(56);\n        output.WriteSInt32(Appearance.Value);\n      }\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        output.WriteRawTag(66);\n        output.WriteString(TeamId.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(EnglishName.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnglishName.Value);\n      }\n      if (!string.IsNullOrEmpty(ChineseName.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChineseName.Value);\n      }\n      if (Nationality.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Nationality.Value);\n      }\n      if (!string.IsNullOrEmpty(NationalityName.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(NationalityName.Value);\n      }\n      if (Gender.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gender.Value);\n      }\n      if (Model.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Model.Value);\n      }\n      if (Appearance.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Appearance.Value);\n      }\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            EnglishName.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            ChineseName.Value = input.ReadString();\n            break;\n          }\n          case 24: {\n            Nationality.Value = input.ReadSInt32();\n            break;\n          }\n          case 34: {\n            NationalityName.Value = input.ReadString();\n            break;\n          }\n          case 40: {\n            Gender.Value = input.ReadSInt32();\n            break;\n          }\n          case 48: {\n            Model.Value = input.ReadSInt32();\n            break;\n          }\n          case 56: {\n            Appearance.Value = input.ReadSInt32();\n            break;\n          }\n          case 66: {\n            TeamId.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///english_name\n      englishName_.Value = \"\";\n      ///chinese_name\n      chineseName_.Value = \"\";\n      ///nationality\n      nationality_.Value = 0;\n      ///nationality_name\n      nationalityName_.Value = \"\";\n      ///gender\n      gender_.Value = 0;\n      ///model\n      model_.Value = 0;\n      ///appearance\n      appearance_.Value = 0;\n      ///team_id\n      teamId_.Value = \"\";\n    }\n\n    public override void Bind(){\n      EnglishName = new PropertyValue<string>(this,\"EnglishName\");\n      ChineseName = new PropertyValue<string>(this,\"ChineseName\");\n      Nationality = new PropertyValue<int>(this,\"Nationality\");\n      NationalityName = new PropertyValue<string>(this,\"NationalityName\");\n      Gender = new PropertyValue<int>(this,\"Gender\");\n      Model = new PropertyValue<int>(this,\"Model\");\n      Appearance = new PropertyValue<int>(this,\"Appearance\");\n      TeamId = new PropertyValue<string>(this,\"TeamId\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(EnglishName)); \n      list.Add(new ViewModelPropertyInfo(ChineseName)); \n      list.Add(new ViewModelPropertyInfo(Nationality)); \n      list.Add(new ViewModelPropertyInfo(NationalityName)); \n      list.Add(new ViewModelPropertyInfo(Gender)); \n      list.Add(new ViewModelPropertyInfo(Model)); \n      list.Add(new ViewModelPropertyInfo(Appearance)); \n      list.Add(new ViewModelPropertyInfo(TeamId)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  /// <summary>\n  ///\u66f4\u65b0\u4e3b\u6559\u7ec3\u540d\u79f0\u8bf7\u6c42\u5305\n  /// </summary>\n  public partial class UpdateCoachReq : ViewModel {\n    private static readonly pb::MessageParser<UpdateCoachReq> _parser = new pb::MessageParser<UpdateCoachReq>(() => (UpdateCoachReq)MessagePool.Instance.Fetch(typeof(UpdateCoachReq)));\n    public static pb::MessageParser<UpdateCoachReq> Parser { get { return _parser; } }\n\n    private PropertyValue<string> teamId_;\n    public PropertyValue<string> TeamId {\n      get { return teamId_; }\n      set {\n        teamId_ = value;\n      }\n    }\n\n    private PropertyValue<string> name_;\n    public PropertyValue<string> Name {\n      get { return name_; }\n      set {\n        name_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(TeamId.Value);\n      }\n      if (!string.IsNullOrEmpty(Name.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Name.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId.Value);\n      }\n      if (!string.IsNullOrEmpty(Name.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            TeamId.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            Name.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///team_id\n      teamId_.Value = \"\";\n      ///name\n      name_.Value = \"\";\n    }\n\n    public override void Bind(){\n      TeamId = new PropertyValue<string>(this,\"TeamId\");\n      Name = new PropertyValue<string>(this,\"Name\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TeamId)); \n      list.Add(new ViewModelPropertyInfo(Name)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  /// <summary>\n  ///\u56de\u5305\n  /// </summary>\n  public partial class CoachRes : ViewModel {\n    private static readonly pb::MessageParser<CoachRes> _parser = new pb::MessageParser<CoachRes>(() => (CoachRes)MessagePool.Instance.Fetch(typeof(CoachRes)));\n    public static pb::MessageParser<CoachRes> Parser { get { return _parser; } }\n\n    private PropertyValue<int> ret_;\n    public PropertyValue<int> Ret {\n      get { return ret_; }\n      set {\n        ret_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///ret\n      ret_.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "cropped_inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: team_coach.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  /// <summary>\n  ///\u4e3b\u6559\u7ec3\u9009\u62e9\u8bf7\u6c42\u5305\n  /// </summary>\n  public partial class AddCoachReq : ViewModel {\n    private static readonly pb::MessageParser<AddCoachReq> _parser = new pb::MessageParser<AddCoachReq>(() => (AddCoachReq)MessagePool.Instance.Fetch(typeof(AddCoachReq)));\n    public static pb::MessageParser<AddCoachReq> Parser { get { return _parser; } }\n\n    private PropertyValue<string> englishName_;\n    public PropertyValue<string> EnglishName {\n      get { return englishName_; }\n      set {\n        englishName_ = value;\n      }\n    }\n\n    private PropertyValue<string> chineseName_;\n    public PropertyValue<string> ChineseName {\n      get { return chineseName_; }\n      set {\n        chineseName_ = value;\n      }\n    }\n\n    private PropertyValue<int> nationality_;\n    public PropertyValue<int> Nationality {\n      get { return nationality_; }\n      set {\n        nationality_ = value;\n      }\n    }\n\n    private PropertyValue<string> nationalityName_;\n    public PropertyValue<string> NationalityName {\n      get { return nationalityName_; }\n      set {\n        nationalityName_ = value;\n      }\n    }\n\n    private PropertyValue<int> gender_;\n    public PropertyValue<int> Gender {\n      get { return gender_; }\n      set {\n        gender_ = value;\n      }\n    }\n\n    private PropertyValue<int> model_;\n    public PropertyValue<int> Model {\n      get { return model_; }\n      set {\n        model_ = value;\n      }\n    }\n\n    private PropertyValue<int> appearance_;\n    public PropertyValue<int> Appearance {\n      get { return appearance_; }\n      set {\n        appearance_ = value;\n      }\n    }\n\n    private PropertyValue<string> teamId_;\n    public PropertyValue<string> TeamId {\n      get { return teamId_; }\n      set {\n        teamId_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(EnglishName.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(EnglishName.Value);\n      }\n      if (!string.IsNullOrEmpty(ChineseName.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(ChineseName.Value);\n      }\n      if (Nationality.Value!= 0) {\n        output.WriteRawTag(24);\n        output.WriteSInt32(Nationality.Value);\n      }\n      if (!string.IsNullOrEmpty(NationalityName.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(NationalityName.Value);\n      }\n      if (Gender.Value!= 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(Gender.Value);\n      }\n      if (Model.Value!= 0) {\n        output.WriteRawTag(48);\n        output.WriteSInt32(Model.Value);\n      }\n      if (Appearance.Value!= 0) {\n        output.WriteRawTag(56);\n        output.WriteSInt32(Appearance.Value);\n      }\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        output.WriteRawTag(66);\n        output.WriteString(TeamId.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(EnglishName.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnglishName.Value);\n      }\n      if (!string.IsNullOrEmpty(ChineseName.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChineseName.Value);\n      }\n      if (Nationality.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Nationality.Value);\n      }\n      if (!string.IsNullOrEmpty(NationalityName.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(NationalityName.Value);\n      }\n      if (Gender.2Size(Gender.Value);\n      }\n      if (Model.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Model.Value);\n      }\n      if (Appearance.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Appearance.Value);\n      }\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            EnglishName.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            ChineseName.Value = input.ReadString();\n            break;\n          }\n          case 24: {\n            Nationality.Value = input.ReadSInt32();\n            break;\n          }\n          case 34: {\n            NationalityName.Value = input.ReadString();\n            break;\n          }\n          case 40: {\n            Gender.Value = input.ReadSInt32();\n            break;\n          }\n          case 48: {\n            Model.Value = input.ReadSInt32();\n            break;\n          }\n          case 56: {\n            Appearance.Value = input.ReadSInt32();\n            break;\n          }\n          case 66: {\n            TeamId.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///english_name\n      englishName_.Value = \"\";\n      ///chinese_name\n      chineseName_.Value = \"\";\n      ///nationality\n      nationality_.Value = 0;\n      ///nationality_name\n      nationalityName_.Value = \"\";\n      ///gender\n      gender_.Value = 0;\n      ///model\n      model_.Value = 0;\n      ///appearance\n      appearance_.Value = 0;\n      ///team_id\n      teamId_.Value = \"\";\n    }\n\n    public override void Bind(){\n      EnglishName = new PropertyValue<string>(this,\"EnglishName\");\n      ChineseName = new PropertyValue<string>(this,\"ChineseName\");\n      Nationality = new PropertyValue<int>(this,\"Nationality\");\n      NationalityName = new PropertyValue<string>(this,\"NationalityName\");\n      Gender = new PropertyValue<int>(this,\"Gender\");\n      Model = new PropertyValue<int>(this,\"Model\");\n      Appearance = new PropertyValue<int>(this,\"Appearance\");\n      TeamId = new PropertyValue<string>(this,\"TeamId\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(EnglishName)); \n      list.Add(new ViewModelPropertyInfo(ChineseName)); \n      list.Add(new ViewModelPropertyInfo(Nationality)); \n      list.Add(new ViewModelPropertyInfo(NationalityName)); \n      list.Add(new ViewModelPropertyInfo(Gender)); \n      list.Add(new ViewModelPropertyInfo(Model)); \n      list.Add(new ViewModelPropertyInfo(Appearance)); \n      list.Add(new ViewModelPropertyInfo(TeamId)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  /// <summary>\n  ///\u66f4\u65b0\u4e3b\u6559\u7ec3\u540d\u79f0\u8bf7\u6c42\u5305\n  /// </summary>\n  public partial class UpdateCoachReq : ViewModel {\n    private static readonly pb::MessageParser<UpdateCoachReq> _parser = new pb::MessageParser<UpdateCoachReq>(() => (UpdateCoachReq)MessagePool.Instance.Fetch(typeof(UpdateCoachReq)));\n    public static pb::MessageParser<UpdateCoachReq> Parser { get { return _parser; } }\n\n    private PropertyValue<string> teamId_;\n    public PropertyValue<string> TeamId {\n      get { return teamId_; }\n      set {\n        teamId_ = value;\n      }\n    }\n\n    private PropertyValue<string> name_;\n    public PropertyValue<string> Name {\n      get { return name_; }\n      set {\n        name_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(TeamId.Value);\n      }\n      if (!string.IsNullOrEmpty(Name.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Name.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId.Value);\n      }\n      if (!string.IsNullOrEmpty(Name.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            TeamId.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            Name.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///team_id\n      teamId_.Value = \"\";\n      ///name\n      name_.Value = \"\";\n    }\n\n    public override void Bind(){\n      TeamId = new PropertyValue<string>(this,\"TeamId\");\n      Name = new PropertyValue<string>(this,\"Name\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TeamId)); \n      list.Add(new ViewModelPropertyInfo(Name)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  /// <summary>\n  ///\u56de\u5305\n  /// </summary>\n  public partial class CoachRes : ViewModel {\n    private static readonly pb::MessageParser<CoachRes> _parser = new pb::MessageParser<CoachRes>(() => (CoachRes)MessagePool.Instance.Fetch(typeof(CoachRes)));\n    public static pb::MessageParser<CoachRes> Parser { get { return _parser; } }\n\n    private PropertyValue<int> ret_;\n    public PropertyValue<int> Ret {\n      get { return ret_; }\n      set {\n        ret_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///ret\n      ret_.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "starcoder_inputs": "<fim_prefix>// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: team_coach.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  /// <summary>\n  ///\u4e3b\u6559\u7ec3\u9009\u62e9\u8bf7\u6c42\u5305\n  /// </summary>\n  public partial class AddCoachReq : ViewModel {\n    private static readonly pb::MessageParser<AddCoachReq> _parser = new pb::MessageParser<AddCoachReq>(() => (AddCoachReq)MessagePool.Instance.Fetch(typeof(AddCoachReq)));\n    public static pb::MessageParser<AddCoachReq> Parser { get { return _parser; } }\n\n    private PropertyValue<string> englishName_;\n    public PropertyValue<string> EnglishName {\n      get { return englishName_; }\n      set {\n        englishName_ = value;\n      }\n    }\n\n    private PropertyValue<string> chineseName_;\n    public PropertyValue<string> ChineseName {\n      get { return chineseName_; }\n      set {\n        chineseName_ = value;\n      }\n    }\n\n    private PropertyValue<int> nationality_;\n    public PropertyValue<int> Nationality {\n      get { return nationality_; }\n      set {\n        nationality_ = value;\n      }\n    }\n\n    private PropertyValue<string> nationalityName_;\n    public PropertyValue<string> NationalityName {\n      get { return nationalityName_; }\n      set {\n        nationalityName_ = value;\n      }\n    }\n\n    private PropertyValue<int> gender_;\n    public PropertyValue<int> Gender {\n      get { return gender_; }\n      set {\n        gender_ = value;\n      }\n    }\n\n    private PropertyValue<int> model_;\n    public PropertyValue<int> Model {\n      get { return model_; }\n      set {\n        model_ = value;\n      }\n    }\n\n    private PropertyValue<int> appearance_;\n    public PropertyValue<int> Appearance {\n      get { return appearance_; }\n      set {\n        appearance_ = value;\n      }\n    }\n\n    private PropertyValue<string> teamId_;\n    public PropertyValue<string> TeamId {\n      get { return teamId_; }\n      set {\n        teamId_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(EnglishName.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(EnglishName.Value);\n      }\n      if (!string.IsNullOrEmpty(ChineseName.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(ChineseName.Value);\n      }\n      if (Nationality.Value!= 0) {\n        output.WriteRawTag(24);\n        output.WriteSInt32(Nationality.Value);\n      }\n      if (!string.IsNullOrEmpty(NationalityName.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(NationalityName.Value);\n      }\n      if (Gender.Value!= 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(Gender.Value);\n      }\n      if (Model.Value!= 0) {\n        output.WriteRawTag(48);\n        output.WriteSInt32(Model.Value);\n      }\n      if (Appearance.Value!= 0) {\n        output.WriteRawTag(56);\n        output.WriteSInt32(Appearance.Value);\n      }\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        output.WriteRawTag(66);\n        output.WriteString(TeamId.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(EnglishName.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnglishName.Value);\n      }\n      if (!string.IsNullOrEmpty(ChineseName.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChineseName.Value);\n      }\n      if (Nationality.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Nationality.Value);\n      }\n      if (!string.IsNullOrEmpty(NationalityName.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(NationalityName.Value);\n      }\n      if (Gender.<fim_suffix>2Size(Gender.Value);\n      }\n      if (Model.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Model.Value);\n      }\n      if (Appearance.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Appearance.Value);\n      }\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            EnglishName.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            ChineseName.Value = input.ReadString();\n            break;\n          }\n          case 24: {\n            Nationality.Value = input.ReadSInt32();\n            break;\n          }\n          case 34: {\n            NationalityName.Value = input.ReadString();\n            break;\n          }\n          case 40: {\n            Gender.Value = input.ReadSInt32();\n            break;\n          }\n          case 48: {\n            Model.Value = input.ReadSInt32();\n            break;\n          }\n          case 56: {\n            Appearance.Value = input.ReadSInt32();\n            break;\n          }\n          case 66: {\n            TeamId.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///english_name\n      englishName_.Value = \"\";\n      ///chinese_name\n      chineseName_.Value = \"\";\n      ///nationality\n      nationality_.Value = 0;\n      ///nationality_name\n      nationalityName_.Value = \"\";\n      ///gender\n      gender_.Value = 0;\n      ///model\n      model_.Value = 0;\n      ///appearance\n      appearance_.Value = 0;\n      ///team_id\n      teamId_.Value = \"\";\n    }\n\n    public override void Bind(){\n      EnglishName = new PropertyValue<string>(this,\"EnglishName\");\n      ChineseName = new PropertyValue<string>(this,\"ChineseName\");\n      Nationality = new PropertyValue<int>(this,\"Nationality\");\n      NationalityName = new PropertyValue<string>(this,\"NationalityName\");\n      Gender = new PropertyValue<int>(this,\"Gender\");\n      Model = new PropertyValue<int>(this,\"Model\");\n      Appearance = new PropertyValue<int>(this,\"Appearance\");\n      TeamId = new PropertyValue<string>(this,\"TeamId\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(EnglishName)); \n      list.Add(new ViewModelPropertyInfo(ChineseName)); \n      list.Add(new ViewModelPropertyInfo(Nationality)); \n      list.Add(new ViewModelPropertyInfo(NationalityName)); \n      list.Add(new ViewModelPropertyInfo(Gender)); \n      list.Add(new ViewModelPropertyInfo(Model)); \n      list.Add(new ViewModelPropertyInfo(Appearance)); \n      list.Add(new ViewModelPropertyInfo(TeamId)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  /// <summary>\n  ///\u66f4\u65b0\u4e3b\u6559\u7ec3\u540d\u79f0\u8bf7\u6c42\u5305\n  /// </summary>\n  public partial class UpdateCoachReq : ViewModel {\n    private static readonly pb::MessageParser<UpdateCoachReq> _parser = new pb::MessageParser<UpdateCoachReq>(() => (UpdateCoachReq)MessagePool.Instance.Fetch(typeof(UpdateCoachReq)));\n    public static pb::MessageParser<UpdateCoachReq> Parser { get { return _parser; } }\n\n    private PropertyValue<string> teamId_;\n    public PropertyValue<string> TeamId {\n      get { return teamId_; }\n      set {\n        teamId_ = value;\n      }\n    }\n\n    private PropertyValue<string> name_;\n    public PropertyValue<string> Name {\n      get { return name_; }\n      set {\n        name_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(TeamId.Value);\n      }\n      if (!string.IsNullOrEmpty(Name.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Name.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId.Value);\n      }\n      if (!string.IsNullOrEmpty(Name.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            TeamId.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            Name.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///team_id\n      teamId_.Value = \"\";\n      ///name\n      name_.Value = \"\";\n    }\n\n    public override void Bind(){\n      TeamId = new PropertyValue<string>(this,\"TeamId\");\n      Name = new PropertyValue<string>(this,\"Name\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TeamId)); \n      list.Add(new ViewModelPropertyInfo(Name)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  /// <summary>\n  ///\u56de\u5305\n  /// </summary>\n  public partial class CoachRes : ViewModel {\n    private static readonly pb::MessageParser<CoachRes> _parser = new pb::MessageParser<CoachRes>(() => (CoachRes)MessagePool.Instance.Fetch(typeof(CoachRes)));\n    public static pb::MessageParser<CoachRes> Parser { get { return _parser; } }\n\n    private PropertyValue<int> ret_;\n    public PropertyValue<int> Ret {\n      get { return ret_; }\n      set {\n        ret_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///ret\n      ret_.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n<fim_middle>"}
{"inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: achievement.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class TeamAchievementRes : ViewModel {\n    public static readonly pb::MessageParser<TeamAchievementRes> Parser = new pb::MessageParser<TeamAchievementRes>(() => (TeamAchievementRes)MessagePool.Instance.Fetch(typeof(TeamAchievementRes)));\n    /// <summary>\n    ///\u54cd\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    private static readonly pb::FieldCodec<global::PlatformHotfix.TeamAchievementPB> _repeated_teamAchievements_codec\n        = pb::FieldCodec.ForMessage(18, global::PlatformHotfix.TeamAchievementPB.Parser);\n    /// <summary>\n    ///\u4efb\u52a1\u8be6\u60c5\n    /// </summary>\n    public ModelCollection<global::PlatformHotfix.TeamAchievementPB> TeamAchievements;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      TeamAchievements.WriteTo(output, _repeated_teamAchievements_codec);\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      size += TeamAchievements.CalculateSize(_repeated_teamAchievements_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            TeamAchievements.Clear();\n            TeamAchievements.AddEntriesFrom(input, _repeated_teamAchievements_codec);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        for (int i = 0; i < TeamAchievements.Count; i++) { TeamAchievements[i].Destroy(); MessagePool.Instance.Recycle(TeamAchievements[i]); }\n        TeamAchievements.Clear();\n      }\n    }\n\n    public void MergeFrom(TeamAchievementRes from) {\n      Ret.Value = from.Ret.Value;\n      for (int i = 0; i < TeamAchievements.Count; i++) { TeamAchievements[i].Destroy(); MessagePool.Instance.Recycle(TeamAchievements[i]); }\n      TeamAchievements.Clear();\n      for (int i = 0; i < from.TeamAchievements.Count; i++) { var temp = (PlatformHotfix.TeamAchievementPB)MessagePool.Instance.Fetch(typeof(PlatformHotfix.TeamAchievementPB)); temp.MergeFrom(from.TeamAchievements[i]);TeamAchievements.Add(temp); }\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      for (int i = 0; i < TeamAchievements.Count; i++) { TeamAchievements[i].Destroy(); MessagePool.Instance.Recycle(TeamAchievements[i]); }\n      TeamAchievements.Clear();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      TeamAchievements = new ModelCollection<global::PlatformHotfix.TeamAchievementPB>(this,\"TeamAchievements\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(TeamAchievements)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\"\ufffd\ufffdModelCollection_TeamAchievements:{\");for (int i = 0; i < TeamAchievements.Count; i++) {stringBuilder.Append(\"{\");\n       stringBuilder.Append(TeamAchievements[i].ToString());stringBuilder.Append(\"}\"); if(i>0) stringBuilder.Append(\",\");\n      }stringBuilder.Append(\"}\");\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class TeamAchievementPB : ViewModel {\n    public static readonly pb::MessageParser<TeamAchievementPB> Parser = new pb::MessageParser<TeamAchievementPB>(() => (TeamAchievementPB)MessagePool.Instance.Fetch(typeof(TeamAchievementPB)));\n    /// <summary>\n    ///\u6210\u5c31ID\n    /// </summary>\n    public PropertyValue<int> AchievementId;\n    /// <summary>\n    ///\u8fdb\u5ea6\n    /// </summary>\n    public PropertyValue<int> Progress;\n    /// <summary>\n    ///\u72b6\u6001 1 \u672a\u5b8c\u6210 2 \u672a\u9886\u53d6 3\u5df2\u9886\u53d6\n    /// </summary>\n    public PropertyValue<int> Status;\n    /// <summary>\n    ///\u6210\u5c31\u76ee\u6807\n    /// </summary>\n    public PropertyValue<int> AchievementTarget;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (AchievementId.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(AchievementId.Value);\n      }\n      if (Progress.Value != 0) {\n        output.WriteRawTag(16);\n        output.WriteSInt32(Progress.Value);\n      }\n      if (Status.Value != 0) {\n        output.WriteRawTag(24);\n        output.WriteSInt32(Status.Value);\n      }\n      if (AchievementTarget.Value != 0) {\n        output.WriteRawTag(32);\n        output.WriteSInt32(AchievementTarget.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (AchievementId.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AchievementId.Value);\n      }\n      if (Progress.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Progress.Value);\n      }\n      if (Status.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Status.Value);\n      }\n      if (AchievementTarget.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AchievementTarget.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            AchievementId.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            Progress.Value = input.ReadSInt32();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            Status.Value = input.ReadSInt32();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            AchievementTarget.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        AchievementId.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Progress.Value = 0;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Status.Value = 0;\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        AchievementTarget.Value = 0;\n      }\n    }\n\n    public void MergeFrom(TeamAchievementPB from) {\n      AchievementId.Value = from.AchievementId.Value;\n      Progress.Value = from.Progress.Value;\n      Status.Value = from.Status.Value;\n      AchievementTarget.Value = from.AchievementTarget.Value;\n    }\n\n    public override void ResetDefaults() {\n      AchievementId.Value = 0;\n      Progress.Value = 0;\n      Status.Value = 0;\n      AchievementTarget.Value = 0;\n    }\n\n    public override void Bind(){\n      AchievementId = new PropertyValue<int>(this,\"AchievementId\");\n      Progress = new PropertyValue<int>(this,\"Progress\");\n      Status = new PropertyValue<int>(this,\"Status\");\n      AchievementTarget = new PropertyValue<int>(this,\"AchievementTarget\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(AchievementId)); \n      list.Add(new ViewModelPropertyInfo(Progress)); \n      list.Add(new ViewModelPropertyInfo(Status)); \n      list.Add(new ViewModelPropertyInfo(AchievementTarget)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"AchievementId:\").Append(AchievementId.Value);\n      stringBuilder.Append(\", Progress:\").Append(Progress.Value);\n      stringBuilder.Append(\", Status:\").Append(Status.Value);\n      stringBuilder.Append(\", AchievementTarget:\").Append(AchievementTarget.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  /// <summary>\n  /// \u73a9\u5bb6\u6240\u6709\u79f0\u53f7\n  /// </summary>\n  public partial class TeamAchieveTitleRes : ViewModel {\n    public static readonly pb::MessageParser<TeamAchieveTitleRes> Parser = new pb::MessageParser<TeamAchieveTitleRes>(() => (TeamAchieveTitleRes)MessagePool.Instance.Fetch(typeof(TeamAchieveTitleRes)));\n    /// <summary>\n    /// \u54cd\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    private static readonly pb::FieldCodec<global::PlatformHotfix.TeamAchieveTitlePB> _repeated_titles_codec\n        = pb::FieldCodec.ForMessage(18, global::PlatformHotfix.TeamAchieveTitlePB.Parser);\n    /// <summary>\n    /// \u4efb\u52a1\u8be6\u60c5\n    /// </summary>\n    public ModelCollection<global::PlatformHotfix.TeamAchieveTitlePB> Titles;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      Titles.WriteTo(output, _repeated_titles_codec);\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      size += Titles.CalculateSize(_repeated_titles_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Titles.Clear();\n            Titles.AddEntriesFrom(input, _repeated_titles_codec);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        for (int i = 0; i < Titles.Count; i++) { Titles[i].Destroy(); MessagePool.Instance.Recycle(Titles[i]); }\n        Titles.Clear();\n      }\n    }\n\n    public void MergeFrom(TeamAchieveTitleRes from) {\n      Ret.Value = from.Ret.Value;\n      for (int i = 0; i < Titles.Count; i++) { Titles[i].Destroy(); MessagePool.Instance.Recycle(Titles[i]); }\n      Titles.Clear();\n      for (int i = 0; i < from.Titles.Count; i++) { var temp = (PlatformHotfix.TeamAchieveTitlePB)MessagePool.Instance.Fetch(typeof(PlatformHotfix.TeamAchieveTitlePB)); temp.MergeFrom(from.Titles[i]);Titles.Add(temp); }\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      for (int i = 0; i < Titles.Count; i++) { Titles[i].Destroy(); MessagePool.Instance.Recycle(Titles[i]); }\n      Titles.Clear();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      Titles = new ModelCollection<global::PlatformHotfix.TeamAchieveTitlePB>(this,\"Titles\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(Titles)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\"\ufffd\ufffdModelCollection_Titles:{\");for (int i = 0; i < Titles.Count; i++) {stringBuilder.Append(\"{\");\n       stringBuilder.Append(Titles[i].ToString());stringBuilder.Append(\"}\"); if(i>0) stringBuilder.Append(\",\");\n      }stringBuilder.Append(\"}\");\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class TeamAchieveTitlePB : ViewModel {\n    public static readonly pb::MessageParser<TeamAchieveTitlePB> Parser = new pb::MessageParser<TeamAchieveTitlePB>(() => (TeamAchieveTitlePB)MessagePool.Instance.Fetch(typeof(TeamAchieveTitlePB)));\n    /// <summary>\n    /// \u79f0\u53f7ID\n    /// </summary>\n    public PropertyValue<int> TitleId;\n    /// <summary>\n    /// \u5b50\u79f0\u53f7\n    /// </summary>\n    public PropertyValue<int> SubTitleId;\n    /// <summary>\n    /// \u8d5b\u5b63\n    /// </summary>\n    public PropertyValue<int> Season;\n    /// <summary>\n    /// \u8fdb\u5ea6\n    /// </summary>\n    public PropertyValue<int> Progress;\n    /// <summary>\n    /// \u79f0\u53f7\u83b7\u53d6\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> Time;\n    /// <summary>\n    /// \u662f\u5426\u65b0\u83b7\u5f97\u7684\u79f0\u53f7, 1\u662f0\u5426\n    /// </summary>\n    public PropertyValue<int> IsNew;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (TitleId.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(TitleId.Value);\n      }\n      if (SubTitleId.Value != 0) {\n        output.WriteRawTag(16);\n        output.WriteSInt32(SubTitleId.Value);\n      }\n      if (Season.Value != 0) {\n        output.WriteRawTag(24);\n        output.WriteSInt32(Season.Value);\n      }\n      if (Progress.Value != 0) {\n        output.WriteRawTag(32);\n        output.WriteSInt32(Progress.Value);\n      }\n      if (Time.Value != 0L) {\n        output.WriteRawTag(40);\n        output.WriteSInt64(Time.Value);\n      }\n      if (IsNew.Value != 0) {\n        output.WriteRawTag(48);\n        output.WriteSInt32(IsNew.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (TitleId.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TitleId.Value);\n      }\n      if (SubTitleId.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SubTitleId.Value);\n      }\n      if (Season.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Season.Value);\n      }\n      if (Progress.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Progress.Value);\n      }\n      if (Time.Value != 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Time.Value);\n      }\n      if (IsNew.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IsNew.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            TitleId.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            SubTitleId.Value = input.ReadSInt32();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            Season.Value = input.ReadSInt32();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            Progress.Value = input.ReadSInt32();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            Time.Value = input.ReadSInt64();\n            break;\n          }\n          case 48: {\n            flag |= 1 << 6;\n            IsNew.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        TitleId.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        SubTitleId.Value = 0;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Season.Value = 0;\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        Progress.Value = 0;\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        Time.Value = 0;\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        IsNew.Value = 0;\n      }\n    }\n\n    public void MergeFrom(TeamAchieveTitlePB from) {\n      TitleId.Value = from.TitleId.Value;\n      SubTitleId.Value = from.SubTitleId.Value;\n      Season.Value = from.Season.Value;\n      Progress.Value = from.Progress.Value;\n      Time.Value = from.Time.Value;\n      IsNew.Value = from.IsNew.Value;\n    }\n\n    public override void ResetDefaults() {\n      TitleId.Value = 0;\n      SubTitleId.Value = 0;\n      Season.Value = 0;\n      Progress.Value = 0;\n      Time.Value = 0;\n      IsNew.Value = 0;\n    }\n\n    public override void Bind(){\n      TitleId = new PropertyValue<int>(this,\"TitleId\");\n      SubTitleId = new PropertyValue<int>(this,\"SubTitleId\");\n      Season = new PropertyValue<int>(this,\"Season\");\n      Progress = new PropertyValue<int>(this,\"Progress\");\n      Time = new PropertyValue<long>(this,\"Time\");\n      IsNew = new PropertyValue<int>(this,\"IsNew\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TitleId)); \n      list.Add(new ViewModelPropertyInfo(SubTitleId)); \n      list.Add(new ViewModelPropertyInfo(Season)); \n      list.Add(new ViewModelPropertyInfo(Progress)); \n      list.Add(new ViewModelPropertyInfo(Time)); \n      list.Add(new ViewModelPropertyInfo(IsNew)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"TitleId:\").Append(TitleId.Value);\n      stringBuilder.Append(\", SubTitleId:\").Append(SubTitleId.Value);\n      stringBuilder.Append(\", Season:\").Append(Season.Value);\n      stringBuilder.Append(\", Progress:\").Append(Progress.Value);\n      stringBuilder.Append(\", Time:\").Append(Time.Value);\n      stringBuilder.Append(\", IsNew:\").Append(IsNew.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class TeamTitleInUseRes : ViewModel {\n    public static readonly pb::MessageParser<TeamTitleInUseRes> Parser = new pb::MessageParser<TeamTitleInUseRes>(() => (TeamTitleInUseRes)MessagePool.Instance.Fetch(typeof(TeamTitleInUseRes)));\n    /// <summary>\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///\u79f0\u53f7\u4fe1\u606f\n    /// </summary>\n    public global::PlatformHotfix.TeamTitlePB TeamTitle;\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (TeamTitle != null &&TeamTitle.CalculateSize()!= 0) {\n        output.WriteRawTag(18);\n        output.WriteMessage(TeamTitle);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (TeamTitle != null &&TeamTitle.CalculateSize()!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamTitle);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            if (TeamTitle == null) {\n              TeamTitle = new global::PlatformHotfix.TeamTitlePB();\n            }\n            input.ReadMessage(TeamTitle);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        if (TeamTitle != null)TeamTitle.ResetDefaults();\n      }\n    }\n\n    public void MergeFrom(TeamTitleInUseRes from) {\n      Ret.Value = from.Ret.Value;\n      TeamTitle.MergeFrom(from.TeamTitle);\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      if (TeamTitle != null)TeamTitle.ResetDefaults();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      this.AddBinding(TeamTitle ?? (TeamTitle = new global::PlatformHotfix.TeamTitlePB())); \n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(TeamTitle)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", TeamTitle:\"+TeamTitle.ToString());\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "cropped_inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: achievement.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class TeamAchievementRes : ViewModel {\n    public static readonly pb::MessageParser<TeamAchievementRes> Parser = new pb::MessageParser<TeamAchievementRes>(() => (TeamAchievementRes)MessagePool.Instance.Fetch(typeof(TeamAchievementRes)));\n    /// <summary>\n    ///\u54cd\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    private static readonly pb::FieldCodec<global::PlatformHotfix.TeamAchievementPB> _repeated_teamAchievements_codec\n        = pb::FieldCodec.ForMessage(18, global::PlatformHotfix.TeamAchievementPB.Parser);\n    /// <summary>\n    ///\u4efb\u52a1\u8be6\u60c5\n    /// </summary>\n    public ModelCollection<global::PlatformHotfix.TeamAchievementPB> TeamAchievements;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      TeamAchievements.WriteTo(output, _repeated_teamAchievements_codec);\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      size += TeamAchievements.CalculateSize(_repeated_teamAchievements_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            TeamAchievements.Clear();\n            TeamAchievements.AddEntriesFrom(input, _repeated_teamAchievements_codec);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        for (int i = 0; i < TeamAchievements.Count; i++) { TeamAchievements[i].Destroy(); MessagePool.Instance.Recycle(TeamAchievements[i]); }\n        TeamAchievements.Clear();\n      }\n    }\n\n    public void MergeFrom(TeamAchievementRes from) {\n      Ret.Value = from.Ret.Value;\n      for (int i = 0; i < TeamAchievements.Count; i++) { TeamAchievements[i].Destroy(); MessagePool.Instance.Recycle(TeamAchievements[i]); }\n      TeamAchievements.Clear();\n      for (int i = 0; i < from.TeamAchievements.Count; i++) { var temp = (PlatformHotfix.TeamAchievementPB)MessagePool.Instance.Fetch(typeof(PlatformHotfix.TeamAchievementPB)); temp.MergeFrom(from.TeamAchievements[i]);TeamAchievements.Add(temp); }\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      for (int i = 0; i < TeamAchievements.Count; i++) { TeamAchievements[i].Destroy(); MessagePool.Instance.Recycle(TeamAchievements[i]); }\n      TeamAchievements.Clear();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      TeamAchievements = new ModelCollection<global::PlatformHotfix.TeamAchievementPB>(this,\"TeamAchievements\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(TeamAchievements)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\"\ufffd\ufffdModelCollection_TeamAchievements:{\");for (int i = 0; i < TeamAchievements.Count; i++) {stringBuilder.Append(\"{\");\n       stringBuilder.Append(TeamAchievements[i].ToString());stringBuilder.Append(\"}\"); if(i>0) stringBuilder.Append(\",\");\n      }stringBuilder.Append(\"}\");\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class TeamAchievementPB : ViewModel {\n    public static readonly pb::MessageParser<TeamAchievementPB> Parser = new pb::MessageParser<TeamAchievementPB>(() => (TeamAchievementPB)MessagePool.Instance.Fetch(typeof(TeamAchievementPB)));\n    /// <summary>\n    ///\u6210\u5c31ID\n    /// </summary>\n    public PropertyValue<int> AchievementId;\n    /// <summary>\n    ///\u8fdb\u5ea6\n    /// </summary>\n    public PropertyValue<int> Progress;\n    /// <summary>\n    ///\u72b6\u6001 1 \u672a\u5b8c\u6210 2 \u672a\u9886\u53d6 3\u5df2\u9886\u53d6\n    /// </summary>\n    public PropertyValue<int> Status;\n    /// <summary>\n    ///\u6210\u5c31\u76ee\u6807\n    /// </summary>\n    public PropertyValue<int> AchievementTarget;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (AchievementId.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(AchievementId.Value);\n      }\n      if (Progress.Value!= 0) {\n        output.WriteRawTag(16);\n        output.WriteSInt32(Progress.Value);\n      }\n      if (Status.Value!= 0) {\n        output.WriteRawTag(24);\n        output.WriteSInt32(Status.Value);\n      }\n      if (AchievementTarget.Value!= 0) {\n        output.WriteRawTag(32);\n        output.WriteSInt32(AchievementTarget.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (AchievementId.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AchievementId.Value);\n      }\n      if (Progress.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Progress.Value);\n      }\n      if (Status.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Status.Value);\n      }\n      if (AchievementTarget.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AchievementTarget.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            AchievementId.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            Progress.Value = input.ReadSInt32();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            Status.Value = input.ReadSInt32();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            AchievementTarget.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        AchievementId.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Progress.Value = 0;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Status.Value = 0;\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        AchievementTarget.Value = 0;\n      }\n    }\n\n    public void MergeFrom(TeamAchievementPB from.Value = from.Progress.Value;\n      Status.Value = from.Status.Value;\n      AchievementTarget.Value = from.AchievementTarget.Value;\n    }\n\n    public override void ResetDefaults() {\n      AchievementId.Value = 0;\n      Progress.Value = 0;\n      Status.Value = 0;\n      AchievementTarget.Value = 0;\n    }\n\n    public override void Bind(){\n      AchievementId = new PropertyValue<int>(this,\"AchievementId\");\n      Progress = new PropertyValue<int>(this,\"Progress\");\n      Status = new PropertyValue<int>(this,\"Status\");\n      AchievementTarget = new PropertyValue<int>(this,\"AchievementTarget\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(AchievementId)); \n      list.Add(new ViewModelPropertyInfo(Progress)); \n      list.Add(new ViewModelPropertyInfo(Status)); \n      list.Add(new ViewModelPropertyInfo(AchievementTarget)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"AchievementId:\").Append(AchievementId.Value);\n      stringBuilder.Append(\", Progress:\").Append(Progress.Value);\n      stringBuilder.Append(\", Status:\").Append(Status.Value);\n      stringBuilder.Append(\", AchievementTarget:\").Append(AchievementTarget.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  /// <summary>\n  /// \u73a9\u5bb6\u6240\u6709\u79f0\u53f7\n  /// </summary>\n  public partial class TeamAchieveTitleRes : ViewModel {\n    public static readonly pb::MessageParser<TeamAchieveTitleRes> Parser = new pb::MessageParser<TeamAchieveTitleRes>(() => (TeamAchieveTitleRes)MessagePool.Instance.Fetch(typeof(TeamAchieveTitleRes)));\n    /// <summary>\n    /// \u54cd\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    private static readonly pb::FieldCodec<global::PlatformHotfix.TeamAchieveTitlePB> _repeated_titles_codec\n        = pb::FieldCodec.ForMessage(18, global::PlatformHotfix.TeamAchieveTitlePB.Parser);\n    /// <summary>\n    /// \u4efb\u52a1\u8be6\u60c5\n    /// </summary>\n    public ModelCollection<global::PlatformHotfix.TeamAchieveTitlePB> Titles;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      Titles.WriteTo(output, _repeated_titles_codec);\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      size += Titles.CalculateSize(_repeated_titles_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Titles.Clear();\n            Titles.AddEntriesFrom(input, _repeated_titles_codec);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        for (int i = 0; i < Titles.Count; i++) { Titles[i].Destroy(); MessagePool.Instance.Recycle(Titles[i]); }\n        Titles.Clear();\n      }\n    }\n\n    public void MergeFrom(TeamAchieveTitleRes from) {\n      Ret.Value = from.Ret.Value;\n      for (int i = 0; i < Titles.Count; i++) { Titles[i].Destroy(); MessagePool.Instance.Recycle(Titles[i]); }\n      Titles.Clear();\n      for (int i = 0; i < from.Titles.Count; i++) { var temp = (PlatformHotfix.TeamAchieveTitlePB)MessagePool.Instance.Fetch(typeof(PlatformHotfix.TeamAchieveTitlePB)); temp.MergeFrom(from.Titles[i]);Titles.Add(temp); }\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      for (int i = 0; i < Titles.Count; i++) { Titles[i].Destroy(); MessagePool.Instance.Recycle(Titles[i]); }\n      Titles.Clear();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      Titles = new ModelCollection<global::PlatformHotfix.TeamAchieveTitlePB>(this,\"Titles\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(Titles)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\"\ufffd\ufffdModelCollection_Titles:{\");for (int i = 0; i < Titles.Count; i++) {stringBuilder.Append(\"{\");\n       stringBuilder.Append(Titles[i].ToString());stringBuilder.Append(\"}\"); if(i>0) stringBuilder.Append(\",\");\n      }stringBuilder.Append(\"}\");\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class TeamAchieveTitlePB : ViewModel {\n    public static readonly pb::MessageParser<TeamAchieveTitlePB> Parser = new pb::MessageParser<TeamAchieveTitlePB>(() => (TeamAchieveTitlePB)MessagePool.Instance.Fetch(typeof(TeamAchieveTitlePB)));\n    /// <summary>\n    /// \u79f0\u53f7ID\n    /// </summary>\n    public PropertyValue<int> TitleId;\n    /// <summary>\n    /// \u5b50\u79f0\u53f7\n    /// </summary>\n    public PropertyValue<int> SubTitleId;\n    /// <summary>\n    /// \u8d5b\u5b63\n    /// </summary>\n    public PropertyValue<int> Season;\n    /// <summary>\n    /// \u8fdb\u5ea6\n    /// </summary>\n    public PropertyValue<int> Progress;\n    /// <summary>\n    /// \u79f0\u53f7\u83b7\u53d6\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> Time;\n    /// <summary>\n    /// \u662f\u5426\u65b0\u83b7\u5f97\u7684\u79f0\u53f7, 1\u662f0\u5426\n    /// </summary>\n    public PropertyValue<int> IsNew;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (TitleId.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(TitleId.Value);\n      }\n      if (SubTitleId.Value!= 0) {\n        output.WriteRawTag(16);\n        output.WriteSInt32(SubTitleId.Value);\n      }\n      if (Season.Value!= 0) {\n        output.WriteRawTag(24);\n        output.WriteSInt32(Season.Value);\n      }\n      if (Progress.Value!= 0) {\n        output.WriteRawTag(32);\n        output.WriteSInt32(Progress.Value);\n      }\n      if (Time.Value!= 0L) {\n        output.WriteRawTag(40);\n        output.WriteSInt64(Time.Value);\n      }\n      if (IsNew.Value!= 0) {\n        output.WriteRawTag(48);\n        output.WriteSInt32(IsNew.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (TitleId.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TitleId.Value);\n      }\n      if (SubTitleId.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SubTitleId.Value);\n      }\n      if (Season.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Season.Value);\n      }\n      if (Progress.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Progress.Value);\n      }\n      if (Time.Value!= 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Time.Value);\n      }\n      if (IsNew.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IsNew.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            TitleId.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            SubTitleId.Value = input.ReadSInt32();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            Season.Value = input.ReadSInt32();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            Progress.Value = input.ReadSInt32();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            Time.Value = input.ReadSInt64();\n            break;\n          }\n          case 48: {\n            flag |= 1 << 6;\n            IsNew.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        TitleId.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        SubTitleId.Value = 0;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Season.Value = 0;\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        Progress.Value = 0;\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        Time.Value = 0;\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        IsNew.Value = 0;\n      }\n    }\n\n    public void MergeFrom(TeamAchieveTitlePB from) {\n      TitleId.Value = from.TitleId.Value;\n      SubTitleId.Value = from.SubTitleId.Value;\n      Season.Value = from.Season.Value;\n      Progress.Value = from.Progress.Value;\n      Time.Value = from.Time.Value;\n      IsNew.Value = from.IsNew.Value;\n    }\n\n    public override void ResetDefaults() {\n      TitleId.Value = 0;\n      SubTitleId.Value = 0;\n      Season.Value = 0;\n      Progress.Value = 0;\n      Time.Value = 0;\n      IsNew.Value = 0;\n    }\n\n    public override void Bind(){\n      TitleId = new PropertyValue<int>(this,\"TitleId\");\n      SubTitleId = new PropertyValue<int>(this,\"SubTitleId\");\n      Season = new PropertyValue<int>(this,\"Season\");\n      Progress = new PropertyValue<int>(this,\"Progress\");\n      Time = new PropertyValue<long>(this,\"Time\");\n      IsNew = new PropertyValue<int>(this,\"IsNew\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TitleId)); \n      list.Add(new ViewModelPropertyInfo(SubTitleId)); \n      list.Add(new ViewModelPropertyInfo(Season)); \n      list.Add(new ViewModelPropertyInfo(Progress)); \n      list.Add(new ViewModelPropertyInfo(Time)); \n      list.Add(new ViewModelPropertyInfo(IsNew)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"TitleId:\").Append(TitleId.Value);\n      stringBuilder.Append(\", SubTitleId:\").Append(SubTitleId.Value);\n      stringBuilder.Append(\", Season:\").Append(Season.Value);\n      stringBuilder.Append(\", Progress:\").Append(Progress.Value);\n      stringBuilder.Append(\", Time:\").Append(Time.Value);\n      stringBuilder.Append(\", IsNew:\").Append(IsNew.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class TeamTitleInUseRes : ViewModel {\n    public static readonly pb::MessageParser<TeamTitleInUseRes> Parser = new pb::MessageParser<TeamTitleInUseRes>(() => (TeamTitleInUseRes)MessagePool.Instance.Fetch(typeof(TeamTitleInUseRes)));\n    /// <summary>\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///\u79f0\u53f7\u4fe1\u606f\n    /// </summary>\n    public global::PlatformHotfix.TeamTitlePB TeamTitle;\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (TeamTitle!= null &&TeamTitle.CalculateSize()!= 0) {\n        output.WriteRawTag(18);\n        output.WriteMessage(TeamTitle);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (TeamTitle!= null &&TeamTitle.CalculateSize()!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamTitle);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            if (TeamTitle == null) {\n              TeamTitle = new global::PlatformHotfix.TeamTitlePB();\n            }\n            input.ReadMessage(TeamTitle);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        if (TeamTitle!= null)TeamTitle.ResetDefaults();\n      }\n    }\n\n    public void MergeFrom(TeamTitleInUseRes from) {\n      Ret.Value = from.Ret.Value;\n      TeamTitle.MergeFrom(from.TeamTitle);\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      if (TeamTitle!= null)TeamTitle.ResetDefaults();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      this.AddBinding(TeamTitle?? (TeamTitle = new global::PlatformHotfix.TeamTitlePB())); \n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(TeamTitle)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", TeamTitle:\"+TeamTitle.ToString());\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "starcoder_inputs": "<fim_prefix>// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: achievement.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class TeamAchievementRes : ViewModel {\n    public static readonly pb::MessageParser<TeamAchievementRes> Parser = new pb::MessageParser<TeamAchievementRes>(() => (TeamAchievementRes)MessagePool.Instance.Fetch(typeof(TeamAchievementRes)));\n    /// <summary>\n    ///\u54cd\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    private static readonly pb::FieldCodec<global::PlatformHotfix.TeamAchievementPB> _repeated_teamAchievements_codec\n        = pb::FieldCodec.ForMessage(18, global::PlatformHotfix.TeamAchievementPB.Parser);\n    /// <summary>\n    ///\u4efb\u52a1\u8be6\u60c5\n    /// </summary>\n    public ModelCollection<global::PlatformHotfix.TeamAchievementPB> TeamAchievements;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      TeamAchievements.WriteTo(output, _repeated_teamAchievements_codec);\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      size += TeamAchievements.CalculateSize(_repeated_teamAchievements_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            TeamAchievements.Clear();\n            TeamAchievements.AddEntriesFrom(input, _repeated_teamAchievements_codec);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        for (int i = 0; i < TeamAchievements.Count; i++) { TeamAchievements[i].Destroy(); MessagePool.Instance.Recycle(TeamAchievements[i]); }\n        TeamAchievements.Clear();\n      }\n    }\n\n    public void MergeFrom(TeamAchievementRes from) {\n      Ret.Value = from.Ret.Value;\n      for (int i = 0; i < TeamAchievements.Count; i++) { TeamAchievements[i].Destroy(); MessagePool.Instance.Recycle(TeamAchievements[i]); }\n      TeamAchievements.Clear();\n      for (int i = 0; i < from.TeamAchievements.Count; i++) { var temp = (PlatformHotfix.TeamAchievementPB)MessagePool.Instance.Fetch(typeof(PlatformHotfix.TeamAchievementPB)); temp.MergeFrom(from.TeamAchievements[i]);TeamAchievements.Add(temp); }\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      for (int i = 0; i < TeamAchievements.Count; i++) { TeamAchievements[i].Destroy(); MessagePool.Instance.Recycle(TeamAchievements[i]); }\n      TeamAchievements.Clear();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      TeamAchievements = new ModelCollection<global::PlatformHotfix.TeamAchievementPB>(this,\"TeamAchievements\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(TeamAchievements)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\"\ufffd\ufffdModelCollection_TeamAchievements:{\");for (int i = 0; i < TeamAchievements.Count; i++) {stringBuilder.Append(\"{\");\n       stringBuilder.Append(TeamAchievements[i].ToString());stringBuilder.Append(\"}\"); if(i>0) stringBuilder.Append(\",\");\n      }stringBuilder.Append(\"}\");\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class TeamAchievementPB : ViewModel {\n    public static readonly pb::MessageParser<TeamAchievementPB> Parser = new pb::MessageParser<TeamAchievementPB>(() => (TeamAchievementPB)MessagePool.Instance.Fetch(typeof(TeamAchievementPB)));\n    /// <summary>\n    ///\u6210\u5c31ID\n    /// </summary>\n    public PropertyValue<int> AchievementId;\n    /// <summary>\n    ///\u8fdb\u5ea6\n    /// </summary>\n    public PropertyValue<int> Progress;\n    /// <summary>\n    ///\u72b6\u6001 1 \u672a\u5b8c\u6210 2 \u672a\u9886\u53d6 3\u5df2\u9886\u53d6\n    /// </summary>\n    public PropertyValue<int> Status;\n    /// <summary>\n    ///\u6210\u5c31\u76ee\u6807\n    /// </summary>\n    public PropertyValue<int> AchievementTarget;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (AchievementId.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(AchievementId.Value);\n      }\n      if (Progress.Value!= 0) {\n        output.WriteRawTag(16);\n        output.WriteSInt32(Progress.Value);\n      }\n      if (Status.Value!= 0) {\n        output.WriteRawTag(24);\n        output.WriteSInt32(Status.Value);\n      }\n      if (AchievementTarget.Value!= 0) {\n        output.WriteRawTag(32);\n        output.WriteSInt32(AchievementTarget.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (AchievementId.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AchievementId.Value);\n      }\n      if (Progress.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Progress.Value);\n      }\n      if (Status.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Status.Value);\n      }\n      if (AchievementTarget.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AchievementTarget.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            AchievementId.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            Progress.Value = input.ReadSInt32();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            Status.Value = input.ReadSInt32();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            AchievementTarget.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        AchievementId.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Progress.Value = 0;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Status.Value = 0;\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        AchievementTarget.Value = 0;\n      }\n    }\n\n    public void MergeFrom(TeamAchievementPB from<fim_suffix>.Value = from.Progress.Value;\n      Status.Value = from.Status.Value;\n      AchievementTarget.Value = from.AchievementTarget.Value;\n    }\n\n    public override void ResetDefaults() {\n      AchievementId.Value = 0;\n      Progress.Value = 0;\n      Status.Value = 0;\n      AchievementTarget.Value = 0;\n    }\n\n    public override void Bind(){\n      AchievementId = new PropertyValue<int>(this,\"AchievementId\");\n      Progress = new PropertyValue<int>(this,\"Progress\");\n      Status = new PropertyValue<int>(this,\"Status\");\n      AchievementTarget = new PropertyValue<int>(this,\"AchievementTarget\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(AchievementId)); \n      list.Add(new ViewModelPropertyInfo(Progress)); \n      list.Add(new ViewModelPropertyInfo(Status)); \n      list.Add(new ViewModelPropertyInfo(AchievementTarget)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"AchievementId:\").Append(AchievementId.Value);\n      stringBuilder.Append(\", Progress:\").Append(Progress.Value);\n      stringBuilder.Append(\", Status:\").Append(Status.Value);\n      stringBuilder.Append(\", AchievementTarget:\").Append(AchievementTarget.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  /// <summary>\n  /// \u73a9\u5bb6\u6240\u6709\u79f0\u53f7\n  /// </summary>\n  public partial class TeamAchieveTitleRes : ViewModel {\n    public static readonly pb::MessageParser<TeamAchieveTitleRes> Parser = new pb::MessageParser<TeamAchieveTitleRes>(() => (TeamAchieveTitleRes)MessagePool.Instance.Fetch(typeof(TeamAchieveTitleRes)));\n    /// <summary>\n    /// \u54cd\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    private static readonly pb::FieldCodec<global::PlatformHotfix.TeamAchieveTitlePB> _repeated_titles_codec\n        = pb::FieldCodec.ForMessage(18, global::PlatformHotfix.TeamAchieveTitlePB.Parser);\n    /// <summary>\n    /// \u4efb\u52a1\u8be6\u60c5\n    /// </summary>\n    public ModelCollection<global::PlatformHotfix.TeamAchieveTitlePB> Titles;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      Titles.WriteTo(output, _repeated_titles_codec);\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      size += Titles.CalculateSize(_repeated_titles_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Titles.Clear();\n            Titles.AddEntriesFrom(input, _repeated_titles_codec);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        for (int i = 0; i < Titles.Count; i++) { Titles[i].Destroy(); MessagePool.Instance.Recycle(Titles[i]); }\n        Titles.Clear();\n      }\n    }\n\n    public void MergeFrom(TeamAchieveTitleRes from) {\n      Ret.Value = from.Ret.Value;\n      for (int i = 0; i < Titles.Count; i++) { Titles[i].Destroy(); MessagePool.Instance.Recycle(Titles[i]); }\n      Titles.Clear();\n      for (int i = 0; i < from.Titles.Count; i++) { var temp = (PlatformHotfix.TeamAchieveTitlePB)MessagePool.Instance.Fetch(typeof(PlatformHotfix.TeamAchieveTitlePB)); temp.MergeFrom(from.Titles[i]);Titles.Add(temp); }\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      for (int i = 0; i < Titles.Count; i++) { Titles[i].Destroy(); MessagePool.Instance.Recycle(Titles[i]); }\n      Titles.Clear();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      Titles = new ModelCollection<global::PlatformHotfix.TeamAchieveTitlePB>(this,\"Titles\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(Titles)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\"\ufffd\ufffdModelCollection_Titles:{\");for (int i = 0; i < Titles.Count; i++) {stringBuilder.Append(\"{\");\n       stringBuilder.Append(Titles[i].ToString());stringBuilder.Append(\"}\"); if(i>0) stringBuilder.Append(\",\");\n      }stringBuilder.Append(\"}\");\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class TeamAchieveTitlePB : ViewModel {\n    public static readonly pb::MessageParser<TeamAchieveTitlePB> Parser = new pb::MessageParser<TeamAchieveTitlePB>(() => (TeamAchieveTitlePB)MessagePool.Instance.Fetch(typeof(TeamAchieveTitlePB)));\n    /// <summary>\n    /// \u79f0\u53f7ID\n    /// </summary>\n    public PropertyValue<int> TitleId;\n    /// <summary>\n    /// \u5b50\u79f0\u53f7\n    /// </summary>\n    public PropertyValue<int> SubTitleId;\n    /// <summary>\n    /// \u8d5b\u5b63\n    /// </summary>\n    public PropertyValue<int> Season;\n    /// <summary>\n    /// \u8fdb\u5ea6\n    /// </summary>\n    public PropertyValue<int> Progress;\n    /// <summary>\n    /// \u79f0\u53f7\u83b7\u53d6\u65f6\u95f4\n    /// </summary>\n    public PropertyValue<long> Time;\n    /// <summary>\n    /// \u662f\u5426\u65b0\u83b7\u5f97\u7684\u79f0\u53f7, 1\u662f0\u5426\n    /// </summary>\n    public PropertyValue<int> IsNew;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (TitleId.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(TitleId.Value);\n      }\n      if (SubTitleId.Value!= 0) {\n        output.WriteRawTag(16);\n        output.WriteSInt32(SubTitleId.Value);\n      }\n      if (Season.Value!= 0) {\n        output.WriteRawTag(24);\n        output.WriteSInt32(Season.Value);\n      }\n      if (Progress.Value!= 0) {\n        output.WriteRawTag(32);\n        output.WriteSInt32(Progress.Value);\n      }\n      if (Time.Value!= 0L) {\n        output.WriteRawTag(40);\n        output.WriteSInt64(Time.Value);\n      }\n      if (IsNew.Value!= 0) {\n        output.WriteRawTag(48);\n        output.WriteSInt32(IsNew.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (TitleId.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TitleId.Value);\n      }\n      if (SubTitleId.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SubTitleId.Value);\n      }\n      if (Season.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Season.Value);\n      }\n      if (Progress.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Progress.Value);\n      }\n      if (Time.Value!= 0L) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Time.Value);\n      }\n      if (IsNew.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IsNew.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            TitleId.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            SubTitleId.Value = input.ReadSInt32();\n            break;\n          }\n          case 24: {\n            flag |= 1 << 3;\n            Season.Value = input.ReadSInt32();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            Progress.Value = input.ReadSInt32();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            Time.Value = input.ReadSInt64();\n            break;\n          }\n          case 48: {\n            flag |= 1 << 6;\n            IsNew.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        TitleId.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        SubTitleId.Value = 0;\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Season.Value = 0;\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        Progress.Value = 0;\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        Time.Value = 0;\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        IsNew.Value = 0;\n      }\n    }\n\n    public void MergeFrom(TeamAchieveTitlePB from) {\n      TitleId.Value = from.TitleId.Value;\n      SubTitleId.Value = from.SubTitleId.Value;\n      Season.Value = from.Season.Value;\n      Progress.Value = from.Progress.Value;\n      Time.Value = from.Time.Value;\n      IsNew.Value = from.IsNew.Value;\n    }\n\n    public override void ResetDefaults() {\n      TitleId.Value = 0;\n      SubTitleId.Value = 0;\n      Season.Value = 0;\n      Progress.Value = 0;\n      Time.Value = 0;\n      IsNew.Value = 0;\n    }\n\n    public override void Bind(){\n      TitleId = new PropertyValue<int>(this,\"TitleId\");\n      SubTitleId = new PropertyValue<int>(this,\"SubTitleId\");\n      Season = new PropertyValue<int>(this,\"Season\");\n      Progress = new PropertyValue<int>(this,\"Progress\");\n      Time = new PropertyValue<long>(this,\"Time\");\n      IsNew = new PropertyValue<int>(this,\"IsNew\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TitleId)); \n      list.Add(new ViewModelPropertyInfo(SubTitleId)); \n      list.Add(new ViewModelPropertyInfo(Season)); \n      list.Add(new ViewModelPropertyInfo(Progress)); \n      list.Add(new ViewModelPropertyInfo(Time)); \n      list.Add(new ViewModelPropertyInfo(IsNew)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"TitleId:\").Append(TitleId.Value);\n      stringBuilder.Append(\", SubTitleId:\").Append(SubTitleId.Value);\n      stringBuilder.Append(\", Season:\").Append(Season.Value);\n      stringBuilder.Append(\", Progress:\").Append(Progress.Value);\n      stringBuilder.Append(\", Time:\").Append(Time.Value);\n      stringBuilder.Append(\", IsNew:\").Append(IsNew.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class TeamTitleInUseRes : ViewModel {\n    public static readonly pb::MessageParser<TeamTitleInUseRes> Parser = new pb::MessageParser<TeamTitleInUseRes>(() => (TeamTitleInUseRes)MessagePool.Instance.Fetch(typeof(TeamTitleInUseRes)));\n    /// <summary>\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///\u79f0\u53f7\u4fe1\u606f\n    /// </summary>\n    public global::PlatformHotfix.TeamTitlePB TeamTitle;\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (TeamTitle!= null &&TeamTitle.CalculateSize()!= 0) {\n        output.WriteRawTag(18);\n        output.WriteMessage(TeamTitle);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (TeamTitle!= null &&TeamTitle.CalculateSize()!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamTitle);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      long flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            if (TeamTitle == null) {\n              TeamTitle = new global::PlatformHotfix.TeamTitlePB();\n            }\n            input.ReadMessage(TeamTitle);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        if (TeamTitle!= null)TeamTitle.ResetDefaults();\n      }\n    }\n\n    public void MergeFrom(TeamTitleInUseRes from) {\n      Ret.Value = from.Ret.Value;\n      TeamTitle.MergeFrom(from.TeamTitle);\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      if (TeamTitle!= null)TeamTitle.ResetDefaults();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      this.AddBinding(TeamTitle?? (TeamTitle = new global::PlatformHotfix.TeamTitlePB())); \n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(TeamTitle)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", TeamTitle:\"+TeamTitle.ToString());\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n<fim_middle>"}
{"inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: user.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class GameClientInfo : ViewModel {\n    public static readonly pb::MessageParser<GameClientInfo> Parser = new pb::MessageParser<GameClientInfo>(() => (GameClientInfo)MessagePool.Instance.Fetch(typeof(GameClientInfo)));\n    /// <summary>\n    ///\u6e38\u620f\u5927\u533a\n    /// </summary>\n    public PropertyValue<string> Channel;\n    /// <summary>\n    ///\u6e38\u620f\u5ba2\u6237\u7aef\u6e20\u9053\u6807\u8bc6\n    /// </summary>\n    public PropertyValue<string> ChannelInfo;\n    /// <summary>\n    ///\u6e38\u620f\u5ba2\u6237\u7aef\u7248\u672c\n    /// </summary>\n    public PropertyValue<string> ClientVersion;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(Channel.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(Channel.Value);\n      }\n      if (!string.IsNullOrEmpty(ChannelInfo.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(ChannelInfo.Value);\n      }\n      if (!string.IsNullOrEmpty(ClientVersion.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(ClientVersion.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(Channel.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel.Value);\n      }\n      if (!string.IsNullOrEmpty(ChannelInfo.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelInfo.Value);\n      }\n      if (!string.IsNullOrEmpty(ClientVersion.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            flag |= 1 << 1;\n            Channel.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            ChannelInfo.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            ClientVersion.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Channel.Value = \"\";\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        ChannelInfo.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        ClientVersion.Value = \"\";\n      }\n    }\n\n    public void MergeFrom(GameClientInfo from) {\n      Channel.Value = from.Channel.Value;\n      ChannelInfo.Value = from.ChannelInfo.Value;\n      ClientVersion.Value = from.ClientVersion.Value;\n    }\n\n    public override void ResetDefaults() {\n      Channel.Value = \"\";\n      ChannelInfo.Value = \"\";\n      ClientVersion.Value = \"\";\n    }\n\n    public override void Bind(){\n      Channel = new PropertyValue<string>(this,\"Channel\");\n      ChannelInfo = new PropertyValue<string>(this,\"ChannelInfo\");\n      ClientVersion = new PropertyValue<string>(this,\"ClientVersion\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Channel)); \n      list.Add(new ViewModelPropertyInfo(ChannelInfo)); \n      list.Add(new ViewModelPropertyInfo(ClientVersion)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Channel:\").Append(Channel.Value);\n      stringBuilder.Append(\", ChannelInfo:\").Append(ChannelInfo.Value);\n      stringBuilder.Append(\", ClientVersion:\").Append(ClientVersion.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  /// <summary>\n  ///\u7ed1\u5b9a\u6e38\u5ba2/\u5e73\u53f0\u8d26\u53f7\n  /// </summary>\n  public partial class BindChannelAccountReq : ViewModel {\n    public static readonly pb::MessageParser<BindChannelAccountReq> Parser = new pb::MessageParser<BindChannelAccountReq>(() => (BindChannelAccountReq)MessagePool.Instance.Fetch(typeof(BindChannelAccountReq)));\n    /// <summary>\n    /// \u6e38\u620f\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> GameType;\n    /// <summary>\n    ///accountId\n    /// </summary>\n    public PropertyValue<string> AccountId;\n    /// <summary>\n    ///token\n    /// </summary>\n    public PropertyValue<string> Token;\n    /// <summary>\n    ///1 \u7ed1\u5b9a\u6e38\u5ba2\u8d26\u53f7  2 \u7ed1\u5b9a\u5e73\u53f0\u8d26\u53f7\n    /// </summary>\n    public PropertyValue<int> BindType;\n    /// <summary>\n    ///\u6e20\u9053\u767b\u5f55\u6620\u5c04\u6807\u8bc6\n    /// </summary>\n    public PropertyValue<string> FullChannel;\n    private static readonly MapCollection<string, string>.Codec _map_channelArgs_codec\n        = new MapCollection<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);\n    /// <summary>\n    ///\u6e20\u9053\u53c2\u6570(\u900f\u4f20)\n    /// </summary>\n    public MapCollection<string, string> ChannelArgs;\n    /// <summary>\n    ///sdk\u6e20\u9053\n    /// </summary>\n    public PropertyValue<string> SdkChannel;\n    /// <summary>\n    ///SDK\u7248\u672c\n    /// </summary>\n    public PropertyValue<int> SdkVersion;\n    /// <summary>\n    ///SDK\u53c2\u6570\u7248\u672c\n    /// </summary>\n    public PropertyValue<int> SdkParamVersion;\n    /// <summary>\n    ///\u6e38\u620f\u5ba2\u6237\u7aef\u4fe1\u606f\n    /// </summary>\n    public global::PlatformHotfix.GameClientInfo GameClientInfo;\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (GameType.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(GameType.Value);\n      }\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(Token.Value);\n      }\n      if (BindType.Value != 0) {\n        output.WriteRawTag(32);\n        output.WriteSInt32(BindType.Value);\n      }\n      if (!string.IsNullOrEmpty(FullChannel.Value)) {\n        output.WriteRawTag(42);\n        output.WriteString(FullChannel.Value);\n      }\n      ChannelArgs.WriteTo(output, _map_channelArgs_codec);\n      if (!string.IsNullOrEmpty(SdkChannel.Value)) {\n        output.WriteRawTag(58);\n        output.WriteString(SdkChannel.Value);\n      }\n      if (SdkVersion.Value != 0) {\n        output.WriteRawTag(64);\n        output.WriteSInt32(SdkVersion.Value);\n      }\n      if (SdkParamVersion.Value != 0) {\n        output.WriteRawTag(72);\n        output.WriteSInt32(SdkParamVersion.Value);\n      }\n      if (GameClientInfo != null &&GameClientInfo.CalculateSize()!= 0) {\n        output.WriteRawTag(82);\n        output.WriteMessage(GameClientInfo);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (GameType.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);\n      }\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token.Value);\n      }\n      if (BindType.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BindType.Value);\n      }\n      if (!string.IsNullOrEmpty(FullChannel.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullChannel.Value);\n      }\n      size += ChannelArgs.CalculateSize(_map_channelArgs_codec);\n      if (!string.IsNullOrEmpty(SdkChannel.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkChannel.Value);\n      }\n      if (SdkVersion.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SdkVersion.Value);\n      }\n      if (SdkParamVersion.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SdkParamVersion.Value);\n      }\n      if (GameClientInfo != null &&GameClientInfo.CalculateSize()!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameClientInfo);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            GameType.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            AccountId.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            Token.Value = input.ReadString();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            BindType.Value = input.ReadSInt32();\n            break;\n          }\n          case 42: {\n            flag |= 1 << 5;\n            FullChannel.Value = input.ReadString();\n            break;\n          }\n          case 50: {\n            flag |= 1 << 6;\n            ChannelArgs.Clear();\n            ChannelArgs.AddEntriesFrom(input, _map_channelArgs_codec);\n            break;\n          }\n          case 58: {\n            flag |= 1 << 7;\n            SdkChannel.Value = input.ReadString();\n            break;\n          }\n          case 64: {\n            flag |= 1 << 8;\n            SdkVersion.Value = input.ReadSInt32();\n            break;\n          }\n          case 72: {\n            flag |= 1 << 9;\n            SdkParamVersion.Value = input.ReadSInt32();\n            break;\n          }\n          case 82: {\n            flag |= 1 << 10;\n            if (GameClientInfo == null) {\n              GameClientInfo = new global::PlatformHotfix.GameClientInfo();\n            }\n            input.ReadMessage(GameClientInfo);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        GameType.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        AccountId.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Token.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        BindType.Value = 0;\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        FullChannel.Value = \"\";\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        ChannelArgs.Clear();\n      }\n      if((flag & 1 << 7) == 0)\n      {\n        SdkChannel.Value = \"\";\n      }\n      if((flag & 1 << 8) == 0)\n      {\n        SdkVersion.Value = 0;\n      }\n      if((flag & 1 << 9) == 0)\n      {\n        SdkParamVersion.Value = 0;\n      }\n      if((flag & 1 << 10) == 0)\n      {\n        if (GameClientInfo != null)GameClientInfo.ResetDefaults();\n      }\n    }\n\n    public void MergeFrom(BindChannelAccountReq from) {\n      GameType.Value = from.GameType.Value;\n      AccountId.Value = from.AccountId.Value;\n      Token.Value = from.Token.Value;\n      BindType.Value = from.BindType.Value;\n      FullChannel.Value = from.FullChannel.Value;\n      SdkChannel.Value = from.SdkChannel.Value;\n      SdkVersion.Value = from.SdkVersion.Value;\n      SdkParamVersion.Value = from.SdkParamVersion.Value;\n      GameClientInfo.MergeFrom(from.GameClientInfo);\n    }\n\n    public override void ResetDefaults() {\n      GameType.Value = 0;\n      AccountId.Value = \"\";\n      Token.Value = \"\";\n      BindType.Value = 0;\n      FullChannel.Value = \"\";\n      ChannelArgs.Clear();\n      SdkChannel.Value = \"\";\n      SdkVersion.Value = 0;\n      SdkParamVersion.Value = 0;\n      if (GameClientInfo != null)GameClientInfo.ResetDefaults();\n    }\n\n    public override void Bind(){\n      GameType = new PropertyValue<int>(this,\"GameType\");\n      AccountId = new PropertyValue<string>(this,\"AccountId\");\n      Token = new PropertyValue<string>(this,\"Token\");\n      BindType = new PropertyValue<int>(this,\"BindType\");\n      FullChannel = new PropertyValue<string>(this,\"FullChannel\");\n      ChannelArgs = new MapCollection<string, string>(this,\"ChannelArgs\");\n      SdkChannel = new PropertyValue<string>(this,\"SdkChannel\");\n      SdkVersion = new PropertyValue<int>(this,\"SdkVersion\");\n      SdkParamVersion = new PropertyValue<int>(this,\"SdkParamVersion\");\n      this.AddBinding(GameClientInfo ?? (GameClientInfo = new global::PlatformHotfix.GameClientInfo())); \n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(GameType)); \n      list.Add(new ViewModelPropertyInfo(AccountId)); \n      list.Add(new ViewModelPropertyInfo(Token)); \n      list.Add(new ViewModelPropertyInfo(BindType)); \n      list.Add(new ViewModelPropertyInfo(FullChannel)); \n      list.Add(new ViewModelPropertyInfo(ChannelArgs)); \n      list.Add(new ViewModelPropertyInfo(SdkChannel)); \n      list.Add(new ViewModelPropertyInfo(SdkVersion)); \n      list.Add(new ViewModelPropertyInfo(SdkParamVersion)); \n      list.Add(new ViewModelPropertyInfo(GameClientInfo)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      // stringBuilder.Append(\"GameType:\").Append(GameType.Value);\n      // stringBuilder.Append(\", AccountId:\").Append(AccountId.Value);\n      // stringBuilder.Append(\", Token:\").Append(Token.Value);\n      // stringBuilder.Append(\", BindType:\").Append(BindType.Value);\n      // stringBuilder.Append(\", FullChannel:\").Append(FullChannel.Value);\n      // stringBuilder.Append(\"\ufffd\ufffdModelCollection_ChannelArgs:{\");for (int i = 0; i < ChannelArgs.Count; i++) {stringBuilder.Append(\"{\");\n      //  stringBuilder.Append(ChannelArgs[i].ToString());stringBuilder.Append(\"}\"); if(i>0) stringBuilder.Append(\",\");\n      // }stringBuilder.Append(\"}\");\n      // stringBuilder.Append(\", SdkChannel:\").Append(SdkChannel.Value);\n      // stringBuilder.Append(\", SdkVersion:\").Append(SdkVersion.Value);\n      // stringBuilder.Append(\", SdkParamVersion:\").Append(SdkParamVersion.Value);\n      // stringBuilder.Append(\", GameClientInfo:\"+GameClientInfo.ToString());\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "cropped_inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: user.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class GameClientInfo : ViewModel {\n    public static readonly pb::MessageParser<GameClientInfo> Parser = new pb::MessageParser<GameClientInfo>(() => (GameClientInfo)MessagePool.Instance.Fetch(typeof(GameClientInfo)));\n    /// <summary>\n    ///\u6e38\u620f\u5927\u533a\n    /// </summary>\n    public PropertyValue<string> Channel;\n    /// <summary>\n    ///\u6e38\u620f\u5ba2\u6237\u7aef\u6e20\u9053\u6807\u8bc6\n    /// </summary>\n    public PropertyValue<string> ChannelInfo;\n    /// <summary>\n    ///\u6e38\u620f\u5ba2\u6237\u7aef\u7248\u672c\n    /// </summary>\n    public PropertyValue<string> ClientVersion;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(Channel.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(Channel.Value);\n      }\n      if (!string.IsNullOrEmpty(ChannelInfo.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(ChannelInfo.Value);\n      }\n      if (!string.IsNullOrEmpty(ClientVersion.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(ClientVersion.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(Channel.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel.Value);\n      }\n      if (!string.IsNullOrEmpty(ChannelInfo.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelInfo.Value);\n      }\n      if (!string.IsNullOrEmpty(ClientVersion.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            flag |= 1 << 1;\n            Channel.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            ChannelInfo.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            ClientVersion.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Channel.Value = \"\";\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        ChannelInfo.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        ClientVersion.Value = \"\";\n      }\n    }\n\n    public void MergeFrom(GameClientInfo from) {\n      Channel.Value = from.Channel.Value;\n      ChannelInfo.Value = from.ChannelInfo.Value;\n      ClientVersion.Value = from.ClientVersion.Value;\n    }\n\n    public override void ResetDefaults() {\n      Channel.Value = \"\";\n      ChannelInfo.Value = \"\";\n      ClientVersion.Value = \"\";\n    }\n\n    public override void Bind(){\n      Channel = new PropertyValue<string>(this,\"Channel\");\n      ChannelInfo = new PropertyValue<string>(this,\"ChannelInfo\");\n      ClientVersion = new PropertyValue<string>(this,\"ClientVersion\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Channel)); \n      list.Add(new ViewModelPropertyInfo(ChannelInfo)); \n      list.Add(new ViewModelPropertyInfo(ClientVersion)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Channel:\").Append(Channel.Value);\n      stringBuilder.Append(\", ChannelInfo:\").Append(ChannelInfo.Value);\n      stringBuilder.Append(\", ClientVersion:\").Append(ClientVersion.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  /// <summary>\n  ///\u7ed1\u5b9a\u6e38\u5ba2/\u5e73\u53f0\u8d26\u53f7\n  /// </summary>\n  public partial class BindChannelAccountReq : ViewModel {\n    public static readonly pb::MessageParser<BindChannelAccountReq> Parser = new pb::MessageParser<BindChannelAccountReq>(() => (BindChannelAccountReq)MessagePool.Instance.Fetch(typeof(BindChannelAccountReq)));\n    /// <summary>\n    /// \u6e38\u620f\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> GameType;\n    /// <summary>\n    ///accountId\n    /// </summary>\n    public PropertyValue<string> AccountId;\n    /// <summary>\n    ///token\n    /// </summary>\n    public PropertyValue<string> Token;\n    /// <summary>\n    ///1 \u7ed1\u5b9a\u6e38\u5ba2\u8d26\u53f7  2 \u7ed1\u5b9a\u5e73\u53f0\u8d26\u53f7\n    /// </summary>\n    public PropertyValue<int> BindType;\n    /// <summary>\n    ///\u6e20\u9053\u767b\u5f55\u6620\u5c04\u6807\u8bc6\n    /// </summary>\n    public PropertyValue<string> FullChannel;\n    private static readonly Mapstring, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);\n    /// <summary>\n    ///\u6e20\u9053\u53c2\u6570(\u900f\u4f20)\n    /// </summary>\n    public MapCollection<string, string> ChannelArgs;\n    /// <summary>\n    ///sdk\u6e20\u9053\n    /// </summary>\n    public PropertyValue<string> SdkChannel;\n    /// <summary>\n    ///SDK\u7248\u672c\n    /// </summary>\n    public PropertyValue<int> SdkVersion;\n    /// <summary>\n    ///SDK\u53c2\u6570\u7248\u672c\n    /// </summary>\n    public PropertyValue<int> SdkParamVersion;\n    /// <summary>\n    ///\u6e38\u620f\u5ba2\u6237\u7aef\u4fe1\u606f\n    /// </summary>\n    public global::PlatformHotfix.GameClientInfo GameClientInfo;\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (GameType.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(GameType.Value);\n      }\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(Token.Value);\n      }\n      if (BindType.Value!= 0) {\n        output.WriteRawTag(32);\n        output.WriteSInt32(BindType.Value);\n      }\n      if (!string.IsNullOrEmpty(FullChannel.Value)) {\n        output.WriteRawTag(42);\n        output.WriteString(FullChannel.Value);\n      }\n      ChannelArgs.WriteTo(output, _map_channelArgs_codec);\n      if (!string.IsNullOrEmpty(SdkChannel.Value)) {\n        output.WriteRawTag(58);\n        output.WriteString(SdkChannel.Value);\n      }\n      if (SdkVersion.Value!= 0) {\n        output.WriteRawTag(64);\n        output.WriteSInt32(SdkVersion.Value);\n      }\n      if (SdkParamVersion.Value!= 0) {\n        output.WriteRawTag(72);\n        output.WriteSInt32(SdkParamVersion.Value);\n      }\n      if (GameClientInfo!= null &&GameClientInfo.CalculateSize()!= 0) {\n        output.WriteRawTag(82);\n        output.WriteMessage(GameClientInfo);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (GameType.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);\n      }\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token.Value);\n      }\n      if (BindType.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BindType.Value);\n      }\n      if (!string.IsNullOrEmpty(FullChannel.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullChannel.Value);\n      }\n      size += ChannelArgs.CalculateSize(_map_channelArgs_codec);\n      if (!string.IsNullOrEmpty(SdkChannel.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkChannel.Value);\n      }\n      if (SdkVersion.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SdkVersion.Value);\n      }\n      if (SdkParamVersion.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SdkParamVersion.Value);\n      }\n      if (GameClientInfo!= null &&GameClientInfo.CalculateSize()!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameClientInfo);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            GameType.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            AccountId.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            Token.Value = input.ReadString();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            BindType.Value = input.ReadSInt32();\n            break;\n          }\n          case 42: {\n            flag |= 1 << 5;\n            FullChannel.Value = input.ReadString();\n            break;\n          }\n          case 50: {\n            flag |= 1 << 6;\n            ChannelArgs.Clear();\n            ChannelArgs.AddEntriesFrom(input, _map_channelArgs_codec);\n            break;\n          }\n          case 58: {\n            flag |= 1 << 7;\n            SdkChannel.Value = input.ReadString();\n            break;\n          }\n          case 64: {\n            flag |= 1 << 8;\n            SdkVersion.Value = input.ReadSInt32();\n            break;\n          }\n          case 72: {\n            flag |= 1 << 9;\n            SdkParamVersion.Value = input.ReadSInt32();\n            break;\n          }\n          case 82: {\n            flag |= 1 << 10;\n            if (GameClientInfo == null) {\n              GameClientInfo = new global::PlatformHotfix.GameClientInfo();\n            }\n            input.ReadMessage(GameClientInfo);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        GameType.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        AccountId.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Token.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        BindType.Value = 0;\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        FullChannel.Value = \"\";\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        ChannelArgs.Clear();\n      }\n      if((flag & 1 << 7) == 0)\n      {\n        SdkChannel.Value = \"\";\n      }\n      if((flag & 1 << 8) == 0)\n      {\n        SdkVersion.Value = 0;\n      }\n      if((flag & 1 << 9) == 0)\n      {\n        SdkParamVersion.Value = 0;\n      }\n      if((flag & 1 << 10) == 0)\n      {\n        if (GameClientInfo!= null)GameClientInfo.ResetDefaults();\n      }\n    }\n\n    public void MergeFrom(BindChannelAccountReq from) {\n      GameType.Value = from.GameType.Value;\n      AccountId.Value = from.AccountId.Value;\n      Token.Value = from.Token.Value;\n      BindType.Value = from.BindType.Value;\n      FullChannel.Value = from.FullChannel.Value;\n      SdkChannel.Value = from.SdkChannel.Value;\n      SdkVersion.Value = from.SdkVersion.Value;\n      SdkParamVersion.Value = from.SdkParamVersion.Value;\n      GameClientInfo.MergeFrom(from.GameClientInfo);\n    }\n\n    public override void ResetDefaults() {\n      GameType.Value = 0;\n      AccountId.Value = \"\";\n      Token.Value = \"\";\n      BindType.Value = 0;\n      FullChannel.Value = \"\";\n      ChannelArgs.Clear();\n      SdkChannel.Value = \"\";\n      SdkVersion.Value = 0;\n      SdkParamVersion.Value = 0;\n      if (GameClientInfo!= null)GameClientInfo.ResetDefaults();\n    }\n\n    public override void Bind(){\n      GameType = new PropertyValue<int>(this,\"GameType\");\n      AccountId = new PropertyValue<string>(this,\"AccountId\");\n      Token = new PropertyValue<string>(this,\"Token\");\n      BindType = new PropertyValue<int>(this,\"BindType\");\n      FullChannel = new PropertyValue<string>(this,\"FullChannel\");\n      ChannelArgs = new MapCollection<string, string>(this,\"ChannelArgs\");\n      SdkChannel = new PropertyValue<string>(this,\"SdkChannel\");\n      SdkVersion = new PropertyValue<int>(this,\"SdkVersion\");\n      SdkParamVersion = new PropertyValue<int>(this,\"SdkParamVersion\");\n      this.AddBinding(GameClientInfo?? (GameClientInfo = new global::PlatformHotfix.GameClientInfo())); \n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(GameType)); \n      list.Add(new ViewModelPropertyInfo(AccountId)); \n      list.Add(new ViewModelPropertyInfo(Token)); \n      list.Add(new ViewModelPropertyInfo(BindType)); \n      list.Add(new ViewModelPropertyInfo(FullChannel)); \n      list.Add(new ViewModelPropertyInfo(ChannelArgs)); \n      list.Add(new ViewModelPropertyInfo(SdkChannel)); \n      list.Add(new ViewModelPropertyInfo(SdkVersion)); \n      list.Add(new ViewModelPropertyInfo(SdkParamVersion)); \n      list.Add(new ViewModelPropertyInfo(GameClientInfo)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      // stringBuilder.Append(\"GameType:\").Append(GameType.Value);\n      // stringBuilder.Append(\", AccountId:\").Append(AccountId.Value);\n      // stringBuilder.Append(\", Token:\").Append(Token.Value);\n      // stringBuilder.Append(\", BindType:\").Append(BindType.Value);\n      // stringBuilder.Append(\", FullChannel:\").Append(FullChannel.Value);\n      // stringBuilder.Append(\"\ufffd\ufffdModelCollection_ChannelArgs:{\");for (int i = 0; i < ChannelArgs.Count; i++) {stringBuilder.Append(\"{\");\n      //  stringBuilder.Append(ChannelArgs[i].ToString());stringBuilder.Append(\"}\"); if(i>0) stringBuilder.Append(\",\");\n      // }stringBuilder.Append(\"}\");\n      // stringBuilder.Append(\", SdkChannel:\").Append(SdkChannel.Value);\n      // stringBuilder.Append(\", SdkVersion:\").Append(SdkVersion.Value);\n      // stringBuilder.Append(\", SdkParamVersion:\").Append(SdkParamVersion.Value);\n      // stringBuilder.Append(\", GameClientInfo:\"+GameClientInfo.ToString());\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "starcoder_inputs": "<fim_prefix>// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: user.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class GameClientInfo : ViewModel {\n    public static readonly pb::MessageParser<GameClientInfo> Parser = new pb::MessageParser<GameClientInfo>(() => (GameClientInfo)MessagePool.Instance.Fetch(typeof(GameClientInfo)));\n    /// <summary>\n    ///\u6e38\u620f\u5927\u533a\n    /// </summary>\n    public PropertyValue<string> Channel;\n    /// <summary>\n    ///\u6e38\u620f\u5ba2\u6237\u7aef\u6e20\u9053\u6807\u8bc6\n    /// </summary>\n    public PropertyValue<string> ChannelInfo;\n    /// <summary>\n    ///\u6e38\u620f\u5ba2\u6237\u7aef\u7248\u672c\n    /// </summary>\n    public PropertyValue<string> ClientVersion;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(Channel.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(Channel.Value);\n      }\n      if (!string.IsNullOrEmpty(ChannelInfo.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(ChannelInfo.Value);\n      }\n      if (!string.IsNullOrEmpty(ClientVersion.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(ClientVersion.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(Channel.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel.Value);\n      }\n      if (!string.IsNullOrEmpty(ChannelInfo.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelInfo.Value);\n      }\n      if (!string.IsNullOrEmpty(ClientVersion.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            flag |= 1 << 1;\n            Channel.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            ChannelInfo.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            ClientVersion.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Channel.Value = \"\";\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        ChannelInfo.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        ClientVersion.Value = \"\";\n      }\n    }\n\n    public void MergeFrom(GameClientInfo from) {\n      Channel.Value = from.Channel.Value;\n      ChannelInfo.Value = from.ChannelInfo.Value;\n      ClientVersion.Value = from.ClientVersion.Value;\n    }\n\n    public override void ResetDefaults() {\n      Channel.Value = \"\";\n      ChannelInfo.Value = \"\";\n      ClientVersion.Value = \"\";\n    }\n\n    public override void Bind(){\n      Channel = new PropertyValue<string>(this,\"Channel\");\n      ChannelInfo = new PropertyValue<string>(this,\"ChannelInfo\");\n      ClientVersion = new PropertyValue<string>(this,\"ClientVersion\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Channel)); \n      list.Add(new ViewModelPropertyInfo(ChannelInfo)); \n      list.Add(new ViewModelPropertyInfo(ClientVersion)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Channel:\").Append(Channel.Value);\n      stringBuilder.Append(\", ChannelInfo:\").Append(ChannelInfo.Value);\n      stringBuilder.Append(\", ClientVersion:\").Append(ClientVersion.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  /// <summary>\n  ///\u7ed1\u5b9a\u6e38\u5ba2/\u5e73\u53f0\u8d26\u53f7\n  /// </summary>\n  public partial class BindChannelAccountReq : ViewModel {\n    public static readonly pb::MessageParser<BindChannelAccountReq> Parser = new pb::MessageParser<BindChannelAccountReq>(() => (BindChannelAccountReq)MessagePool.Instance.Fetch(typeof(BindChannelAccountReq)));\n    /// <summary>\n    /// \u6e38\u620f\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> GameType;\n    /// <summary>\n    ///accountId\n    /// </summary>\n    public PropertyValue<string> AccountId;\n    /// <summary>\n    ///token\n    /// </summary>\n    public PropertyValue<string> Token;\n    /// <summary>\n    ///1 \u7ed1\u5b9a\u6e38\u5ba2\u8d26\u53f7  2 \u7ed1\u5b9a\u5e73\u53f0\u8d26\u53f7\n    /// </summary>\n    public PropertyValue<int> BindType;\n    /// <summary>\n    ///\u6e20\u9053\u767b\u5f55\u6620\u5c04\u6807\u8bc6\n    /// </summary>\n    public PropertyValue<string> FullChannel;\n    private static readonly Map<fim_suffix>string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);\n    /// <summary>\n    ///\u6e20\u9053\u53c2\u6570(\u900f\u4f20)\n    /// </summary>\n    public MapCollection<string, string> ChannelArgs;\n    /// <summary>\n    ///sdk\u6e20\u9053\n    /// </summary>\n    public PropertyValue<string> SdkChannel;\n    /// <summary>\n    ///SDK\u7248\u672c\n    /// </summary>\n    public PropertyValue<int> SdkVersion;\n    /// <summary>\n    ///SDK\u53c2\u6570\u7248\u672c\n    /// </summary>\n    public PropertyValue<int> SdkParamVersion;\n    /// <summary>\n    ///\u6e38\u620f\u5ba2\u6237\u7aef\u4fe1\u606f\n    /// </summary>\n    public global::PlatformHotfix.GameClientInfo GameClientInfo;\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (GameType.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(GameType.Value);\n      }\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(Token.Value);\n      }\n      if (BindType.Value!= 0) {\n        output.WriteRawTag(32);\n        output.WriteSInt32(BindType.Value);\n      }\n      if (!string.IsNullOrEmpty(FullChannel.Value)) {\n        output.WriteRawTag(42);\n        output.WriteString(FullChannel.Value);\n      }\n      ChannelArgs.WriteTo(output, _map_channelArgs_codec);\n      if (!string.IsNullOrEmpty(SdkChannel.Value)) {\n        output.WriteRawTag(58);\n        output.WriteString(SdkChannel.Value);\n      }\n      if (SdkVersion.Value!= 0) {\n        output.WriteRawTag(64);\n        output.WriteSInt32(SdkVersion.Value);\n      }\n      if (SdkParamVersion.Value!= 0) {\n        output.WriteRawTag(72);\n        output.WriteSInt32(SdkParamVersion.Value);\n      }\n      if (GameClientInfo!= null &&GameClientInfo.CalculateSize()!= 0) {\n        output.WriteRawTag(82);\n        output.WriteMessage(GameClientInfo);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (GameType.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);\n      }\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token.Value);\n      }\n      if (BindType.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BindType.Value);\n      }\n      if (!string.IsNullOrEmpty(FullChannel.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullChannel.Value);\n      }\n      size += ChannelArgs.CalculateSize(_map_channelArgs_codec);\n      if (!string.IsNullOrEmpty(SdkChannel.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkChannel.Value);\n      }\n      if (SdkVersion.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SdkVersion.Value);\n      }\n      if (SdkParamVersion.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SdkParamVersion.Value);\n      }\n      if (GameClientInfo!= null &&GameClientInfo.CalculateSize()!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameClientInfo);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            GameType.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            AccountId.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            Token.Value = input.ReadString();\n            break;\n          }\n          case 32: {\n            flag |= 1 << 4;\n            BindType.Value = input.ReadSInt32();\n            break;\n          }\n          case 42: {\n            flag |= 1 << 5;\n            FullChannel.Value = input.ReadString();\n            break;\n          }\n          case 50: {\n            flag |= 1 << 6;\n            ChannelArgs.Clear();\n            ChannelArgs.AddEntriesFrom(input, _map_channelArgs_codec);\n            break;\n          }\n          case 58: {\n            flag |= 1 << 7;\n            SdkChannel.Value = input.ReadString();\n            break;\n          }\n          case 64: {\n            flag |= 1 << 8;\n            SdkVersion.Value = input.ReadSInt32();\n            break;\n          }\n          case 72: {\n            flag |= 1 << 9;\n            SdkParamVersion.Value = input.ReadSInt32();\n            break;\n          }\n          case 82: {\n            flag |= 1 << 10;\n            if (GameClientInfo == null) {\n              GameClientInfo = new global::PlatformHotfix.GameClientInfo();\n            }\n            input.ReadMessage(GameClientInfo);\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        GameType.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        AccountId.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Token.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        BindType.Value = 0;\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        FullChannel.Value = \"\";\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        ChannelArgs.Clear();\n      }\n      if((flag & 1 << 7) == 0)\n      {\n        SdkChannel.Value = \"\";\n      }\n      if((flag & 1 << 8) == 0)\n      {\n        SdkVersion.Value = 0;\n      }\n      if((flag & 1 << 9) == 0)\n      {\n        SdkParamVersion.Value = 0;\n      }\n      if((flag & 1 << 10) == 0)\n      {\n        if (GameClientInfo!= null)GameClientInfo.ResetDefaults();\n      }\n    }\n\n    public void MergeFrom(BindChannelAccountReq from) {\n      GameType.Value = from.GameType.Value;\n      AccountId.Value = from.AccountId.Value;\n      Token.Value = from.Token.Value;\n      BindType.Value = from.BindType.Value;\n      FullChannel.Value = from.FullChannel.Value;\n      SdkChannel.Value = from.SdkChannel.Value;\n      SdkVersion.Value = from.SdkVersion.Value;\n      SdkParamVersion.Value = from.SdkParamVersion.Value;\n      GameClientInfo.MergeFrom(from.GameClientInfo);\n    }\n\n    public override void ResetDefaults() {\n      GameType.Value = 0;\n      AccountId.Value = \"\";\n      Token.Value = \"\";\n      BindType.Value = 0;\n      FullChannel.Value = \"\";\n      ChannelArgs.Clear();\n      SdkChannel.Value = \"\";\n      SdkVersion.Value = 0;\n      SdkParamVersion.Value = 0;\n      if (GameClientInfo!= null)GameClientInfo.ResetDefaults();\n    }\n\n    public override void Bind(){\n      GameType = new PropertyValue<int>(this,\"GameType\");\n      AccountId = new PropertyValue<string>(this,\"AccountId\");\n      Token = new PropertyValue<string>(this,\"Token\");\n      BindType = new PropertyValue<int>(this,\"BindType\");\n      FullChannel = new PropertyValue<string>(this,\"FullChannel\");\n      ChannelArgs = new MapCollection<string, string>(this,\"ChannelArgs\");\n      SdkChannel = new PropertyValue<string>(this,\"SdkChannel\");\n      SdkVersion = new PropertyValue<int>(this,\"SdkVersion\");\n      SdkParamVersion = new PropertyValue<int>(this,\"SdkParamVersion\");\n      this.AddBinding(GameClientInfo?? (GameClientInfo = new global::PlatformHotfix.GameClientInfo())); \n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(GameType)); \n      list.Add(new ViewModelPropertyInfo(AccountId)); \n      list.Add(new ViewModelPropertyInfo(Token)); \n      list.Add(new ViewModelPropertyInfo(BindType)); \n      list.Add(new ViewModelPropertyInfo(FullChannel)); \n      list.Add(new ViewModelPropertyInfo(ChannelArgs)); \n      list.Add(new ViewModelPropertyInfo(SdkChannel)); \n      list.Add(new ViewModelPropertyInfo(SdkVersion)); \n      list.Add(new ViewModelPropertyInfo(SdkParamVersion)); \n      list.Add(new ViewModelPropertyInfo(GameClientInfo)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      // stringBuilder.Append(\"GameType:\").Append(GameType.Value);\n      // stringBuilder.Append(\", AccountId:\").Append(AccountId.Value);\n      // stringBuilder.Append(\", Token:\").Append(Token.Value);\n      // stringBuilder.Append(\", BindType:\").Append(BindType.Value);\n      // stringBuilder.Append(\", FullChannel:\").Append(FullChannel.Value);\n      // stringBuilder.Append(\"\ufffd\ufffdModelCollection_ChannelArgs:{\");for (int i = 0; i < ChannelArgs.Count; i++) {stringBuilder.Append(\"{\");\n      //  stringBuilder.Append(ChannelArgs[i].ToString());stringBuilder.Append(\"}\"); if(i>0) stringBuilder.Append(\",\");\n      // }stringBuilder.Append(\"}\");\n      // stringBuilder.Append(\", SdkChannel:\").Append(SdkChannel.Value);\n      // stringBuilder.Append(\", SdkVersion:\").Append(SdkVersion.Value);\n      // stringBuilder.Append(\", SdkParamVersion:\").Append(SdkParamVersion.Value);\n      // stringBuilder.Append(\", GameClientInfo:\"+GameClientInfo.ToString());\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n<fim_middle>"}
{"inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: communtity.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class checkNoticeReq : ViewModel {\n    public static readonly pb::MessageParser<checkNoticeReq> Parser = new pb::MessageParser<checkNoticeReq>(() => (checkNoticeReq)MessagePool.Instance.Fetch(typeof(checkNoticeReq)));\n    /// <summary>\n    ///account\n    /// </summary>\n    public PropertyValue<string> AccountId;\n    /// <summary>\n    ///token\n    /// </summary>\n    public PropertyValue<string> Token;\n    /// <summary>\n    ///\u670d\u52a1\u5668\n    /// </summary>\n    public PropertyValue<string> ServerId;\n    /// <summary>\n    ///\u89d2\u8272\n    /// </summary>\n    public PropertyValue<string> RoleId;\n    /// <summary>\n    ///\u6e38\u620f\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> GameType;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(ServerId.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(ServerId.Value);\n      }\n      if (!string.IsNullOrEmpty(RoleId.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(RoleId.Value);\n      }\n      if (GameType.Value != 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(GameType.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(ServerId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId.Value);\n      }\n      if (!string.IsNullOrEmpty(RoleId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleId.Value);\n      }\n      if (GameType.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            flag |= 1 << 1;\n            AccountId.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Token.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            ServerId.Value = input.ReadString();\n            break;\n          }\n          case 34: {\n            flag |= 1 << 4;\n            RoleId.Value = input.ReadString();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            GameType.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        AccountId.Value = \"\";\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Token.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        ServerId.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        RoleId.Value = \"\";\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        GameType.Value = 0;\n      }\n    }\n\n    public void MergeFrom(checkNoticeReq from) {\n      AccountId.Value = from.AccountId.Value;\n      Token.Value = from.Token.Value;\n      ServerId.Value = from.ServerId.Value;\n      RoleId.Value = from.RoleId.Value;\n      GameType.Value = from.GameType.Value;\n    }\n\n    public override void ResetDefaults() {\n      AccountId.Value = \"\";\n      Token.Value = \"\";\n      ServerId.Value = \"\";\n      RoleId.Value = \"\";\n      GameType.Value = 0;\n    }\n\n    public override void Bind(){\n      AccountId = new PropertyValue<string>(this,\"AccountId\");\n      Token = new PropertyValue<string>(this,\"Token\");\n      ServerId = new PropertyValue<string>(this,\"ServerId\");\n      RoleId = new PropertyValue<string>(this,\"RoleId\");\n      GameType = new PropertyValue<int>(this,\"GameType\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(AccountId)); \n      list.Add(new ViewModelPropertyInfo(Token)); \n      list.Add(new ViewModelPropertyInfo(ServerId)); \n      list.Add(new ViewModelPropertyInfo(RoleId)); \n      list.Add(new ViewModelPropertyInfo(GameType)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"AccountId:\").Append(AccountId.Value);\n      stringBuilder.Append(\", Token:\").Append(Token.Value);\n      stringBuilder.Append(\", ServerId:\").Append(ServerId.Value);\n      stringBuilder.Append(\", RoleId:\").Append(RoleId.Value);\n      stringBuilder.Append(\", GameType:\").Append(GameType.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class checkNoticeRes : ViewModel {\n    public static readonly pb::MessageParser<checkNoticeRes> Parser = new pb::MessageParser<checkNoticeRes>(() => (checkNoticeRes)MessagePool.Instance.Fetch(typeof(checkNoticeRes)));\n    /// <summary>\n    ///\u54cd\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///1.\u5c55\u793a\u7ea2\u70b9 2.\u4e0d\u5c55\u793a\n    /// </summary>\n    public PropertyValue<int> Notice;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (Notice.Value != 0) {\n        output.WriteRawTag(16);\n        output.WriteSInt32(Notice.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (Notice.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Notice.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            Notice.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Notice.Value = 0;\n      }\n    }\n\n    public void MergeFrom(checkNoticeRes from) {\n      Ret.Value = from.Ret.Value;\n      Notice.Value = from.Notice.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      Notice.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      Notice = new PropertyValue<int>(this,\"Notice\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(Notice)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", Notice:\").Append(Notice.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class PopupInfoReq : ViewModel {\n    public static readonly pb::MessageParser<PopupInfoReq> Parser = new pb::MessageParser<PopupInfoReq>(() => (PopupInfoReq)MessagePool.Instance.Fetch(typeof(PopupInfoReq)));\n    /// <summary>\n    ///account\n    /// </summary>\n    public PropertyValue<string> AccountId;\n    /// <summary>\n    ///token\n    /// </summary>\n    public PropertyValue<string> Token;\n    /// <summary>\n    ///\u670d\u52a1\u5668\n    /// </summary>\n    public PropertyValue<string> ServerId;\n    /// <summary>\n    ///\u89d2\u8272\n    /// </summary>\n    public PropertyValue<string> RoleId;\n    /// <summary>\n    ///\u6e38\u620f\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> GameType;\n    /// <summary>\n    ///\u8bed\u8a00\n    /// </summary>\n    public PropertyValue<string> Language;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(ServerId.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(ServerId.Value);\n      }\n      if (!string.IsNullOrEmpty(RoleId.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(RoleId.Value);\n      }\n      if (GameType.Value != 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(GameType.Value);\n      }\n      if (!string.IsNullOrEmpty(Language.Value)) {\n        output.WriteRawTag(50);\n        output.WriteString(Language.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(ServerId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId.Value);\n      }\n      if (!string.IsNullOrEmpty(RoleId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleId.Value);\n      }\n      if (GameType.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);\n      }\n      if (!string.IsNullOrEmpty(Language.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            flag |= 1 << 1;\n            AccountId.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Token.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            ServerId.Value = input.ReadString();\n            break;\n          }\n          case 34: {\n            flag |= 1 << 4;\n            RoleId.Value = input.ReadString();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            GameType.Value = input.ReadSInt32();\n            break;\n          }\n          case 50: {\n            flag |= 1 << 6;\n            Language.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        AccountId.Value = \"\";\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Token.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        ServerId.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        RoleId.Value = \"\";\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        GameType.Value = 0;\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        Language.Value = \"\";\n      }\n    }\n\n    public void MergeFrom(PopupInfoReq from) {\n      AccountId.Value = from.AccountId.Value;\n      Token.Value = from.Token.Value;\n      ServerId.Value = from.ServerId.Value;\n      RoleId.Value = from.RoleId.Value;\n      GameType.Value = from.GameType.Value;\n      Language.Value = from.Language.Value;\n    }\n\n    public override void ResetDefaults() {\n      AccountId.Value = \"\";\n      Token.Value = \"\";\n      ServerId.Value = \"\";\n      RoleId.Value = \"\";\n      GameType.Value = 0;\n      Language.Value = \"\";\n    }\n\n    public override void Bind(){\n      AccountId = new PropertyValue<string>(this,\"AccountId\");\n      Token = new PropertyValue<string>(this,\"Token\");\n      ServerId = new PropertyValue<string>(this,\"ServerId\");\n      RoleId = new PropertyValue<string>(this,\"RoleId\");\n      GameType = new PropertyValue<int>(this,\"GameType\");\n      Language = new PropertyValue<string>(this,\"Language\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(AccountId)); \n      list.Add(new ViewModelPropertyInfo(Token)); \n      list.Add(new ViewModelPropertyInfo(ServerId)); \n      list.Add(new ViewModelPropertyInfo(RoleId)); \n      list.Add(new ViewModelPropertyInfo(GameType)); \n      list.Add(new ViewModelPropertyInfo(Language)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"AccountId:\").Append(AccountId.Value);\n      stringBuilder.Append(\", Token:\").Append(Token.Value);\n      stringBuilder.Append(\", ServerId:\").Append(ServerId.Value);\n      stringBuilder.Append(\", RoleId:\").Append(RoleId.Value);\n      stringBuilder.Append(\", GameType:\").Append(GameType.Value);\n      stringBuilder.Append(\", Language:\").Append(Language.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class PopupInfoRes : ViewModel {\n    public static readonly pb::MessageParser<PopupInfoRes> Parser = new pb::MessageParser<PopupInfoRes>(() => (PopupInfoRes)MessagePool.Instance.Fetch(typeof(PopupInfoRes)));\n    /// <summary>\n    ///\u9519\u8bef\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///\u6807\u9898\n    /// </summary>\n    public PropertyValue<string> Title;\n    /// <summary>\n    ///\u5185\u5bb9\n    /// </summary>\n    public PropertyValue<string> Content;\n    /// <summary>\n    ///\u8df3\u8f6c\n    /// </summary>\n    public PropertyValue<string> Ref;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (!string.IsNullOrEmpty(Title.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Title.Value);\n      }\n      if (!string.IsNullOrEmpty(Content.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(Content.Value);\n      }\n      if (!string.IsNullOrEmpty(Ref.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(Ref.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (!string.IsNullOrEmpty(Title.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title.Value);\n      }\n      if (!string.IsNullOrEmpty(Content.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content.Value);\n      }\n      if (!string.IsNullOrEmpty(Ref.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ref.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Title.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            Content.Value = input.ReadString();\n            break;\n          }\n          case 34: {\n            flag |= 1 << 4;\n            Ref.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Title.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Content.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        Ref.Value = \"\";\n      }\n    }\n\n    public void MergeFrom(PopupInfoRes from) {\n      Ret.Value = from.Ret.Value;\n      Title.Value = from.Title.Value;\n      Content.Value = from.Content.Value;\n      Ref.Value = from.Ref.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      Title.Value = \"\";\n      Content.Value = \"\";\n      Ref.Value = \"\";\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      Title = new PropertyValue<string>(this,\"Title\");\n      Content = new PropertyValue<string>(this,\"Content\");\n      Ref = new PropertyValue<string>(this,\"Ref\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(Title)); \n      list.Add(new ViewModelPropertyInfo(Content)); \n      list.Add(new ViewModelPropertyInfo(Ref)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", Title:\").Append(Title.Value);\n      stringBuilder.Append(\", Content:\").Append(Content.Value);\n      stringBuilder.Append(\", Ref:\").Append(Ref.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "cropped_inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: communtity.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class checkNoticeReq : ViewModel {\n    public static readonly pb::MessageParser<checkNoticeReq> Parser = new pb::MessageParser<checkNoticeReq>(() => (checkNoticeReq)MessagePool.Instance.Fetch(typeof(checkNoticeReq)));\n    /// <summary>\n    ///account\n    /// </summary>\n    public PropertyValue<string> AccountId;\n    /// <summary>\n    ///token\n    /// </summary>\n    public PropertyValue<string> Token;\n    /// <summary>\n    ///\u670d\u52a1\u5668\n    /// </summary>\n    public PropertyValue<string> ServerId;\n    /// <summary>\n    ///\u89d2\u8272\n    /// </summary>\n    public PropertyValue<string> RoleId;\n    /// <summary>\n    ///\u6e38\u620f\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> GameType;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(ServerId.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(ServerId.Value);\n      }\n      if (!string.IsNullOrEmpty(RoleId.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(RoleId.Value);\n      }\n      if (GameType.Value!= 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(GameType.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(ServerId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId.Value);\n      }\n      if (!string.IsNullOrEmpty(RoleId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleId.Value);\n      }\n      if (GameType.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            flag |= 1 << 1;\n            AccountId.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Token.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            ServerId.Value = input.ReadString();\n            break;\n          }\n          case 34: {\n            flag |= 1 << 4;\n            RoleId.Value = input.ReadString();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            GameType.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        AccountId.Value = \"\";\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Token.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        ServerId.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        RoleId.Value = \"\";\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        GameType.Value = 0;\n      }\n    }\n\n    public void MergeFrom(checkNoticeReq from) {\n      AccountId.Value = from.AccountId.Value;\n      Token.Value = from.Token.Value;\n      ServerId.Value = from.ServerId.Value;\n      RoleId.Value = from.RoleId.Value;\n      GameType.Value = from.GameType.Value;\n    }\n\n    public override void ResetDefaults() {\n      AccountId.Value = \"\";\n      Token.Value = \"\";\n      ServerId.Value = \"\";\n      RoleId.Value = \"\";\n      GameType.Value = 0;\n    }\n\n    public override void Bind(){\n      AccountId = new PropertyValue<string>(this,\"AccountId\");\n      Token = new PropertyValue<string>(this,\"Token\");\n      ServerId = new PropertyValue<string>(this,\"ServerId\");\n      RoleId = new PropertyValue<string>(this,\"RoleId\");\n      GameType = new PropertyValue<int>(this,\"GameType\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(AccountId)); \n      list.Add(new ViewModelPropertyInfo(Token)); \n      list.Add(new ViewModelPropertyInfo(ServerId)); \n      list.Add(new ViewModelPropertyInfo(RoleId)); \n      list.Add(new ViewModelPropertyInfo(GameType)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"AccountId:\").Append(AccountId.Value);\n      stringBuilder.Append(\", Token:\").Append(Token.Value);\n      stringBuilder.Append(\", ServerId:\").Append(ServerId.Value);\n      stringBuilder.Append(\", RoleId:\").Append(RoleId.Value);\n      stringBuilder.Append(\", GameType:\").Append(GameType.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class checkNoticeRes : ViewModel {\n    public static readonly pb::MessageParser<checkNoticeRes> Parser = new pb::MessageParser<checkNoticeRes>(() => (checkNoticeRes)MessagePool.Instance.Fetch(typeof(checkNoticeRes)));\n    /// <summary>\n    ///\u54cd\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///1.\u5c55\u793a\u7ea2\u70b9 2.\u4e0d\u5c55\u793a\n    /// </summary>\n    public PropertyValue<int> Notice;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (Notice.Value!= 0) {\n        output.WriteRawTag(16); int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (Notice.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Notice.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            Notice.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Notice.Value = 0;\n      }\n    }\n\n    public void MergeFrom(checkNoticeRes from) {\n      Ret.Value = from.Ret.Value;\n      Notice.Value = from.Notice.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      Notice.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      Notice = new PropertyValue<int>(this,\"Notice\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(Notice)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", Notice:\").Append(Notice.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class PopupInfoReq : ViewModel {\n    public static readonly pb::MessageParser<PopupInfoReq> Parser = new pb::MessageParser<PopupInfoReq>(() => (PopupInfoReq)MessagePool.Instance.Fetch(typeof(PopupInfoReq)));\n    /// <summary>\n    ///account\n    /// </summary>\n    public PropertyValue<string> AccountId;\n    /// <summary>\n    ///token\n    /// </summary>\n    public PropertyValue<string> Token;\n    /// <summary>\n    ///\u670d\u52a1\u5668\n    /// </summary>\n    public PropertyValue<string> ServerId;\n    /// <summary>\n    ///\u89d2\u8272\n    /// </summary>\n    public PropertyValue<string> RoleId;\n    /// <summary>\n    ///\u6e38\u620f\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> GameType;\n    /// <summary>\n    ///\u8bed\u8a00\n    /// </summary>\n    public PropertyValue<string> Language;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(ServerId.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(ServerId.Value);\n      }\n      if (!string.IsNullOrEmpty(RoleId.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(RoleId.Value);\n      }\n      if (GameType.Value!= 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(GameType.Value);\n      }\n      if (!string.IsNullOrEmpty(Language.Value)) {\n        output.WriteRawTag(50);\n        output.WriteString(Language.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(ServerId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId.Value);\n      }\n      if (!string.IsNullOrEmpty(RoleId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleId.Value);\n      }\n      if (GameType.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);\n      }\n      if (!string.IsNullOrEmpty(Language.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            flag |= 1 << 1;\n            AccountId.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Token.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            ServerId.Value = input.ReadString();\n            break;\n          }\n          case 34: {\n            flag |= 1 << 4;\n            RoleId.Value = input.ReadString();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            GameType.Value = input.ReadSInt32();\n            break;\n          }\n          case 50: {\n            flag |= 1 << 6;\n            Language.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        AccountId.Value = \"\";\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Token.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        ServerId.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        RoleId.Value = \"\";\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        GameType.Value = 0;\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        Language.Value = \"\";\n      }\n    }\n\n    public void MergeFrom(PopupInfoReq from) {\n      AccountId.Value = from.AccountId.Value;\n      Token.Value = from.Token.Value;\n      ServerId.Value = from.ServerId.Value;\n      RoleId.Value = from.RoleId.Value;\n      GameType.Value = from.GameType.Value;\n      Language.Value = from.Language.Value;\n    }\n\n    public override void ResetDefaults() {\n      AccountId.Value = \"\";\n      Token.Value = \"\";\n      ServerId.Value = \"\";\n      RoleId.Value = \"\";\n      GameType.Value = 0;\n      Language.Value = \"\";\n    }\n\n    public override void Bind(){\n      AccountId = new PropertyValue<string>(this,\"AccountId\");\n      Token = new PropertyValue<string>(this,\"Token\");\n      ServerId = new PropertyValue<string>(this,\"ServerId\");\n      RoleId = new PropertyValue<string>(this,\"RoleId\");\n      GameType = new PropertyValue<int>(this,\"GameType\");\n      Language = new PropertyValue<string>(this,\"Language\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(AccountId)); \n      list.Add(new ViewModelPropertyInfo(Token)); \n      list.Add(new ViewModelPropertyInfo(ServerId)); \n      list.Add(new ViewModelPropertyInfo(RoleId)); \n      list.Add(new ViewModelPropertyInfo(GameType)); \n      list.Add(new ViewModelPropertyInfo(Language)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"AccountId:\").Append(AccountId.Value);\n      stringBuilder.Append(\", Token:\").Append(Token.Value);\n      stringBuilder.Append(\", ServerId:\").Append(ServerId.Value);\n      stringBuilder.Append(\", RoleId:\").Append(RoleId.Value);\n      stringBuilder.Append(\", GameType:\").Append(GameType.Value);\n      stringBuilder.Append(\", Language:\").Append(Language.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class PopupInfoRes : ViewModel {\n    public static readonly pb::MessageParser<PopupInfoRes> Parser = new pb::MessageParser<PopupInfoRes>(() => (PopupInfoRes)MessagePool.Instance.Fetch(typeof(PopupInfoRes)));\n    /// <summary>\n    ///\u9519\u8bef\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///\u6807\u9898\n    /// </summary>\n    public PropertyValue<string> Title;\n    /// <summary>\n    ///\u5185\u5bb9\n    /// </summary>\n    public PropertyValue<string> Content;\n    /// <summary>\n    ///\u8df3\u8f6c\n    /// </summary>\n    public PropertyValue<string> Ref;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (!string.IsNullOrEmpty(Title.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Title.Value);\n      }\n      if (!string.IsNullOrEmpty(Content.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(Content.Value);\n      }\n      if (!string.IsNullOrEmpty(Ref.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(Ref.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (!string.IsNullOrEmpty(Title.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title.Value);\n      }\n      if (!string.IsNullOrEmpty(Content.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content.Value);\n      }\n      if (!string.IsNullOrEmpty(Ref.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ref.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Title.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            Content.Value = input.ReadString();\n            break;\n          }\n          case 34: {\n            flag |= 1 << 4;\n            Ref.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Title.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Content.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        Ref.Value = \"\";\n      }\n    }\n\n    public void MergeFrom(PopupInfoRes from) {\n      Ret.Value = from.Ret.Value;\n      Title.Value = from.Title.Value;\n      Content.Value = from.Content.Value;\n      Ref.Value = from.Ref.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      Title.Value = \"\";\n      Content.Value = \"\";\n      Ref.Value = \"\";\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      Title = new PropertyValue<string>(this,\"Title\");\n      Content = new PropertyValue<string>(this,\"Content\");\n      Ref = new PropertyValue<string>(this,\"Ref\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(Title)); \n      list.Add(new ViewModelPropertyInfo(Content)); \n      list.Add(new ViewModelPropertyInfo(Ref)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", Title:\").Append(Title.Value);\n      stringBuilder.Append(\", Content:\").Append(Content.Value);\n      stringBuilder.Append(\", Ref:\").Append(Ref.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "starcoder_inputs": "<fim_prefix>// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: communtity.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class checkNoticeReq : ViewModel {\n    public static readonly pb::MessageParser<checkNoticeReq> Parser = new pb::MessageParser<checkNoticeReq>(() => (checkNoticeReq)MessagePool.Instance.Fetch(typeof(checkNoticeReq)));\n    /// <summary>\n    ///account\n    /// </summary>\n    public PropertyValue<string> AccountId;\n    /// <summary>\n    ///token\n    /// </summary>\n    public PropertyValue<string> Token;\n    /// <summary>\n    ///\u670d\u52a1\u5668\n    /// </summary>\n    public PropertyValue<string> ServerId;\n    /// <summary>\n    ///\u89d2\u8272\n    /// </summary>\n    public PropertyValue<string> RoleId;\n    /// <summary>\n    ///\u6e38\u620f\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> GameType;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(ServerId.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(ServerId.Value);\n      }\n      if (!string.IsNullOrEmpty(RoleId.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(RoleId.Value);\n      }\n      if (GameType.Value!= 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(GameType.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(ServerId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId.Value);\n      }\n      if (!string.IsNullOrEmpty(RoleId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleId.Value);\n      }\n      if (GameType.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            flag |= 1 << 1;\n            AccountId.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Token.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            ServerId.Value = input.ReadString();\n            break;\n          }\n          case 34: {\n            flag |= 1 << 4;\n            RoleId.Value = input.ReadString();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            GameType.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        AccountId.Value = \"\";\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Token.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        ServerId.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        RoleId.Value = \"\";\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        GameType.Value = 0;\n      }\n    }\n\n    public void MergeFrom(checkNoticeReq from) {\n      AccountId.Value = from.AccountId.Value;\n      Token.Value = from.Token.Value;\n      ServerId.Value = from.ServerId.Value;\n      RoleId.Value = from.RoleId.Value;\n      GameType.Value = from.GameType.Value;\n    }\n\n    public override void ResetDefaults() {\n      AccountId.Value = \"\";\n      Token.Value = \"\";\n      ServerId.Value = \"\";\n      RoleId.Value = \"\";\n      GameType.Value = 0;\n    }\n\n    public override void Bind(){\n      AccountId = new PropertyValue<string>(this,\"AccountId\");\n      Token = new PropertyValue<string>(this,\"Token\");\n      ServerId = new PropertyValue<string>(this,\"ServerId\");\n      RoleId = new PropertyValue<string>(this,\"RoleId\");\n      GameType = new PropertyValue<int>(this,\"GameType\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(AccountId)); \n      list.Add(new ViewModelPropertyInfo(Token)); \n      list.Add(new ViewModelPropertyInfo(ServerId)); \n      list.Add(new ViewModelPropertyInfo(RoleId)); \n      list.Add(new ViewModelPropertyInfo(GameType)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"AccountId:\").Append(AccountId.Value);\n      stringBuilder.Append(\", Token:\").Append(Token.Value);\n      stringBuilder.Append(\", ServerId:\").Append(ServerId.Value);\n      stringBuilder.Append(\", RoleId:\").Append(RoleId.Value);\n      stringBuilder.Append(\", GameType:\").Append(GameType.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class checkNoticeRes : ViewModel {\n    public static readonly pb::MessageParser<checkNoticeRes> Parser = new pb::MessageParser<checkNoticeRes>(() => (checkNoticeRes)MessagePool.Instance.Fetch(typeof(checkNoticeRes)));\n    /// <summary>\n    ///\u54cd\u5e94\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///1.\u5c55\u793a\u7ea2\u70b9 2.\u4e0d\u5c55\u793a\n    /// </summary>\n    public PropertyValue<int> Notice;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (Notice.Value!= 0) {\n        output.WriteRawTag(16);<fim_suffix> int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (Notice.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Notice.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 16: {\n            flag |= 1 << 2;\n            Notice.Value = input.ReadSInt32();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Notice.Value = 0;\n      }\n    }\n\n    public void MergeFrom(checkNoticeRes from) {\n      Ret.Value = from.Ret.Value;\n      Notice.Value = from.Notice.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      Notice.Value = 0;\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      Notice = new PropertyValue<int>(this,\"Notice\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(Notice)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", Notice:\").Append(Notice.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class PopupInfoReq : ViewModel {\n    public static readonly pb::MessageParser<PopupInfoReq> Parser = new pb::MessageParser<PopupInfoReq>(() => (PopupInfoReq)MessagePool.Instance.Fetch(typeof(PopupInfoReq)));\n    /// <summary>\n    ///account\n    /// </summary>\n    public PropertyValue<string> AccountId;\n    /// <summary>\n    ///token\n    /// </summary>\n    public PropertyValue<string> Token;\n    /// <summary>\n    ///\u670d\u52a1\u5668\n    /// </summary>\n    public PropertyValue<string> ServerId;\n    /// <summary>\n    ///\u89d2\u8272\n    /// </summary>\n    public PropertyValue<string> RoleId;\n    /// <summary>\n    ///\u6e38\u620f\u7c7b\u578b\n    /// </summary>\n    public PropertyValue<int> GameType;\n    /// <summary>\n    ///\u8bed\u8a00\n    /// </summary>\n    public PropertyValue<string> Language;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(ServerId.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(ServerId.Value);\n      }\n      if (!string.IsNullOrEmpty(RoleId.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(RoleId.Value);\n      }\n      if (GameType.Value!= 0) {\n        output.WriteRawTag(40);\n        output.WriteSInt32(GameType.Value);\n      }\n      if (!string.IsNullOrEmpty(Language.Value)) {\n        output.WriteRawTag(50);\n        output.WriteString(Language.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(AccountId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);\n      }\n      if (!string.IsNullOrEmpty(Token.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token.Value);\n      }\n      if (!string.IsNullOrEmpty(ServerId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId.Value);\n      }\n      if (!string.IsNullOrEmpty(RoleId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleId.Value);\n      }\n      if (GameType.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);\n      }\n      if (!string.IsNullOrEmpty(Language.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            flag |= 1 << 1;\n            AccountId.Value = input.ReadString();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Token.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            ServerId.Value = input.ReadString();\n            break;\n          }\n          case 34: {\n            flag |= 1 << 4;\n            RoleId.Value = input.ReadString();\n            break;\n          }\n          case 40: {\n            flag |= 1 << 5;\n            GameType.Value = input.ReadSInt32();\n            break;\n          }\n          case 50: {\n            flag |= 1 << 6;\n            Language.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        AccountId.Value = \"\";\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Token.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        ServerId.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        RoleId.Value = \"\";\n      }\n      if((flag & 1 << 5) == 0)\n      {\n        GameType.Value = 0;\n      }\n      if((flag & 1 << 6) == 0)\n      {\n        Language.Value = \"\";\n      }\n    }\n\n    public void MergeFrom(PopupInfoReq from) {\n      AccountId.Value = from.AccountId.Value;\n      Token.Value = from.Token.Value;\n      ServerId.Value = from.ServerId.Value;\n      RoleId.Value = from.RoleId.Value;\n      GameType.Value = from.GameType.Value;\n      Language.Value = from.Language.Value;\n    }\n\n    public override void ResetDefaults() {\n      AccountId.Value = \"\";\n      Token.Value = \"\";\n      ServerId.Value = \"\";\n      RoleId.Value = \"\";\n      GameType.Value = 0;\n      Language.Value = \"\";\n    }\n\n    public override void Bind(){\n      AccountId = new PropertyValue<string>(this,\"AccountId\");\n      Token = new PropertyValue<string>(this,\"Token\");\n      ServerId = new PropertyValue<string>(this,\"ServerId\");\n      RoleId = new PropertyValue<string>(this,\"RoleId\");\n      GameType = new PropertyValue<int>(this,\"GameType\");\n      Language = new PropertyValue<string>(this,\"Language\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(AccountId)); \n      list.Add(new ViewModelPropertyInfo(Token)); \n      list.Add(new ViewModelPropertyInfo(ServerId)); \n      list.Add(new ViewModelPropertyInfo(RoleId)); \n      list.Add(new ViewModelPropertyInfo(GameType)); \n      list.Add(new ViewModelPropertyInfo(Language)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"AccountId:\").Append(AccountId.Value);\n      stringBuilder.Append(\", Token:\").Append(Token.Value);\n      stringBuilder.Append(\", ServerId:\").Append(ServerId.Value);\n      stringBuilder.Append(\", RoleId:\").Append(RoleId.Value);\n      stringBuilder.Append(\", GameType:\").Append(GameType.Value);\n      stringBuilder.Append(\", Language:\").Append(Language.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class PopupInfoRes : ViewModel {\n    public static readonly pb::MessageParser<PopupInfoRes> Parser = new pb::MessageParser<PopupInfoRes>(() => (PopupInfoRes)MessagePool.Instance.Fetch(typeof(PopupInfoRes)));\n    /// <summary>\n    ///\u9519\u8bef\u7801\n    /// </summary>\n    public PropertyValue<int> Ret;\n    /// <summary>\n    ///\u6807\u9898\n    /// </summary>\n    public PropertyValue<string> Title;\n    /// <summary>\n    ///\u5185\u5bb9\n    /// </summary>\n    public PropertyValue<string> Content;\n    /// <summary>\n    ///\u8df3\u8f6c\n    /// </summary>\n    public PropertyValue<string> Ref;\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      if (!string.IsNullOrEmpty(Title.Value)) {\n        output.WriteRawTag(18);\n        output.WriteString(Title.Value);\n      }\n      if (!string.IsNullOrEmpty(Content.Value)) {\n        output.WriteRawTag(26);\n        output.WriteString(Content.Value);\n      }\n      if (!string.IsNullOrEmpty(Ref.Value)) {\n        output.WriteRawTag(34);\n        output.WriteString(Ref.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      if (!string.IsNullOrEmpty(Title.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title.Value);\n      }\n      if (!string.IsNullOrEmpty(Content.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content.Value);\n      }\n      if (!string.IsNullOrEmpty(Ref.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ref.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      int flag = 0;\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            flag |= 1 << 1;\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18: {\n            flag |= 1 << 2;\n            Title.Value = input.ReadString();\n            break;\n          }\n          case 26: {\n            flag |= 1 << 3;\n            Content.Value = input.ReadString();\n            break;\n          }\n          case 34: {\n            flag |= 1 << 4;\n            Ref.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n      if((flag & 1 << 1) == 0)\n      {\n        Ret.Value = 0;\n      }\n      if((flag & 1 << 2) == 0)\n      {\n        Title.Value = \"\";\n      }\n      if((flag & 1 << 3) == 0)\n      {\n        Content.Value = \"\";\n      }\n      if((flag & 1 << 4) == 0)\n      {\n        Ref.Value = \"\";\n      }\n    }\n\n    public void MergeFrom(PopupInfoRes from) {\n      Ret.Value = from.Ret.Value;\n      Title.Value = from.Title.Value;\n      Content.Value = from.Content.Value;\n      Ref.Value = from.Ref.Value;\n    }\n\n    public override void ResetDefaults() {\n      Ret.Value = 0;\n      Title.Value = \"\";\n      Content.Value = \"\";\n      Ref.Value = \"\";\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      Title = new PropertyValue<string>(this,\"Title\");\n      Content = new PropertyValue<string>(this,\"Content\");\n      Ref = new PropertyValue<string>(this,\"Ref\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(Title)); \n      list.Add(new ViewModelPropertyInfo(Content)); \n      list.Add(new ViewModelPropertyInfo(Ref)); \n      FillOtherProperties(list);\n    }\n\n    public override string ToString() {\n      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();\n      stringBuilder.Append(\"Ret:\").Append(Ret.Value);\n      stringBuilder.Append(\", Title:\").Append(Title.Value);\n      stringBuilder.Append(\", Content:\").Append(Content.Value);\n      stringBuilder.Append(\", Ref:\").Append(Ref.Value);\n      return stringBuilder.ToString();\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n<fim_middle>"}
{"inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: team_pool.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class PoolReq : ViewModel {\n    private static readonly pb::MessageParser<PoolReq> _parser = new pb::MessageParser<PoolReq>(() => (PoolReq)MessagePool.Instance.Fetch(typeof(PoolReq)));\n    public static pb::MessageParser<PoolReq> Parser { get { return _parser; } }\n\n    private PropertyValue<string> teamId_;\n    public PropertyValue<string> TeamId {\n      get { return teamId_; }\n      set {\n        teamId_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(TeamId.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            TeamId.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///team_id\n      teamId_.Value = \"\";\n    }\n\n    public override void Bind(){\n      TeamId = new PropertyValue<string>(this,\"TeamId\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TeamId)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class PoolRes : ViewModel {\n    private static readonly pb::MessageParser<PoolRes> _parser = new pb::MessageParser<PoolRes>(() => (PoolRes)MessagePool.Instance.Fetch(typeof(PoolRes)));\n    public static pb::MessageParser<PoolRes> Parser { get { return _parser; } }\n\n    private PropertyValue<int> ret_;\n    public PropertyValue<int> Ret {\n      get { return ret_; }\n      set {\n        ret_ = value;\n      }\n    }\n\n    private static readonly pb::FieldCodec<int> _repeated_playerId_codec\n        = pb::FieldCodec.ForSInt32(18);\n    private ModelCollection<int> playerId_;\n    public ModelCollection<int> PlayerId {\n      get { return playerId_; }\n      set { playerId_ = value; }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value != 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      playerId_.WriteTo(output, _repeated_playerId_codec);\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value != 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      size += playerId_.CalculateSize(_repeated_playerId_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag()) != 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18:\n          case 16: {\n            playerId_.AddEntriesFrom(input, _repeated_playerId_codec);\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///ret\n      ret_.Value = 0;\n      playerId_.Clear();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      PlayerId = new ModelCollection<int>(this,\"PlayerId\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(PlayerId)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "cropped_inputs": "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: team_pool.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class PoolReq : ViewModel {\n    private static readonly pb::MessageParser<PoolReq> _parser = new pb::MessageParser<PoolReq>(() => (PoolReq)MessagePool.Instance.Fetch(typeof(PoolReq)));\n    public static pb::MessageParser<PoolReq> Parser { get { return _parser; } }\n\n    private PropertyValue<string> teamId_;\n    public PropertyValue<string> TeamId {\n      get { return teamId_; }\n      set {\n        teamId_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(TeamId.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            TeamId.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///Id = new PropertyValue<string>(this,\"TeamId\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TeamId)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class PoolRes : ViewModel {\n    private static readonly pb::MessageParser<PoolRes> _parser = new pb::MessageParser<PoolRes>(() => (PoolRes)MessagePool.Instance.Fetch(typeof(PoolRes)));\n    public static pb::MessageParser<PoolRes> Parser { get { return _parser; } }\n\n    private PropertyValue<int> ret_;\n    public PropertyValue<int> Ret {\n      get { return ret_; }\n      set {\n        ret_ = value;\n      }\n    }\n\n    private static readonly pb::FieldCodec<int> _repeated_playerId_codec\n        = pb::FieldCodec.ForSInt32(18);\n    private ModelCollection<int> playerId_;\n    public ModelCollection<int> PlayerId {\n      get { return playerId_; }\n      set { playerId_ = value; }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      playerId_.WriteTo(output, _repeated_playerId_codec);\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      size += playerId_.CalculateSize(_repeated_playerId_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18:\n          case 16: {\n            playerId_.AddEntriesFrom(input, _repeated_playerId_codec);\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///ret\n      ret_.Value = 0;\n      playerId_.Clear();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      PlayerId = new ModelCollection<int>(this,\"PlayerId\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(PlayerId)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n", "starcoder_inputs": "<fim_prefix>// Generated by the protocol buffer compiler.  DO NOT EDIT!\n// source: team_pool.proto\n#pragma warning disable 1591, 0612, 3021\n#region Designer generated code\n\nusing pb = global::Google.Protobuf;\nusing pbc = global::Google.Protobuf.Collections;\nusing scg = global::System.Collections.Generic;\nnamespace PlatformHotfix {\n\n  #region Messages\n  public partial class PoolReq : ViewModel {\n    private static readonly pb::MessageParser<PoolReq> _parser = new pb::MessageParser<PoolReq>(() => (PoolReq)MessagePool.Instance.Fetch(typeof(PoolReq)));\n    public static pb::MessageParser<PoolReq> Parser { get { return _parser; } }\n\n    private PropertyValue<string> teamId_;\n    public PropertyValue<string> TeamId {\n      get { return teamId_; }\n      set {\n        teamId_ = value;\n      }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        output.WriteRawTag(10);\n        output.WriteString(TeamId.Value);\n      }\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (!string.IsNullOrEmpty(TeamId.Value)) {\n        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId.Value);\n      }\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 10: {\n            TeamId.Value = input.ReadString();\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///<fim_suffix>Id = new PropertyValue<string>(this,\"TeamId\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(TeamId)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  public partial class PoolRes : ViewModel {\n    private static readonly pb::MessageParser<PoolRes> _parser = new pb::MessageParser<PoolRes>(() => (PoolRes)MessagePool.Instance.Fetch(typeof(PoolRes)));\n    public static pb::MessageParser<PoolRes> Parser { get { return _parser; } }\n\n    private PropertyValue<int> ret_;\n    public PropertyValue<int> Ret {\n      get { return ret_; }\n      set {\n        ret_ = value;\n      }\n    }\n\n    private static readonly pb::FieldCodec<int> _repeated_playerId_codec\n        = pb::FieldCodec.ForSInt32(18);\n    private ModelCollection<int> playerId_;\n    public ModelCollection<int> PlayerId {\n      get { return playerId_; }\n      set { playerId_ = value; }\n    }\n\n    public override void WriteTo(pb::CodedOutputStream output) {\n      if (Ret.Value!= 0) {\n        output.WriteRawTag(8);\n        output.WriteSInt32(Ret.Value);\n      }\n      playerId_.WriteTo(output, _repeated_playerId_codec);\n    }\n\n    public override int CalculateSize() {\n      int size = 0;\n      if (Ret.Value!= 0) {\n        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);\n      }\n      size += playerId_.CalculateSize(_repeated_playerId_codec);\n      return size;\n    }\n\n    public override void MergeFrom(pb::CodedInputStream input) {\n      ResetDefaults();\n      uint tag;\n      while ((tag = input.ReadTag())!= 0) {\n        switch(tag) {\n          default:\n            input.SkipLastField();\n            break;\n          case 8: {\n            Ret.Value = input.ReadSInt32();\n            break;\n          }\n          case 18:\n          case 16: {\n            playerId_.AddEntriesFrom(input, _repeated_playerId_codec);\n            break;\n          }\n        }\n      }\n    }\n\n    public override void ResetDefaults() {\n      ///ret\n      ret_.Value = 0;\n      playerId_.Clear();\n    }\n\n    public override void Bind(){\n      Ret = new PropertyValue<int>(this,\"Ret\");\n      PlayerId = new ModelCollection<int>(this,\"PlayerId\");\n      BindOther();\n    }\n\n    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){\n      list.Add(new ViewModelPropertyInfo(Ret)); \n      list.Add(new ViewModelPropertyInfo(PlayerId)); \n      FillOtherProperties(list);\n    }\n\n    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)\n    {\n      FillOtherCommands(list); \n    }\n    partial void BindOther();\n    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);\n    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);\n  }\n\n  #endregion\n\n}\n\n#endregion Designer generated code\n<fim_middle>"}
{"inputs": "\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerPositonEnToCn \n{\n\t/// <summary>\n\t/// \u7403\u5458\u4f4d\u7f6e\u8f6c\u6362\n\t/// </summary>\n\t/// <param name=\"en\"></param>\n\t/// <returns></returns>\n\tpublic static string PlayerPositionEN2CN(string en)\n\t{\n\t\tstring positionEN = String.Empty;\n\t\tstring positionCN = String.Empty;\n\t\tswitch (en)\n\t\t{\n\t\t\tcase \"LCF\":\n\t\t\t\tpositionEN = \"CF\";\n\t\t\t\tpositionCN = \"\u4e2d\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"MCF\":\n\t\t\t\tpositionEN = \"CF\";\n\t\t\t\tpositionCN = \"\u4e2d\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RCF\":\n\t\t\t\tpositionEN = \"CF\";\n\t\t\t\tpositionCN = \"\u4e2d\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"CF\": // New\n\t\t\t\tpositionEN = \"CF\";\n\t\t\t\tpositionCN = \"\u4e2d\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LW\":\n\t\t\t\tpositionEN = \"LW\";\n\t\t\t\tpositionCN = \"\u5de6\u8fb9\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LAMF\":\n\t\t\t\tpositionEN = \"AMF\";\n\t\t\t\tpositionCN = \"\u524d\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"MAMF\":\n\t\t\t\tpositionEN = \"AMF\";\n\t\t\t\tpositionCN = \"\u524d\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"RAMF\":\n\t\t\t\tpositionEN = \"AMF\";\n\t\t\t\tpositionCN = \"\u524d\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"AMF\": // New\n\t\t\t\tpositionEN = \"AMF\";\n\t\t\t\tpositionCN = \"\u524d\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"RW\":\n\t\t\t\tpositionEN = \"RW\";\n\t\t\t\tpositionCN = \"\u53f3\u8fb9\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LMF\":\n\t\t\t\tpositionEN = \"LMF\";\n\t\t\t\tpositionCN = \"\u5de6\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LCMF\":\n\t\t\t\tpositionEN = \"CMF\";\n\t\t\t\tpositionCN = \"\u4e2d\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"MCMF\":\n\t\t\t\tpositionEN = \"CMF\";\n\t\t\t\tpositionCN = \"\u4e2d\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RCMF\":\n\t\t\t\tpositionEN = \"CMF\";\n\t\t\t\tpositionCN = \"\u4e2d\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"CMF\": // New\n\t\t\t\tpositionEN = \"CMF\";\n\t\t\t\tpositionCN = \"\u4e2d\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RMF\":\n\t\t\t\tpositionEN = \"RMF\";\n\t\t\t\tpositionCN = \"\u53f3\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LDMF\":\n\t\t\t\tpositionEN = \"DMF\";\n\t\t\t\tpositionCN = \"\u540e\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"MDMF\":\n\t\t\t\tpositionEN = \"DMF\";\n\t\t\t\tpositionCN = \"\u540e\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"RDMF\":\n\t\t\t\tpositionEN = \"DMF\";\n\t\t\t\tpositionCN = \"\u540e\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"DMF\": // New\n\t\t\t\tpositionEN = \"DMF\";\n\t\t\t\tpositionCN = \"\u540e\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"LB\":\n\t\t\t\tpositionEN = \"LB\";\n\t\t\t\tpositionCN = \"\u5de6\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LCB\":\n\t\t\t\tpositionEN = \"CB\";\n\t\t\t\tpositionCN = \"\u4e2d\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"MCB\":\n\t\t\t\tpositionEN = \"CB\";\n\t\t\t\tpositionCN = \"\u4e2d\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RCB\":\n\t\t\t\tpositionEN = \"CB\";\n\t\t\t\tpositionCN = \"\u4e2d\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"CB\": // New\n \t\t\t\tpositionEN = \"CB\";\n\t\t\t\tpositionCN = \"\u4e2d\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RB\":\n\t\t\t\tpositionEN = \"RB\";\n\t\t\t\tpositionCN = \"\u53f3\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"GK\":\n\t\t\t\tpositionEN = \"GK\";\n\t\t\t\tpositionCN = \"\u95e8\u5c06\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\treturn positionCN;\n\t}\n\t\n\tpublic enum SoccerPositionRoleTag\n\t{\n\t\tBENCH = 0,\n\t\tLCF = 2,\n\t\tMCF = 3,\n\t\tRCF = 4,\n\t\tLW = 6,\n\t\tLAMF = 7,\n\t\tMAMF = 8,\n\t\tRAMF = 9,\n\t\tRW = 10,\n\t\tLMF = 11,\n\t\tLCMF = 12,\n\t\tMCMF = 13,\n\t\tRCMF = 14,\n\t\tRMF = 15,\n\t\tLDMF = 17,\n\t\tMDMF = 18,\n\t\tRDMF = 19,\n\t\tLB = 21,\n\t\tLCB = 22,\n\t\tMCB = 23,\n\t\tRCB = 24,\n\t\tRB = 25,\n\t\tGK = 26,\n\t\tSENTOFF = 27,\n\t\tLWB = 28,\n\t\tRWM = 29,\n\t\tLWM = 30,\n\t\tRWB = 31,\n\t}\n}\n", "cropped_inputs": "\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerPositonEnToCn \n{\n\t/// <summary>\n\t/// \u7403\u5458\u4f4d\u7f6e\u8f6c\u6362\n\t/// </summary>\n\t/// <param name=\"en\"></param>\n\t/// <returns></returns>\n\tpublic static string PlayerPositionEN2CN(string en)\n\t{\n\t\tstring positionEN = String.Empty;\n\t\tstring positionCN = String.Empty;\n\t\tswitch (en)\n\t\t{\n\t\t\tcase \"LCF\":\n\t\t\t\tpositionEN = \"CF\";\n\t\t\t\tpositionCN = \"\u4e2d\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"MCF\":\n\t\t\t\tpositionEN = \"CF\";\n\t\t\t\tpositionCN = \"\u4e2d\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RCF\":\n\t\t\t\tpositionEN = \"CF\";\n\t\t\t\tpositionCN = \"\u4e2d\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"CF\": // New\n\t\t\t\tpositionEN = \"CF\";\n\t\t\t\tpositionCN = \"\u4e2d\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LW\":\n\t\t\t\tpositionEN = \"LW\";\n\t\t\t\tpositionCN = \"\u5de6\u8fb9\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LAMF\":\n\t\t\t\tpositionEN = \"AMF\";\n\t\t\t\tpositionCN = \"\u524d\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"MAMF\":\n\t\t\t\tpositionEN = \"AMF\";\n\t\t\t\tpositionCN = \"\u524d\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"RAMF\":\n\t\t\t\tpositionEN = \"AMF\";\n\t\t\t\tpositionCN = \"\u524d\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"AMF\": // New\n\t\t\t\tpositionEN = \"AMF\";\n\t\t\t\tpositionCN = \"\u524d\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"RW\":\n\t\t\t\tpositionEN = \"RW\";\n\t\t\t\tpositionCNpositionEN = \"LMF\";\n\t\t\t\tpositionCN = \"\u5de6\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LCMF\":\n\t\t\t\tpositionEN = \"CMF\";\n\t\t\t\tpositionCN = \"\u4e2d\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"MCMF\":\n\t\t\t\tpositionEN = \"CMF\";\n\t\t\t\tpositionCN = \"\u4e2d\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RCMF\":\n\t\t\t\tpositionEN = \"CMF\";\n\t\t\t\tpositionCN = \"\u4e2d\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"CMF\": // New\n\t\t\t\tpositionEN = \"CMF\";\n\t\t\t\tpositionCN = \"\u4e2d\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RMF\":\n\t\t\t\tpositionEN = \"RMF\";\n\t\t\t\tpositionCN = \"\u53f3\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LDMF\":\n\t\t\t\tpositionEN = \"DMF\";\n\t\t\t\tpositionCN = \"\u540e\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"MDMF\":\n\t\t\t\tpositionEN = \"DMF\";\n\t\t\t\tpositionCN = \"\u540e\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"RDMF\":\n\t\t\t\tpositionEN = \"DMF\";\n\t\t\t\tpositionCN = \"\u540e\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"DMF\": // New\n\t\t\t\tpositionEN = \"DMF\";\n\t\t\t\tpositionCN = \"\u540e\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"LB\":\n\t\t\t\tpositionEN = \"LB\";\n\t\t\t\tpositionCN = \"\u5de6\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LCB\":\n\t\t\t\tpositionEN = \"CB\";\n\t\t\t\tpositionCN = \"\u4e2d\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"MCB\":\n\t\t\t\tpositionEN = \"CB\";\n\t\t\t\tpositionCN = \"\u4e2d\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RCB\":\n\t\t\t\tpositionEN = \"CB\";\n\t\t\t\tpositionCN = \"\u4e2d\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"CB\": // New\n \t\t\t\tpositionEN = \"CB\";\n\t\t\t\tpositionCN = \"\u4e2d\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RB\":\n\t\t\t\tpositionEN = \"RB\";\n\t\t\t\tpositionCN = \"\u53f3\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"GK\":\n\t\t\t\tpositionEN = \"GK\";\n\t\t\t\tpositionCN = \"\u95e8\u5c06\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\treturn positionCN;\n\t}\n\t\n\tpublic enum SoccerPositionRoleTag\n\t{\n\t\tBENCH = 0,\n\t\tLCF = 2,\n\t\tMCF = 3,\n\t\tRCF = 4,\n\t\tLW = 6,\n\t\tLAMF = 7,\n\t\tMAMF = 8,\n\t\tRAMF = 9,\n\t\tRW = 10,\n\t\tLMF = 11,\n\t\tLCMF = 12,\n\t\tMCMF = 13,\n\t\tRCMF = 14,\n\t\tRMF = 15,\n\t\tLDMF = 17,\n\t\tMDMF = 18,\n\t\tRDMF = 19,\n\t\tLB = 21,\n\t\tLCB = 22,\n\t\tMCB = 23,\n\t\tRCB = 24,\n\t\tRB = 25,\n\t\tGK = 26,\n\t\tSENTOFF = 27,\n\t\tLWB = 28,\n\t\tRWM = 29,\n\t\tLWM = 30,\n\t\tRWB = 31,\n\t}\n}\n", "starcoder_inputs": "<fim_prefix>\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerPositonEnToCn \n{\n\t/// <summary>\n\t/// \u7403\u5458\u4f4d\u7f6e\u8f6c\u6362\n\t/// </summary>\n\t/// <param name=\"en\"></param>\n\t/// <returns></returns>\n\tpublic static string PlayerPositionEN2CN(string en)\n\t{\n\t\tstring positionEN = String.Empty;\n\t\tstring positionCN = String.Empty;\n\t\tswitch (en)\n\t\t{\n\t\t\tcase \"LCF\":\n\t\t\t\tpositionEN = \"CF\";\n\t\t\t\tpositionCN = \"\u4e2d\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"MCF\":\n\t\t\t\tpositionEN = \"CF\";\n\t\t\t\tpositionCN = \"\u4e2d\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RCF\":\n\t\t\t\tpositionEN = \"CF\";\n\t\t\t\tpositionCN = \"\u4e2d\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"CF\": // New\n\t\t\t\tpositionEN = \"CF\";\n\t\t\t\tpositionCN = \"\u4e2d\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LW\":\n\t\t\t\tpositionEN = \"LW\";\n\t\t\t\tpositionCN = \"\u5de6\u8fb9\u950b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LAMF\":\n\t\t\t\tpositionEN = \"AMF\";\n\t\t\t\tpositionCN = \"\u524d\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"MAMF\":\n\t\t\t\tpositionEN = \"AMF\";\n\t\t\t\tpositionCN = \"\u524d\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"RAMF\":\n\t\t\t\tpositionEN = \"AMF\";\n\t\t\t\tpositionCN = \"\u524d\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"AMF\": // New\n\t\t\t\tpositionEN = \"AMF\";\n\t\t\t\tpositionCN = \"\u524d\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"RW\":\n\t\t\t\tpositionEN = \"RW\";\n\t\t\t\tpositionCN<fim_suffix>positionEN = \"LMF\";\n\t\t\t\tpositionCN = \"\u5de6\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LCMF\":\n\t\t\t\tpositionEN = \"CMF\";\n\t\t\t\tpositionCN = \"\u4e2d\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"MCMF\":\n\t\t\t\tpositionEN = \"CMF\";\n\t\t\t\tpositionCN = \"\u4e2d\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RCMF\":\n\t\t\t\tpositionEN = \"CMF\";\n\t\t\t\tpositionCN = \"\u4e2d\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"CMF\": // New\n\t\t\t\tpositionEN = \"CMF\";\n\t\t\t\tpositionCN = \"\u4e2d\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RMF\":\n\t\t\t\tpositionEN = \"RMF\";\n\t\t\t\tpositionCN = \"\u53f3\u524d\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LDMF\":\n\t\t\t\tpositionEN = \"DMF\";\n\t\t\t\tpositionCN = \"\u540e\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"MDMF\":\n\t\t\t\tpositionEN = \"DMF\";\n\t\t\t\tpositionCN = \"\u540e\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"RDMF\":\n\t\t\t\tpositionEN = \"DMF\";\n\t\t\t\tpositionCN = \"\u540e\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"DMF\": // New\n\t\t\t\tpositionEN = \"DMF\";\n\t\t\t\tpositionCN = \"\u540e\u8170\";\n\t\t\t\tbreak;\n\t\t\tcase \"LB\":\n\t\t\t\tpositionEN = \"LB\";\n\t\t\t\tpositionCN = \"\u5de6\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"LCB\":\n\t\t\t\tpositionEN = \"CB\";\n\t\t\t\tpositionCN = \"\u4e2d\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"MCB\":\n\t\t\t\tpositionEN = \"CB\";\n\t\t\t\tpositionCN = \"\u4e2d\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RCB\":\n\t\t\t\tpositionEN = \"CB\";\n\t\t\t\tpositionCN = \"\u4e2d\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"CB\": // New\n \t\t\t\tpositionEN = \"CB\";\n\t\t\t\tpositionCN = \"\u4e2d\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"RB\":\n\t\t\t\tpositionEN = \"RB\";\n\t\t\t\tpositionCN = \"\u53f3\u540e\u536b\";\n\t\t\t\tbreak;\n\t\t\tcase \"GK\":\n\t\t\t\tpositionEN = \"GK\";\n\t\t\t\tpositionCN = \"\u95e8\u5c06\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\treturn positionCN;\n\t}\n\t\n\tpublic enum SoccerPositionRoleTag\n\t{\n\t\tBENCH = 0,\n\t\tLCF = 2,\n\t\tMCF = 3,\n\t\tRCF = 4,\n\t\tLW = 6,\n\t\tLAMF = 7,\n\t\tMAMF = 8,\n\t\tRAMF = 9,\n\t\tRW = 10,\n\t\tLMF = 11,\n\t\tLCMF = 12,\n\t\tMCMF = 13,\n\t\tRCMF = 14,\n\t\tRMF = 15,\n\t\tLDMF = 17,\n\t\tMDMF = 18,\n\t\tRDMF = 19,\n\t\tLB = 21,\n\t\tLCB = 22,\n\t\tMCB = 23,\n\t\tRCB = 24,\n\t\tRB = 25,\n\t\tGK = 26,\n\t\tSENTOFF = 27,\n\t\tLWB = 28,\n\t\tRWM = 29,\n\t\tLWM = 30,\n\t\tRWB = 31,\n\t}\n}\n<fim_middle>"}
{"inputs": "\ufeffusing Framework.GalaSports.MVC.Interfaces;\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\nnamespace PlatformHotfix\n{\n    public class TransformDataSource : LoopScrollDataSource\n    {\n        Action<Transform, int> provideAction;\n\n        public TransformDataSource(Action<Transform, int> updateAction)\n        {\n            this.provideAction = updateAction;\n        }\n\n\n        public override void ProvideData(Transform transform, int idx)\n        {\n            provideAction(transform, idx);\n        }\n\n        public override void Clear()\n        {\n\n        }\n    }\n\n\n    public class ScrollViewSource : LoopScrollDataSource\n    {\n        Action<View,int> provideAction;\n        Func<GameObject, View> func;\n        Dictionary<Transform, View> scrollDict = new Dictionary<Transform, View>();\n\n        public ScrollViewSource(Func<GameObject, View> createfunc, Action<View,int> updateAction)\n        {\n            this.func = createfunc;\n            this.provideAction = updateAction;\n        }\n\n        private View Create(GameObject gameObject)\n        {\n            return this.func?.Invoke(gameObject);\n        }\n\n        public override void ProvideData(Transform transform, int idx)\n        {\n            View view;\n            if (!scrollDict.TryGetValue(transform, out view))\n            {\n                view = Create(transform.gameObject);\n                scrollDict.Add(transform, view);\n            }\n\n            if (provideAction != null)\n            {\n                provideAction.Invoke(view, idx);\n            }\n        }\n\n        public override void Clear()\n        {\n            provideAction = null;\n            func = null;\n            scrollDict.Clear();\n        }\n    }\n\n\n    public class ScrollAnimationSource : ScrollDataSource\n    {\n        public bool Animation = true;\n        public bool IsShake = true;\n        public bool onlyFirstAnimation;\n        public GoEaseType easeType = GoEaseType.BackOut;\n        public float awaitTime = 0.1f;\n        public bool hasData;\n\n        public ScrollAnimationSource(Func<GameObject, View> createfunc, Func<int, IModel> updateAction, bool onlyFirstAnimation = false) : base(createfunc, updateAction)\n        {\n            Animation = true;\n            hasData = false;\n            this.onlyFirstAnimation = onlyFirstAnimation;\n        }\n\n        public override async void ProvideData(Transform transform, int idx)\n        {\n            base.ProvideData(transform, idx);\n            hasData = true;\n            if (Animation)\n            {\n                var group = transform.GetComponent<CanvasGroup>();\n                if (group == null)\n                {\n                    group = transform.gameObject.AddComponent<CanvasGroup>();\n                }\n                group.alpha = 0;\n                var animationChild = transform.GetChild(0);\n                if (IsShake)\n                {\n                    animationChild.LocalPositionY(-40);\n                }\n\n                //2\u5e27\u4e4b\u540e\u518d\u5904\u7406\u52a8\u753b\uff0c\u56e0\u4e3a\u6709\u4e2a\u6392\u5e8f\u7684\u8fc7\u7a0b \u6392\u5e8f\u662f\u518d\u4e0b\u4e00\u5e27\u8fdb\u884c\uff0c\u9700\u8981\u6392\u5e8f\u4e4b\u540e\u518d\u5904\u7406\u52a8\u753b\n                await GAsync.WaitNextFrame();\n                await GAsync.WaitNextFrame();\n                int siblingIndex = transform.GetSiblingIndex();\n                await GAsync.WaitSeconds(siblingIndex * awaitTime);\n\n                if (animationChild == null)\n                    return;\n\n\n                animationChild.localPositionTo(0.3f, Vector3.zero).easeType = easeType;\n                group.alpha = 1;\n            }\n        }\n\n        public override void ProvideEnd()\n        {\n            if (this.onlyFirstAnimation && hasData)\n                Animation = false;\n        }\n    }\n\n\n    public class ScrollDataSource : LoopScrollDataSource \n    {\n        Func<int, IModel> provideAction;\n        Func<int, View, IModel> provideAction2;\n        Func<GameObject, View> func;\n        Dictionary<Transform, View> scrollDict = new Dictionary<Transform, View>();\n\n        public ScrollDataSource(Func<GameObject, View> createfunc,Func<int, IModel> updateAction)\n        {\n            this.func = createfunc;\n            this.provideAction = updateAction;\n        }\n\n        public ScrollDataSource(Func<GameObject, View> createfunc, Func<int,View, IModel> updateAction)\n        {\n            this.func = createfunc;\n            this.provideAction2 = updateAction;\n        }\n\n        private View Create(GameObject gameObject)\n        {\n            return this.func?.Invoke(gameObject);\n        }\n\n        public override void ProvideData(Transform transform, int idx)\n        {\n            View view;\n            if (!scrollDict.TryGetValue(transform, out view))\n            {\n                view = Create(transform.gameObject);\n                scrollDict.Add(transform, view);\n            }\n\n            if (provideAction != null)\n                view.ViewModelHandleBase(provideAction.Invoke(idx));\n            if (this.provideAction2 != null)\n                view.ViewModelHandleBase(this.provideAction2.Invoke(idx,view));          \n        }\n\n        public override void Clear()\n        {\n            provideAction = null;\n            func = null;\n            scrollDict.Clear();\n        }\n    }\n}", "cropped_inputs": "\ufeffusing Framework.GalaSports.MVC.Interfaces;\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\nnamespace PlatformHotfix\n{\n    public class TransformDataSource : LoopScrollDataSource\n    {\n        Action<Transform, int> provideAction;\n\n        public TransformDataSource(Action<Transform, int> updateAction)\n        {\n            this.provideAction = updateAction;\n        }\n\n\n        public override void ProvideData(Transform transform, int idx)\n        {\n            provideAction(transform, idx);\n        }\n\n        public override void Clear()\n        {\n\n        }\n    }\n\n\n    public class ScrollViewSource : LoopScrollDataSource\n    {\n        Action<View,int> provideAction;\n        Func<GameObject, View> func;\n        Dictionary<Transform, View> scrollDict = new Dictionary<Transform, View>();\n\n        public ScrollViewSource(Func<GameObject, View> createfunc, Action<View,int> updateAction)\n        {\n            this.func = createfunc;\n            this.provideAction = updateAction;\n        }\n\n        private View Create(GameObject gameObject)\n        {\n            return this.func?.Invoke(gameObject);\n        }\n\n        public override void ProvideData(Transform transform, int idx)\n        {\n            View view;\n            if (!scrollDict.TryGetValue(transform, out view))\n            {\n                view = Create(transform.gameObject);\n                scrollDict.Add(transform, view);\n            }\n\n            if (provideAction!= null)\n            {\n                provideAction.Invoke(view, idx);\n            }\n        }\n\n        public override void Clear()\n        {\n            provideAction = null;\n            func = null;\n            scrollDict.Clear();\n        }\n    }\n\n\n    public class ScrollAnimationSource;\n        public bool onlyFirstAnimation;\n        public GoEaseType easeType = GoEaseType.BackOut;\n        public float awaitTime = 0.1f;\n        public bool hasData;\n\n        public ScrollAnimationSource(Func<GameObject, View> createfunc, Func<int, IModel> updateAction, bool onlyFirstAnimation = false) : base(createfunc, updateAction)\n        {\n            Animation = true;\n            hasData = false;\n            this.onlyFirstAnimation = onlyFirstAnimation;\n        }\n\n        public override async void ProvideData(Transform transform, int idx)\n        {\n            base.ProvideData(transform, idx);\n            hasData = true;\n            if (Animation)\n            {\n                var group = transform.GetComponent<CanvasGroup>();\n                if (group == null)\n                {\n                    group = transform.gameObject.AddComponent<CanvasGroup>();\n                }\n                group.alpha = 0;\n                var animationChild = transform.GetChild(0);\n                if (IsShake)\n                {\n                    animationChild.LocalPositionY(-40);\n                }\n\n                //2\u5e27\u4e4b\u540e\u518d\u5904\u7406\u52a8\u753b\uff0c\u56e0\u4e3a\u6709\u4e2a\u6392\u5e8f\u7684\u8fc7\u7a0b \u6392\u5e8f\u662f\u518d\u4e0b\u4e00\u5e27\u8fdb\u884c\uff0c\u9700\u8981\u6392\u5e8f\u4e4b\u540e\u518d\u5904\u7406\u52a8\u753b\n                await GAsync.WaitNextFrame();\n                await GAsync.WaitNextFrame();\n                int siblingIndex = transform.GetSiblingIndex();\n                await GAsync.WaitSeconds(siblingIndex * awaitTime);\n\n                if (animationChild == null)\n                    return;\n\n\n                animationChild.localPositionTo(0.3f, Vector3.zero).easeType = easeType;\n                group.alpha = 1;\n            }\n        }\n\n        public override void ProvideEnd()\n        {\n            if (this.onlyFirstAnimation && hasData)\n                Animation = false;\n        }\n    }\n\n\n    public class ScrollDataSource : LoopScrollDataSource \n    {\n        Func<int, IModel> provideAction;\n        Func<int, View, IModel> provideAction2;\n        Func<GameObject, View> func;\n        Dictionary<Transform, View> scrollDict = new Dictionary<Transform, View>();\n\n        public ScrollDataSource(Func<GameObject, View> createfunc,Func<int, IModel> updateAction)\n        {\n            this.func = createfunc;\n            this.provideAction = updateAction;\n        }\n\n        public ScrollDataSource(Func<GameObject, View> createfunc, Func<int,View, IModel> updateAction)\n        {\n            this.func = createfunc;\n            this.provideAction2 = updateAction;\n        }\n\n        private View Create(GameObject gameObject)\n        {\n            return this.func?.Invoke(gameObject);\n        }\n\n        public override void ProvideData(Transform transform, int idx)\n        {\n            View view;\n            if (!scrollDict.TryGetValue(transform, out view))\n            {\n                view = Create(transform.gameObject);\n                scrollDict.Add(transform, view);\n            }\n\n            if (provideAction!= null)\n                view.ViewModelHandleBase(provideAction.Invoke(idx));\n            if (this.provideAction2!= null)\n                view.ViewModelHandleBase(this.provideAction2.Invoke(idx,view));          \n        }\n\n        public override void Clear()\n        {\n            provideAction = null;\n            func = null;\n            scrollDict.Clear();\n        }\n    }\n}", "starcoder_inputs": "<fim_prefix>\ufeffusing Framework.GalaSports.MVC.Interfaces;\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\nnamespace PlatformHotfix\n{\n    public class TransformDataSource : LoopScrollDataSource\n    {\n        Action<Transform, int> provideAction;\n\n        public TransformDataSource(Action<Transform, int> updateAction)\n        {\n            this.provideAction = updateAction;\n        }\n\n\n        public override void ProvideData(Transform transform, int idx)\n        {\n            provideAction(transform, idx);\n        }\n\n        public override void Clear()\n        {\n\n        }\n    }\n\n\n    public class ScrollViewSource : LoopScrollDataSource\n    {\n        Action<View,int> provideAction;\n        Func<GameObject, View> func;\n        Dictionary<Transform, View> scrollDict = new Dictionary<Transform, View>();\n\n        public ScrollViewSource(Func<GameObject, View> createfunc, Action<View,int> updateAction)\n        {\n            this.func = createfunc;\n            this.provideAction = updateAction;\n        }\n\n        private View Create(GameObject gameObject)\n        {\n            return this.func?.Invoke(gameObject);\n        }\n\n        public override void ProvideData(Transform transform, int idx)\n        {\n            View view;\n            if (!scrollDict.TryGetValue(transform, out view))\n            {\n                view = Create(transform.gameObject);\n                scrollDict.Add(transform, view);\n            }\n\n            if (provideAction!= null)\n            {\n                provideAction.Invoke(view, idx);\n            }\n        }\n\n        public override void Clear()\n        {\n            provideAction = null;\n            func = null;\n            scrollDict.Clear();\n        }\n    }\n\n\n    public class ScrollAnimationSource<fim_suffix>;\n        public bool onlyFirstAnimation;\n        public GoEaseType easeType = GoEaseType.BackOut;\n        public float awaitTime = 0.1f;\n        public bool hasData;\n\n        public ScrollAnimationSource(Func<GameObject, View> createfunc, Func<int, IModel> updateAction, bool onlyFirstAnimation = false) : base(createfunc, updateAction)\n        {\n            Animation = true;\n            hasData = false;\n            this.onlyFirstAnimation = onlyFirstAnimation;\n        }\n\n        public override async void ProvideData(Transform transform, int idx)\n        {\n            base.ProvideData(transform, idx);\n            hasData = true;\n            if (Animation)\n            {\n                var group = transform.GetComponent<CanvasGroup>();\n                if (group == null)\n                {\n                    group = transform.gameObject.AddComponent<CanvasGroup>();\n                }\n                group.alpha = 0;\n                var animationChild = transform.GetChild(0);\n                if (IsShake)\n                {\n                    animationChild.LocalPositionY(-40);\n                }\n\n                //2\u5e27\u4e4b\u540e\u518d\u5904\u7406\u52a8\u753b\uff0c\u56e0\u4e3a\u6709\u4e2a\u6392\u5e8f\u7684\u8fc7\u7a0b \u6392\u5e8f\u662f\u518d\u4e0b\u4e00\u5e27\u8fdb\u884c\uff0c\u9700\u8981\u6392\u5e8f\u4e4b\u540e\u518d\u5904\u7406\u52a8\u753b\n                await GAsync.WaitNextFrame();\n                await GAsync.WaitNextFrame();\n                int siblingIndex = transform.GetSiblingIndex();\n                await GAsync.WaitSeconds(siblingIndex * awaitTime);\n\n                if (animationChild == null)\n                    return;\n\n\n                animationChild.localPositionTo(0.3f, Vector3.zero).easeType = easeType;\n                group.alpha = 1;\n            }\n        }\n\n        public override void ProvideEnd()\n        {\n            if (this.onlyFirstAnimation && hasData)\n                Animation = false;\n        }\n    }\n\n\n    public class ScrollDataSource : LoopScrollDataSource \n    {\n        Func<int, IModel> provideAction;\n        Func<int, View, IModel> provideAction2;\n        Func<GameObject, View> func;\n        Dictionary<Transform, View> scrollDict = new Dictionary<Transform, View>();\n\n        public ScrollDataSource(Func<GameObject, View> createfunc,Func<int, IModel> updateAction)\n        {\n            this.func = createfunc;\n            this.provideAction = updateAction;\n        }\n\n        public ScrollDataSource(Func<GameObject, View> createfunc, Func<int,View, IModel> updateAction)\n        {\n            this.func = createfunc;\n            this.provideAction2 = updateAction;\n        }\n\n        private View Create(GameObject gameObject)\n        {\n            return this.func?.Invoke(gameObject);\n        }\n\n        public override void ProvideData(Transform transform, int idx)\n        {\n            View view;\n            if (!scrollDict.TryGetValue(transform, out view))\n            {\n                view = Create(transform.gameObject);\n                scrollDict.Add(transform, view);\n            }\n\n            if (provideAction!= null)\n                view.ViewModelHandleBase(provideAction.Invoke(idx));\n            if (this.provideAction2!= null)\n                view.ViewModelHandleBase(this.provideAction2.Invoke(idx,view));          \n        }\n\n        public override void Clear()\n        {\n            provideAction = null;\n            func = null;\n            scrollDict.Clear();\n        }\n    }\n}<fim_middle>"}
{"inputs": "\ufeffusing Framework.GalaSports.Service;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n#if USE_RENDER_ASYNCLOAD\npublic class LoginScene3DPlayersController : RenderingBase\n{\n\n    public AudienceCamController audience;\n    public string[] playersHeadName;\n\n    public int[] playersBodyHeight;\n\n    public int[] playersABodyWeight;\n\n    public Material[] playersSkinMat;\n\n    public Material ClothMat;\n    public Material SocksMat;\n    public Material ShoesMat;\n\n    public Material[] playersPCSkinMat;\n    public Material PCClothMat;\n    public Material PCSocksMat;\n    public Material PCShoesMat;\n\n    public Transform[] Players;\n    public Animator ballAnimator;\n    public Animator cameraAnimator;\n\n    //\u961f\u5fbd\n    public Texture2D TeamLogoTex;\n\n    //\u5b88\u95e8\u5458\n    int GoalKeeperId = 1;\n    public Texture2D GoalKeeper_Jerseytex; //\u7403\u8863\n    public Texture2D GoalKeeper_Socktex; //\u889c\u5b50\n\n    public Camera camera;\n\n    public GalaShaderGlobalSetting galaShaderGlobalSetting;\n\n    public Light mainLight;\n\n    public MeshRenderer[] DofMeshRenderers;\n\n    List<RenderTexture> JerseyTexList = new List<RenderTexture>();\n\n    public float DOFDistance = 15f;\n\n    static string[] JerseyIds = new string[] {\n        \"7_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"31_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",//\u5b88\u95e8\u5458\u6570\u636e\u65e0\u6548\n        \n        \"3_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",\n        \"6_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"10_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"17_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",\n    };\n    static int[] ShoesId = new int[] {\n        1,2,6,1,3,4\n    };\n    static string[] PlayerAnimationNames = new string[] {\n        \"Login1A\",\n        \"Login1B\",\n        \"Login2A\",\n        \"Login2B\",\n        \"Login3A\",\n        \"Login3B\",\n    };\n    const string BallAnimationName = \"Football1\";\n    const string CameraAnimationName = \"LoginCamera\";\n\n    //public  GameObject DebutWarmUPController;\n    //GameObject debutWarmUpController;\n\n    LoginPlayersController loginPlayersController;\n\n    public override async void Init(GameObject go)\n    {\n        loginPlayersController = go.GetComponent<LoginPlayersController>();\n        if (loginPlayersController != null)\n        {\n            RenderingHelper.PublicFieldCopy<LoginPlayersController, LoginScene3DPlayersController>(loginPlayersController, this);\n            //loginPlayersController.onUpdate = Update;\n            loginPlayersController.onDestroy = OnDestroy;\n            loginPlayersController.onStart = Start;\n        }\n\n        Platform.EventDispatcher.AddEventListener<Camera, Material[], float, bool>(\"PlayerIncidentSoftShadowInit\", SoftShadowInit);\n        loginPlayersController.cameraTransform = camera.transform;\n        galaShaderGlobalSetting.UpdateSetting();\n\n        loginPlayersController.setting = camera.GetComponent<CameraRenderPassSetting>();\n        loginPlayersController.setting.DoFEnable = true;\n        loginPlayersController.setting.DoFBlurIteration = 2;\n        loginPlayersController.setting.DoFBlurIntensity = 1f;\n        loginPlayersController.setting.DoFBlurStart = 0.34f;\n        loginPlayersController.setting.DofBlurSoftness = 0.125f;\n        loginPlayersController.setting.HDRExposureKey = 0.2f;\n        loginPlayersController.setting.HDRMinLum = 0.08f;\n        loginPlayersController.setting.HDRMaxLum = 0.8f;\n\n        ResourceMgr.Instance.SetProvider(new CustomAddressableProvider());\n\n        PlayerJerseyGenerator.Instance.Initialize();\n    }\n\n    async void Start()\n    {\n        RenderingHelper.Instance.AddLoadingTime();\n        try\n        {\n            await StartAsync();\n        }\n        catch { }\n        RenderingHelper.Instance.RemoveLoadingTime();\n    }\n\n    private async GTask StartAsync()\n    {\n        cameraAnimator.enabled = false;\n        ballAnimator.enabled = false;\n\n        //\u8bbe\u7f6e\u72b6\u6001\n        for (int i = 0; i < Players.Length; i++)\n        {\n            loginPlayersController.playersAnimation[i] = Players[i].GetComponent<HighPolyPlayerAnimationController>();\n\n            loginPlayersController.playersAppearance[i] = Players[i].GetComponent<HighPolyPlayerAppearanceController>();\n            loginPlayersController.playerShoes[i] = Players[i].GetComponent<Playershoes>();\n            if (i == GoalKeeperId)\n            {\n                loginPlayersController.playersAppearance[i].IsKeeper = true;\n            }\n\n            loginPlayersController.playersAnimation[i].Hide(); //\u9690\u85cf\u907f\u514d\u52a0\u8f7d\u4e2d\u88ab\u770b\u5230\n        }\n\n        //\u52a0\u8f7d\u7403\u5458\u8d34\u56fe\n        for (int i = 0; i < Players.Length; i++)\n        {\n\n#if (UNITY_STANDALONE_OSX || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN) && (!UNITY_ANDROID) && (!UNITY_IOS)\n            //playersAppearance[i].SetPlayerMaterials(PCClothMat, playersPCSkinMat[i], PCSocksMat, PCShoesMat);\n             HighPolyPlayerAppearance_Hotfix.SetPlayerMaterials(loginPlayersController.playersAppearance[i],PCClothMat,playersPCSkinMat[i], PCSocksMat, PCShoesMat);\n#else\n            //playersAppearance[i].SetPlayerMaterials(ClothMat, playersSkinMat[i], SocksMat, ShoesMat);\n            loginPlayersController.playersAppearance[i].SetPlayerMaterials(ClothMat, playersSkinMat[i], SocksMat, ShoesMat);\n#endif\n\n            //playersAppearance[i].PrecalculateBodyShape(playersBodyHeight[i], playersABodyWeight[i]);\n            loginPlayersController.playersAppearance[i].PrecalculateBodyShape(playersBodyHeight[i], playersABodyWeight[i]);\n            loginPlayersController.playersAnimation[i].Hide(); //\u9690\u85cf\u907f\u514d\u52a0\u8f7d\u4e2d\u88ab\u770b\u5230\n\n            //playersAppearance[i].SetPlayerHead(playersHeadName[i], SkinColorForTexture.WHITE);\n            //playersAppearance[i].SetPlayerBodyShapeOnPelvis(playersBodyHeight[i], playersABodyWeight[i], 0);\n            await loginPlayersController.playersAppearance[i].SetPlayerHeadAsync(playersHeadName[i], SkinColorForTexture.WHITE);\n            loginPlayersController.playersAppearance[i].SetPlayerBodyShapeOnPelvis(playersBodyHeight[i], playersABodyWeight[i], 0);\n\n            loginPlayersController.playersAnimation[i].Init(true, false);\n            loginPlayersController.playersAnimation[i].HideFootball();\n\n            await CreateJersey(i);\n\n            loginPlayersController.playersAppearance[i].HeadMR.material.SetFloat(\"_Smoothness\", 1.42f);\n            loginPlayersController.playersAppearance[i].LimbGPUSKM.material.SetFloat(\"_Smoothness\", 1.15f);\n            loginPlayersController.playersPelvis[i] = loginPlayersController.playersAnimation[i].Pelvis;\n        }\n\n        loginPlayersController.football = ballAnimator.GetComponentInChildren<MeshRenderer>().transform;\n\n        //Go.DelayCall(()=>{\n        //    PlayerJerseyGenerator.Instance.SetCameraActive(false);\n        //},2);\n        //\n\n        //\u9884\u8bfb\u53d6\u52a8\u753b\n        for (int i = 0; i < loginPlayersController.playersAnimation.Length; i++)\n        {\n            await loginPlayersController.playersAnimation[i].PreloadAnimationAsync(PlayerAnimationNames[i], false);\n        }\n\n        //\u64ad\u653e\u52a8\u753b\n        for (int i = 0; i < loginPlayersController.playersAnimation.Length; i++)\n        {\n            loginPlayersController.playersAnimation[i].PlayAnimation(PlayerAnimationNames[i]);\n            PlayerShadow(loginPlayersController.playersAnimation[i].transform);\n        }\n\n        loginPlayersController.ResourceInit = true;\n\n        audience.SetSheerUpLevel(2);\n\n        cameraAnimator.enabled = true;\n        cameraAnimator.Play(CameraAnimationName);\n\n        ballAnimator.enabled = true;\n        ballAnimator.Play(BallAnimationName);\n\n\n        for (int i = 0; i < DofMeshRenderers.Length; i++)\n        {\n            DofMeshRenderers[i].gameObject.layer = LayerMask.NameToLayer(\"DOF\");\n            if (i == 1)\n            {\n                DofMeshRenderers[i].material.SetColor(\"_EmissionColor\", new Color(0.7f, 0.7f, 0.7f, 1));\n                DofMeshRenderers[i].material.EnableKeyword(\"_EMISSION\");\n            }\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"RenderDetailMode\", true);\n    }\n\n    async GTask CreateJersey(int playerid)\n    {\n        Texture2D jerseytex;\n        Texture2D socktex;\n        if (playerid == GoalKeeperId)\n        {\n            jerseytex = GoalKeeper_Jerseytex;\n            socktex = GoalKeeper_Socktex;\n            loginPlayersController.playersAppearance[playerid].HomeGKJerseyTex = jerseytex;\n            loginPlayersController.playersAppearance[playerid].HomeGKSockTex = socktex;\n        }\n        else\n        {\n            await GAsync.WaitNextFrame();\n            PlayerJerseyGenerator.Instance.TeamLogoTex = TeamLogoTex;\n            //await PlayerJerseyGenerator.Instance.SetJerseyInfo(JerseyIds[playerid]);\n            //PlayerJerseyGenerator.Instance.UpdateJerseyProperties();\n\n            //jerseytex = PlayerJerseyGenerator.Instance.GetDIYTex();\n            //socktex = PlayerJerseyGenerator.Instance.GetSockTex();\n\n            await PlayerJerseyGenerator.Instance.SetJerseyInfoAsync(JerseyIds[playerid]);\n\n            jerseytex = PlayerJerseyGenerator.Instance.GetDIYTex();\n            socktex = PlayerJerseyGenerator.Instance.GetSockTex();\n\n\n            JerseyTexList.Add(jerseytex);\n            JerseyTexList.Add(socktex);\n        }\n\n        Material JerseyMat = loginPlayersController.playersAppearance[playerid].ClothGPUSKM.material;\n        JerseyMat.SetTexture(\"_BaseMap\", jerseytex);\n        Material SkinMat = loginPlayersController.playersAppearance[playerid].LimbGPUSKM.material;\n        Material SockMat = loginPlayersController.playersAppearance[playerid].LegMR.materials[0];\n        SockMat.SetTexture(\"_BaseMap\", socktex);\n        Material ShoesMat = loginPlayersController.playersAppearance[playerid].LegMR.materials[1];\n        loginPlayersController.playerShoes[playerid].id = ShoesId[playerid];\n\n        loginPlayersController.playersAppearance[playerid].SetPlayerMaterials(JerseyMat, SkinMat, SockMat, ShoesMat);\n    }\n\n    PlayerShadowAnimation playerShadowAnimation;\n    Material celeMaterial;\n    Camera _shadowCamera;\n    Material[] _materials;\n    void PlayerShadow(Transform targetPlayer)\n    {\n        Platform.EventDispatcher.TriggerEvent(\"SetShadowForIncident\");\n        playerShadowAnimation = targetPlayer.GetComponent<PlayerShadowAnimation>();\n        celeMaterial = playerShadowAnimation.Shadow.material;\n        celeMaterial.SetFloat(\"_baseScale\", 1.5f);\n        celeMaterial.SetFloat(\"_yScaleMul\", 5);\n        celeMaterial.SetFloat(\"_baseBlur\", 1);\n        celeMaterial.SetFloat(\"_yBlurFade\", 0.5f);\n        celeMaterial.SetFloat(\"_yFade\", 0.67f);\n        celeMaterial.SetFloat(\"_transparent\", 0.7f);\n\n        if (_materials != null)\n        {\n            for (int i = 0; i < _materials.Length; i++)\n            {\n                if (_materials[i] != null && _shadowCamera != null)\n                {\n                    playerShadowAnimation.EnableSoftShadow(_materials[i], _shadowCamera, 0.025f);\n                }\n            }\n        }\n    }\n\n    void SoftShadowInit(Camera shadowCamera, Material[] materials, float fitnessRoomFloorGroundY, bool isShadowEnabled)\n    {\n        _shadowCamera = shadowCamera;\n        _materials = materials;\n    }\n\n    private void Update()\n    {\n        \n    }\n    \n\n    private void OnDestroy()\n    {\n        Platform.EventDispatcher.RemoveEventListener<Camera, Material[], float, bool>(\"PlayerIncidentSoftShadowInit\", SoftShadowInit);\n\n        foreach (var tex in JerseyTexList)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(tex);\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"RenderDetailMode\", false);\n\n        // if(debutWarmUpController!=null)\n        // {\n        //    Destroy(debutWarmUpController);\n        //    debutWarmUpController=null;\n        // }\n    }\n\n}\n#else\npublic class LoginScene3DPlayersController : RenderingBase\n{\n\n    public AudienceCamController audience;\n    public string[] playersHeadName;\n\n    public int[] playersBodyHeight;\n\n    public int[] playersABodyWeight;\n\n    public Material[] playersSkinMat;\n\n    public Material ClothMat;\n    public Material SocksMat;\n    public Material ShoesMat;\n\n    Material[] playersPCSkinMat;\n    Material PCClothMat;\n    Material PCSocksMat;\n    Material PCShoesMat;\n\n    public string[] playersPCSkinsMatPath;\n    public string PCClothMatPath;\n    public string PCSocksMatPath;\n    public string PCShoesMatPath;\n\n    public Transform[] Players;\n    public Animator ballAnimator;\n    public Animator cameraAnimator;\n\n    //\u961f\u5fbd\n    public Texture2D TeamLogoTex;\n\n    //\u5b88\u95e8\u5458\n    int GoalKeeperId = 1;\n    public Texture2D GoalKeeper_Jerseytex; //\u7403\u8863\n    public Texture2D GoalKeeper_Socktex; //\u889c\u5b50\n\n    public Camera camera;\n\n    public GalaShaderGlobalSetting galaShaderGlobalSetting;\n\n    public Light mainLight;\n\n    public MeshRenderer[] DofMeshRenderers;\n\n    List<RenderTexture> JerseyTexList = new List<RenderTexture>();\n\n    public float DOFDistance = 15f;\n\n    static string[] JerseyIds = new string[] {\n        \"7_GALASPORTS_28973bFF_d3cb4aFF_37362fFF_1_20222023_22_c9be44ff_28973bFF_4f3db5ff\",\n        \"31_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",//\u5b88\u95e8\u5458\u6570\u636e\u65e0\u6548\n        \n        \"3_GALASPORTS_c19a6eFF_c19a6eFF_c19a6eFF_1_20222023_22_27324fff_202738FF_27324fff\",\n        \"6_GALASPORTS_151515FF_d9d9d9FF_151515FF_1_20222023_22_ddddddff_1f2326FF_0f0f0fff\",\n        \"10_GALASPORTS_1e57a0FF_f0f0f0FF_1e57a0FF_1_20222023_22_b6cadaff_74a1c8FF_1255a5ff\",\n        \"17_GALASPORTS_cd8b3cFF_c6893bFF_cd8b3cFF_1_20222023_22_7a111cff_0b4623FF_0b4623ff\",\n    };\n    static int[] ShoesId = new int[] {\n        1,2,6,1,3,4\n    };\n    static string[] PlayerAnimationNames = new string[] {\n        \"Login1A\",\n        \"Login1B\",\n        \"Login2A\",\n        \"Login2B\",\n        \"Login3A\",\n        \"Login3B\",\n    };\n    const string BallAnimationName = \"Football\";\n    const string CameraAnimationName = \"LoginCamera\";\n\n    //public  GameObject DebutWarmUPController;\n    //GameObject debutWarmUpController;\n\n    LoginPlayersController loginPlayersController;\n\n    static string[] stateNamesToPreLoadClothData = new string[]\n    {\n        \"Player1\",\"Player2\",\"Player3\",\"Player4\",\"Player5\",\"Player6\"\n    };\n\n    public override async void Init(GameObject go)\n    {\n        ClothDataLoader.AsyncPreLoadMultiClotDataSet(stateNamesToPreLoadClothData);\n\n        for (int i = 0; i < JerseyIds.Length; i++)\n        {\n            PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(JerseyIds[i]);\n            PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(JerseyIds[i]);\n        }\n\n        loginPlayersController = go.GetComponent<LoginPlayersController>();\n        if (loginPlayersController != null)\n        {\n            RenderingHelper.PublicFieldCopy<LoginPlayersController, LoginScene3DPlayersController>(loginPlayersController, this);\n            //loginPlayersController.onUpdate = Update;\n            loginPlayersController.onDestroy = OnDestroy;\n            loginPlayersController.onStart = Start;\n        }\n\n        PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(playersHeadName);\n\n        Platform.EventDispatcher.AddEventListener<Material[], float, bool>(\"PlayerIncidentSoftShadowInit\", SoftShadowInit);\n        loginPlayersController.cameraTransform = camera.transform;\n        galaShaderGlobalSetting.UpdateSetting();\n\n        loginPlayersController.setting = camera.GetComponent<CameraRenderPassSetting>();\n        loginPlayersController.setting.DoFEnable = true;\n        loginPlayersController.setting.DoFBlurIteration = 2;\n        loginPlayersController.setting.DoFBlurIntensity = 1f;\n        loginPlayersController.setting.DoFBlurStart = 0.34f;\n        loginPlayersController.setting.DofBlurSoftness = 0.125f;\n        loginPlayersController.setting.HDRExposureKey = 0.2f;\n        loginPlayersController.setting.HDRMinLum = 0.08f;\n        loginPlayersController.setting.HDRMaxLum = 0.8f;\n\n        ResourceMgr.Instance.SetProvider(new CustomAddressableProvider());\n\n        PlayerJerseyGenerator.Instance.Initialize();\n    }\n\n    private void Start()\n    {\n        try\n        {\n            cameraAnimator.enabled = false;\n            ballAnimator.enabled = false;\n\n            //\u8bbe\u7f6e\u72b6\u6001\n            for (int i = 0; i < Players.Length; i++)\n            {\n                loginPlayersController.playersAnimation[i] = Players[i].GetComponent<HighPolyPlayerAnimationController>();\n\n                loginPlayersController.playersAppearance[i] = Players[i].GetComponent<HighPolyPlayerAppearanceController>();\n                loginPlayersController.playerShoes[i] = Players[i].GetComponent<Playershoes>();\n                if (i == GoalKeeperId)\n                {\n                    loginPlayersController.playersAppearance[i].IsKeeper = true;\n                }\n\n                loginPlayersController.playersAnimation[i].Hide(); //\u9690\u85cf\u907f\u514d\u52a0\u8f7d\u4e2d\u88ab\u770b\u5230\n            }\n\n//#if (UNITY_STANDALONE_OSX || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN) && (!UNITY_ANDROID) && (!UNITY_IOS)\n//                        //\u52a0\u8f7d\u7403\u5458\u6750\u8d28\n//                        int skinCount = playersPCSkinsMatPath.Length;\n//                        playersPCSkinMat = new Material[skinCount];\n//                        for (int i = 0; i < skinCount; i++)\n//                        {\n//                            playersPCSkinMat[i] = ResourceMgr.Instance.LoadAsset<Material>(playersPCSkinsMatPath[i]);\n//                        }\n\n//                        PCClothMat = ResourceMgr.Instance.LoadAsset<Material>(PCClothMatPath);\n//                        PCSocksMat = ResourceMgr.Instance.LoadAsset<Material>(PCSocksMatPath);\n//                        PCShoesMat = ResourceMgr.Instance.LoadAsset<Material>(PCShoesMatPath);\n//#endif\n\n\n            //\u52a0\u8f7d\u7403\u5458\u8d34\u56fe\n            for (int i = 0; i < Players.Length; i++)\n            {\n                if (i == 1)\n                {\n                    loginPlayersController.playersAppearance[i].HomeGKJerseyTex = loginPlayersController.GoalKeeper_Jerseytex;\n                    loginPlayersController.playersAppearance[i].HomeGKSockTex = loginPlayersController.GoalKeeper_Socktex;\n                }\n\n                HighPolyPlayerAppearance_Hotfix.SetPlayerAppearance(loginPlayersController.playersAppearance[i], int.Parse(playersHeadName[i]), playersBodyHeight[i], playersABodyWeight[i], loginPlayersController.skinColors[i], loginPlayersController.skinColorsCorrectionValue[i], JerseyIds[i], ShoesId[i], loginPlayersController.playersID[i], i == 1, \"\", \"0\", false, null, true);\n\n                /*#if (UNITY_STANDALONE_OSX || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN) && (!UNITY_ANDROID) && (!UNITY_IOS)\n                                //playersAppearance[i].SetPlayerMaterials(PCClothMat, playersPCSkinMat[i], PCSocksMat, PCShoesMat);\n                                HighPolyPlayerAppearance_Hotfix.SetPlayerMaterials(loginPlayersController.playersAppearance[i],PCClothMat, playersPCSkinMat[i], PCSocksMat, PCShoesMat);\n                #else\n                                //playersAppearance[i].SetPlayerMaterials(ClothMat, playersSkinMat[i], SocksMat, ShoesMat);\n                                HighPolyPlayerAppearance_Hotfix.SetPlayerMaterials(loginPlayersController.playersAppearance[i], ClothMat, playersSkinMat[i], SocksMat, ShoesMat);\n                #endif\n\n                                //playersAppearance[i].PrecalculateBodyShape(playersBodyHeight[i], playersABodyWeight[i]);\n                                HighPolyPlayerAppearance_Hotfix.PrecalculateBodyShape(loginPlayersController.playersAppearance[i], playersBodyHeight[i], playersABodyWeight[i]);\n                                loginPlayersController.playersAnimation[i].Hide(); //\u9690\u85cf\u907f\u514d\u52a0\u8f7d\u4e2d\u88ab\u770b\u5230\n\n                                //playersAppearance[i].SetPlayerHead(playersHeadName[i], SkinColorForTexture.WHITE);\n                                //playersAppearance[i].SetPlayerBodyShapeOnPelvis(playersBodyHeight[i], playersABodyWeight[i], 0);\n                                HighPolyPlayerAppearance_Hotfix.SetPlayerHead(loginPlayersController.playersAppearance[i], playersHeadName[i], SkinColorForTexture.WHITE);\n                                HighPolyPlayerAppearance_Hotfix.SetPlayerBodyShapeOnPelvis(loginPlayersController.playersAppearance[i], playersBodyHeight[i], playersABodyWeight[i], 0);*/\n\n                loginPlayersController.playersAnimation[i].Init(true, false);\n                loginPlayersController.playersAnimation[i].HideFootball();\n\n                //CreateJersey(i);\n\n                loginPlayersController.playersAppearance[i].HeadMR.material.SetFloat(\"_Smoothness\", 1.42f);\n                loginPlayersController.playersAppearance[i].LimbGPUSKM.material.SetFloat(\"_Smoothness\", 1.15f);\n                loginPlayersController.playersPelvis[i] = loginPlayersController.playersAnimation[i].Pelvis;\n            }\n\n            loginPlayersController.football = ballAnimator.GetComponentInChildren<MeshRenderer>().transform;\n\n            //Go.DelayCall(()=>{\n            //    PlayerJerseyGenerator.Instance.SetCameraActive(false);\n            //},2);\n            //\n\n            //\u64ad\u653e\u52a8\u753b\n            for (int i = 0; i < loginPlayersController.playersAnimation.Length; i++)\n            {\n                //playersAnimation[i].PlayAnimation(PlayerAnimationNames[i]);\n                HighPolyPlayerAnimation_Hotfix.PlayAnimation(loginPlayersController.playersAnimation[i], PlayerAnimationNames[i]);\n                PlayerShadow(loginPlayersController.playersAnimation[i].transform);\n            }\n\n            loginPlayersController.ResourceInit = true;\n\n            //if(audience != null)\n            //{\n            //    audience.SetSheerUpLevel(2);\n            //}\n            AudienceStatus.Instance.SetAudienceSheerUpLevel(2);\n            //\u52a0\u8f7d\u4e16\u754c\u676f\u6c1b\u56f4(\u4e16\u754c\u676f\u8fc7\u53bb\u4e86\uff0c\u4e0d\u52a0\u8f7d)\n            //WorldCupLogin.Instance.Init();\n\n            cameraAnimator.enabled = true;\n            cameraAnimator.Play(CameraAnimationName, 0, 0);\n            cameraAnimator.Update(0);\n\n            ballAnimator.enabled = true;\n            ballAnimator.Play(BallAnimationName, 0, 0);\n            ballAnimator.Update(0);\n\n\n            for (int i = 0; i < DofMeshRenderers.Length; i++)\n            {\n                DofMeshRenderers[i].gameObject.layer = LayerMask.NameToLayer(\"DOF\");\n                if (i == 1)\n                {\n                    DofMeshRenderers[i].material.SetColor(\"_EmissionColor\", new Color(0.7f, 0.7f, 0.7f, 1));\n                    DofMeshRenderers[i].material.EnableKeyword(\"_EMISSION\");\n                }\n            }\n\n            Platform.EventDispatcher.TriggerEvent(\"RenderDetailMode\", true);\n\n        }\n        catch { }\n    }\n\n    void CreateJersey(int playerid)\n    {\n\n        Material JerseyMat = loginPlayersController.playersAppearance[playerid].ClothGPUSKM.material;\n        Material SockMat = loginPlayersController.playersAppearance[playerid].LegMR.materials[0];\n        if (playerid == GoalKeeperId)\n        {\n            loginPlayersController.playersAppearance[playerid].HomeGKJerseyTex = GoalKeeper_Jerseytex;\n            loginPlayersController.playersAppearance[playerid].HomeGKSockTex = GoalKeeper_Socktex;\n            JerseyMat.SetTexture(\"_BaseMap\", GoalKeeper_Jerseytex);\n            SockMat.SetTexture(\"_BaseMap\", GoalKeeper_Socktex);\n        }\n        else\n        {\n            GAsync.WaitNextFrame();\n            RenderTexture jerseytex;\n            RenderTexture socktex;\n            PlayerJerseyGenerator.Instance.TeamLogoTex = TeamLogoTex;\n            //PlayerJerseyGenerator.Instance.SetJerseyInfo(JerseyIds[playerid]);\n            //PlayerJerseyGenerator.Instance.UpdateJerseyProperties();\n\n            //jerseytex = PlayerJerseyGenerator.Instance.GetDIYTex();\n            //socktex = PlayerJerseyGenerator.Instance.GetSockTex();\n\n            PlayerJerseyGenerator_Hotfix.SetJerseyInfo(JerseyIds[playerid]);\n\n            jerseytex = PlayerJerseyGenerator_Hotfix.GetDIYTex();\n            socktex = PlayerJerseyGenerator_Hotfix.GetSockTex();\n            JerseyTexList.Add(jerseytex);\n            JerseyTexList.Add(socktex);\n\n            JerseyMat.SetTexture(\"_BaseMap\", jerseytex);\n            SockMat.SetTexture(\"_BaseMap\", socktex);\n        }\n        Material SkinMat = loginPlayersController.playersAppearance[playerid].LimbGPUSKM.material;\n        Material ShoesMat = loginPlayersController.playersAppearance[playerid].LegMR.materials[1];\n        loginPlayersController.playerShoes[playerid].id = ShoesId[playerid];\n\n        loginPlayersController.playersAppearance[playerid].SetPlayerMaterials(JerseyMat, SkinMat, SockMat, ShoesMat);\n    }\n\n    PlayerShadowAnimation playerShadowAnimation;\n    Material celeMaterial;\n    Material[] _materials;\n    void PlayerShadow(Transform targetPlayer)\n    {\n        Platform.EventDispatcher.TriggerEvent(\"SetShadowForIncident\");\n        playerShadowAnimation = targetPlayer.GetComponent<PlayerShadowAnimation>();\n        celeMaterial = playerShadowAnimation.Shadow.material;\n        celeMaterial.SetFloat(\"_baseScale\", 1.5f);\n        celeMaterial.SetFloat(\"_yScaleMul\", 5);\n        celeMaterial.SetFloat(\"_baseBlur\", 1);\n        celeMaterial.SetFloat(\"_yBlurFade\", 0.5f);\n        celeMaterial.SetFloat(\"_yFade\", 0.67f);\n        celeMaterial.SetFloat(\"_transparent\", 0.7f);\n\n        if (_materials != null)\n        {\n            for (int i = 0; i < _materials.Length; i++)\n            {\n                if (_materials[i] != null)\n                {\n                    playerShadowAnimation.EnableSoftShadow(_materials[i], 0.025f);\n                }\n            }\n        }\n    }\n\n    void SoftShadowInit(Material[] materials, float fitnessRoomFloorGroundY, bool isShadowEnabled)\n    {\n        _materials = materials;\n    }\n\n\n    private void Update()\n    {\n\n    }\n\n\n    private void OnDestroy()\n    {\n        Platform.EventDispatcher.RemoveEventListener<Material[], float, bool>(\"PlayerIncidentSoftShadowInit\", SoftShadowInit);\n\n        foreach (var tex in JerseyTexList)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(tex);\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"RenderDetailMode\", false);\n\n        ClothDataLoader.UnloadAllPreLoadedClothDatas();\n        PlayerHeadDataLoader.UnloadAllPreLoadedHeadDatas();\n        PlayerJerseyDataLoader.UnloadAllPreLoadedJerseyDatas();\n        PlayerSockDataLoader.UnloadAllPreLoadedSockDatas();\n        //WorldCupLogin.Instance.OnDestory();\n\n        // if(debutWarmUpController!=null)\n        // {\n        //    Destroy(debutWarmUpController);\n        //    debutWarmUpController=null;\n        // }\n    }\n\n}\n#endif\n", "cropped_inputs": "\ufeffusing Framework.GalaSports.Service;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n#if USE_RENDER_ASYNCLOAD\npublic class LoginScene3DPlayersController : RenderingBase\n{\n\n    public AudienceCamController audience;\n    public string[] playersHeadName;\n\n    public int[] playersBodyHeight;\n\n    public int[] playersABodyWeight;\n\n    public Material[] playersSkinMat;\n\n    public Material ClothMat;\n    public Material SocksMat;\n    public Material ShoesMat;\n\n    public Material[] playersPCSkinMat;\n    public Material PCClothMat;\n    public Material PCSocksMat;\n    public Material PCShoesMat;\n\n    public Transform[] Players;\n    public Animator ballAnimator;\n    public Animator cameraAnimator;\n\n    //\u961f\u5fbd\n    public Texture2D TeamLogoTex;\n\n    //\u5b88\u95e8\u5458\n    int GoalKeeperId = 1;\n    public Texture2D GoalKeeper_Jerseytex; //\u7403\u8863\n    public Texture2D GoalKeeper_Socktex; //\u889c\u5b50\n\n    public Camera camera;\n\n    public GalaShaderGlobalSetting galaShaderGlobalSetting;\n\n    public Light mainLight;\n\n    public MeshRenderer[] DofMeshRenderers;\n\n    List<RenderTexture> JerseyTexList = new List<RenderTexture>();\n\n    public float DOFDistance = 15f;\n\n    static string[] JerseyIds = new string[] {\n        \"7_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"31_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",//\u5b88\u95e8\u5458\u6570\u636e\u65e0\u6548\n        \n        \"3_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",\n        \"6_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"10_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"17_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",\n    };\n    static int[] ShoesId = new int[] {\n        1,2,6,1,3,4\n    };\n    static string[] PlayerAnimationNames = new string[] {\n        \"Login1A\",\n        \"Login1B\",\n        \"Login2A\",\n        \"Login2B\",\n        \"Login3A\",\n        \"Login3B\",\n    };\n    const string BallAnimationName = \"Football1\";\n    const string CameraAnimationName = \"LoginCamera\";\n\n    //public  GameObject DebutWarmUPController;\n    //GameObject debutWarmUpController;\n\n    LoginPlayersController loginPlayersController;\n\n    public override async void Init(GameObject go)\n    {\n        loginPlayersController = go.GetComponent<LoginPlayersController>();\n        if (loginPlayersController!= null)\n        {\n            RenderingHelper.PublicFieldCopy<LoginPlayersController, LoginScene3DPlayersController>(loginPlayersController, this);\n            //loginPlayersController.onUpdate = Update;\n            loginPlayersController.onDestroy = OnDestroy;\n            loginPlayersController.onStart = Start;\n        }\n\n        Platform.EventDispatcher.AddEventListener<Camera, Material[], float, bool>(\"PlayerIncidentSoftShadowInit\", SoftShadowInit);\n        loginPlayersController.cameraTransform = camera.transform;\n        galaShaderGlobalSetting.UpdateSetting();\n\n        loginPlayersController.setting = camera.GetComponent<CameraRenderPassSetting>();\n        loginPlayersController.setting.DoFEnable = true;\n        loginPlayersController.setting.DoFBlurIteration = 2;\n        loginPlayersController.setting.DoFBlurIntensity = 1f;\n        loginPlayersController.setting.DoFBlurStart = 0.34f;\n        loginPlayersController.setting.DofBlurSoftness = 0.125f;\n        loginPlayersController.setting.HDRExposureKey = 0.2f;\n        loginPlayersController.setting.HDRMinLum = 0.08f;\n        loginPlayersController.setting.HDRMaxLum = 0.8f;\n\n        ResourceMgr.Instance.SetProvider(new CustomAddressableProvider());\n\n        PlayerJerseyGenerator.Instance.Initialize();\n    }\n\n    async void Start()\n    {\n        RenderingHelper.Instance.AddLoadingTime();\n        try\n        {\n            await StartAsync();\n        }\n        catch { }\n        RenderingHelper.Instance.RemoveLoadingTime();\n    }\n\n    private async GTask StartAsync()\n    {\n        cameraAnimator.enabled = false;\n        ballAnimator.enabled = false;\n\n        //\u8bbe\u7f6e\u72b6\u6001\n        for (int i = 0; i < Players.Length; i++)\n        {\n            loginPlayersController.playersAnimation[i] = Players[i].GetComponent<HighPolyPlayerAnimationController>();\n\n            loginPlayersController.playersAppearance[i] = Players[i].GetComponent<HighPolyPlayerAppearanceController>();\n            loginPlayersController.playerShoes[i] = Players[i].GetComponent<Playershoes>();\n            if (i == GoalKeeperId)\n            {\n                loginPlayersController.playersAppearance[i].IsKeeper = true;\n            }\n\n            loginPlayersController.playersAnimation[i].Hide(); //\u9690\u85cf\u907f\u514d\u52a0\u8f7d\u4e2d\u88ab\u770b\u5230\n        }\n\n        //\u52a0\u8f7d\u7403\u5458\u8d34\u56fe\n        for (int i = 0; i < Players.Length; i++)\n        {\n\n#if (UNITY_STANDALONE_OSX || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN) && (!UNITY_ANDROID) && (!UNITY_IOS)\n            //playersAppearance[i].SetPlayerMaterials(PCClothMat, playersPCSkinMat[i], PCSocksMat, PCShoesMat);\n             HighPolyPlayerAppearance_Hotfix.SetPlayerMaterials(loginPlayersController.playersAppearance[i],PCClothMat,playersPCSkinMat[i], PCSocksMat, PCShoesMat);\n#else\n            //playersAppearance[i].SetPlayerMaterials(ClothMat, playersSkinMat[i], SocksMat, ShoesMat);\n            loginPlayersController.playersAppearance[i].SetPlayerMaterials(ClothMat, playersSkinMat[i], SocksMat, ShoesMat);\n#endif\n\n            //playersAppearance[i].PrecalculateBodyShape(playersBodyHeight[i], playersABodyWeight[i]);\n            loginPlayersController.playersAppearance[i].PrecalculateBodyShape(playersBodyHeight[i], playersABodyWeight[i]);\n            loginPlayersController.playersAnimation[i].Hide(); //\u9690\u85cf\u907f\u514d\u52a0\u8f7d\u4e2d\u88ab\u770b\u5230\n\n            //playersAppearance[i].SetPlayerHead(playersHeadName[i], SkinColorForTexture.WHITE);\n            //playersAppearance[i].SetPlayerBodyShapeOnPelvis(playersBodyHeight[i], playersABodyWeight[i], 0);\n            await loginPlayersController.playersAppearance[i].SetPlayerHeadAsync(playersHeadName[i], SkinColorForTexture.WHITE);\n            loginPlayersController.playersAppearance[i].SetPlayerBodyShapeOnPelvis(playersBodyHeight[i], playersABodyWeight[i], 0);\n\n            loginPlayersController.playersAnimation[i].Init(true, false);\n            loginPlayersController.playersAnimation[i].HideFootball();\n\n            await CreateJersey(i);\n\n            loginPlayersController.playersAppearance[i].HeadMR.material.SetFloat(\"_Smoothness\", 1.42f);\n            loginPlayersController.playersAppearance[i].LimbGPUSKM.material.SetFloat(\"_Smoothness\", 1.15f);\n            loginPlayersController.playersPelvis[i] = loginPlayersController.playersAnimation[i].Pelvis;\n        }\n\n        loginPlayersController.football = ballAnimator.GetComponentInChildren<MeshRenderer>().transform;\n\n        //Go.DelayCall(()=>{\n        //    PlayerJerseyGenerator.Instance.SetCameraActive(false);\n        //},2);\n        //\n\n        //\u9884\u8bfb\u53d6\u52a8\u753b\n        for (int i = 0; i < loginPlayersController.playersAnimation.Length; i++)\n        {\n            await loginPlayersController.playersAnimation[i].PreloadAnimationAsync(PlayerAnimationNames[i], false);\n        }\n\n        //\u64ad\u653e\u52a8\u753b\n        for (int i = 0; i < loginPlayersController.playersAnimation.Length; i++)\n        {\n            loginPlayersController.playersAnimation[i].PlayAnimation(PlayerAnimationNames[i]);\n            PlayerShadow(loginPlayersController.playersAnimation[i].transform);\n        }\n\n        loginPlayersController.ResourceInit = true;\n\n        audience.SetSheerUpLevel(2);\n\n        cameraAnimator.enabled = true;\n        cameraAnimator.Play(CameraAnimationName);\n\n        ballAnimator.enabled = true;\n        ballAnimator.Play(BallAnimationName);\n\n\n        for (int i = 0; i < DofMeshRenderers.Length; i++)\n        {\n            DofMeshRenderers[i].gameObject.layer = LayerMask.NameToLayer(\"DOF\");\n            if (i == 1)\n            {\n                DofMeshRenderers[i].material.SetColor(\"_EmissionColor\", new Color(0.7f, 0.7f, 0.7f, 1));\n                DofMeshRenderers[i].material.EnableKeyword(\"_EMISSION\");\n            }\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"RenderDetailMode\", true);\n    }\n\n    async GTask CreateJersey(int playerid)\n    {\n        Texture2D jerseytex;\n        Texture2D socktex;\n        if (playerid == GoalKeeperId)\n        {\n            jerseytex = GoalKeeper_Jerseytex;\n            socktex = GoalKeeper_Socktex;\n            loginPlayersController.playersAppearance[playerplayerid].HomeGKSockTex = socktex;\n        }\n        else\n        {\n            await GAsync.WaitNextFrame();\n            PlayerJerseyGenerator.Instance.TeamLogoTex = TeamLogoTex;\n            //await PlayerJerseyGenerator.Instance.SetJerseyInfo(JerseyIds[playerid]);\n            //PlayerJerseyGenerator.Instance.UpdateJerseyProperties();\n\n            //jerseytex = PlayerJerseyGenerator.Instance.GetDIYTex();\n            //socktex = PlayerJerseyGenerator.Instance.GetSockTex();\n\n            await PlayerJerseyGenerator.Instance.SetJerseyInfoAsync(JerseyIds[playerid]);\n\n            jerseytex = PlayerJerseyGenerator.Instance.GetDIYTex();\n            socktex = PlayerJerseyGenerator.Instance.GetSockTex();\n\n\n            JerseyTexList.Add(jerseytex);\n            JerseyTexList.Add(socktex);\n        }\n\n        Material JerseyMat = loginPlayersController.playersAppearance[playerid].ClothGPUSKM.material;\n        JerseyMat.SetTexture(\"_BaseMap\", jerseytex);\n        Material SkinMat = loginPlayersController.playersAppearance[playerid].LimbGPUSKM.material;\n        Material SockMat = loginPlayersController.playersAppearance[playerid].LegMR.materials[0];\n        SockMat.SetTexture(\"_BaseMap\", socktex);\n        Material ShoesMat = loginPlayersController.playersAppearance[playerid].LegMR.materials[1];\n        loginPlayersController.playerShoes[playerid].id = ShoesId[playerid];\n\n        loginPlayersController.playersAppearance[playerid].SetPlayerMaterials(JerseyMat, SkinMat, SockMat, ShoesMat);\n    }\n\n    PlayerShadowAnimation playerShadowAnimation;\n    Material celeMaterial;\n    Camera _shadowCamera;\n    Material[] _materials;\n    void PlayerShadow(Transform targetPlayer)\n    {\n        Platform.EventDispatcher.TriggerEvent(\"SetShadowForIncident\");\n        playerShadowAnimation = targetPlayer.GetComponent<PlayerShadowAnimation>();\n        celeMaterial = playerShadowAnimation.Shadow.material;\n        celeMaterial.SetFloat(\"_baseScale\", 1.5f);\n        celeMaterial.SetFloat(\"_yScaleMul\", 5);\n        celeMaterial.SetFloat(\"_baseBlur\", 1);\n        celeMaterial.SetFloat(\"_yBlurFade\", 0.5f);\n        celeMaterial.SetFloat(\"_yFade\", 0.67f);\n        celeMaterial.SetFloat(\"_transparent\", 0.7f);\n\n        if (_materials!= null)\n        {\n            for (int i = 0; i < _materials.Length; i++)\n            {\n                if (_materials[i]!= null && _shadowCamera!= null)\n                {\n                    playerShadowAnimation.EnableSoftShadow(_materials[i], _shadowCamera, 0.025f);\n                }\n            }\n        }\n    }\n\n    void SoftShadowInit(Camera shadowCamera, Material[] materials, float fitnessRoomFloorGroundY, bool isShadowEnabled)\n    {\n        _shadowCamera = shadowCamera;\n        _materials = materials;\n    }\n\n    private void Update()\n    {\n        \n    }\n    \n\n    private void OnDestroy()\n    {\n        Platform.EventDispatcher.RemoveEventListener<Camera, Material[], float, bool>(\"PlayerIncidentSoftShadowInit\", SoftShadowInit);\n\n        foreach (var tex in JerseyTexList)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(tex);\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"RenderDetailMode\", false);\n\n        // if(debutWarmUpController!=null)\n        // {\n        //    Destroy(debutWarmUpController);\n        //    debutWarmUpController=null;\n        // }\n    }\n\n}\n#else\npublic class LoginScene3DPlayersController : RenderingBase\n{\n\n    public AudienceCamController audience;\n    public string[] playersHeadName;\n\n    public int[] playersBodyHeight;\n\n    public int[] playersABodyWeight;\n\n    public Material[] playersSkinMat;\n\n    public Material ClothMat;\n    public Material SocksMat;\n    public Material ShoesMat;\n\n    Material[] playersPCSkinMat;\n    Material PCClothMat;\n    Material PCSocksMat;\n    Material PCShoesMat;\n\n    public string[] playersPCSkinsMatPath;\n    public string PCClothMatPath;\n    public string PCSocksMatPath;\n    public string PCShoesMatPath;\n\n    public Transform[] Players;\n    public Animator ballAnimator;\n    public Animator cameraAnimator;\n\n    //\u961f\u5fbd\n    public Texture2D TeamLogoTex;\n\n    //\u5b88\u95e8\u5458\n    int GoalKeeperId = 1;\n    public Texture2D GoalKeeper_Jerseytex; //\u7403\u8863\n    public Texture2D GoalKeeper_Socktex; //\u889c\u5b50\n\n    public Camera camera;\n\n    public GalaShaderGlobalSetting galaShaderGlobalSetting;\n\n    public Light mainLight;\n\n    public MeshRenderer[] DofMeshRenderers;\n\n    List<RenderTexture> JerseyTexList = new List<RenderTexture>();\n\n    public float DOFDistance = 15f;\n\n    static string[] JerseyIds = new string[] {\n        \"7_GALASPORTS_28973bFF_d3cb4aFF_37362fFF_1_20222023_22_c9be44ff_28973bFF_4f3db5ff\",\n        \"31_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",//\u5b88\u95e8\u5458\u6570\u636e\u65e0\u6548\n        \n        \"3_GALASPORTS_c19a6eFF_c19a6eFF_c19a6eFF_1_20222023_22_27324fff_202738FF_27324fff\",\n        \"6_GALASPORTS_151515FF_d9d9d9FF_151515FF_1_20222023_22_ddddddff_1f2326FF_0f0f0fff\",\n        \"10_GALASPORTS_1e57a0FF_f0f0f0FF_1e57a0FF_1_20222023_22_b6cadaff_74a1c8FF_1255a5ff\",\n        \"17_GALASPORTS_cd8b3cFF_c6893bFF_cd8b3cFF_1_20222023_22_7a111cff_0b4623FF_0b4623ff\",\n    };\n    static int[] ShoesId = new int[] {\n        1,2,6,1,3,4\n    };\n    static string[] PlayerAnimationNames = new string[] {\n        \"Login1A\",\n        \"Login1B\",\n        \"Login2A\",\n        \"Login2B\",\n        \"Login3A\",\n        \"Login3B\",\n    };\n    const string BallAnimationName = \"Football\";\n    const string CameraAnimationName = \"LoginCamera\";\n\n    //public  GameObject DebutWarmUPController;\n    //GameObject debutWarmUpController;\n\n    LoginPlayersController loginPlayersController;\n\n    static string[] stateNamesToPreLoadClothData = new string[]\n    {\n        \"Player1\",\"Player2\",\"Player3\",\"Player4\",\"Player5\",\"Player6\"\n    };\n\n    public override async void Init(GameObject go)\n    {\n        ClothDataLoader.AsyncPreLoadMultiClotDataSet(stateNamesToPreLoadClothData);\n\n        for (int i = 0; i < JerseyIds.Length; i++)\n        {\n            PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(JerseyIds[i]);\n            PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(JerseyIds[i]);\n        }\n\n        loginPlayersController = go.GetComponent<LoginPlayersController>();\n        if (loginPlayersController!= null)\n        {\n            RenderingHelper.PublicFieldCopy<LoginPlayersController, LoginScene3DPlayersController>(loginPlayersController, this);\n            //loginPlayersController.onUpdate = Update;\n            loginPlayersController.onDestroy = OnDestroy;\n            loginPlayersController.onStart = Start;\n        }\n\n        PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(playersHeadName);\n\n        Platform.EventDispatcher.AddEventListener<Material[], float, bool>(\"PlayerIncidentSoftShadowInit\", SoftShadowInit);\n        loginPlayersController.cameraTransform = camera.transform;\n        galaShaderGlobalSetting.UpdateSetting();\n\n        loginPlayersController.setting = camera.GetComponent<CameraRenderPassSetting>();\n        loginPlayersController.setting.DoFEnable = true;\n        loginPlayersController.setting.DoFBlurIteration = 2;\n        loginPlayersController.setting.DoFBlurIntensity = 1f;\n        loginPlayersController.setting.DoFBlurStart = 0.34f;\n        loginPlayersController.setting.DofBlurSoftness = 0.125f;\n        loginPlayersController.setting.HDRExposureKey = 0.2f;\n        loginPlayersController.setting.HDRMinLum = 0.08f;\n        loginPlayersController.setting.HDRMaxLum = 0.8f;\n\n        ResourceMgr.Instance.SetProvider(new CustomAddressableProvider());\n\n        PlayerJerseyGenerator.Instance.Initialize();\n    }\n\n    private void Start()\n    {\n        try\n        {\n            cameraAnimator.enabled = false;\n            ballAnimator.enabled = false;\n\n            //\u8bbe\u7f6e\u72b6\u6001\n            for (int i = 0; i < Players.Length; i++)\n            {\n                loginPlayersController.playersAnimation[i] = Players[i].GetComponent<HighPolyPlayerAnimationController>();\n\n                loginPlayersController.playersAppearance[i] = Players[i].GetComponent<HighPolyPlayerAppearanceController>();\n                loginPlayersController.playerShoes[i] = Players[i].GetComponent<Playershoes>();\n                if (i == GoalKeeperId)\n                {\n                    loginPlayersController.playersAppearance[i].IsKeeper = true;\n                }\n\n                loginPlayersController.playersAnimation[i].Hide(); //\u9690\u85cf\u907f\u514d\u52a0\u8f7d\u4e2d\u88ab\u770b\u5230\n            }\n\n//#if (UNITY_STANDALONE_OSX || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN) && (!UNITY_ANDROID) && (!UNITY_IOS)\n//                        //\u52a0\u8f7d\u7403\u5458\u6750\u8d28\n//                        int skinCount = playersPCSkinsMatPath.Length;\n//                        playersPCSkinMat = new Material[skinCount];\n//                        for (int i = 0; i < skinCount; i++)\n//                        {\n//                            playersPCSkinMat[i] = ResourceMgr.Instance.LoadAsset<Material>(playersPCSkinsMatPath[i]);\n//                        }\n\n//                        PCClothMat = ResourceMgr.Instance.LoadAsset<Material>(PCClothMatPath);\n//                        PCSocksMat = ResourceMgr.Instance.LoadAsset<Material>(PCSocksMatPath);\n//                        PCShoesMat = ResourceMgr.Instance.LoadAsset<Material>(PCShoesMatPath);\n//#endif\n\n\n            //\u52a0\u8f7d\u7403\u5458\u8d34\u56fe\n            for (int i = 0; i < Players.Length; i++)\n            {\n                if (i == 1)\n                {\n                    loginPlayersController.playersAppearance[i].HomeGKJerseyTex = loginPlayersController.GoalKeeper_Jerseytex;\n                    loginPlayersController.playersAppearance[i].HomeGKSockTex = loginPlayersController.GoalKeeper_Socktex;\n                }\n\n                HighPolyPlayerAppearance_Hotfix.SetPlayerAppearance(loginPlayersController.playersAppearance[i], int.Parse(playersHeadName[i]), playersBodyHeight[i], playersABodyWeight[i], loginPlayersController.skinColors[i], loginPlayersController.skinColorsCorrectionValue[i], JerseyIds[i], ShoesId[i], loginPlayersController.playersID[i], i == 1, \"\", \"0\", false, null, true);\n\n                /*#if (UNITY_STANDALONE_OSX || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN) && (!UNITY_ANDROID) && (!UNITY_IOS)\n                                //playersAppearance[i].SetPlayerMaterials(PCClothMat, playersPCSkinMat[i], PCSocksMat, PCShoesMat);\n                                HighPolyPlayerAppearance_Hotfix.SetPlayerMaterials(loginPlayersController.playersAppearance[i],PCClothMat, playersPCSkinMat[i], PCSocksMat, PCShoesMat);\n                #else\n                                //playersAppearance[i].SetPlayerMaterials(ClothMat, playersSkinMat[i], SocksMat, ShoesMat);\n                                HighPolyPlayerAppearance_Hotfix.SetPlayerMaterials(loginPlayersController.playersAppearance[i], ClothMat, playersSkinMat[i], SocksMat, ShoesMat);\n                #endif\n\n                                //playersAppearance[i].PrecalculateBodyShape(playersBodyHeight[i], playersABodyWeight[i]);\n                                HighPolyPlayerAppearance_Hotfix.PrecalculateBodyShape(loginPlayersController.playersAppearance[i], playersBodyHeight[i], playersABodyWeight[i]);\n                                loginPlayersController.playersAnimation[i].Hide(); //\u9690\u85cf\u907f\u514d\u52a0\u8f7d\u4e2d\u88ab\u770b\u5230\n\n                                //playersAppearance[i].SetPlayerHead(playersHeadName[i], SkinColorForTexture.WHITE);\n                                //playersAppearance[i].SetPlayerBodyShapeOnPelvis(playersBodyHeight[i], playersABodyWeight[i], 0);\n                                HighPolyPlayerAppearance_Hotfix.SetPlayerHead(loginPlayersController.playersAppearance[i], playersHeadName[i], SkinColorForTexture.WHITE);\n                                HighPolyPlayerAppearance_Hotfix.SetPlayerBodyShapeOnPelvis(loginPlayersController.playersAppearance[i], playersBodyHeight[i], playersABodyWeight[i], 0);*/\n\n                loginPlayersController.playersAnimation[i].Init(true, false);\n                loginPlayersController.playersAnimation[i].HideFootball();\n\n                //CreateJersey(i);\n\n                loginPlayersController.playersAppearance[i].HeadMR.material.SetFloat(\"_Smoothness\", 1.42f);\n                loginPlayersController.playersAppearance[i].LimbGPUSKM.material.SetFloat(\"_Smoothness\", 1.15f);\n                loginPlayersController.playersPelvis[i] = loginPlayersController.playersAnimation[i].Pelvis;\n            }\n\n            loginPlayersController.football = ballAnimator.GetComponentInChildren<MeshRenderer>().transform;\n\n            //Go.DelayCall(()=>{\n            //    PlayerJerseyGenerator.Instance.SetCameraActive(false);\n            //},2);\n            //\n\n            //\u64ad\u653e\u52a8\u753b\n            for (int i = 0; i < loginPlayersController.playersAnimation.Length; i++)\n            {\n                //playersAnimation[i].PlayAnimation(PlayerAnimationNames[i]);\n                HighPolyPlayerAnimation_Hotfix.PlayAnimation(loginPlayersController.playersAnimation[i], PlayerAnimationNames[i]);\n                PlayerShadow(loginPlayersController.playersAnimation[i].transform);\n            }\n\n            loginPlayersController.ResourceInit = true;\n\n            //if(audience!= null)\n            //{\n            //    audience.SetSheerUpLevel(2);\n            //}\n            AudienceStatus.Instance.SetAudienceSheerUpLevel(2);\n            //\u52a0\u8f7d\u4e16\u754c\u676f\u6c1b\u56f4(\u4e16\u754c\u676f\u8fc7\u53bb\u4e86\uff0c\u4e0d\u52a0\u8f7d)\n            //WorldCupLogin.Instance.Init();\n\n            cameraAnimator.enabled = true;\n            cameraAnimator.Play(CameraAnimationName, 0, 0);\n            cameraAnimator.Update(0);\n\n            ballAnimator.enabled = true;\n            ballAnimator.Play(BallAnimationName, 0, 0);\n            ballAnimator.Update(0);\n\n\n            for (int i = 0; i < DofMeshRenderers.Length; i++)\n            {\n                DofMeshRenderers[i].gameObject.layer = LayerMask.NameToLayer(\"DOF\");\n                if (i == 1)\n                {\n                    DofMeshRenderers[i].material.SetColor(\"_EmissionColor\", new Color(0.7f, 0.7f, 0.7f, 1));\n                    DofMeshRenderers[i].material.EnableKeyword(\"_EMISSION\");\n                }\n            }\n\n            Platform.EventDispatcher.TriggerEvent(\"RenderDetailMode\", true);\n\n        }\n        catch { }\n    }\n\n    void CreateJersey(int playerid)\n    {\n\n        Material JerseyMat = loginPlayersController.playersAppearance[playerid].ClothGPUSKM.material;\n        Material SockMat = loginPlayersController.playersAppearance[playerid].LegMR.materials[0];\n        if (playerid == GoalKeeperId)\n        {\n            loginPlayersController.playersAppearance[playerid].HomeGKJerseyTex = GoalKeeper_Jerseytex;\n            loginPlayersController.playersAppearance[playerid].HomeGKSockTex = GoalKeeper_Socktex;\n            JerseyMat.SetTexture(\"_BaseMap\", GoalKeeper_Jerseytex);\n            SockMat.SetTexture(\"_BaseMap\", GoalKeeper_Socktex);\n        }\n        else\n        {\n            GAsync.WaitNextFrame();\n            RenderTexture jerseytex;\n            RenderTexture socktex;\n            PlayerJerseyGenerator.Instance.TeamLogoTex = TeamLogoTex;\n            //PlayerJerseyGenerator.Instance.SetJerseyInfo(JerseyIds[playerid]);\n            //PlayerJerseyGenerator.Instance.UpdateJerseyProperties();\n\n            //jerseytex = PlayerJerseyGenerator.Instance.GetDIYTex();\n            //socktex = PlayerJerseyGenerator.Instance.GetSockTex();\n\n            PlayerJerseyGenerator_Hotfix.SetJerseyInfo(JerseyIds[playerid]);\n\n            jerseytex = PlayerJerseyGenerator_Hotfix.GetDIYTex();\n            socktex = PlayerJerseyGenerator_Hotfix.GetSockTex();\n            JerseyTexList.Add(jerseytex);\n            JerseyTexList.Add(socktex);\n\n            JerseyMat.SetTexture(\"_BaseMap\", jerseytex);\n            SockMat.SetTexture(\"_BaseMap\", socktex);\n        }\n        Material SkinMat = loginPlayersController.playersAppearance[playerid].LimbGPUSKM.material;\n        Material ShoesMat = loginPlayersController.playersAppearance[playerid].LegMR.materials[1];\n        loginPlayersController.playerShoes[playerid].id = ShoesId[playerid];\n\n        loginPlayersController.playersAppearance[playerid].SetPlayerMaterials(JerseyMat, SkinMat, SockMat, ShoesMat);\n    }\n\n    PlayerShadowAnimation playerShadowAnimation;\n    Material celeMaterial;\n    Material[] _materials;\n    void PlayerShadow(Transform targetPlayer)\n    {\n        Platform.EventDispatcher.TriggerEvent(\"SetShadowForIncident\");\n        playerShadowAnimation = targetPlayer.GetComponent<PlayerShadowAnimation>();\n        celeMaterial = playerShadowAnimation.Shadow.material;\n        celeMaterial.SetFloat(\"_baseScale\", 1.5f);\n        celeMaterial.SetFloat(\"_yScaleMul\", 5);\n        celeMaterial.SetFloat(\"_baseBlur\", 1);\n        celeMaterial.SetFloat(\"_yBlurFade\", 0.5f);\n        celeMaterial.SetFloat(\"_yFade\", 0.67f);\n        celeMaterial.SetFloat(\"_transparent\", 0.7f);\n\n        if (_materials!= null)\n        {\n            for (int i = 0; i < _materials.Length; i++)\n            {\n                if (_materials[i]!= null)\n                {\n                    playerShadowAnimation.EnableSoftShadow(_materials[i], 0.025f);\n                }\n            }\n        }\n    }\n\n    void SoftShadowInit(Material[] materials, float fitnessRoomFloorGroundY, bool isShadowEnabled)\n    {\n        _materials = materials;\n    }\n\n\n    private void Update()\n    {\n\n    }\n\n\n    private void OnDestroy()\n    {\n        Platform.EventDispatcher.RemoveEventListener<Material[], float, bool>(\"PlayerIncidentSoftShadowInit\", SoftShadowInit);\n\n        foreach (var tex in JerseyTexList)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(tex);\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"RenderDetailMode\", false);\n\n        ClothDataLoader.UnloadAllPreLoadedClothDatas();\n        PlayerHeadDataLoader.UnloadAllPreLoadedHeadDatas();\n        PlayerJerseyDataLoader.UnloadAllPreLoadedJerseyDatas();\n        PlayerSockDataLoader.UnloadAllPreLoadedSockDatas();\n        //WorldCupLogin.Instance.OnDestory();\n\n        // if(debutWarmUpController!=null)\n        // {\n        //    Destroy(debutWarmUpController);\n        //    debutWarmUpController=null;\n        // }\n    }\n\n}\n#endif\n", "starcoder_inputs": "<fim_prefix>\ufeffusing Framework.GalaSports.Service;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n#if USE_RENDER_ASYNCLOAD\npublic class LoginScene3DPlayersController : RenderingBase\n{\n\n    public AudienceCamController audience;\n    public string[] playersHeadName;\n\n    public int[] playersBodyHeight;\n\n    public int[] playersABodyWeight;\n\n    public Material[] playersSkinMat;\n\n    public Material ClothMat;\n    public Material SocksMat;\n    public Material ShoesMat;\n\n    public Material[] playersPCSkinMat;\n    public Material PCClothMat;\n    public Material PCSocksMat;\n    public Material PCShoesMat;\n\n    public Transform[] Players;\n    public Animator ballAnimator;\n    public Animator cameraAnimator;\n\n    //\u961f\u5fbd\n    public Texture2D TeamLogoTex;\n\n    //\u5b88\u95e8\u5458\n    int GoalKeeperId = 1;\n    public Texture2D GoalKeeper_Jerseytex; //\u7403\u8863\n    public Texture2D GoalKeeper_Socktex; //\u889c\u5b50\n\n    public Camera camera;\n\n    public GalaShaderGlobalSetting galaShaderGlobalSetting;\n\n    public Light mainLight;\n\n    public MeshRenderer[] DofMeshRenderers;\n\n    List<RenderTexture> JerseyTexList = new List<RenderTexture>();\n\n    public float DOFDistance = 15f;\n\n    static string[] JerseyIds = new string[] {\n        \"7_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"31_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",//\u5b88\u95e8\u5458\u6570\u636e\u65e0\u6548\n        \n        \"3_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",\n        \"6_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"10_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"17_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",\n    };\n    static int[] ShoesId = new int[] {\n        1,2,6,1,3,4\n    };\n    static string[] PlayerAnimationNames = new string[] {\n        \"Login1A\",\n        \"Login1B\",\n        \"Login2A\",\n        \"Login2B\",\n        \"Login3A\",\n        \"Login3B\",\n    };\n    const string BallAnimationName = \"Football1\";\n    const string CameraAnimationName = \"LoginCamera\";\n\n    //public  GameObject DebutWarmUPController;\n    //GameObject debutWarmUpController;\n\n    LoginPlayersController loginPlayersController;\n\n    public override async void Init(GameObject go)\n    {\n        loginPlayersController = go.GetComponent<LoginPlayersController>();\n        if (loginPlayersController!= null)\n        {\n            RenderingHelper.PublicFieldCopy<LoginPlayersController, LoginScene3DPlayersController>(loginPlayersController, this);\n            //loginPlayersController.onUpdate = Update;\n            loginPlayersController.onDestroy = OnDestroy;\n            loginPlayersController.onStart = Start;\n        }\n\n        Platform.EventDispatcher.AddEventListener<Camera, Material[], float, bool>(\"PlayerIncidentSoftShadowInit\", SoftShadowInit);\n        loginPlayersController.cameraTransform = camera.transform;\n        galaShaderGlobalSetting.UpdateSetting();\n\n        loginPlayersController.setting = camera.GetComponent<CameraRenderPassSetting>();\n        loginPlayersController.setting.DoFEnable = true;\n        loginPlayersController.setting.DoFBlurIteration = 2;\n        loginPlayersController.setting.DoFBlurIntensity = 1f;\n        loginPlayersController.setting.DoFBlurStart = 0.34f;\n        loginPlayersController.setting.DofBlurSoftness = 0.125f;\n        loginPlayersController.setting.HDRExposureKey = 0.2f;\n        loginPlayersController.setting.HDRMinLum = 0.08f;\n        loginPlayersController.setting.HDRMaxLum = 0.8f;\n\n        ResourceMgr.Instance.SetProvider(new CustomAddressableProvider());\n\n        PlayerJerseyGenerator.Instance.Initialize();\n    }\n\n    async void Start()\n    {\n        RenderingHelper.Instance.AddLoadingTime();\n        try\n        {\n            await StartAsync();\n        }\n        catch { }\n        RenderingHelper.Instance.RemoveLoadingTime();\n    }\n\n    private async GTask StartAsync()\n    {\n        cameraAnimator.enabled = false;\n        ballAnimator.enabled = false;\n\n        //\u8bbe\u7f6e\u72b6\u6001\n        for (int i = 0; i < Players.Length; i++)\n        {\n            loginPlayersController.playersAnimation[i] = Players[i].GetComponent<HighPolyPlayerAnimationController>();\n\n            loginPlayersController.playersAppearance[i] = Players[i].GetComponent<HighPolyPlayerAppearanceController>();\n            loginPlayersController.playerShoes[i] = Players[i].GetComponent<Playershoes>();\n            if (i == GoalKeeperId)\n            {\n                loginPlayersController.playersAppearance[i].IsKeeper = true;\n            }\n\n            loginPlayersController.playersAnimation[i].Hide(); //\u9690\u85cf\u907f\u514d\u52a0\u8f7d\u4e2d\u88ab\u770b\u5230\n        }\n\n        //\u52a0\u8f7d\u7403\u5458\u8d34\u56fe\n        for (int i = 0; i < Players.Length; i++)\n        {\n\n#if (UNITY_STANDALONE_OSX || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN) && (!UNITY_ANDROID) && (!UNITY_IOS)\n            //playersAppearance[i].SetPlayerMaterials(PCClothMat, playersPCSkinMat[i], PCSocksMat, PCShoesMat);\n             HighPolyPlayerAppearance_Hotfix.SetPlayerMaterials(loginPlayersController.playersAppearance[i],PCClothMat,playersPCSkinMat[i], PCSocksMat, PCShoesMat);\n#else\n            //playersAppearance[i].SetPlayerMaterials(ClothMat, playersSkinMat[i], SocksMat, ShoesMat);\n            loginPlayersController.playersAppearance[i].SetPlayerMaterials(ClothMat, playersSkinMat[i], SocksMat, ShoesMat);\n#endif\n\n            //playersAppearance[i].PrecalculateBodyShape(playersBodyHeight[i], playersABodyWeight[i]);\n            loginPlayersController.playersAppearance[i].PrecalculateBodyShape(playersBodyHeight[i], playersABodyWeight[i]);\n            loginPlayersController.playersAnimation[i].Hide(); //\u9690\u85cf\u907f\u514d\u52a0\u8f7d\u4e2d\u88ab\u770b\u5230\n\n            //playersAppearance[i].SetPlayerHead(playersHeadName[i], SkinColorForTexture.WHITE);\n            //playersAppearance[i].SetPlayerBodyShapeOnPelvis(playersBodyHeight[i], playersABodyWeight[i], 0);\n            await loginPlayersController.playersAppearance[i].SetPlayerHeadAsync(playersHeadName[i], SkinColorForTexture.WHITE);\n            loginPlayersController.playersAppearance[i].SetPlayerBodyShapeOnPelvis(playersBodyHeight[i], playersABodyWeight[i], 0);\n\n            loginPlayersController.playersAnimation[i].Init(true, false);\n            loginPlayersController.playersAnimation[i].HideFootball();\n\n            await CreateJersey(i);\n\n            loginPlayersController.playersAppearance[i].HeadMR.material.SetFloat(\"_Smoothness\", 1.42f);\n            loginPlayersController.playersAppearance[i].LimbGPUSKM.material.SetFloat(\"_Smoothness\", 1.15f);\n            loginPlayersController.playersPelvis[i] = loginPlayersController.playersAnimation[i].Pelvis;\n        }\n\n        loginPlayersController.football = ballAnimator.GetComponentInChildren<MeshRenderer>().transform;\n\n        //Go.DelayCall(()=>{\n        //    PlayerJerseyGenerator.Instance.SetCameraActive(false);\n        //},2);\n        //\n\n        //\u9884\u8bfb\u53d6\u52a8\u753b\n        for (int i = 0; i < loginPlayersController.playersAnimation.Length; i++)\n        {\n            await loginPlayersController.playersAnimation[i].PreloadAnimationAsync(PlayerAnimationNames[i], false);\n        }\n\n        //\u64ad\u653e\u52a8\u753b\n        for (int i = 0; i < loginPlayersController.playersAnimation.Length; i++)\n        {\n            loginPlayersController.playersAnimation[i].PlayAnimation(PlayerAnimationNames[i]);\n            PlayerShadow(loginPlayersController.playersAnimation[i].transform);\n        }\n\n        loginPlayersController.ResourceInit = true;\n\n        audience.SetSheerUpLevel(2);\n\n        cameraAnimator.enabled = true;\n        cameraAnimator.Play(CameraAnimationName);\n\n        ballAnimator.enabled = true;\n        ballAnimator.Play(BallAnimationName);\n\n\n        for (int i = 0; i < DofMeshRenderers.Length; i++)\n        {\n            DofMeshRenderers[i].gameObject.layer = LayerMask.NameToLayer(\"DOF\");\n            if (i == 1)\n            {\n                DofMeshRenderers[i].material.SetColor(\"_EmissionColor\", new Color(0.7f, 0.7f, 0.7f, 1));\n                DofMeshRenderers[i].material.EnableKeyword(\"_EMISSION\");\n            }\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"RenderDetailMode\", true);\n    }\n\n    async GTask CreateJersey(int playerid)\n    {\n        Texture2D jerseytex;\n        Texture2D socktex;\n        if (playerid == GoalKeeperId)\n        {\n            jerseytex = GoalKeeper_Jerseytex;\n            socktex = GoalKeeper_Socktex;\n            loginPlayersController.playersAppearance[player<fim_suffix>playerid].HomeGKSockTex = socktex;\n        }\n        else\n        {\n            await GAsync.WaitNextFrame();\n            PlayerJerseyGenerator.Instance.TeamLogoTex = TeamLogoTex;\n            //await PlayerJerseyGenerator.Instance.SetJerseyInfo(JerseyIds[playerid]);\n            //PlayerJerseyGenerator.Instance.UpdateJerseyProperties();\n\n            //jerseytex = PlayerJerseyGenerator.Instance.GetDIYTex();\n            //socktex = PlayerJerseyGenerator.Instance.GetSockTex();\n\n            await PlayerJerseyGenerator.Instance.SetJerseyInfoAsync(JerseyIds[playerid]);\n\n            jerseytex = PlayerJerseyGenerator.Instance.GetDIYTex();\n            socktex = PlayerJerseyGenerator.Instance.GetSockTex();\n\n\n            JerseyTexList.Add(jerseytex);\n            JerseyTexList.Add(socktex);\n        }\n\n        Material JerseyMat = loginPlayersController.playersAppearance[playerid].ClothGPUSKM.material;\n        JerseyMat.SetTexture(\"_BaseMap\", jerseytex);\n        Material SkinMat = loginPlayersController.playersAppearance[playerid].LimbGPUSKM.material;\n        Material SockMat = loginPlayersController.playersAppearance[playerid].LegMR.materials[0];\n        SockMat.SetTexture(\"_BaseMap\", socktex);\n        Material ShoesMat = loginPlayersController.playersAppearance[playerid].LegMR.materials[1];\n        loginPlayersController.playerShoes[playerid].id = ShoesId[playerid];\n\n        loginPlayersController.playersAppearance[playerid].SetPlayerMaterials(JerseyMat, SkinMat, SockMat, ShoesMat);\n    }\n\n    PlayerShadowAnimation playerShadowAnimation;\n    Material celeMaterial;\n    Camera _shadowCamera;\n    Material[] _materials;\n    void PlayerShadow(Transform targetPlayer)\n    {\n        Platform.EventDispatcher.TriggerEvent(\"SetShadowForIncident\");\n        playerShadowAnimation = targetPlayer.GetComponent<PlayerShadowAnimation>();\n        celeMaterial = playerShadowAnimation.Shadow.material;\n        celeMaterial.SetFloat(\"_baseScale\", 1.5f);\n        celeMaterial.SetFloat(\"_yScaleMul\", 5);\n        celeMaterial.SetFloat(\"_baseBlur\", 1);\n        celeMaterial.SetFloat(\"_yBlurFade\", 0.5f);\n        celeMaterial.SetFloat(\"_yFade\", 0.67f);\n        celeMaterial.SetFloat(\"_transparent\", 0.7f);\n\n        if (_materials!= null)\n        {\n            for (int i = 0; i < _materials.Length; i++)\n            {\n                if (_materials[i]!= null && _shadowCamera!= null)\n                {\n                    playerShadowAnimation.EnableSoftShadow(_materials[i], _shadowCamera, 0.025f);\n                }\n            }\n        }\n    }\n\n    void SoftShadowInit(Camera shadowCamera, Material[] materials, float fitnessRoomFloorGroundY, bool isShadowEnabled)\n    {\n        _shadowCamera = shadowCamera;\n        _materials = materials;\n    }\n\n    private void Update()\n    {\n        \n    }\n    \n\n    private void OnDestroy()\n    {\n        Platform.EventDispatcher.RemoveEventListener<Camera, Material[], float, bool>(\"PlayerIncidentSoftShadowInit\", SoftShadowInit);\n\n        foreach (var tex in JerseyTexList)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(tex);\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"RenderDetailMode\", false);\n\n        // if(debutWarmUpController!=null)\n        // {\n        //    Destroy(debutWarmUpController);\n        //    debutWarmUpController=null;\n        // }\n    }\n\n}\n#else\npublic class LoginScene3DPlayersController : RenderingBase\n{\n\n    public AudienceCamController audience;\n    public string[] playersHeadName;\n\n    public int[] playersBodyHeight;\n\n    public int[] playersABodyWeight;\n\n    public Material[] playersSkinMat;\n\n    public Material ClothMat;\n    public Material SocksMat;\n    public Material ShoesMat;\n\n    Material[] playersPCSkinMat;\n    Material PCClothMat;\n    Material PCSocksMat;\n    Material PCShoesMat;\n\n    public string[] playersPCSkinsMatPath;\n    public string PCClothMatPath;\n    public string PCSocksMatPath;\n    public string PCShoesMatPath;\n\n    public Transform[] Players;\n    public Animator ballAnimator;\n    public Animator cameraAnimator;\n\n    //\u961f\u5fbd\n    public Texture2D TeamLogoTex;\n\n    //\u5b88\u95e8\u5458\n    int GoalKeeperId = 1;\n    public Texture2D GoalKeeper_Jerseytex; //\u7403\u8863\n    public Texture2D GoalKeeper_Socktex; //\u889c\u5b50\n\n    public Camera camera;\n\n    public GalaShaderGlobalSetting galaShaderGlobalSetting;\n\n    public Light mainLight;\n\n    public MeshRenderer[] DofMeshRenderers;\n\n    List<RenderTexture> JerseyTexList = new List<RenderTexture>();\n\n    public float DOFDistance = 15f;\n\n    static string[] JerseyIds = new string[] {\n        \"7_GALASPORTS_28973bFF_d3cb4aFF_37362fFF_1_20222023_22_c9be44ff_28973bFF_4f3db5ff\",\n        \"31_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",//\u5b88\u95e8\u5458\u6570\u636e\u65e0\u6548\n        \n        \"3_GALASPORTS_c19a6eFF_c19a6eFF_c19a6eFF_1_20222023_22_27324fff_202738FF_27324fff\",\n        \"6_GALASPORTS_151515FF_d9d9d9FF_151515FF_1_20222023_22_ddddddff_1f2326FF_0f0f0fff\",\n        \"10_GALASPORTS_1e57a0FF_f0f0f0FF_1e57a0FF_1_20222023_22_b6cadaff_74a1c8FF_1255a5ff\",\n        \"17_GALASPORTS_cd8b3cFF_c6893bFF_cd8b3cFF_1_20222023_22_7a111cff_0b4623FF_0b4623ff\",\n    };\n    static int[] ShoesId = new int[] {\n        1,2,6,1,3,4\n    };\n    static string[] PlayerAnimationNames = new string[] {\n        \"Login1A\",\n        \"Login1B\",\n        \"Login2A\",\n        \"Login2B\",\n        \"Login3A\",\n        \"Login3B\",\n    };\n    const string BallAnimationName = \"Football\";\n    const string CameraAnimationName = \"LoginCamera\";\n\n    //public  GameObject DebutWarmUPController;\n    //GameObject debutWarmUpController;\n\n    LoginPlayersController loginPlayersController;\n\n    static string[] stateNamesToPreLoadClothData = new string[]\n    {\n        \"Player1\",\"Player2\",\"Player3\",\"Player4\",\"Player5\",\"Player6\"\n    };\n\n    public override async void Init(GameObject go)\n    {\n        ClothDataLoader.AsyncPreLoadMultiClotDataSet(stateNamesToPreLoadClothData);\n\n        for (int i = 0; i < JerseyIds.Length; i++)\n        {\n            PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(JerseyIds[i]);\n            PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(JerseyIds[i]);\n        }\n\n        loginPlayersController = go.GetComponent<LoginPlayersController>();\n        if (loginPlayersController!= null)\n        {\n            RenderingHelper.PublicFieldCopy<LoginPlayersController, LoginScene3DPlayersController>(loginPlayersController, this);\n            //loginPlayersController.onUpdate = Update;\n            loginPlayersController.onDestroy = OnDestroy;\n            loginPlayersController.onStart = Start;\n        }\n\n        PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(playersHeadName);\n\n        Platform.EventDispatcher.AddEventListener<Material[], float, bool>(\"PlayerIncidentSoftShadowInit\", SoftShadowInit);\n        loginPlayersController.cameraTransform = camera.transform;\n        galaShaderGlobalSetting.UpdateSetting();\n\n        loginPlayersController.setting = camera.GetComponent<CameraRenderPassSetting>();\n        loginPlayersController.setting.DoFEnable = true;\n        loginPlayersController.setting.DoFBlurIteration = 2;\n        loginPlayersController.setting.DoFBlurIntensity = 1f;\n        loginPlayersController.setting.DoFBlurStart = 0.34f;\n        loginPlayersController.setting.DofBlurSoftness = 0.125f;\n        loginPlayersController.setting.HDRExposureKey = 0.2f;\n        loginPlayersController.setting.HDRMinLum = 0.08f;\n        loginPlayersController.setting.HDRMaxLum = 0.8f;\n\n        ResourceMgr.Instance.SetProvider(new CustomAddressableProvider());\n\n        PlayerJerseyGenerator.Instance.Initialize();\n    }\n\n    private void Start()\n    {\n        try\n        {\n            cameraAnimator.enabled = false;\n            ballAnimator.enabled = false;\n\n            //\u8bbe\u7f6e\u72b6\u6001\n            for (int i = 0; i < Players.Length; i++)\n            {\n                loginPlayersController.playersAnimation[i] = Players[i].GetComponent<HighPolyPlayerAnimationController>();\n\n                loginPlayersController.playersAppearance[i] = Players[i].GetComponent<HighPolyPlayerAppearanceController>();\n                loginPlayersController.playerShoes[i] = Players[i].GetComponent<Playershoes>();\n                if (i == GoalKeeperId)\n                {\n                    loginPlayersController.playersAppearance[i].IsKeeper = true;\n                }\n\n                loginPlayersController.playersAnimation[i].Hide(); //\u9690\u85cf\u907f\u514d\u52a0\u8f7d\u4e2d\u88ab\u770b\u5230\n            }\n\n//#if (UNITY_STANDALONE_OSX || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN) && (!UNITY_ANDROID) && (!UNITY_IOS)\n//                        //\u52a0\u8f7d\u7403\u5458\u6750\u8d28\n//                        int skinCount = playersPCSkinsMatPath.Length;\n//                        playersPCSkinMat = new Material[skinCount];\n//                        for (int i = 0; i < skinCount; i++)\n//                        {\n//                            playersPCSkinMat[i] = ResourceMgr.Instance.LoadAsset<Material>(playersPCSkinsMatPath[i]);\n//                        }\n\n//                        PCClothMat = ResourceMgr.Instance.LoadAsset<Material>(PCClothMatPath);\n//                        PCSocksMat = ResourceMgr.Instance.LoadAsset<Material>(PCSocksMatPath);\n//                        PCShoesMat = ResourceMgr.Instance.LoadAsset<Material>(PCShoesMatPath);\n//#endif\n\n\n            //\u52a0\u8f7d\u7403\u5458\u8d34\u56fe\n            for (int i = 0; i < Players.Length; i++)\n            {\n                if (i == 1)\n                {\n                    loginPlayersController.playersAppearance[i].HomeGKJerseyTex = loginPlayersController.GoalKeeper_Jerseytex;\n                    loginPlayersController.playersAppearance[i].HomeGKSockTex = loginPlayersController.GoalKeeper_Socktex;\n                }\n\n                HighPolyPlayerAppearance_Hotfix.SetPlayerAppearance(loginPlayersController.playersAppearance[i], int.Parse(playersHeadName[i]), playersBodyHeight[i], playersABodyWeight[i], loginPlayersController.skinColors[i], loginPlayersController.skinColorsCorrectionValue[i], JerseyIds[i], ShoesId[i], loginPlayersController.playersID[i], i == 1, \"\", \"0\", false, null, true);\n\n                /*#if (UNITY_STANDALONE_OSX || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN) && (!UNITY_ANDROID) && (!UNITY_IOS)\n                                //playersAppearance[i].SetPlayerMaterials(PCClothMat, playersPCSkinMat[i], PCSocksMat, PCShoesMat);\n                                HighPolyPlayerAppearance_Hotfix.SetPlayerMaterials(loginPlayersController.playersAppearance[i],PCClothMat, playersPCSkinMat[i], PCSocksMat, PCShoesMat);\n                #else\n                                //playersAppearance[i].SetPlayerMaterials(ClothMat, playersSkinMat[i], SocksMat, ShoesMat);\n                                HighPolyPlayerAppearance_Hotfix.SetPlayerMaterials(loginPlayersController.playersAppearance[i], ClothMat, playersSkinMat[i], SocksMat, ShoesMat);\n                #endif\n\n                                //playersAppearance[i].PrecalculateBodyShape(playersBodyHeight[i], playersABodyWeight[i]);\n                                HighPolyPlayerAppearance_Hotfix.PrecalculateBodyShape(loginPlayersController.playersAppearance[i], playersBodyHeight[i], playersABodyWeight[i]);\n                                loginPlayersController.playersAnimation[i].Hide(); //\u9690\u85cf\u907f\u514d\u52a0\u8f7d\u4e2d\u88ab\u770b\u5230\n\n                                //playersAppearance[i].SetPlayerHead(playersHeadName[i], SkinColorForTexture.WHITE);\n                                //playersAppearance[i].SetPlayerBodyShapeOnPelvis(playersBodyHeight[i], playersABodyWeight[i], 0);\n                                HighPolyPlayerAppearance_Hotfix.SetPlayerHead(loginPlayersController.playersAppearance[i], playersHeadName[i], SkinColorForTexture.WHITE);\n                                HighPolyPlayerAppearance_Hotfix.SetPlayerBodyShapeOnPelvis(loginPlayersController.playersAppearance[i], playersBodyHeight[i], playersABodyWeight[i], 0);*/\n\n                loginPlayersController.playersAnimation[i].Init(true, false);\n                loginPlayersController.playersAnimation[i].HideFootball();\n\n                //CreateJersey(i);\n\n                loginPlayersController.playersAppearance[i].HeadMR.material.SetFloat(\"_Smoothness\", 1.42f);\n                loginPlayersController.playersAppearance[i].LimbGPUSKM.material.SetFloat(\"_Smoothness\", 1.15f);\n                loginPlayersController.playersPelvis[i] = loginPlayersController.playersAnimation[i].Pelvis;\n            }\n\n            loginPlayersController.football = ballAnimator.GetComponentInChildren<MeshRenderer>().transform;\n\n            //Go.DelayCall(()=>{\n            //    PlayerJerseyGenerator.Instance.SetCameraActive(false);\n            //},2);\n            //\n\n            //\u64ad\u653e\u52a8\u753b\n            for (int i = 0; i < loginPlayersController.playersAnimation.Length; i++)\n            {\n                //playersAnimation[i].PlayAnimation(PlayerAnimationNames[i]);\n                HighPolyPlayerAnimation_Hotfix.PlayAnimation(loginPlayersController.playersAnimation[i], PlayerAnimationNames[i]);\n                PlayerShadow(loginPlayersController.playersAnimation[i].transform);\n            }\n\n            loginPlayersController.ResourceInit = true;\n\n            //if(audience!= null)\n            //{\n            //    audience.SetSheerUpLevel(2);\n            //}\n            AudienceStatus.Instance.SetAudienceSheerUpLevel(2);\n            //\u52a0\u8f7d\u4e16\u754c\u676f\u6c1b\u56f4(\u4e16\u754c\u676f\u8fc7\u53bb\u4e86\uff0c\u4e0d\u52a0\u8f7d)\n            //WorldCupLogin.Instance.Init();\n\n            cameraAnimator.enabled = true;\n            cameraAnimator.Play(CameraAnimationName, 0, 0);\n            cameraAnimator.Update(0);\n\n            ballAnimator.enabled = true;\n            ballAnimator.Play(BallAnimationName, 0, 0);\n            ballAnimator.Update(0);\n\n\n            for (int i = 0; i < DofMeshRenderers.Length; i++)\n            {\n                DofMeshRenderers[i].gameObject.layer = LayerMask.NameToLayer(\"DOF\");\n                if (i == 1)\n                {\n                    DofMeshRenderers[i].material.SetColor(\"_EmissionColor\", new Color(0.7f, 0.7f, 0.7f, 1));\n                    DofMeshRenderers[i].material.EnableKeyword(\"_EMISSION\");\n                }\n            }\n\n            Platform.EventDispatcher.TriggerEvent(\"RenderDetailMode\", true);\n\n        }\n        catch { }\n    }\n\n    void CreateJersey(int playerid)\n    {\n\n        Material JerseyMat = loginPlayersController.playersAppearance[playerid].ClothGPUSKM.material;\n        Material SockMat = loginPlayersController.playersAppearance[playerid].LegMR.materials[0];\n        if (playerid == GoalKeeperId)\n        {\n            loginPlayersController.playersAppearance[playerid].HomeGKJerseyTex = GoalKeeper_Jerseytex;\n            loginPlayersController.playersAppearance[playerid].HomeGKSockTex = GoalKeeper_Socktex;\n            JerseyMat.SetTexture(\"_BaseMap\", GoalKeeper_Jerseytex);\n            SockMat.SetTexture(\"_BaseMap\", GoalKeeper_Socktex);\n        }\n        else\n        {\n            GAsync.WaitNextFrame();\n            RenderTexture jerseytex;\n            RenderTexture socktex;\n            PlayerJerseyGenerator.Instance.TeamLogoTex = TeamLogoTex;\n            //PlayerJerseyGenerator.Instance.SetJerseyInfo(JerseyIds[playerid]);\n            //PlayerJerseyGenerator.Instance.UpdateJerseyProperties();\n\n            //jerseytex = PlayerJerseyGenerator.Instance.GetDIYTex();\n            //socktex = PlayerJerseyGenerator.Instance.GetSockTex();\n\n            PlayerJerseyGenerator_Hotfix.SetJerseyInfo(JerseyIds[playerid]);\n\n            jerseytex = PlayerJerseyGenerator_Hotfix.GetDIYTex();\n            socktex = PlayerJerseyGenerator_Hotfix.GetSockTex();\n            JerseyTexList.Add(jerseytex);\n            JerseyTexList.Add(socktex);\n\n            JerseyMat.SetTexture(\"_BaseMap\", jerseytex);\n            SockMat.SetTexture(\"_BaseMap\", socktex);\n        }\n        Material SkinMat = loginPlayersController.playersAppearance[playerid].LimbGPUSKM.material;\n        Material ShoesMat = loginPlayersController.playersAppearance[playerid].LegMR.materials[1];\n        loginPlayersController.playerShoes[playerid].id = ShoesId[playerid];\n\n        loginPlayersController.playersAppearance[playerid].SetPlayerMaterials(JerseyMat, SkinMat, SockMat, ShoesMat);\n    }\n\n    PlayerShadowAnimation playerShadowAnimation;\n    Material celeMaterial;\n    Material[] _materials;\n    void PlayerShadow(Transform targetPlayer)\n    {\n        Platform.EventDispatcher.TriggerEvent(\"SetShadowForIncident\");\n        playerShadowAnimation = targetPlayer.GetComponent<PlayerShadowAnimation>();\n        celeMaterial = playerShadowAnimation.Shadow.material;\n        celeMaterial.SetFloat(\"_baseScale\", 1.5f);\n        celeMaterial.SetFloat(\"_yScaleMul\", 5);\n        celeMaterial.SetFloat(\"_baseBlur\", 1);\n        celeMaterial.SetFloat(\"_yBlurFade\", 0.5f);\n        celeMaterial.SetFloat(\"_yFade\", 0.67f);\n        celeMaterial.SetFloat(\"_transparent\", 0.7f);\n\n        if (_materials!= null)\n        {\n            for (int i = 0; i < _materials.Length; i++)\n            {\n                if (_materials[i]!= null)\n                {\n                    playerShadowAnimation.EnableSoftShadow(_materials[i], 0.025f);\n                }\n            }\n        }\n    }\n\n    void SoftShadowInit(Material[] materials, float fitnessRoomFloorGroundY, bool isShadowEnabled)\n    {\n        _materials = materials;\n    }\n\n\n    private void Update()\n    {\n\n    }\n\n\n    private void OnDestroy()\n    {\n        Platform.EventDispatcher.RemoveEventListener<Material[], float, bool>(\"PlayerIncidentSoftShadowInit\", SoftShadowInit);\n\n        foreach (var tex in JerseyTexList)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(tex);\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"RenderDetailMode\", false);\n\n        ClothDataLoader.UnloadAllPreLoadedClothDatas();\n        PlayerHeadDataLoader.UnloadAllPreLoadedHeadDatas();\n        PlayerJerseyDataLoader.UnloadAllPreLoadedJerseyDatas();\n        PlayerSockDataLoader.UnloadAllPreLoadedSockDatas();\n        //WorldCupLogin.Instance.OnDestory();\n\n        // if(debutWarmUpController!=null)\n        // {\n        //    Destroy(debutWarmUpController);\n        //    debutWarmUpController=null;\n        // }\n    }\n\n}\n#endif\n<fim_middle>"}
{"inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Framework.GalaSports.Service;\n\npublic class FitnessRoomPlayer_Hotfix : RenderingBase\n{\n    public GameObject gameObject;\n    public Transform transform;\n    FitnessRoomPlayer fitnessRoomPlayer;\n    public static bool isResetShadow = false;\n\n    public override void Init(GameObject go)\n    {\n        base.Init(go);\n        gameObject = go;\n        transform = go.transform;\n        fitnessRoomPlayer = go.GetComponent<FitnessRoomPlayer>();\n        fitnessRoomPlayer.onEnable = OnEnable;\n        fitnessRoomPlayer.onDisable = OnDisable;\n        fitnessRoomPlayer.onDestroy = OnDestroy;\n\n        fitnessAnimatorCtrl = fitnessRoomPlayer.fitnessAnimatorCtrl;\n        Awake();\n    }\n\n    public HighPolyPlayerAppearanceController playerAppearance;\n    public HighPolyPlayerAnimationController playerAnimation;\n\n    GameObject fitnessRoomFloor;\n\n    PlayerShadowAnimation playerShadow;\n    Material playerMaterial;\n    PlayerReflectionController playerRefl;\n    GameObject playerObj;\n\n    Texture2D ShoeTex;\n\n    public bool isDressingRoom = false;\n\n\n    FitnessAnimatorCtrl fitnessAnimatorCtrl;\n    int graphicsLevel;\n    RenderTexture softshadow_RT;\n    // Start is called before the first frame update\n    void Awake()\n    {\n        isResetShadow = false;\n        playerAppearance = gameObject.GetComponentInChildren<HighPolyPlayerAppearanceController>();\n        playerAnimation = gameObject.GetComponentInChildren<HighPolyPlayerAnimationController>();\n        playerRefl = gameObject.GetComponentInChildren<PlayerReflectionController>();\n\n\n        string clothDataNameToPreLoad;\n\n        clothDataNameToPreLoad = CultivateAnimationConfig.IdleStateEntryNamesForClothData[(CultivateAnimationConfig.AnimationType)0][0];\n\n        ClothDataLoader.AsyncPreLoadOneClothDataSet(clothDataNameToPreLoad);\n\n        clothDataNameToPreLoad = CultivateAnimationConfig.IdleStateEntryNamesForClothData[(CultivateAnimationConfig.AnimationType)1][0];\n\n        ClothDataLoader.AsyncPreLoadOneClothDataSet(clothDataNameToPreLoad);\n    }\n\n    private void OnEnable()\n    {\n        GameObject go = GameObject.Find(\"Gala Global Setting\");\n        if (go != null)\n        {\n            GalaShaderGlobalSetting setting = go.GetComponent<GalaShaderGlobalSetting>();\n            if (setting != null)\n            {\n                if (GalaShaderGlobalSetting.CurQualitySetting.PostProcess <= 2)\n                {\n                    setting.m_Setting.m_SHAmbientIntensity = 1;\n                    setting.m_Setting.m_LightMapIntensity = 1;\n                    setting.UpdateSetting();\n                }\n                else\n                {\n                    setting.m_Setting.m_SHAmbientIntensity = 0;\n                    setting.m_Setting.m_LightMapIntensity = 0;\n                    setting.UpdateSetting();\n                }\n\n            }\n        }\n        if (isResetShadow)\n        {\n            playerShadow.IsShadowEnabled = true;\n            playerRefl.IsReflectionEnabled = true;\n        }\n          \n        if (isResetShadow && playerShadow.IsShadowEnabled && fitnessRoomFloor != null && graphicsLevel > 1)\n        {\n            if (shadowDir1 != Vector4.zero && shadowDir2 != Vector4.zero)\n            {\n                playerShadow.EnableSoftShadow(fitnessRoomFloor.GetComponent<MeshRenderer>().material, shadowDir1, shadowDir2, groundY);\n            }\n            else\n            {\n                playerShadow.EnableSoftShadow(fitnessRoomFloor.GetComponent<MeshRenderer>().material);\n\n            }\n\n        }\n        if (isResetShadow && playerRefl.IsReflectionEnabled && fitnessRoomFloor != null && SceneCameraController.instance.reflectionRT != null)\n        {\n            fitnessRoomPlayer.getPlayerRefTex.SetRefPlayerTex();\n            playerRefl.EnableReflection(fitnessRoomFloor.GetComponent<MeshRenderer>().material, fitnessRoomFloor.transform.position.y, SceneCameraController.instance.reflectionRT);\n        }\n    }\n\n\n    Vector4 shadowDir1 = Vector4.zero;\n    Vector4 shadowDir2 = Vector4.zero;\n    float groundY = 0;\n    public async GTask Init_Hotfix(GameObject aFitnessRoomFloor, Vector4 shadowDir1, Vector4 shadowDir2, float groundY = 0)\n    {\n        await Init_Hotfix(aFitnessRoomFloor);\n        this.shadowDir1 = shadowDir1;\n        this.shadowDir2 = shadowDir2;\n        this.groundY = groundY;\n    }\n\n    private async GTask Init_Hotfix(GameObject aFitnessRoomFloor)\n    {\n        playerObj = playerAnimation.gameObject;\n\n        //#if USE_RENDER_ASYNCLOAD\n        //        playerAnimation.SetHighPolyPlayerAppearanceController(playerAppearance);\n        //#endif\n\n        InitSoftShadow();\n#if UNITY_IOS && !UNITY_EDITOR\n        /*if (Device.generation == DeviceGeneration.iPhone11\n            || Device.generation == DeviceGeneration.iPhone11Pro \n            || Device.generation == DeviceGeneration.iPhone11ProMax \n            || Device.generation == DeviceGeneration.iPhone12\n            || Device.generation == DeviceGeneration.iPhone12Mini\n            || Device.generation == DeviceGeneration.iPhone12Pro\n            || Device.generation == DeviceGeneration.iPhone12ProMax)\n        {\n            playerAnimation.Init(false, true);\n        }\n        else\n        {\n            playerAnimation.Init(true, false);\n        }*/\n        playerAnimation.Init(true, false);\n#else\n        playerAnimation.Init(true, false);\n#endif\n        playerAnimation.Hide();\n        //PlayerComeOut(playerID);\n        graphicsLevel = GalaShaderGlobalSetting.CurQualitySetting.ShaderQuality;\n        /*GameObject go = GameObject.Find(\"/Home/CameraRoot/PlayerSoftShadowCamera\");\n        if (go != null)\n        {\n            shadowCamera = go.GetComponent<Camera>();\n            if (graphicsLevel >= 2)\n            {\n                rt = GalaRenderPipeline.GalaRenderManager.CreateTemporaryRT(640, 360, 0, UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8B8A8_UNorm, \"FitnessRoom_RT\");          \n                shadowCamera.targetTexture = rt;\n            }\n        }\n        GameObject go2 = GameObject.Find(\"/Home/CameraRoot/PlayerReflectionCamera\");\n        if (go2 != null)\n        {\n            reflCamera = go2.GetComponent<Camera>();\n        }*/\n        fitnessRoomFloor = aFitnessRoomFloor;\n    }\n\n    Texture _clothTex;\n    Texture _keeperClothTex;\n    Texture _socksTex;\n    Texture _keeperSocksTex;\n\n\n    //\u8fd9\u4e9b\u56fe\u7247\u4e0d\u80fd\u91ca\u653e\uff0c\u90fd\u662f TAGlobalData.Instance.jerseyTexture \u5b58\u50a8\u56fe\u7247\n    public void DestroyGeneratedTextures()\n    {\n        if (_clothTex != null)\n        {\n            //DebugEX.LogError(\"Destroy \" + _clothTex.GetInstanceID());\n            _clothTex.DestroySelf();\n\n            _clothTex = null;\n        }\n        if (_keeperClothTex != null)\n        {\n            _keeperClothTex.DestroySelf();\n            _keeperClothTex = null;\n        }\n        if (_socksTex != null)\n        {\n            _socksTex.DestroySelf();\n            _socksTex = null;\n        }\n        if (_keeperSocksTex != null)\n        {\n            _keeperSocksTex.DestroySelf();\n            _keeperSocksTex = null;\n        }\n    }\n\n    public void InitTeamClothesTexture(Texture clothTexture, Texture keeperClothTexture, Texture sockTexture, Texture keeperSockTexture)\n    {\n        if (isDressingRoom)\n        {\n            DestroyGeneratedTextures();\n            _clothTex = clothTexture;\n            _keeperClothTex = keeperClothTexture;\n            _socksTex = sockTexture;\n            _keeperSocksTex = keeperClothTexture;\n\n\n            /*            //playerAppearance.ClothSKM.material.SetTexture(\"_BaseMap\", clothTexture);\n                        playerAppearance.ClothGPUSKM.material.SetTexture(\"_BaseMap\", clothTexture);\n                        //DebugEX.LogError(playerAppearance.ClothGPUSKM.material.GetInstanceID());\n                        //TeamKeeperJerseyMat.SetTexture(\"_BaseMap\", keeperClothTexture);\n                        playerAppearance.LegMR.material.SetTexture(\"_BaseMap\", sockTexture);*/\n            if (fitnessRoomPlayer.getPlayerRefTex && this.fitnessRoomPlayer.isActiveAndEnabled)\n                fitnessRoomPlayer.getPlayerRefTex.SetRefPlayerTex();\n\n        }\n        else\n        {\n            if (!playerAppearance.IsKeeper)\n            {\n                /*playerAppearance.ClothGPUSKM.material.SetTexture(\"_BaseMap\", clothTexture);\n                playerAppearance.LegMR.material.SetTexture(\"_BaseMap\", sockTexture);*/\n            }\n            /*TeamJerseyMat.SetTexture(\"_BaseMap\", clothTexture);\n            TeamKeeperJerseyMat.SetTexture(\"_BaseMap\", keeperClothTexture);\n            TeamSockMat.SetTexture(\"_BaseMap\", sockTexture);\n            TeamKeeperSockMat.SetTexture(\"_BaseMap\", keeperSockTexture);*/\n        }\n\n        //\n        //TeamKeeperSockMat.SetTexture(\"_BaseMap\", sockTexture);\n    }\n\n    \n    public void InitSoftShadow()\n    {\n        //\u8bbe\u7f6e\u8f6f\u9634\u5f71\u6750\u8d28\n        playerShadow = this.gameObject.GetComponentInChildren<PlayerShadowAnimation>();\n        playerMaterial = playerShadow.Shadow.material;\n        playerMaterial.SetFloat(\"_baseScale\", 1.3f);\n        playerMaterial.SetFloat(\"_yScaleMul\", 1);\n        playerMaterial.SetFloat(\"_baseBlur\", 0.5f);\n        playerMaterial.SetFloat(\"_yBlurFade\", 2);\n        playerMaterial.SetFloat(\"_yFade\", 1.5f);\n        playerMaterial.SetFloat(\"_transparent\", 0.3f);\n\n    }\n\n    //\u8bbe\u7f6e\u7684\u7403\u5458\u6570\u91cf\n    int playerSetCount = 0;\n    //\u591a\u5c11\u6b21\u540e\u6e05\u7406\u4e00\u4e0b\u8d44\u6e90\n    readonly int maxSetCount = 5;\n\n    //player_id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684player_id\uff0c\u53ef\u4ee5\u7528\u6765\u67e5\u914d\u7f6e\n    //headModel_id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684headmodel\u503c\uff0c\u7528\u6765\u8868\u793a\u5934\u90e83D\u6a21\u578b\u7684\u6587\u4ef6\u540d\n    //isKeeper:\u662f\u5b88\u95e8\u5458\u5417?\n    //skinColor:\u80a4\u8272\u679a\u4e3e\u503c\uff0c\u53d6\u503c\u89c4\u5219\u4e0ePlayerCfg\u76f8\u540c\n    //bodyHeight:\u8eab\u9ad8\n    //shoe_Id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u7403\u978bid\n    public async GTask SetOneHighPolyPlayer(int player_id, int headModel_id, bool isKeeper, SkinColorForTexture skinColor, Vector3 skinColorCorrectionValue, int bodyHeight, int shoe_Id = 1, int bodyWeight = 0, string playerName = \"GALA\", int playerNumber = 0, string jerseyCode = null, bool isReserveClothMat = false)\n    {\n        DebugEX.LogError(\"  Fitness: \" + player_id);\n        if (shoe_Id < 1 || shoe_Id > 6)\n        {\n            DebugEX.LogError(\"\u65e0\u6548\u7684 shoe_id \uff01\uff01\uff01\");\n            shoe_Id = 1;\n        }\n\n        playerAppearance.player_id = player_id;\n\n        if (jerseyCode != null)\n        {\n            playerAppearance.SetPlayerAppearance(headModel_id, bodyHeight, bodyWeight, skinColor, skinColorCorrectionValue,PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(jerseyCode, playerNumber.ToString(), playerName),1, player_id, isKeeper, \"\", \"0\", false, null, true, isReserveClothMat);\n        }\n        else\n        {\n            playerAppearance.SetPlayerAppearance(headModel_id, bodyHeight, bodyWeight, skinColor, skinColorCorrectionValue, PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(TAGlobalData.Instance.JereyId, playerNumber.ToString(), playerName), 1, player_id, isKeeper, \"\", \"0\", false, null, true, isReserveClothMat);\n        }\n\n        fitnessRoomPlayer.getPlayerRefTex.SetRefPlayerTex();\n        if (!playerRefl.IsReflectionEnabled && fitnessRoomFloor != null && SceneCameraController.instance.reflectionRT != null)\n        {\n            playerRefl.EnableReflection(fitnessRoomFloor.GetComponent<MeshRenderer>().material, fitnessRoomFloor.transform.position.y, SceneCameraController.instance.reflectionRT);\n        }\n\n\n        //playerAppearance.PrecalculateBodyShape(bodyHeight, bodyWeight); \n        //playerAppearance.SetPlayerBodyShape(bodyHeight, bodyWeight);\n\n        //PlayRandomComeOutAnimation();\n\n        if (!playerShadow.IsShadowEnabled && fitnessRoomFloor != null && graphicsLevel > 1)\n        {\n            if (shadowDir1 != Vector4.zero && shadowDir2 != Vector4.zero)\n            {\n                playerShadow.EnableSoftShadow(fitnessRoomFloor.GetComponent<MeshRenderer>().material, shadowDir1, shadowDir2, groundY);\n            }\n            else\n            {\n                playerShadow.EnableSoftShadow(fitnessRoomFloor.GetComponent<MeshRenderer>().material);\n\n            }\n\n        }\n\n        //playerSetCount++;\n\n\n        if (playerSetCount++ > maxSetCount)\n        {\n            Resources.UnloadUnusedAssets();\n            playerSetCount = 0;\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"SetShadowForLowQ\", 0.04f);\n\n        string fileNameSuffix = headModel_id.ToString();\n        //playerAppearance.SetPlayerHead(fileNameSuffix, skinColor);\n        this.gameObject.SetActive(true);\n        PlayRandomIdleAnimation();\n\n        //await SetShoesTex(ShoesMat, shoe_Id);\n    }\n\n    async GTask SetShoesTex(Material ShoesMat, int shoe_Id)\n    {\n        string path = \"3D/PlayerJersey/PlayerShoes/\";\n        var shoeTexTask = await TAManager.LoadAssetAsync<Texture2D>(path + \"Shoes_\" + shoe_Id.ToString() + \"_tex\", \"FitnessRoom_Player_ShoeTex\");\n        if (ShoeTex != null)\n        {\n            TAManager.UnloadAsset(ShoeTex);\n        }\n        ShoeTex = shoeTexTask.result;\n        ShoesMat.SetTexture(\"_BaseMap\", ShoeTex);\n    }\n    public void PlayerUpgrade()\n    {\n        PlayRandomUpgradeAnimation();\n    }\n\n    CultivateAnimationConfig.AnimationType animationType;\n    public void PlayRandomIdleAnimation()\n    {\n        //int stateID;\n        //stateID = Random.Range(0, CultivateAnimationConfig.CultivateIdleStateEntryNamesSet.Length);\n        //playerAnimation.PlayAnimationWhenFocus(CultivateAnimationConfig.CultivateIdleStateEntryNamesSet[stateID]);\n        playerAnimation.HideFootball();\n\n\n        if (Random.Range(0, 10f) < 6.4f)\n        {\n            animationType = (CultivateAnimationConfig.AnimationType)0;\n        }\n        else\n        {\n            animationType = (CultivateAnimationConfig.AnimationType)1;\n        }\n\n\n\n        fitnessAnimatorCtrl.PlayIdle(playerAnimation, isDressingRoom, animationType);\n    }\n\n    void PlayRandomUpgradeAnimation()\n    {\n        playerAnimation.HideFootball();\n\n        fitnessAnimatorCtrl.PlayUpgrade(playerAnimation);\n    }\n\n    private void OnDisable()\n    {\n        if (playerShadow != null)\n        {\n            playerShadow.DisableSoftShadow();\n        }\n        if (playerRefl != null)\n        {\n            playerRefl.DisableReflection();\n        }\n        if (softshadow_RT != null)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(softshadow_RT);\n            softshadow_RT = null;\n        }\n    }\n\n\n\n    public void OnDestroy()\n    {\n        isResetShadow = false;\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(CultivateAnimationConfig.IdleStateEntryNamesForClothData[(CultivateAnimationConfig.AnimationType)0]);\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(CultivateAnimationConfig.IdleStateEntryNamesForClothData[(CultivateAnimationConfig.AnimationType)1]);\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(CultivateAnimationConfig.UpgradeStateNamesForClothData[(CultivateAnimationConfig.AnimationType)0]);\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(CultivateAnimationConfig.UpgradeStateNamesForClothData[(CultivateAnimationConfig.AnimationType)1]);\n\n\n        DestroyGeneratedTextures();\n        \n        Resources.UnloadUnusedAssets();\n    }\n}\n", "cropped_inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Framework.GalaSports.Service;\n\npublic class FitnessRoomPlayer_Hotfix : RenderingBase\n{\n    public GameObject gameObject;\n    public Transform transform;\n    FitnessRoomPlayer fitnessRoomPlayer;\n    public static bool isResetShadow = false;\n\n    public override void Init(GameObject go)\n    {\n        base.Init(go);\n        gameObject = go;\n        transform = go.transform;\n        fitnessRoomPlayer = go.GetComponent<FitnessRoomPlayer>();\n        fitnessRoomPlayer.onEnable = OnEnable;\n        fitnessRoomPlayer.onDisable = OnDisable;\n        fitnessRoomPlayer.onDestroy = OnDestroy;\n\n        fitnessAnimatorCtrl = fitnessRoomPlayer.fitnessAnimatorCtrl;\n        Awake();\n    }\n\n    public HighPolyPlayerAppearanceController playerAppearance;\n    public HighPolyPlayerAnimationController playerAnimation;\n\n    GameObject fitnessRoomFloor;\n\n    PlayerShadowAnimation playerShadow;\n    Material playerMaterial;\n    PlayerReflectionController playerRefl;\n    GameObject playerObj;\n\n    Texture2D ShoeTex;\n\n    public bool isDressingRoom = false;\n\n\n    FitnessAnimatorCtrl fitnessAnimatorCtrl;\n    int graphicsLevel;\n    RenderTexture softshadow_RT;\n    // Start is called before the first frame update\n    void Awake()\n    {\n        isResetShadow = false;\n        playerAppearance = gameObject.GetComponentInChildren<HighPolyPlayerAppearanceController>();\n        playerAnimation = gameObject.GetComponentInChildren<HighPolyPlayerAnimationController>();\n        playerRefl = gameObject.GetComponentInChildren<PlayerReflectionController>();\n\n\n        string clothDataNameToPreLoad;\n\n        clothDataNameToPreLoad = CultivateAnimationConfig.IdleStateEntryNamesForClothData[(CultivateAnimationConfig.AnimationType)0][0];\n\n        ClothDataLoader.AsyncPreLoadOneClothDataSet(clothDataNameToPreLoad);\n\n        clothDataNameToPreLoad = CultivateAnimationConfig.IdleStateEntryNamesForClothData[(CultivateAnimationConfig.AnimationType)1][0];\n\n        ClothDataLoader.AsyncPreLoadOneClothDataSet(clothDataNameToPreLoad);\n    }\n\n    private void OnEnable()\n    {\n        GameObject go = GameObject.Find(\"Gala Global Setting\");\n        if (go!= null)\n        {\n            GalaShaderGlobalSetting setting = go.GetComponent<GalaShaderGlobalSetting>();\n            if (setting!= null)\n            {\n                if (GalaShaderGlobalSetting.CurQualitySetting.PostProcess <= 2)\n                {\n                    setting.m_Setting.m_SHAmbientIntensity = 1;\n                    setting.m_Setting.m_LightMapIntensity = 1;\n                    setting.UpdateSetting();\n                }\n                else\n                {\n                    setting.m_Setting.m_SHAmbientIntensity = 0;\n                    setting.m_Setting.m_LightMapIntensity = 0;\n                    setting.UpdateSetting();\n                }\n\n            }\n        }\n        if (isResetShadow)\n        {\n            playerShadow.IsShadowEnabled = true;\n            playerRefl.IsReflectionEnabled = true;\n        }\n          \n        if (isResetShadow && playerShadow.IsShadowEnabled && fitnessRoomFloor!= null && graphicsLevel > 1)\n        {\n            if (shadowDir1!= Vector4.zero && shadowDir2!= Vector4.zero)\n            {\n                playerShadow.EnableSoftShadow(fitnessRoomFloor.GetComponent<MeshRenderer>().material, shadowDir1, shadowDir2, groundY);\n            }\n            else\n            {\n                playerShadow.EnableSoftShadow(fitnessRoomFloor.GetComponent<MeshRenderer>().material);\n\n            }\n\n        }\n        if (isResetShadow && playerRefl.IsReflectionEnabled && fitnessRoomFloor!= null && SceneCameraController.instance.reflectionRT!= null)\n        {\n            fitnessRoomPlayer.getPlayerRefTex.SetRefPlayerTex();\n            playerRefl.EnableReflection(fitnessRoomFloor.GetComponent<MeshRenderer>().material, fitnessRoomFloor.transform.position.y, SceneCameraController.instance.reflectionRT);\n        }\n    }\n\n\n    Vector4 shadowDir1 = Vector4.zero;\n    Vector4 shadowDir2 = Vector4.zero;\n    float groundY = 0;\n    public async GTask Init_Hotfix(GameObject aFitnessRoomFloor, Vector4 shadowDir1, Vector4 shadowDir2, float groundY = 0)\n    {\n        await Init_Hotfix(aFitnessRoomFloor);\n        this.shadowDir1 = shadowDir1;\n        this.shadowDir2 = shadowDir2;\n        this.groundY = groundY;\n    }\n\n    private async GTask Init_Hotfix(GameObject aFitnessRoomFloor)\n    {\n        playerObj = playerAnimation.gameObject;\n\n        //#if USE_RENDER_ASYNCLOAD\n        //        playerAnimation.SetHighPolyPlayerAppearanceController(playerAppearance);\n        //#endif\n\n        InitSoftShadow();\n#if UNITY_IOS &&!UNITY_EDITOR\n        /*if (Device.generation == DeviceGeneration.iPhone11\n            || Device.generation == DeviceGeneration.iPhone11Pro \n            || Device.generation == DeviceGeneration.iPhone11ProMax \n            || Device.generation == DeviceGeneration.iPhone12\n            || Device.generation == DeviceGeneration.iPhone12Mini\n            || Device.generation == DeviceGeneration.iPhone12Pro\n            || Device.generation == DeviceGeneration.iPhone12ProMax)\n        {\n            playerAnimation.Init(false, true);\n        }\n        else\n        {\n            playerAnimation.Init(true, false);\n        }*/\n        playerAnimation.Init(true, false);\n#else\n        playerAnimation.Init(true, false);\n#endifalaShaderGlobalSetting.CurQualitySetting.ShaderQuality;\n        /*GameObject go = GameObject.Find(\"/Home/CameraRoot/PlayerSoftShadowCamera\");\n        if (go!= null)\n        {\n            shadowCamera = go.GetComponent<Camera>();\n            if (graphicsLevel >= 2)\n            {\n                rt = GalaRenderPipeline.GalaRenderManager.CreateTemporaryRT(640, 360, 0, UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8B8A8_UNorm, \"FitnessRoom_RT\");          \n                shadowCamera.targetTexture = rt;\n            }\n        }\n        GameObject go2 = GameObject.Find(\"/Home/CameraRoot/PlayerReflectionCamera\");\n        if (go2!= null)\n        {\n            reflCamera = go2.GetComponent<Camera>();\n        }*/\n        fitnessRoomFloor = aFitnessRoomFloor;\n    }\n\n    Texture _clothTex;\n    Texture _keeperClothTex;\n    Texture _socksTex;\n    Texture _keeperSocksTex;\n\n\n    //\u8fd9\u4e9b\u56fe\u7247\u4e0d\u80fd\u91ca\u653e\uff0c\u90fd\u662f TAGlobalData.Instance.jerseyTexture \u5b58\u50a8\u56fe\u7247\n    public void DestroyGeneratedTextures()\n    {\n        if (_clothTex!= null)\n        {\n            //DebugEX.LogError(\"Destroy \" + _clothTex.GetInstanceID());\n            _clothTex.DestroySelf();\n\n            _clothTex = null;\n        }\n        if (_keeperClothTex!= null)\n        {\n            _keeperClothTex.DestroySelf();\n            _keeperClothTex = null;\n        }\n        if (_socksTex!= null)\n        {\n            _socksTex.DestroySelf();\n            _socksTex = null;\n        }\n        if (_keeperSocksTex!= null)\n        {\n            _keeperSocksTex.DestroySelf();\n            _keeperSocksTex = null;\n        }\n    }\n\n    public void InitTeamClothesTexture(Texture clothTexture, Texture keeperClothTexture, Texture sockTexture, Texture keeperSockTexture)\n    {\n        if (isDressingRoom)\n        {\n            DestroyGeneratedTextures();\n            _clothTex = clothTexture;\n            _keeperClothTex = keeperClothTexture;\n            _socksTex = sockTexture;\n            _keeperSocksTex = keeperClothTexture;\n\n\n            /*            //playerAppearance.ClothSKM.material.SetTexture(\"_BaseMap\", clothTexture);\n                        playerAppearance.ClothGPUSKM.material.SetTexture(\"_BaseMap\", clothTexture);\n                        //DebugEX.LogError(playerAppearance.ClothGPUSKM.material.GetInstanceID());\n                        //TeamKeeperJerseyMat.SetTexture(\"_BaseMap\", keeperClothTexture);\n                        playerAppearance.LegMR.material.SetTexture(\"_BaseMap\", sockTexture);*/\n            if (fitnessRoomPlayer.getPlayerRefTex && this.fitnessRoomPlayer.isActiveAndEnabled)\n                fitnessRoomPlayer.getPlayerRefTex.SetRefPlayerTex();\n\n        }\n        else\n        {\n            if (!playerAppearance.IsKeeper)\n            {\n                /*playerAppearance.ClothGPUSKM.material.SetTexture(\"_BaseMap\", clothTexture);\n                playerAppearance.LegMR.material.SetTexture(\"_BaseMap\", sockTexture);*/\n            }\n            /*TeamJerseyMat.SetTexture(\"_BaseMap\", clothTexture);\n            TeamKeeperJerseyMat.SetTexture(\"_BaseMap\", keeperClothTexture);\n            TeamSockMat.SetTexture(\"_BaseMap\", sockTexture);\n            TeamKeeperSockMat.SetTexture(\"_BaseMap\", keeperSockTexture);*/\n        }\n\n        //\n        //TeamKeeperSockMat.SetTexture(\"_BaseMap\", sockTexture);\n    }\n\n    \n    public void InitSoftShadow()\n    {\n        //\u8bbe\u7f6e\u8f6f\u9634\u5f71\u6750\u8d28\n        playerShadow = this.gameObject.GetComponentInChildren<PlayerShadowAnimation>();\n        playerMaterial = playerShadow.Shadow.material;\n        playerMaterial.SetFloat(\"_baseScale\", 1.3f);\n        playerMaterial.SetFloat(\"_yScaleMul\", 1);\n        playerMaterial.SetFloat(\"_baseBlur\", 0.5f);\n        playerMaterial.SetFloat(\"_yBlurFade\", 2);\n        playerMaterial.SetFloat(\"_yFade\", 1.5f);\n        playerMaterial.SetFloat(\"_transparent\", 0.3f);\n\n    }\n\n    //\u8bbe\u7f6e\u7684\u7403\u5458\u6570\u91cf\n    int playerSetCount = 0;\n    //\u591a\u5c11\u6b21\u540e\u6e05\u7406\u4e00\u4e0b\u8d44\u6e90\n    readonly int maxSetCount = 5;\n\n    //player_id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684player_id\uff0c\u53ef\u4ee5\u7528\u6765\u67e5\u914d\u7f6e\n    //headModel_id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684headmodel\u503c\uff0c\u7528\u6765\u8868\u793a\u5934\u90e83D\u6a21\u578b\u7684\u6587\u4ef6\u540d\n    //isKeeper:\u662f\u5b88\u95e8\u5458\u5417?\n    //skinColor:\u80a4\u8272\u679a\u4e3e\u503c\uff0c\u53d6\u503c\u89c4\u5219\u4e0ePlayerCfg\u76f8\u540c\n    //bodyHeight:\u8eab\u9ad8\n    //shoe_Id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u7403\u978bid\n    public async GTask SetOneHighPolyPlayer(int player_id, int headModel_id, bool isKeeper, SkinColorForTexture skinColor, Vector3 skinColorCorrectionValue, int bodyHeight, int shoe_Id = 1, int bodyWeight = 0, string playerName = \"GALA\", int playerNumber = 0, string jerseyCode = null, bool isReserveClothMat = false)\n    {\n        DebugEX.LogError(\"  Fitness: \" + player_id);\n        if (shoe_Id < 1 || shoe_Id > 6)\n        {\n            DebugEX.LogError(\"\u65e0\u6548\u7684 shoe_id \uff01\uff01\uff01\");\n            shoe_Id = 1;\n        }\n\n        playerAppearance.player_id = player_id;\n\n        if (jerseyCode!= null)\n        {\n            playerAppearance.SetPlayerAppearance(headModel_id, bodyHeight, bodyWeight, skinColor, skinColorCorrectionValue,PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(jerseyCode, playerNumber.ToString(), playerName),1, player_id, isKeeper, \"\", \"0\", false, null, true, isReserveClothMat);\n        }\n        else\n        {\n            playerAppearance.SetPlayerAppearance(headModel_id, bodyHeight, bodyWeight, skinColor, skinColorCorrectionValue, PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(TAGlobalData.Instance.JereyId, playerNumber.ToString(), playerName), 1, player_id, isKeeper, \"\", \"0\", false, null, true, isReserveClothMat);\n        }\n\n        fitnessRoomPlayer.getPlayerRefTex.SetRefPlayerTex();\n        if (!playerRefl.IsReflectionEnabled && fitnessRoomFloor!= null && SceneCameraController.instance.reflectionRT!= null)\n        {\n            playerRefl.EnableReflection(fitnessRoomFloor.GetComponent<MeshRenderer>().material, fitnessRoomFloor.transform.position.y, SceneCameraController.instance.reflectionRT);\n        }\n\n\n        //playerAppearance.PrecalculateBodyShape(bodyHeight, bodyWeight); \n        //playerAppearance.SetPlayerBodyShape(bodyHeight, bodyWeight);\n\n        //PlayRandomComeOutAnimation();\n\n        if (!playerShadow.IsShadowEnabled && fitnessRoomFloor!= null && graphicsLevel > 1)\n        {\n            if (shadowDir1!= Vector4.zero && shadowDir2!= Vector4.zero)\n            {\n                playerShadow.EnableSoftShadow(fitnessRoomFloor.GetComponent<MeshRenderer>().material, shadowDir1, shadowDir2, groundY);\n            }\n            else\n            {\n                playerShadow.EnableSoftShadow(fitnessRoomFloor.GetComponent<MeshRenderer>().material);\n\n            }\n\n        }\n\n        //playerSetCount++;\n\n\n        if (playerSetCount++ > maxSetCount)\n        {\n            Resources.UnloadUnusedAssets();\n            playerSetCount = 0;\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"SetShadowForLowQ\", 0.04f);\n\n        string fileNameSuffix = headModel_id.ToString();\n        //playerAppearance.SetPlayerHead(fileNameSuffix, skinColor);\n        this.gameObject.SetActive(true);\n        PlayRandomIdleAnimation();\n\n        //await SetShoesTex(ShoesMat, shoe_Id);\n    }\n\n    async GTask SetShoesTex(Material ShoesMat, int shoe_Id)\n    {\n        string path = \"3D/PlayerJersey/PlayerShoes/\";\n        var shoeTexTask = await TAManager.LoadAssetAsync<Texture2D>(path + \"Shoes_\" + shoe_Id.ToString() + \"_tex\", \"FitnessRoom_Player_ShoeTex\");\n        if (ShoeTex!= null)\n        {\n            TAManager.UnloadAsset(ShoeTex);\n        }\n        ShoeTex = shoeTexTask.result;\n        ShoesMat.SetTexture(\"_BaseMap\", ShoeTex);\n    }\n    public void PlayerUpgrade()\n    {\n        PlayRandomUpgradeAnimation();\n    }\n\n    CultivateAnimationConfig.AnimationType animationType;\n    public void PlayRandomIdleAnimation()\n    {\n        //int stateID;\n        //stateID = Random.Range(0, CultivateAnimationConfig.CultivateIdleStateEntryNamesSet.Length);\n        //playerAnimation.PlayAnimationWhenFocus(CultivateAnimationConfig.CultivateIdleStateEntryNamesSet[stateID]);\n        playerAnimation.HideFootball();\n\n\n        if (Random.Range(0, 10f) < 6.4f)\n        {\n            animationType = (CultivateAnimationConfig.AnimationType)0;\n        }\n        else\n        {\n            animationType = (CultivateAnimationConfig.AnimationType)1;\n        }\n\n\n\n        fitnessAnimatorCtrl.PlayIdle(playerAnimation, isDressingRoom, animationType);\n    }\n\n    void PlayRandomUpgradeAnimation()\n    {\n        playerAnimation.HideFootball();\n\n        fitnessAnimatorCtrl.PlayUpgrade(playerAnimation);\n    }\n\n    private void OnDisable()\n    {\n        if (playerShadow!= null)\n        {\n            playerShadow.DisableSoftShadow();\n        }\n        if (playerRefl!= null)\n        {\n            playerRefl.DisableReflection();\n        }\n        if (softshadow_RT!= null)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(softshadow_RT);\n            softshadow_RT = null;\n        }\n    }\n\n\n\n    public void OnDestroy()\n    {\n        isResetShadow = false;\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(CultivateAnimationConfig.IdleStateEntryNamesForClothData[(CultivateAnimationConfig.AnimationType)0]);\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(CultivateAnimationConfig.IdleStateEntryNamesForClothData[(CultivateAnimationConfig.AnimationType)1]);\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(CultivateAnimationConfig.UpgradeStateNamesForClothData[(CultivateAnimationConfig.AnimationType)0]);\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(CultivateAnimationConfig.UpgradeStateNamesForClothData[(CultivateAnimationConfig.AnimationType)1]);\n\n\n        DestroyGeneratedTextures();\n        \n        Resources.UnloadUnusedAssets();\n    }\n}\n", "starcoder_inputs": "<fim_prefix>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Framework.GalaSports.Service;\n\npublic class FitnessRoomPlayer_Hotfix : RenderingBase\n{\n    public GameObject gameObject;\n    public Transform transform;\n    FitnessRoomPlayer fitnessRoomPlayer;\n    public static bool isResetShadow = false;\n\n    public override void Init(GameObject go)\n    {\n        base.Init(go);\n        gameObject = go;\n        transform = go.transform;\n        fitnessRoomPlayer = go.GetComponent<FitnessRoomPlayer>();\n        fitnessRoomPlayer.onEnable = OnEnable;\n        fitnessRoomPlayer.onDisable = OnDisable;\n        fitnessRoomPlayer.onDestroy = OnDestroy;\n\n        fitnessAnimatorCtrl = fitnessRoomPlayer.fitnessAnimatorCtrl;\n        Awake();\n    }\n\n    public HighPolyPlayerAppearanceController playerAppearance;\n    public HighPolyPlayerAnimationController playerAnimation;\n\n    GameObject fitnessRoomFloor;\n\n    PlayerShadowAnimation playerShadow;\n    Material playerMaterial;\n    PlayerReflectionController playerRefl;\n    GameObject playerObj;\n\n    Texture2D ShoeTex;\n\n    public bool isDressingRoom = false;\n\n\n    FitnessAnimatorCtrl fitnessAnimatorCtrl;\n    int graphicsLevel;\n    RenderTexture softshadow_RT;\n    // Start is called before the first frame update\n    void Awake()\n    {\n        isResetShadow = false;\n        playerAppearance = gameObject.GetComponentInChildren<HighPolyPlayerAppearanceController>();\n        playerAnimation = gameObject.GetComponentInChildren<HighPolyPlayerAnimationController>();\n        playerRefl = gameObject.GetComponentInChildren<PlayerReflectionController>();\n\n\n        string clothDataNameToPreLoad;\n\n        clothDataNameToPreLoad = CultivateAnimationConfig.IdleStateEntryNamesForClothData[(CultivateAnimationConfig.AnimationType)0][0];\n\n        ClothDataLoader.AsyncPreLoadOneClothDataSet(clothDataNameToPreLoad);\n\n        clothDataNameToPreLoad = CultivateAnimationConfig.IdleStateEntryNamesForClothData[(CultivateAnimationConfig.AnimationType)1][0];\n\n        ClothDataLoader.AsyncPreLoadOneClothDataSet(clothDataNameToPreLoad);\n    }\n\n    private void OnEnable()\n    {\n        GameObject go = GameObject.Find(\"Gala Global Setting\");\n        if (go!= null)\n        {\n            GalaShaderGlobalSetting setting = go.GetComponent<GalaShaderGlobalSetting>();\n            if (setting!= null)\n            {\n                if (GalaShaderGlobalSetting.CurQualitySetting.PostProcess <= 2)\n                {\n                    setting.m_Setting.m_SHAmbientIntensity = 1;\n                    setting.m_Setting.m_LightMapIntensity = 1;\n                    setting.UpdateSetting();\n                }\n                else\n                {\n                    setting.m_Setting.m_SHAmbientIntensity = 0;\n                    setting.m_Setting.m_LightMapIntensity = 0;\n                    setting.UpdateSetting();\n                }\n\n            }\n        }\n        if (isResetShadow)\n        {\n            playerShadow.IsShadowEnabled = true;\n            playerRefl.IsReflectionEnabled = true;\n        }\n          \n        if (isResetShadow && playerShadow.IsShadowEnabled && fitnessRoomFloor!= null && graphicsLevel > 1)\n        {\n            if (shadowDir1!= Vector4.zero && shadowDir2!= Vector4.zero)\n            {\n                playerShadow.EnableSoftShadow(fitnessRoomFloor.GetComponent<MeshRenderer>().material, shadowDir1, shadowDir2, groundY);\n            }\n            else\n            {\n                playerShadow.EnableSoftShadow(fitnessRoomFloor.GetComponent<MeshRenderer>().material);\n\n            }\n\n        }\n        if (isResetShadow && playerRefl.IsReflectionEnabled && fitnessRoomFloor!= null && SceneCameraController.instance.reflectionRT!= null)\n        {\n            fitnessRoomPlayer.getPlayerRefTex.SetRefPlayerTex();\n            playerRefl.EnableReflection(fitnessRoomFloor.GetComponent<MeshRenderer>().material, fitnessRoomFloor.transform.position.y, SceneCameraController.instance.reflectionRT);\n        }\n    }\n\n\n    Vector4 shadowDir1 = Vector4.zero;\n    Vector4 shadowDir2 = Vector4.zero;\n    float groundY = 0;\n    public async GTask Init_Hotfix(GameObject aFitnessRoomFloor, Vector4 shadowDir1, Vector4 shadowDir2, float groundY = 0)\n    {\n        await Init_Hotfix(aFitnessRoomFloor);\n        this.shadowDir1 = shadowDir1;\n        this.shadowDir2 = shadowDir2;\n        this.groundY = groundY;\n    }\n\n    private async GTask Init_Hotfix(GameObject aFitnessRoomFloor)\n    {\n        playerObj = playerAnimation.gameObject;\n\n        //#if USE_RENDER_ASYNCLOAD\n        //        playerAnimation.SetHighPolyPlayerAppearanceController(playerAppearance);\n        //#endif\n\n        InitSoftShadow();\n#if UNITY_IOS &&!UNITY_EDITOR\n        /*if (Device.generation == DeviceGeneration.iPhone11\n            || Device.generation == DeviceGeneration.iPhone11Pro \n            || Device.generation == DeviceGeneration.iPhone11ProMax \n            || Device.generation == DeviceGeneration.iPhone12\n            || Device.generation == DeviceGeneration.iPhone12Mini\n            || Device.generation == DeviceGeneration.iPhone12Pro\n            || Device.generation == DeviceGeneration.iPhone12ProMax)\n        {\n            playerAnimation.Init(false, true);\n        }\n        else\n        {\n            playerAnimation.Init(true, false);\n        }*/\n        playerAnimation.Init(true, false);\n#else\n        playerAnimation.Init(true, false);\n#endif<fim_suffix>alaShaderGlobalSetting.CurQualitySetting.ShaderQuality;\n        /*GameObject go = GameObject.Find(\"/Home/CameraRoot/PlayerSoftShadowCamera\");\n        if (go!= null)\n        {\n            shadowCamera = go.GetComponent<Camera>();\n            if (graphicsLevel >= 2)\n            {\n                rt = GalaRenderPipeline.GalaRenderManager.CreateTemporaryRT(640, 360, 0, UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8B8A8_UNorm, \"FitnessRoom_RT\");          \n                shadowCamera.targetTexture = rt;\n            }\n        }\n        GameObject go2 = GameObject.Find(\"/Home/CameraRoot/PlayerReflectionCamera\");\n        if (go2!= null)\n        {\n            reflCamera = go2.GetComponent<Camera>();\n        }*/\n        fitnessRoomFloor = aFitnessRoomFloor;\n    }\n\n    Texture _clothTex;\n    Texture _keeperClothTex;\n    Texture _socksTex;\n    Texture _keeperSocksTex;\n\n\n    //\u8fd9\u4e9b\u56fe\u7247\u4e0d\u80fd\u91ca\u653e\uff0c\u90fd\u662f TAGlobalData.Instance.jerseyTexture \u5b58\u50a8\u56fe\u7247\n    public void DestroyGeneratedTextures()\n    {\n        if (_clothTex!= null)\n        {\n            //DebugEX.LogError(\"Destroy \" + _clothTex.GetInstanceID());\n            _clothTex.DestroySelf();\n\n            _clothTex = null;\n        }\n        if (_keeperClothTex!= null)\n        {\n            _keeperClothTex.DestroySelf();\n            _keeperClothTex = null;\n        }\n        if (_socksTex!= null)\n        {\n            _socksTex.DestroySelf();\n            _socksTex = null;\n        }\n        if (_keeperSocksTex!= null)\n        {\n            _keeperSocksTex.DestroySelf();\n            _keeperSocksTex = null;\n        }\n    }\n\n    public void InitTeamClothesTexture(Texture clothTexture, Texture keeperClothTexture, Texture sockTexture, Texture keeperSockTexture)\n    {\n        if (isDressingRoom)\n        {\n            DestroyGeneratedTextures();\n            _clothTex = clothTexture;\n            _keeperClothTex = keeperClothTexture;\n            _socksTex = sockTexture;\n            _keeperSocksTex = keeperClothTexture;\n\n\n            /*            //playerAppearance.ClothSKM.material.SetTexture(\"_BaseMap\", clothTexture);\n                        playerAppearance.ClothGPUSKM.material.SetTexture(\"_BaseMap\", clothTexture);\n                        //DebugEX.LogError(playerAppearance.ClothGPUSKM.material.GetInstanceID());\n                        //TeamKeeperJerseyMat.SetTexture(\"_BaseMap\", keeperClothTexture);\n                        playerAppearance.LegMR.material.SetTexture(\"_BaseMap\", sockTexture);*/\n            if (fitnessRoomPlayer.getPlayerRefTex && this.fitnessRoomPlayer.isActiveAndEnabled)\n                fitnessRoomPlayer.getPlayerRefTex.SetRefPlayerTex();\n\n        }\n        else\n        {\n            if (!playerAppearance.IsKeeper)\n            {\n                /*playerAppearance.ClothGPUSKM.material.SetTexture(\"_BaseMap\", clothTexture);\n                playerAppearance.LegMR.material.SetTexture(\"_BaseMap\", sockTexture);*/\n            }\n            /*TeamJerseyMat.SetTexture(\"_BaseMap\", clothTexture);\n            TeamKeeperJerseyMat.SetTexture(\"_BaseMap\", keeperClothTexture);\n            TeamSockMat.SetTexture(\"_BaseMap\", sockTexture);\n            TeamKeeperSockMat.SetTexture(\"_BaseMap\", keeperSockTexture);*/\n        }\n\n        //\n        //TeamKeeperSockMat.SetTexture(\"_BaseMap\", sockTexture);\n    }\n\n    \n    public void InitSoftShadow()\n    {\n        //\u8bbe\u7f6e\u8f6f\u9634\u5f71\u6750\u8d28\n        playerShadow = this.gameObject.GetComponentInChildren<PlayerShadowAnimation>();\n        playerMaterial = playerShadow.Shadow.material;\n        playerMaterial.SetFloat(\"_baseScale\", 1.3f);\n        playerMaterial.SetFloat(\"_yScaleMul\", 1);\n        playerMaterial.SetFloat(\"_baseBlur\", 0.5f);\n        playerMaterial.SetFloat(\"_yBlurFade\", 2);\n        playerMaterial.SetFloat(\"_yFade\", 1.5f);\n        playerMaterial.SetFloat(\"_transparent\", 0.3f);\n\n    }\n\n    //\u8bbe\u7f6e\u7684\u7403\u5458\u6570\u91cf\n    int playerSetCount = 0;\n    //\u591a\u5c11\u6b21\u540e\u6e05\u7406\u4e00\u4e0b\u8d44\u6e90\n    readonly int maxSetCount = 5;\n\n    //player_id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684player_id\uff0c\u53ef\u4ee5\u7528\u6765\u67e5\u914d\u7f6e\n    //headModel_id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684headmodel\u503c\uff0c\u7528\u6765\u8868\u793a\u5934\u90e83D\u6a21\u578b\u7684\u6587\u4ef6\u540d\n    //isKeeper:\u662f\u5b88\u95e8\u5458\u5417?\n    //skinColor:\u80a4\u8272\u679a\u4e3e\u503c\uff0c\u53d6\u503c\u89c4\u5219\u4e0ePlayerCfg\u76f8\u540c\n    //bodyHeight:\u8eab\u9ad8\n    //shoe_Id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u7403\u978bid\n    public async GTask SetOneHighPolyPlayer(int player_id, int headModel_id, bool isKeeper, SkinColorForTexture skinColor, Vector3 skinColorCorrectionValue, int bodyHeight, int shoe_Id = 1, int bodyWeight = 0, string playerName = \"GALA\", int playerNumber = 0, string jerseyCode = null, bool isReserveClothMat = false)\n    {\n        DebugEX.LogError(\"  Fitness: \" + player_id);\n        if (shoe_Id < 1 || shoe_Id > 6)\n        {\n            DebugEX.LogError(\"\u65e0\u6548\u7684 shoe_id \uff01\uff01\uff01\");\n            shoe_Id = 1;\n        }\n\n        playerAppearance.player_id = player_id;\n\n        if (jerseyCode!= null)\n        {\n            playerAppearance.SetPlayerAppearance(headModel_id, bodyHeight, bodyWeight, skinColor, skinColorCorrectionValue,PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(jerseyCode, playerNumber.ToString(), playerName),1, player_id, isKeeper, \"\", \"0\", false, null, true, isReserveClothMat);\n        }\n        else\n        {\n            playerAppearance.SetPlayerAppearance(headModel_id, bodyHeight, bodyWeight, skinColor, skinColorCorrectionValue, PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(TAGlobalData.Instance.JereyId, playerNumber.ToString(), playerName), 1, player_id, isKeeper, \"\", \"0\", false, null, true, isReserveClothMat);\n        }\n\n        fitnessRoomPlayer.getPlayerRefTex.SetRefPlayerTex();\n        if (!playerRefl.IsReflectionEnabled && fitnessRoomFloor!= null && SceneCameraController.instance.reflectionRT!= null)\n        {\n            playerRefl.EnableReflection(fitnessRoomFloor.GetComponent<MeshRenderer>().material, fitnessRoomFloor.transform.position.y, SceneCameraController.instance.reflectionRT);\n        }\n\n\n        //playerAppearance.PrecalculateBodyShape(bodyHeight, bodyWeight); \n        //playerAppearance.SetPlayerBodyShape(bodyHeight, bodyWeight);\n\n        //PlayRandomComeOutAnimation();\n\n        if (!playerShadow.IsShadowEnabled && fitnessRoomFloor!= null && graphicsLevel > 1)\n        {\n            if (shadowDir1!= Vector4.zero && shadowDir2!= Vector4.zero)\n            {\n                playerShadow.EnableSoftShadow(fitnessRoomFloor.GetComponent<MeshRenderer>().material, shadowDir1, shadowDir2, groundY);\n            }\n            else\n            {\n                playerShadow.EnableSoftShadow(fitnessRoomFloor.GetComponent<MeshRenderer>().material);\n\n            }\n\n        }\n\n        //playerSetCount++;\n\n\n        if (playerSetCount++ > maxSetCount)\n        {\n            Resources.UnloadUnusedAssets();\n            playerSetCount = 0;\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"SetShadowForLowQ\", 0.04f);\n\n        string fileNameSuffix = headModel_id.ToString();\n        //playerAppearance.SetPlayerHead(fileNameSuffix, skinColor);\n        this.gameObject.SetActive(true);\n        PlayRandomIdleAnimation();\n\n        //await SetShoesTex(ShoesMat, shoe_Id);\n    }\n\n    async GTask SetShoesTex(Material ShoesMat, int shoe_Id)\n    {\n        string path = \"3D/PlayerJersey/PlayerShoes/\";\n        var shoeTexTask = await TAManager.LoadAssetAsync<Texture2D>(path + \"Shoes_\" + shoe_Id.ToString() + \"_tex\", \"FitnessRoom_Player_ShoeTex\");\n        if (ShoeTex!= null)\n        {\n            TAManager.UnloadAsset(ShoeTex);\n        }\n        ShoeTex = shoeTexTask.result;\n        ShoesMat.SetTexture(\"_BaseMap\", ShoeTex);\n    }\n    public void PlayerUpgrade()\n    {\n        PlayRandomUpgradeAnimation();\n    }\n\n    CultivateAnimationConfig.AnimationType animationType;\n    public void PlayRandomIdleAnimation()\n    {\n        //int stateID;\n        //stateID = Random.Range(0, CultivateAnimationConfig.CultivateIdleStateEntryNamesSet.Length);\n        //playerAnimation.PlayAnimationWhenFocus(CultivateAnimationConfig.CultivateIdleStateEntryNamesSet[stateID]);\n        playerAnimation.HideFootball();\n\n\n        if (Random.Range(0, 10f) < 6.4f)\n        {\n            animationType = (CultivateAnimationConfig.AnimationType)0;\n        }\n        else\n        {\n            animationType = (CultivateAnimationConfig.AnimationType)1;\n        }\n\n\n\n        fitnessAnimatorCtrl.PlayIdle(playerAnimation, isDressingRoom, animationType);\n    }\n\n    void PlayRandomUpgradeAnimation()\n    {\n        playerAnimation.HideFootball();\n\n        fitnessAnimatorCtrl.PlayUpgrade(playerAnimation);\n    }\n\n    private void OnDisable()\n    {\n        if (playerShadow!= null)\n        {\n            playerShadow.DisableSoftShadow();\n        }\n        if (playerRefl!= null)\n        {\n            playerRefl.DisableReflection();\n        }\n        if (softshadow_RT!= null)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(softshadow_RT);\n            softshadow_RT = null;\n        }\n    }\n\n\n\n    public void OnDestroy()\n    {\n        isResetShadow = false;\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(CultivateAnimationConfig.IdleStateEntryNamesForClothData[(CultivateAnimationConfig.AnimationType)0]);\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(CultivateAnimationConfig.IdleStateEntryNamesForClothData[(CultivateAnimationConfig.AnimationType)1]);\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(CultivateAnimationConfig.UpgradeStateNamesForClothData[(CultivateAnimationConfig.AnimationType)0]);\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(CultivateAnimationConfig.UpgradeStateNamesForClothData[(CultivateAnimationConfig.AnimationType)1]);\n\n\n        DestroyGeneratedTextures();\n        \n        Resources.UnloadUnusedAssets();\n    }\n}\n<fim_middle>"}
{"inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\npublic class StadiumSideConfig \n{\n\n    public  const string SideLines = \"3D/SideProps/Prefab/SideLines\";\n    public  const string SideProps_Fire = \"3D/SideProps/Prefab/SideProps_Fire01\";\n    public  const string SideProps_Fireworks = \"3D/SideProps/Prefab/SideProps_Fireworks01\";\n    //\u7279\u6548\u8def\u5f84\n    public static Dictionary<string , string> Eff_Path = new Dictionary<string, string>(){\n       {\"101\", \"UI/ParticleEffect/01_Prefab/Eff_Sprayfireworks_01\"},\n       {\"102\", \"UI/ParticleEffect/01_Prefab/Eff_Sprayfireworks_02\"},\n       {\"103\", \"UI/ParticleEffect/01_Prefab/Eff_Sprayfireworks_03\"},\n       {\"201\", \"UI/ParticleEffect/01_Prefab/Eff_Spraysmoke_01\"},\n       {\"202\", \"UI/ParticleEffect/01_Prefab/Eff_Spraysmoke_02\"},\n       {\"203\", \"UI/ParticleEffect/01_Prefab/Eff_Spraysmoke_03\"},\n       {\"301\", \"UI/ParticleEffect/01_Prefab/Eff_Spitsparks_01\"},\n       {\"302\", \"UI/ParticleEffect/01_Prefab/Eff_Spitsparks_02\"},\n       {\"303\", \"UI/ParticleEffect/01_Prefab/Eff_Spitsparks_03\"},\n       {\"304\", \"UI/ParticleEffect/01_Prefab/Eff_Spitsparks_xinnian\"},\n       {\"401\", \"UI/ParticleEffect/01_Prefab/Eff_penhuo_01\"},\n       {\"402\", \"UI/ParticleEffect/01_Prefab/Eff_penhuo_02\"},\n       {\"403\", \"UI/ParticleEffect/01_Prefab/Eff_penhuo_03\"},\n       {\"501\", \"3D/SideProps/Prefab/SideProps_Balloon\"},\n    };\n\n    //\u7279\u6548\u4fee\u6539\u989c\u8272\u8def\u5f84\n    public static Dictionary<string, List<string>> Eff_Color_Path = new  Dictionary<string, List<string>>(){\n        {\"101\", new List<string>(){\"eff/add\",\"eff/liziguangyun\",\"eff/xiaolizi01\"}},\n        {\"102\", new List<string>(){\"eff/add2\",\"eff/liziguangyun\",\"eff/xiaolizi01\"}},\n        {\"103\", new List<string>(){\"eff/add9\",\"eff/liziguangyun\",\"eff/xiaolizi01\"}},\n        {\"201\", new List<string>(){\"eff/xiaolizi\",\"eff/tuowei_smoke\"}},\n        {\"202\", new List<string>(){\"eff/xiaolizi\",\"eff/tuowei_smoke\"}},\n        {\"203\", new List<string>(){\"eff/xiaolizi\",\"eff/tuowei_smoke\", \"eff/smoke\",\"eff/smoke2\", \"eff/xiaolizi2\",\"eff/tuowei_smoke2\"}},\n        {\"301\", new List<string>(){\"eff/smoke01\",\"eff/lizi01\",\"eff/lizi02\"}},\n        {\"302\", new List<string>(){\"eff/Smoke\",\"eff/lizi01\",\"eff/lizi02\",\"eff/lizi03\"}},\n        {\"303\", new List<string>(){\"eff/Smoke\",\"eff/lizi01\",\"eff/lizi02\",\"eff/lizi03\",\"eff/guangyun02\"}},\n        {\"401\", new List<string>(){\"eff/guangyun01\",\"eff/guangyun02\",\"eff/Fire\"}},\n        {\"402\", new List<string>(){\"eff/guangyun01\",\"eff/guangyun02\",\"eff/Fire\"}},\n        {\"403\", new List<string>(){\"eff/guangyun01\",\"eff/guangyun02\",\"eff/Fire\"}},\n    }; \n\n    //\u573a\u8fb9\u88c5\u9970\n    public static Dictionary<int, string> SideOrnament = new Dictionary<int, string>()\n    {\n        {2, \"3D/ChristmasProps/Prefab/ChristmasProps01\"},  //\u5723\u8bde\u573a\u8fb9\n        {3, \"3D/SideProps/Prefab/SideProps_BlueMoon\"},  //\u84dd\u6708\u4eae\u573a\u8fb9\n        {4, \"3D/SideProps/Prefab/SideProps_Spray\"},  //\u5927\u5e06\u8239\u573a\u8fb9\n        {5, \"3D/SideProps/Prefab/SideProps_paintedEggshell\"},//\u590d\u6d3b\u8282\u86cb\n        {6, \"3D/SideProps/Prefab/SideProps_FigurInStone\"},//\u590d\u6d3b\u8282\u77f3\u50cf\n    };  \n    //\u5723\u8bde\u88c5\u9970 \u7279\u6b8a\u5904\u7406\n    public static string ChristmasProps02 = \"3D/ChristmasProps/Prefab/ChristmasProps02\";\n    public static string ChristmasLightMat_Path = \"sds/shengdanshu1/shengdanshu_04\";\n\n    //\u573a\u8fb9\u6a2a\u5e45\n    public static Dictionary<int, string> SideBanner = new Dictionary<int, string>(){\n        {1,\"3D/SideProps/Prefab/SideProps_Banner_Allanz\"},\n        {2,\"3D/SideProps/Prefab/SideProps_Banner_ManCity\"},\n    };\n\n    public static Color HexToColor(string hex)\n    {\n        if (Parse(hex, out Color color))\n            return color;\n        return Color.white;\n    }\n\n    static bool Parse(string str, out Color val)\n    {\n        if (str.Length != 6 && str.Length != 8)\n        {\n            val = Color.white;\n            return true;\n        }\n\n        val = new Color();\n\n        for (int i = 0; i < 6;)\n        {\n            if (!Parse(str[i], out int v1))\n                return false;\n            if (!Parse(str[i + 1], out int v2))\n                return false;\n\n            if (i == 0)\n                val.r = (v1 * 16 + v2) * 1.0f / 255f;\n            if (i == 2)\n                val.g = (v1 * 16 + v2) * 1.0f / 255f;\n            if (i == 4)\n                val.b = (v1 * 16 + v2) * 1.0f / 255f;\n            i += 2;\n        }\n\n        if (str.Length == 8)\n        {\n            if (!Parse(str[6], out int v1))\n                return false;\n            if (!Parse(str[7], out int v2))\n                return false;\n            val.a = (v1 * 16 + v2) * 1.0f / 255f;\n        }\n        else\n            val.a = 1;\n\n        return true;\n    }\n\n    static bool Parse(char c, out int val)\n    {\n        if (c >= '0' && c <= '9')\n            val = c - '0';\n        else if (c >= 'a' && c <= 'f')\n            val = c - 'a' + 10;\n        else if (c >= 'A' && c <= 'F')\n            val = c - 'A' + 10;\n        else\n        {\n            val = 0;\n            return false;\n        }\n\n        return true;\n    }\n\n\n    public static  bool IsNormalScene()\n    {\n         Scene scene = SceneManager.GetActiveScene();\n        if(scene.name.Contains(\"StadiumKhalifa\") || scene.name.Contains(\"URPScene\"))\n        {\n            return false;\n        }\n        return true;  \n    }\n}\n", "cropped_inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\npublic class StadiumSideConfig \n{\n\n    public  const string SideLines = \"3D/SideProps/Prefab/SideLines\";\n    public  const string SideProps_Fire = \"3D/SideProps/Prefab/SideProps_Fire01\";\n    public  const string SideProps_Fireworks = \"3D/SideProps/Prefab/SideProps_Fireworks01\";\n    //\u7279\u6548\u8def\u5f84\n    public static Dictionary<string, string> Eff_Path = new Dictionary<string, string>(){\n       {\"101\", \"UI/ParticleEffect/01_Prefab/Eff_Sprayfireworks_01\"},\n       {\"102\", \"UI/ParticleEffect/01_Prefab/Eff_Sprayfireworks_02\"},\n       {\"103\", \"UI/ParticleEffect/01_Prefab/Eff_Sprayfireworks_03\"},\n       {\"201\", \"UI/ParticleEffect/01_Prefab/Eff_Spraysmoke_01\"},\n       {\"202\", \"UI/ParticleEffect/01_Prefab/Eff_Spraysmoke_02\"},\n       {\"203\", \"UI/ParticleEffect/01_Prefab/Eff_Spraysmoke_03\"},\n       {\"301\", \"UI/ParticleEffect/01_Prefab/Eff_Spitsparks_01\"},\n       {\"302\", \"UI/ParticleEffect/01_Prefab/Eff_Spitsparks_02\"},\n       {\"303\", \"UI/ParticleEffect/01_Prefab/Eff_Spitsparks_03\"},\n       {\"304\", \"UI/ParticleEffect/01_Prefab/Eff_Spitsparks_xinnian\"},\n       {\"401\", \"UI/ParticleEffect/01_Prefab/Eff_penhuo_01\"},\n       {\"402\", \"UI/ParticleEffect/01_Prefab/Eff_penhuo_02\"},\n       {\"403\", \"UI/ParticleEffect/01_Prefab/Eff_penhuo_03\"},\n       {\"501\", \"3D/SideProps/Prefab/SideProps_Balloon\"},\n    };\n\n    //\u7279\u6548\u4fee\u6539\u989c\u8272\u8def\u5f84\n    public static Dictionary<string, List<string>> Eff_Color_Path = new  Dictionary<string, List<string>>(){\n        {\"101\", new List<string>(){\"eff/add\",\"eff/liziguangyun\",\"eff/xiaolizi01\"}},\n        {\"102\", new List<string>(){\"eff/add2\",\"eff/liziguangyun\",\"eff/xia9\",\"eff/liziguangyun\",\"eff/xiaolizi01\"}},\n        {\"201\", new List<string>(){\"eff/xiaolizi\",\"eff/tuowei_smoke\"}},\n        {\"202\", new List<string>(){\"eff/xiaolizi\",\"eff/tuowei_smoke\"}},\n        {\"203\", new List<string>(){\"eff/xiaolizi\",\"eff/tuowei_smoke\", \"eff/smoke\",\"eff/smoke2\", \"eff/xiaolizi2\",\"eff/tuowei_smoke2\"}},\n        {\"301\", new List<string>(){\"eff/smoke01\",\"eff/lizi01\",\"eff/lizi02\"}},\n        {\"302\", new List<string>(){\"eff/Smoke\",\"eff/lizi01\",\"eff/lizi02\",\"eff/lizi03\"}},\n        {\"303\", new List<string>(){\"eff/Smoke\",\"eff/lizi01\",\"eff/lizi02\",\"eff/lizi03\",\"eff/guangyun02\"}},\n        {\"401\", new List<string>(){\"eff/guangyun01\",\"eff/guangyun02\",\"eff/Fire\"}},\n        {\"402\", new List<string>(){\"eff/guangyun01\",\"eff/guangyun02\",\"eff/Fire\"}},\n        {\"403\", new List<string>(){\"eff/guangyun01\",\"eff/guangyun02\",\"eff/Fire\"}},\n    }; \n\n    //\u573a\u8fb9\u88c5\u9970\n    public static Dictionary<int, string> SideOrnament = new Dictionary<int, string>()\n    {\n        {2, \"3D/ChristmasProps/Prefab/ChristmasProps01\"},  //\u5723\u8bde\u573a\u8fb9\n        {3, \"3D/SideProps/Prefab/SideProps_BlueMoon\"},  //\u84dd\u6708\u4eae\u573a\u8fb9\n        {4, \"3D/SideProps/Prefab/SideProps_Spray\"},  //\u5927\u5e06\u8239\u573a\u8fb9\n        {5, \"3D/SideProps/Prefab/SideProps_paintedEggshell\"},//\u590d\u6d3b\u8282\u86cb\n        {6, \"3D/SideProps/Prefab/SideProps_FigurInStone\"},//\u590d\u6d3b\u8282\u77f3\u50cf\n    };  \n    //\u5723\u8bde\u88c5\u9970 \u7279\u6b8a\u5904\u7406\n    public static string ChristmasProps02 = \"3D/ChristmasProps/Prefab/ChristmasProps02\";\n    public static string ChristmasLightMat_Path = \"sds/shengdanshu1/shengdanshu_04\";\n\n    //\u573a\u8fb9\u6a2a\u5e45\n    public static Dictionary<int, string> SideBanner = new Dictionary<int, string>(){\n        {1,\"3D/SideProps/Prefab/SideProps_Banner_Allanz\"},\n        {2,\"3D/SideProps/Prefab/SideProps_Banner_ManCity\"},\n    };\n\n    public static Color HexToColor(string hex)\n    {\n        if (Parse(hex, out Color color))\n            return color;\n        return Color.white;\n    }\n\n    static bool Parse(string str, out Color val)\n    {\n        if (str.Length!= 6 && str.Length!= 8)\n        {\n            val = Color.white;\n            return true;\n        }\n\n        val = new Color();\n\n        for (int i = 0; i < 6;)\n        {\n            if (!Parse(str[i], out int v1))\n                return false;\n            if (!Parse(str[i + 1], out int v2))\n                return false;\n\n            if (i == 0)\n                val.r = (v1 * 16 + v2) * 1.0f / 255f;\n            if (i == 2)\n                val.g = (v1 * 16 + v2) * 1.0f / 255f;\n            if (i == 4)\n                val.b = (v1 * 16 + v2) * 1.0f / 255f;\n            i += 2;\n        }\n\n        if (str.Length == 8)\n        {\n            if (!Parse(str[6], out int v1))\n                return false;\n            if (!Parse(str[7], out int v2))\n                return false;\n            val.a = (v1 * 16 + v2) * 1.0f / 255f;\n        }\n        else\n            val.a = 1;\n\n        return true;\n    }\n\n    static bool Parse(char c, out int val)\n    {\n        if (c >= '0' && c <= '9')\n            val = c - '0';\n        else if (c >= 'a' && c <= 'f')\n            val = c - 'a' + 10;\n        else if (c >= 'A' && c <= 'F')\n            val = c - 'A' + 10;\n        else\n        {\n            val = 0;\n            return false;\n        }\n\n        return true;\n    }\n\n\n    public static  bool IsNormalScene()\n    {\n         Scene scene = SceneManager.GetActiveScene();\n        if(scene.name.Contains(\"StadiumKhalifa\") || scene.name.Contains(\"URPScene\"))\n        {\n            return false;\n        }\n        return true;  \n    }\n}\n", "starcoder_inputs": "<fim_prefix>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\npublic class StadiumSideConfig \n{\n\n    public  const string SideLines = \"3D/SideProps/Prefab/SideLines\";\n    public  const string SideProps_Fire = \"3D/SideProps/Prefab/SideProps_Fire01\";\n    public  const string SideProps_Fireworks = \"3D/SideProps/Prefab/SideProps_Fireworks01\";\n    //\u7279\u6548\u8def\u5f84\n    public static Dictionary<string, string> Eff_Path = new Dictionary<string, string>(){\n       {\"101\", \"UI/ParticleEffect/01_Prefab/Eff_Sprayfireworks_01\"},\n       {\"102\", \"UI/ParticleEffect/01_Prefab/Eff_Sprayfireworks_02\"},\n       {\"103\", \"UI/ParticleEffect/01_Prefab/Eff_Sprayfireworks_03\"},\n       {\"201\", \"UI/ParticleEffect/01_Prefab/Eff_Spraysmoke_01\"},\n       {\"202\", \"UI/ParticleEffect/01_Prefab/Eff_Spraysmoke_02\"},\n       {\"203\", \"UI/ParticleEffect/01_Prefab/Eff_Spraysmoke_03\"},\n       {\"301\", \"UI/ParticleEffect/01_Prefab/Eff_Spitsparks_01\"},\n       {\"302\", \"UI/ParticleEffect/01_Prefab/Eff_Spitsparks_02\"},\n       {\"303\", \"UI/ParticleEffect/01_Prefab/Eff_Spitsparks_03\"},\n       {\"304\", \"UI/ParticleEffect/01_Prefab/Eff_Spitsparks_xinnian\"},\n       {\"401\", \"UI/ParticleEffect/01_Prefab/Eff_penhuo_01\"},\n       {\"402\", \"UI/ParticleEffect/01_Prefab/Eff_penhuo_02\"},\n       {\"403\", \"UI/ParticleEffect/01_Prefab/Eff_penhuo_03\"},\n       {\"501\", \"3D/SideProps/Prefab/SideProps_Balloon\"},\n    };\n\n    //\u7279\u6548\u4fee\u6539\u989c\u8272\u8def\u5f84\n    public static Dictionary<string, List<string>> Eff_Color_Path = new  Dictionary<string, List<string>>(){\n        {\"101\", new List<string>(){\"eff/add\",\"eff/liziguangyun\",\"eff/xiaolizi01\"}},\n        {\"102\", new List<string>(){\"eff/add2\",\"eff/liziguangyun\",\"eff/xia<fim_suffix>9\",\"eff/liziguangyun\",\"eff/xiaolizi01\"}},\n        {\"201\", new List<string>(){\"eff/xiaolizi\",\"eff/tuowei_smoke\"}},\n        {\"202\", new List<string>(){\"eff/xiaolizi\",\"eff/tuowei_smoke\"}},\n        {\"203\", new List<string>(){\"eff/xiaolizi\",\"eff/tuowei_smoke\", \"eff/smoke\",\"eff/smoke2\", \"eff/xiaolizi2\",\"eff/tuowei_smoke2\"}},\n        {\"301\", new List<string>(){\"eff/smoke01\",\"eff/lizi01\",\"eff/lizi02\"}},\n        {\"302\", new List<string>(){\"eff/Smoke\",\"eff/lizi01\",\"eff/lizi02\",\"eff/lizi03\"}},\n        {\"303\", new List<string>(){\"eff/Smoke\",\"eff/lizi01\",\"eff/lizi02\",\"eff/lizi03\",\"eff/guangyun02\"}},\n        {\"401\", new List<string>(){\"eff/guangyun01\",\"eff/guangyun02\",\"eff/Fire\"}},\n        {\"402\", new List<string>(){\"eff/guangyun01\",\"eff/guangyun02\",\"eff/Fire\"}},\n        {\"403\", new List<string>(){\"eff/guangyun01\",\"eff/guangyun02\",\"eff/Fire\"}},\n    }; \n\n    //\u573a\u8fb9\u88c5\u9970\n    public static Dictionary<int, string> SideOrnament = new Dictionary<int, string>()\n    {\n        {2, \"3D/ChristmasProps/Prefab/ChristmasProps01\"},  //\u5723\u8bde\u573a\u8fb9\n        {3, \"3D/SideProps/Prefab/SideProps_BlueMoon\"},  //\u84dd\u6708\u4eae\u573a\u8fb9\n        {4, \"3D/SideProps/Prefab/SideProps_Spray\"},  //\u5927\u5e06\u8239\u573a\u8fb9\n        {5, \"3D/SideProps/Prefab/SideProps_paintedEggshell\"},//\u590d\u6d3b\u8282\u86cb\n        {6, \"3D/SideProps/Prefab/SideProps_FigurInStone\"},//\u590d\u6d3b\u8282\u77f3\u50cf\n    };  \n    //\u5723\u8bde\u88c5\u9970 \u7279\u6b8a\u5904\u7406\n    public static string ChristmasProps02 = \"3D/ChristmasProps/Prefab/ChristmasProps02\";\n    public static string ChristmasLightMat_Path = \"sds/shengdanshu1/shengdanshu_04\";\n\n    //\u573a\u8fb9\u6a2a\u5e45\n    public static Dictionary<int, string> SideBanner = new Dictionary<int, string>(){\n        {1,\"3D/SideProps/Prefab/SideProps_Banner_Allanz\"},\n        {2,\"3D/SideProps/Prefab/SideProps_Banner_ManCity\"},\n    };\n\n    public static Color HexToColor(string hex)\n    {\n        if (Parse(hex, out Color color))\n            return color;\n        return Color.white;\n    }\n\n    static bool Parse(string str, out Color val)\n    {\n        if (str.Length!= 6 && str.Length!= 8)\n        {\n            val = Color.white;\n            return true;\n        }\n\n        val = new Color();\n\n        for (int i = 0; i < 6;)\n        {\n            if (!Parse(str[i], out int v1))\n                return false;\n            if (!Parse(str[i + 1], out int v2))\n                return false;\n\n            if (i == 0)\n                val.r = (v1 * 16 + v2) * 1.0f / 255f;\n            if (i == 2)\n                val.g = (v1 * 16 + v2) * 1.0f / 255f;\n            if (i == 4)\n                val.b = (v1 * 16 + v2) * 1.0f / 255f;\n            i += 2;\n        }\n\n        if (str.Length == 8)\n        {\n            if (!Parse(str[6], out int v1))\n                return false;\n            if (!Parse(str[7], out int v2))\n                return false;\n            val.a = (v1 * 16 + v2) * 1.0f / 255f;\n        }\n        else\n            val.a = 1;\n\n        return true;\n    }\n\n    static bool Parse(char c, out int val)\n    {\n        if (c >= '0' && c <= '9')\n            val = c - '0';\n        else if (c >= 'a' && c <= 'f')\n            val = c - 'a' + 10;\n        else if (c >= 'A' && c <= 'F')\n            val = c - 'A' + 10;\n        else\n        {\n            val = 0;\n            return false;\n        }\n\n        return true;\n    }\n\n\n    public static  bool IsNormalScene()\n    {\n         Scene scene = SceneManager.GetActiveScene();\n        if(scene.name.Contains(\"StadiumKhalifa\") || scene.name.Contains(\"URPScene\"))\n        {\n            return false;\n        }\n        return true;  \n    }\n}\n<fim_middle>"}
{"inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Framework.GalaSports.Service;\npublic class LockRoom3DView : View3DBase\n{\n    private GameObject[] ReflectionProbes;\n\n    private LightmapDataView lightmapDataView;\n\n    private GameObject fitnessRoomFloor;\n    private FitnessRoomPlayer_Hotfix fitnessRoomPlayer;\n\n\n    const string EVENT_SetLockRoomReflectionProbe = \"SetLockRoomReflectionProbe\";\n    const string EVENT_PlayerJerseyGenerator = \"PlayerJerseyGenerator\";\n    const string EVENT_ShowPlayerDetail = \"ShowPlayerDetail\";\n    const string EVENT_EquipJersey = \"EquipJersey\";\n    const string EVENT_FitnessRoomPlayerShow = \"FitnessRoomPlayerShow\";\n    //const string EVENT_SetDressingRoomCloth = \"SetDressingRoomCloth\";\n    const string player_path = \"3D/FunctionRoom/LockRoomPlayer\";\n\n    Vector4 characterSoftShadowDirection1 = new Vector4(0.4f, 4f, 2.5f, 0);\n    Vector4 characterSoftShadowDirection2 = new Vector4(2.5f, 8f, -5, 0);\n\n    private Vector3 pos;\n    private string wallJerseyId = \"\";\n    private string playerJerseyId = \"\";\n    private string lastJereyId = \"\";\n    private RenderTexture lastJerseyTex;\n    private RenderTexture lastSockTex;\n\n    private RenderTexture Detail_jerseytex;\n    private RenderTexture Detail_socktex;\n\n    private Material RoomClothMat;\n\n    private Transform TeamPlayer_Tran;\n    public static bool IsAtlasDetailView = false;\n\n    public override async GTask Awake()\n    {\n        IsAtlasDetailView = false;\n        GarenaSettings();\n\n        lightmapDataView = this.transform.GetComponent<LightmapDataView>();\n        lightmapDataView.RestoreLightMapData();\n\n        ReflectionProbes = new GameObject[3];\n        for (int i = 0; i < ReflectionProbes.Length; i++)\n        {\n            ReflectionProbes[i] = this.transform.Find(string.Format(\"Reflection Probe0{0}\", i + 1)).gameObject;\n        }\n\n        fitnessRoomFloor = this.transform.Find(\"Static_Mesh/DressingRoom01/DressingRoomFloor\").gameObject;\n        \n        RoomClothMat = this.transform.Find(\"Static_Mesh/Clothes_mesh/Clothes_mesh\").GetComponent<MeshRenderer>().sharedMaterial;\n\n        SceneCameraController.instance.EnterRoom(true);\n\n        var quality = SettingConfig.GetGraphicsQualityLevel();\n        var size = quality >= 3 ? 1024 : 512;\n        PlayerJerseyGenerator.Instance.Initialize(size);\n\n        if(quality>=3)\n        {\n           await  CreatePlayer();\n        }\n\n        //\u8bbe\u7f6e\u5899\u4e0a\u7684\u7403\u8863\n        ChangeDressingRoomCloth(TAGlobalData.Instance.jerseyTexture);\n\n        Platform.EventDispatcher.AddEventListener<int>(EVENT_SetLockRoomReflectionProbe, SetReflectionProbe);\n        Platform.EventDispatcher.AddEventListener<string, bool>(EVENT_PlayerJerseyGenerator, UpdateTexCallback);\n        Platform.EventDispatcher.AddEventListener<PlayersInfoTransfer>(EVENT_ShowPlayerDetail, ChangePlayerDetail);\n        Platform.EventDispatcher.AddEventListener(EVENT_EquipJersey, EquipJerseyHandler);\n        Platform.EventDispatcher.AddEventListener<bool>(EVENT_FitnessRoomPlayerShow, FitnessRoomPlayerShowHandler);\n    }\n    //Garena\u7279\u6b8a\u5904\u7406\n    private void GarenaSettings()\n    {\n        if(ChannelInfo.CheckIsGarena())\n        {\n            var logo = this.transform.Find(\"UnStatic_Mesh/DressingRoom_Logo\");\n            if(logo!= null)\n            {\n                logo.gameObject.SetActive(false);\n            }\n        }\n    }\n    \n    private async GTask CreatePlayer()\n    {\n        if(fitnessRoomPlayer == null)\n        {\n            var taskobj = await ResourceMgr.Instance.InstantiateAsync(player_path,this.transform);\n            var playerObj = taskobj.result;\n            fitnessRoomPlayer = RenderingHelper.Instance.GetComponent<FitnessRoomPlayer_Hotfix>(playerObj);\n            TeamPlayer_Tran = fitnessRoomPlayer.transform.Find(\"TeamPlayer\");\n            pos = TeamPlayer_Tran.position;\n            fitnessRoomPlayer.gameObject.SetActive(false);\n            await fitnessRoomPlayer.Init_Hotfix(fitnessRoomFloor, characterSoftShadowDirection1, characterSoftShadowDirection2);\n            FitnessRoomPlayerShowHandler(true);\n        }\n    }\n\n    public override void OnEnable()\n    {\n        base.OnEnable();\n        lightmapDataView?.RestoreLightMapData();\n        if(fitnessRoomPlayer!= null && fitnessRoomPlayer.gameObject.activeSelf)\n        {\n            if (IsAtlasDetailView)\n            {\n                lightmapDataView?.ReconstructLightProbeData();\n                FitnessRoomPlayerShowHandler(true);\n                IsAtlasDetailView = false;\n               // FitnessRoomPlayer_Hotfix.isResetShadow = true;\n            }\n               \n            if (!string.IsNullOrEmpty(lastJereyId))\n            {\n                ResetPlayerInfo(lastJereyId);\n            }\n        }\n    }\n\n    public override void OnDisable()\n    {\n        base.OnDisable();\n        IsAtlasDetailView = false;\n        lightmapDataView?.UnloadLightMapDatas();\n        lightmapDataView?.ResetDefaultLightProbe();\n    }\n    public override void OnDestroy()\n    {\n\n        if (SceneCameraController.instance)\n            SceneCameraController.instance.EnterRoom(false);\n        \n        lightmapDataView = null;\n\n        if (lastJerseyTex != null || lastSockTex != null)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(lastJerseyTex);\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(lastSockTex);\n            lastJerseyTex = null;\n            lastSockTex = null;\n        }\n\n        TAGlobalData.Instance.ReleaseTexture(Detail_jerseytex, Detail_socktex);\n        Detail_jerseytex = null;\n        Detail_socktex = null;\n\n        PlayerJerseyGenerator.Instance?.SetCameraActive(false);\n        Platform.EventDispatcher.RemoveEvent(EVENT_PlayerJerseyGenerator);\n        Platform.EventDispatcher.RemoveEvent(EVENT_ShowPlayerDetail);\n        Platform.EventDispatcher.RemoveEvent(EVENT_EquipJersey);\n        Platform.EventDispatcher.RemoveEvent(EVENT_FitnessRoomPlayerShow);\n        Platform.EventDispatcher.RemoveEventListener<int>(EVENT_SetLockRoomReflectionProbe, SetReflectionProbe);\n        //Platform.EventDispatcher.RemoveEvent(EVENT_SetDressingRoomCloth);\n\n        if(fitnessRoomPlayer!= null)\n        {\n           ResourceMgr.Instance.UnloadGameObject(fitnessRoomPlayer.gameObject);\n           fitnessRoomPlayer = null;\n        }\n    }\n\n    public void SetReflectionProbe(int index)\n    {\n        if (index < ReflectionProbes.Length)\n        {\n            for (int i = 0; i < ReflectionProbes.Length; i++)\n                ReflectionProbes[i].SetActive(false);\n            ReflectionProbes[index].SetActive(true);\n        }\n    }\n\n    void ChangeDressingRoomCloth(RenderTexture jerseyTexture)\n    {\n        RoomClothMat.SetTexture(\"_BaseMap\", jerseyTexture);\n    }\n\n    private void FitnessRoomPlayerShowHandler(bool obj)\n    {\n        if (fitnessRoomPlayer != null)\n        {\n            TeamPlayer_Tran.gameObject.SetActive(obj);\n            if (obj)\n            {\n                fitnessRoomPlayer.PlayRandomIdleAnimation();\n            }\n        }\n\n    }\n\n    void EquipJerseyHandler()\n    {\n        if (lastJerseyTex == null || lastSockTex == null || string.IsNullOrEmpty(lastJereyId)) return;\n\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(TAGlobalData.Instance.jerseyTexture);\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(TAGlobalData.Instance.sockTexture);\n\n        TAGlobalData.Instance.jerseyTexture = lastJerseyTex;\n        TAGlobalData.Instance.sockTexture = lastSockTex;\n        TAGlobalData.Instance.JereyId = lastJereyId;\n\n        wallJerseyId = lastJereyId;\n        ChangeDressingRoomCloth(lastJerseyTex);\n        lastJerseyTex = null;\n        lastSockTex = null;\n    }\n\n    int _headModelId;\n    string _jerseyCode;\n    PlayersInfoTransfer _info = null;\n    public async void UpdateTexCallback(string jerseyId, bool isUpdateWallDress)\n    {\n        if (jerseyId == lastJereyId)\n        {\n            return;\n        }\n        await ResetPlayerInfo(jerseyId);\n    }\n    private async GTask ResetPlayerInfo(string jerseyId)\n    {\n        await CreatePlayer();\n\n        fitnessRoomPlayer.gameObject.SetActive(true);\n\n\n        if (_info == null)\n        {\n            if (GuideConfig.IsNewGuide())\n            {\n                _info = GuideConfig.JerseryPlayer;\n            }\n            else\n            {\n                _info = HomeScene3DPlayersController.GetRandomPlayerConfigs();\n            }\n                \n        }\n\n        _jerseyCode = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(jerseyId, _info.PlayerNumber.ToString(), _info.PlayerName);\n        PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(_jerseyCode);\n        PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(_jerseyCode);\n        await fitnessRoomPlayer.SetOneHighPolyPlayer(_info.Player_id,\n                                                        int.Parse(_info.HeadModel_id), _info.IsKeeper,\n                                                        (SkinColorForTexture)_info.SkinColor,\n                                                        _info.SkinColorCorrectionValue,\n                                                        (int)_info.BodyHeight,\n                                                        _info.Shoe_id,\n                                                        _info.BodyWeight,\n                                                        _info.PlayerName,\n                                                        _info.PlayerNumber, _jerseyCode, true);\n\n        await PlayerJerseyGenerator.SetJerseyInfoAsyncStatic(jerseyId);\n\n        PlayerJerseyGenerator.Instance.SetCameraActive(true);\n        RenderTexture jerseytex = PlayerJerseyGenerator.Instance.GetDIYTex();\n        RenderTexture socktex = PlayerJerseyGenerator.Instance.GetSockTex();\n       \n\n        //if (isUpdateWallDress)\n        //{\n        wallJerseyId = jerseyId;\n        ChangeDressingRoomCloth(jerseytex);\n        //}\n\n        playerJerseyId = jerseyId;\n        fitnessRoomPlayer.InitTeamClothesTexture(jerseytex, jerseytex, socktex, socktex);\n        fitnessRoomPlayer.gameObject.SetActive(true);\n        if (lastJerseyTex != null)\n        {//\u6e05\u9664\u7403\u8863\u8d34\u56fe\u5728\u63a5\u53d7\u7403\u8863\u8d34\u56fe\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(lastJerseyTex);\n            lastJerseyTex = null;\n        }\n        if (lastSockTex != null)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(lastSockTex);\n            lastSockTex = null;\n        }\n        lastJereyId = jerseyId;\n        lastJerseyTex = jerseytex;\n        lastSockTex = socktex;\n\n        //\u6709\u7403\u5458\u540e\u518d\u8bbe\u7f6e\n        lightmapDataView?.ReconstructLightProbeData();\n        await GAsync.WaitNextFrame();\n        PlayerJerseyGenerator.Instance.SetCameraActive(false);\n    }\n\n    public async void ChangePlayerDetail(PlayersInfoTransfer player)    \n    {\n        if (player != null)\n        {\n            await CreatePlayer();\n            //TAGlobalData.Instance.ReleaseTexture(Detail_jerseytex, Detail_socktex);\n            //(Detail_jerseytex, Detail_socktex) = TAGlobalData.Instance.GetJerserTexture(player.PlayerNumber.ToString());\n            //fitnessRoomPlayer.InitTeamClothesTexture(Detail_jerseytex, Detail_jerseytex, Detail_socktex, Detail_socktex);\n            // var pos = fitnessRoomPlayer.transform.Find(\"TeamPlayer\").GetComponent<Transform>().position;\n            float offset = ((float)Screen.width / (float)Screen.height) - 1.777f;\n            offset = offset < 0 ? 0 : offset / 1.3f;\n            TeamPlayer_Tran.position = pos + new Vector3(offset - 0.1f, 0, -4.25f);\n            //fitnessRoomPlayer.gameObject.SetActive(false);\n\n            await PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(new string[] { player.HeadModel_id });\n            await fitnessRoomPlayer.SetOneHighPolyPlayer(player.Player_id,\n                                                        int.Parse(player.HeadModel_id), player.IsKeeper,\n                                                        (SkinColorForTexture)player.SkinColor,\n                                                        player.SkinColorCorrectionValue,\n                                                        (int)player.BodyHeight,\n                                                        player.Shoe_id,\n                                                        player.BodyWeight,\n                                                        player.PlayerName,\n                                                        player.PlayerNumber, null, true);\n            fitnessRoomPlayer.gameObject.SetActive(true);\n\n            //\u6709\u7403\u5458\u540e\u518d\u8bbe\u7f6e \n            lightmapDataView?.ReconstructLightProbeData();\n\n            //fitnessRoomPlayer.gameObject.SetActive(true);\n        }\n        else\n            fitnessRoomPlayer?.gameObject.SetActive(false);\n    }\n}\n", "cropped_inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Framework.GalaSports.Service;\npublic class LockRoom3DView : View3DBase\n{\n    private GameObject[] ReflectionProbes;\n\n    private LightmapDataView lightmapDataView;\n\n    private GameObject fitnessRoomFloor;\n    private FitnessRoomPlayer_Hotfix fitnessRoomPlayer;\n\n\n    const string EVENT_SetLockRoomReflectionProbe = \"SetLockRoomReflectionProbe\";\n    const string EVENT_PlayerJerseyGenerator = \"PlayerJerseyGenerator\";\n    const string EVENT_ShowPlayerDetail = \"ShowPlayerDetail\";\n    const string EVENT_EquipJersey = \"EquipJersey\";\n    const string EVENT_FitnessRoomPlayerShow = \"FitnessRoomPlayerShow\";\n    //const string EVENT_SetDressingRoomCloth = \"SetDressingRoomCloth\";\n    const string player_path = \"3D/FunctionRoom/LockRoomPlayer\";\n\n    Vector4 characterSoftShadowDirection1 = new Vector4(0.4f, 4f, 2.5f, 0);\n    Vector4 characterSoftShadowDirection2 = new Vector4(2.5f, 8f, -5, 0);\n\n    private Vector3 pos;\n    private string wallJerseyId = \"\";\n    private string playerJerseyId = \"\";\n    private string lastJereyId = \"\";\n    private RenderTexture lastJerseyTex;\n    private RenderTexture lastSockTex;\n\n    private RenderTexture Detail_jerseytex;\n    private RenderTexture Detail_socktex;\n\n    private Material RoomClothMat;\n\n    private Transform TeamPlayer_Tran;\n    public static bool IsAtlasDetailView = false;\n\n    public override async GTask Awake()\n    {\n        IsAtlasDetailView = false;\n        GarenaSettings();\n\n        lightmapDataView = this.transform.GetComponent<LightmapDataView>();\n        lightmapDataView.RestoreLightMapData();\n\n        ReflectionProbes = new GameObject[3];\n        for (int i = 0; i < ReflectionProbes.Length; i++)\n        {\n            ReflectionProbes[i] = this.transform.Find(string.Format(\"Reflection Probe0{0}\", i + 1)).gameObject;\n        }\n\n        fitnessRoomFloor = this.transform.Find(\"Static_Mesh/DressingRoom01/DressingRoomFloor\").gameObject;\n        \n        RoomClothMat = this.transform.Find(\"Static_Mesh/Clothes_mesh/Clothes_mesh\").GetComponent<MeshRenderer>().sharedMaterial;\n\n        SceneCameraController.instance.EnterRoom(true);\n\n        var quality = SettingConfig.GetGraphicsQualityLevel();\n        var size = quality >= 3? 1024 : 512;\n        PlayerJerseyGenerator.Instance.Initialize(size);\n\n        if(quality>=3)\n        {\n           await  CreatePlayer();\n        }\n\n        //\u8bbe\u7f6e\u5899\u4e0a\u7684\u7403\u8863\n        ChangeDressingRoomCloth(TAGlobalData.Instance.jerseyTexture);\n\n        Platform.EventDispatcher.AddEventListener<int>(EVENT_SetLockRoomReflectionProbe, SetReflectionProbe);\n        Platform.EventDispatcher.AddEventListener<string, bool>(EVENT_PlayerJerseyGenerator, UpdateTexCallback);\n        Platform.EventDispatcher.AddEventListener<PlayersInfoTransfer>(EVENT_ShowPlayerDetail, ChangePlayerDetail);\n        Platform.EventDispatcher.AddEventListener(EVENT_EquipJersey, EquipJerseyHandler);\n        Platform.EventDispatcher.AddEventListener<bool>(EVENT_FitnessRoomPlayerShow, FitnessRoomPlayerShowHandler);\n    }\n    //Garena\u7279\u6b8a\u5904\u7406\n    private void GarenaSettings()\n    {\n        if(ChannelInfo.CheckIsGarena())\n        {\n            var logo = this.transform.Find(\"UnStatic_Mesh/DressingRoom_Logo\");\n            if(logo!= null)\n            {\n                logo.gameObject.SetActive(false);\n            }\n        }\n    }\n    \n    private async GTask CreatePlayer()\n    {\n        if(fitnessRoomPlayer == null)\n        {\n            var taskobj = await ResourceMgr.Instance.InstantiateAsync(player_path,this.transform);\n            var playerObj = taskobj.result;\n            fitnessRoomPlayer = RenderingHelper.Instance.GetComponent<FitnessRoomPlayer_Hotfix>(playerObj);\n            TeamPlayer_Tran = fitnessRoomPlayer.transform.Find(\"TeamPlayer\");\n            pos = TeamPlayer_Tran.position;\n            fitnessRoomPlayer.gameObject.SetActive(false);\n            await fitnessRoomPlayer.Init_Hotfix(fitnessRoomFloor, characterSoftShadowDirection1, characterSoft override void OnEnable()\n    {\n        base.OnEnable();\n        lightmapDataView?.RestoreLightMapData();\n        if(fitnessRoomPlayer!= null && fitnessRoomPlayer.gameObject.activeSelf)\n        {\n            if (IsAtlasDetailView)\n            {\n                lightmapDataView?.ReconstructLightProbeData();\n                FitnessRoomPlayerShowHandler(true);\n                IsAtlasDetailView = false;\n               // FitnessRoomPlayer_Hotfix.isResetShadow = true;\n            }\n               \n            if (!string.IsNullOrEmpty(lastJereyId))\n            {\n                ResetPlayerInfo(lastJereyId);\n            }\n        }\n    }\n\n    public override void OnDisable()\n    {\n        base.OnDisable();\n        IsAtlasDetailView = false;\n        lightmapDataView?.UnloadLightMapDatas();\n        lightmapDataView?.ResetDefaultLightProbe();\n    }\n    public override void OnDestroy()\n    {\n\n        if (SceneCameraController.instance)\n            SceneCameraController.instance.EnterRoom(false);\n        \n        lightmapDataView = null;\n\n        if (lastJerseyTex!= null || lastSockTex!= null)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(lastJerseyTex);\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(lastSockTex);\n            lastJerseyTex = null;\n            lastSockTex = null;\n        }\n\n        TAGlobalData.Instance.ReleaseTexture(Detail_jerseytex, Detail_socktex);\n        Detail_jerseytex = null;\n        Detail_socktex = null;\n\n        PlayerJerseyGenerator.Instance?.SetCameraActive(false);\n        Platform.EventDispatcher.RemoveEvent(EVENT_PlayerJerseyGenerator);\n        Platform.EventDispatcher.RemoveEvent(EVENT_ShowPlayerDetail);\n        Platform.EventDispatcher.RemoveEvent(EVENT_EquipJersey);\n        Platform.EventDispatcher.RemoveEvent(EVENT_FitnessRoomPlayerShow);\n        Platform.EventDispatcher.RemoveEventListener<int>(EVENT_SetLockRoomReflectionProbe, SetReflectionProbe);\n        //Platform.EventDispatcher.RemoveEvent(EVENT_SetDressingRoomCloth);\n\n        if(fitnessRoomPlayer!= null)\n        {\n           ResourceMgr.Instance.UnloadGameObject(fitnessRoomPlayer.gameObject);\n           fitnessRoomPlayer = null;\n        }\n    }\n\n    public void SetReflectionProbe(int index)\n    {\n        if (index < ReflectionProbes.Length)\n        {\n            for (int i = 0; i < ReflectionProbes.Length; i++)\n                ReflectionProbes[i].SetActive(false);\n            ReflectionProbes[index].SetActive(true);\n        }\n    }\n\n    void ChangeDressingRoomCloth(RenderTexture jerseyTexture)\n    {\n        RoomClothMat.SetTexture(\"_BaseMap\", jerseyTexture);\n    }\n\n    private void FitnessRoomPlayerShowHandler(bool obj)\n    {\n        if (fitnessRoomPlayer!= null)\n        {\n            TeamPlayer_Tran.gameObject.SetActive(obj);\n            if (obj)\n            {\n                fitnessRoomPlayer.PlayRandomIdleAnimation();\n            }\n        }\n\n    }\n\n    void EquipJerseyHandler()\n    {\n        if (lastJerseyTex == null || lastSockTex == null || string.IsNullOrEmpty(lastJereyId)) return;\n\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(TAGlobalData.Instance.jerseyTexture);\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(TAGlobalData.Instance.sockTexture);\n\n        TAGlobalData.Instance.jerseyTexture = lastJerseyTex;\n        TAGlobalData.Instance.sockTexture = lastSockTex;\n        TAGlobalData.Instance.JereyId = lastJereyId;\n\n        wallJerseyId = lastJereyId;\n        ChangeDressingRoomCloth(lastJerseyTex);\n        lastJerseyTex = null;\n        lastSockTex = null;\n    }\n\n    int _headModelId;\n    string _jerseyCode;\n    PlayersInfoTransfer _info = null;\n    public async void UpdateTexCallback(string jerseyId, bool isUpdateWallDress)\n    {\n        if (jerseyId == lastJereyId)\n        {\n            return;\n        }\n        await ResetPlayerInfo(jerseyId);\n    }\n    private async GTask ResetPlayerInfo(string jerseyId)\n    {\n        await CreatePlayer();\n\n        fitnessRoomPlayer.gameObject.SetActive(true);\n\n\n        if (_info == null)\n        {\n            if (GuideConfig.IsNewGuide())\n            {\n                _info = GuideConfig.JerseryPlayer;\n            }\n            else\n            {\n                _info = HomeScene3DPlayersController.GetRandomPlayerConfigs();\n            }\n                \n        }\n\n        _jerseyCode = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(jerseyId, _info.PlayerNumber.ToString(), _info.PlayerName);\n        PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(_jerseyCode);\n        PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(_jerseyCode);\n        await fitnessRoomPlayer.SetOneHighPolyPlayer(_info.Player_id,\n                                                        int.Parse(_info.HeadModel_id), _info.IsKeeper,\n                                                        (SkinColorForTexture)_info.SkinColor,\n                                                        _info.SkinColorCorrectionValue,\n                                                        (int)_info.BodyHeight,\n                                                        _info.Shoe_id,\n                                                        _info.BodyWeight,\n                                                        _info.PlayerName,\n                                                        _info.PlayerNumber, _jerseyCode, true);\n\n        await PlayerJerseyGenerator.SetJerseyInfoAsyncStatic(jerseyId);\n\n        PlayerJerseyGenerator.Instance.SetCameraActive(true);\n        RenderTexture jerseytex = PlayerJerseyGenerator.Instance.GetDIYTex();\n        RenderTexture socktex = PlayerJerseyGenerator.Instance.GetSockTex();\n       \n\n        //if (isUpdateWallDress)\n        //{\n        wallJerseyId = jerseyId;\n        ChangeDressingRoomCloth(jerseytex);\n        //}\n\n        playerJerseyId = jerseyId;\n        fitnessRoomPlayer.InitTeamClothesTexture(jerseytex, jerseytex, socktex, socktex);\n        fitnessRoomPlayer.gameObject.SetActive(true);\n        if (lastJerseyTex!= null)\n        {//\u6e05\u9664\u7403\u8863\u8d34\u56fe\u5728\u63a5\u53d7\u7403\u8863\u8d34\u56fe\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(lastJerseyTex);\n            lastJerseyTex = null;\n        }\n        if (lastSockTex!= null)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(lastSockTex);\n            lastSockTex = null;\n        }\n        lastJereyId = jerseyId;\n        lastJerseyTex = jerseytex;\n        lastSockTex = socktex;\n\n        //\u6709\u7403\u5458\u540e\u518d\u8bbe\u7f6e\n        lightmapDataView?.ReconstructLightProbeData();\n        await GAsync.WaitNextFrame();\n        PlayerJerseyGenerator.Instance.SetCameraActive(false);\n    }\n\n    public async void ChangePlayerDetail(PlayersInfoTransfer player)    \n    {\n        if (player!= null)\n        {\n            await CreatePlayer();\n            //TAGlobalData.Instance.ReleaseTexture(Detail_jerseytex, Detail_socktex);\n            //(Detail_jerseytex, Detail_socktex) = TAGlobalData.Instance.GetJerserTexture(player.PlayerNumber.ToString());\n            //fitnessRoomPlayer.InitTeamClothesTexture(Detail_jerseytex, Detail_jerseytex, Detail_socktex, Detail_socktex);\n            // var pos = fitnessRoomPlayer.transform.Find(\"TeamPlayer\").GetComponent<Transform>().position;\n            float offset = ((float)Screen.width / (float)Screen.height) - 1.777f;\n            offset = offset < 0? 0 : offset / 1.3f;\n            TeamPlayer_Tran.position = pos + new Vector3(offset - 0.1f, 0, -4.25f);\n            //fitnessRoomPlayer.gameObject.SetActive(false);\n\n            await PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(new string[] { player.HeadModel_id });\n            await fitnessRoomPlayer.SetOneHighPolyPlayer(player.Player_id,\n                                                        int.Parse(player.HeadModel_id), player.IsKeeper,\n                                                        (SkinColorForTexture)player.SkinColor,\n                                                        player.SkinColorCorrectionValue,\n                                                        (int)player.BodyHeight,\n                                                        player.Shoe_id,\n                                                        player.BodyWeight,\n                                                        player.PlayerName,\n                                                        player.PlayerNumber, null, true);\n            fitnessRoomPlayer.gameObject.SetActive(true);\n\n            //\u6709\u7403\u5458\u540e\u518d\u8bbe\u7f6e \n            lightmapDataView?.ReconstructLightProbeData();\n\n            //fitnessRoomPlayer.gameObject.SetActive(true);\n        }\n        else\n            fitnessRoomPlayer?.gameObject.SetActive(false);\n    }\n}\n", "starcoder_inputs": "<fim_prefix>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Framework.GalaSports.Service;\npublic class LockRoom3DView : View3DBase\n{\n    private GameObject[] ReflectionProbes;\n\n    private LightmapDataView lightmapDataView;\n\n    private GameObject fitnessRoomFloor;\n    private FitnessRoomPlayer_Hotfix fitnessRoomPlayer;\n\n\n    const string EVENT_SetLockRoomReflectionProbe = \"SetLockRoomReflectionProbe\";\n    const string EVENT_PlayerJerseyGenerator = \"PlayerJerseyGenerator\";\n    const string EVENT_ShowPlayerDetail = \"ShowPlayerDetail\";\n    const string EVENT_EquipJersey = \"EquipJersey\";\n    const string EVENT_FitnessRoomPlayerShow = \"FitnessRoomPlayerShow\";\n    //const string EVENT_SetDressingRoomCloth = \"SetDressingRoomCloth\";\n    const string player_path = \"3D/FunctionRoom/LockRoomPlayer\";\n\n    Vector4 characterSoftShadowDirection1 = new Vector4(0.4f, 4f, 2.5f, 0);\n    Vector4 characterSoftShadowDirection2 = new Vector4(2.5f, 8f, -5, 0);\n\n    private Vector3 pos;\n    private string wallJerseyId = \"\";\n    private string playerJerseyId = \"\";\n    private string lastJereyId = \"\";\n    private RenderTexture lastJerseyTex;\n    private RenderTexture lastSockTex;\n\n    private RenderTexture Detail_jerseytex;\n    private RenderTexture Detail_socktex;\n\n    private Material RoomClothMat;\n\n    private Transform TeamPlayer_Tran;\n    public static bool IsAtlasDetailView = false;\n\n    public override async GTask Awake()\n    {\n        IsAtlasDetailView = false;\n        GarenaSettings();\n\n        lightmapDataView = this.transform.GetComponent<LightmapDataView>();\n        lightmapDataView.RestoreLightMapData();\n\n        ReflectionProbes = new GameObject[3];\n        for (int i = 0; i < ReflectionProbes.Length; i++)\n        {\n            ReflectionProbes[i] = this.transform.Find(string.Format(\"Reflection Probe0{0}\", i + 1)).gameObject;\n        }\n\n        fitnessRoomFloor = this.transform.Find(\"Static_Mesh/DressingRoom01/DressingRoomFloor\").gameObject;\n        \n        RoomClothMat = this.transform.Find(\"Static_Mesh/Clothes_mesh/Clothes_mesh\").GetComponent<MeshRenderer>().sharedMaterial;\n\n        SceneCameraController.instance.EnterRoom(true);\n\n        var quality = SettingConfig.GetGraphicsQualityLevel();\n        var size = quality >= 3? 1024 : 512;\n        PlayerJerseyGenerator.Instance.Initialize(size);\n\n        if(quality>=3)\n        {\n           await  CreatePlayer();\n        }\n\n        //\u8bbe\u7f6e\u5899\u4e0a\u7684\u7403\u8863\n        ChangeDressingRoomCloth(TAGlobalData.Instance.jerseyTexture);\n\n        Platform.EventDispatcher.AddEventListener<int>(EVENT_SetLockRoomReflectionProbe, SetReflectionProbe);\n        Platform.EventDispatcher.AddEventListener<string, bool>(EVENT_PlayerJerseyGenerator, UpdateTexCallback);\n        Platform.EventDispatcher.AddEventListener<PlayersInfoTransfer>(EVENT_ShowPlayerDetail, ChangePlayerDetail);\n        Platform.EventDispatcher.AddEventListener(EVENT_EquipJersey, EquipJerseyHandler);\n        Platform.EventDispatcher.AddEventListener<bool>(EVENT_FitnessRoomPlayerShow, FitnessRoomPlayerShowHandler);\n    }\n    //Garena\u7279\u6b8a\u5904\u7406\n    private void GarenaSettings()\n    {\n        if(ChannelInfo.CheckIsGarena())\n        {\n            var logo = this.transform.Find(\"UnStatic_Mesh/DressingRoom_Logo\");\n            if(logo!= null)\n            {\n                logo.gameObject.SetActive(false);\n            }\n        }\n    }\n    \n    private async GTask CreatePlayer()\n    {\n        if(fitnessRoomPlayer == null)\n        {\n            var taskobj = await ResourceMgr.Instance.InstantiateAsync(player_path,this.transform);\n            var playerObj = taskobj.result;\n            fitnessRoomPlayer = RenderingHelper.Instance.GetComponent<FitnessRoomPlayer_Hotfix>(playerObj);\n            TeamPlayer_Tran = fitnessRoomPlayer.transform.Find(\"TeamPlayer\");\n            pos = TeamPlayer_Tran.position;\n            fitnessRoomPlayer.gameObject.SetActive(false);\n            await fitnessRoomPlayer.Init_Hotfix(fitnessRoomFloor, characterSoftShadowDirection1, characterSoft<fim_suffix> override void OnEnable()\n    {\n        base.OnEnable();\n        lightmapDataView?.RestoreLightMapData();\n        if(fitnessRoomPlayer!= null && fitnessRoomPlayer.gameObject.activeSelf)\n        {\n            if (IsAtlasDetailView)\n            {\n                lightmapDataView?.ReconstructLightProbeData();\n                FitnessRoomPlayerShowHandler(true);\n                IsAtlasDetailView = false;\n               // FitnessRoomPlayer_Hotfix.isResetShadow = true;\n            }\n               \n            if (!string.IsNullOrEmpty(lastJereyId))\n            {\n                ResetPlayerInfo(lastJereyId);\n            }\n        }\n    }\n\n    public override void OnDisable()\n    {\n        base.OnDisable();\n        IsAtlasDetailView = false;\n        lightmapDataView?.UnloadLightMapDatas();\n        lightmapDataView?.ResetDefaultLightProbe();\n    }\n    public override void OnDestroy()\n    {\n\n        if (SceneCameraController.instance)\n            SceneCameraController.instance.EnterRoom(false);\n        \n        lightmapDataView = null;\n\n        if (lastJerseyTex!= null || lastSockTex!= null)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(lastJerseyTex);\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(lastSockTex);\n            lastJerseyTex = null;\n            lastSockTex = null;\n        }\n\n        TAGlobalData.Instance.ReleaseTexture(Detail_jerseytex, Detail_socktex);\n        Detail_jerseytex = null;\n        Detail_socktex = null;\n\n        PlayerJerseyGenerator.Instance?.SetCameraActive(false);\n        Platform.EventDispatcher.RemoveEvent(EVENT_PlayerJerseyGenerator);\n        Platform.EventDispatcher.RemoveEvent(EVENT_ShowPlayerDetail);\n        Platform.EventDispatcher.RemoveEvent(EVENT_EquipJersey);\n        Platform.EventDispatcher.RemoveEvent(EVENT_FitnessRoomPlayerShow);\n        Platform.EventDispatcher.RemoveEventListener<int>(EVENT_SetLockRoomReflectionProbe, SetReflectionProbe);\n        //Platform.EventDispatcher.RemoveEvent(EVENT_SetDressingRoomCloth);\n\n        if(fitnessRoomPlayer!= null)\n        {\n           ResourceMgr.Instance.UnloadGameObject(fitnessRoomPlayer.gameObject);\n           fitnessRoomPlayer = null;\n        }\n    }\n\n    public void SetReflectionProbe(int index)\n    {\n        if (index < ReflectionProbes.Length)\n        {\n            for (int i = 0; i < ReflectionProbes.Length; i++)\n                ReflectionProbes[i].SetActive(false);\n            ReflectionProbes[index].SetActive(true);\n        }\n    }\n\n    void ChangeDressingRoomCloth(RenderTexture jerseyTexture)\n    {\n        RoomClothMat.SetTexture(\"_BaseMap\", jerseyTexture);\n    }\n\n    private void FitnessRoomPlayerShowHandler(bool obj)\n    {\n        if (fitnessRoomPlayer!= null)\n        {\n            TeamPlayer_Tran.gameObject.SetActive(obj);\n            if (obj)\n            {\n                fitnessRoomPlayer.PlayRandomIdleAnimation();\n            }\n        }\n\n    }\n\n    void EquipJerseyHandler()\n    {\n        if (lastJerseyTex == null || lastSockTex == null || string.IsNullOrEmpty(lastJereyId)) return;\n\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(TAGlobalData.Instance.jerseyTexture);\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(TAGlobalData.Instance.sockTexture);\n\n        TAGlobalData.Instance.jerseyTexture = lastJerseyTex;\n        TAGlobalData.Instance.sockTexture = lastSockTex;\n        TAGlobalData.Instance.JereyId = lastJereyId;\n\n        wallJerseyId = lastJereyId;\n        ChangeDressingRoomCloth(lastJerseyTex);\n        lastJerseyTex = null;\n        lastSockTex = null;\n    }\n\n    int _headModelId;\n    string _jerseyCode;\n    PlayersInfoTransfer _info = null;\n    public async void UpdateTexCallback(string jerseyId, bool isUpdateWallDress)\n    {\n        if (jerseyId == lastJereyId)\n        {\n            return;\n        }\n        await ResetPlayerInfo(jerseyId);\n    }\n    private async GTask ResetPlayerInfo(string jerseyId)\n    {\n        await CreatePlayer();\n\n        fitnessRoomPlayer.gameObject.SetActive(true);\n\n\n        if (_info == null)\n        {\n            if (GuideConfig.IsNewGuide())\n            {\n                _info = GuideConfig.JerseryPlayer;\n            }\n            else\n            {\n                _info = HomeScene3DPlayersController.GetRandomPlayerConfigs();\n            }\n                \n        }\n\n        _jerseyCode = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(jerseyId, _info.PlayerNumber.ToString(), _info.PlayerName);\n        PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(_jerseyCode);\n        PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(_jerseyCode);\n        await fitnessRoomPlayer.SetOneHighPolyPlayer(_info.Player_id,\n                                                        int.Parse(_info.HeadModel_id), _info.IsKeeper,\n                                                        (SkinColorForTexture)_info.SkinColor,\n                                                        _info.SkinColorCorrectionValue,\n                                                        (int)_info.BodyHeight,\n                                                        _info.Shoe_id,\n                                                        _info.BodyWeight,\n                                                        _info.PlayerName,\n                                                        _info.PlayerNumber, _jerseyCode, true);\n\n        await PlayerJerseyGenerator.SetJerseyInfoAsyncStatic(jerseyId);\n\n        PlayerJerseyGenerator.Instance.SetCameraActive(true);\n        RenderTexture jerseytex = PlayerJerseyGenerator.Instance.GetDIYTex();\n        RenderTexture socktex = PlayerJerseyGenerator.Instance.GetSockTex();\n       \n\n        //if (isUpdateWallDress)\n        //{\n        wallJerseyId = jerseyId;\n        ChangeDressingRoomCloth(jerseytex);\n        //}\n\n        playerJerseyId = jerseyId;\n        fitnessRoomPlayer.InitTeamClothesTexture(jerseytex, jerseytex, socktex, socktex);\n        fitnessRoomPlayer.gameObject.SetActive(true);\n        if (lastJerseyTex!= null)\n        {//\u6e05\u9664\u7403\u8863\u8d34\u56fe\u5728\u63a5\u53d7\u7403\u8863\u8d34\u56fe\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(lastJerseyTex);\n            lastJerseyTex = null;\n        }\n        if (lastSockTex!= null)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(lastSockTex);\n            lastSockTex = null;\n        }\n        lastJereyId = jerseyId;\n        lastJerseyTex = jerseytex;\n        lastSockTex = socktex;\n\n        //\u6709\u7403\u5458\u540e\u518d\u8bbe\u7f6e\n        lightmapDataView?.ReconstructLightProbeData();\n        await GAsync.WaitNextFrame();\n        PlayerJerseyGenerator.Instance.SetCameraActive(false);\n    }\n\n    public async void ChangePlayerDetail(PlayersInfoTransfer player)    \n    {\n        if (player!= null)\n        {\n            await CreatePlayer();\n            //TAGlobalData.Instance.ReleaseTexture(Detail_jerseytex, Detail_socktex);\n            //(Detail_jerseytex, Detail_socktex) = TAGlobalData.Instance.GetJerserTexture(player.PlayerNumber.ToString());\n            //fitnessRoomPlayer.InitTeamClothesTexture(Detail_jerseytex, Detail_jerseytex, Detail_socktex, Detail_socktex);\n            // var pos = fitnessRoomPlayer.transform.Find(\"TeamPlayer\").GetComponent<Transform>().position;\n            float offset = ((float)Screen.width / (float)Screen.height) - 1.777f;\n            offset = offset < 0? 0 : offset / 1.3f;\n            TeamPlayer_Tran.position = pos + new Vector3(offset - 0.1f, 0, -4.25f);\n            //fitnessRoomPlayer.gameObject.SetActive(false);\n\n            await PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(new string[] { player.HeadModel_id });\n            await fitnessRoomPlayer.SetOneHighPolyPlayer(player.Player_id,\n                                                        int.Parse(player.HeadModel_id), player.IsKeeper,\n                                                        (SkinColorForTexture)player.SkinColor,\n                                                        player.SkinColorCorrectionValue,\n                                                        (int)player.BodyHeight,\n                                                        player.Shoe_id,\n                                                        player.BodyWeight,\n                                                        player.PlayerName,\n                                                        player.PlayerNumber, null, true);\n            fitnessRoomPlayer.gameObject.SetActive(true);\n\n            //\u6709\u7403\u5458\u540e\u518d\u8bbe\u7f6e \n            lightmapDataView?.ReconstructLightProbeData();\n\n            //fitnessRoomPlayer.gameObject.SetActive(true);\n        }\n        else\n            fitnessRoomPlayer?.gameObject.SetActive(false);\n    }\n}\n<fim_middle>"}
{"inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class HonorRoom3DView : View3DBase\n{\n\n    [System.NonSerialized]\n    public RenderTexture rt;\n\n    #region \u79c1\u6709\u6210\u5458\u53d8\u91cf\n    string PlayerNumber;\n    const string DefaultPlayerNumber = \"10\";\n    RenderTexture _jerseyTexture;\n    RenderTexture _socksTexture;\n\n    private FitnessRoomPlayer_Hotfix fitnessRoomPlayer;\n    private Camera playerCamera;\n\n    private LightProbesData ProbesData;\n    #endregion\n\n    // playerShowData[0] = curPlayerNum;\n    // playerShowData[1] = headModel_id;\n    // playerShowData[2] = bodyHeight;\n    // playerShowData[3] = color;\n    // playerShowData[4] = boots;\n    // playerShowData[5] = bodyWeight;\n    // playerShowData[6] = shirtNumber;\n\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        ProbesData = this.transform.GetComponent<LightProbesData>();\n        playerCamera = this.transform.Find(\"PlayerCamera\").GetComponent<Camera>();\n        fitnessRoomPlayer = RenderingHelper.Instance.GetComponent<FitnessRoomPlayer_Hotfix>(this.transform.Find(\"HighPolyPlayerRoot\").gameObject);\n\n        await fitnessRoomPlayer.Init_Hotfix(null, new Vector4(-1.3f, 4f, 1f, 0f), new Vector4(1.75f, 1.5f, 0.75f, 0f), 0);\n        ReconstructLightProbeData();\n\n        StadiumSceneController.Instance.StadiumLight.SetActive(false);\n\n        //var quality = SettingConfig.GetGraphicsQualityLevel();\n        //var size = quality >= 3 ? Screen.height : Screen.height/2; // 1024 : 512\n        var size = Screen.height;\n        rt = GalaRenderPipeline.GalaRenderManager.CreateTemporaryRT(size, size, 16, RenderTextureFormat.ARGB32, \"honor_room_player\");\n\n        playerCamera.targetTexture = rt;\n    }\n\n    bool isSetting = false;\n\n    public async void SetPlayerData(PlayersInfoTransfer player, bool isKeeper = false, string PlayerName = \"\")\n    {\n        if (fitnessRoomPlayer != null && !isSetting)\n        {\n            isSetting = true;\n\n            await fitnessRoomPlayer.SetOneHighPolyPlayer(player.Player_id, int.Parse(player.HeadModel_id), isKeeper, (SkinColorForTexture)player.SkinColor, player.SkinColorCorrectionValue, (int)player.BodyHeight, player.Shoe_id, player.BodyWeight, \"GALA\", player.PlayerNumber);\n\n            fitnessRoomPlayer.gameObject.SetActive(true);\n\n            isSetting = false;\n        }\n    }\n\n    private async GTask SetPlayerJerseyTexture(string playerNum)\n    {\n        //\u8bbe\u7f6e\u7403\u8863\u8d34\u56fe\n        if (string.IsNullOrEmpty(playerNum))\n        {\n            playerNum = DefaultPlayerNumber;\n        }\n        if (string.IsNullOrEmpty(PlayerNumber) || !PlayerNumber.Equals(playerNum))\n        {\n            PlayerNumber = playerNum;\n            TAGlobalData.Instance.ReleaseTexture(_jerseyTexture, _socksTexture);\n\n            //System.Tuple<Texture2D, Texture2D> t = (await TAGlobalData.Instance.GetJerserTexture(playerNum)).result;\n            System.Tuple<RenderTexture, RenderTexture> t = (await PlayerJerseyGenerator_Hotfix.GetJerserTexture(playerNum)).result;\n            _jerseyTexture = t.Item1;\n            _socksTexture = t.Item2;\n\n            fitnessRoomPlayer.InitTeamClothesTexture(_jerseyTexture, _jerseyTexture, _socksTexture, _socksTexture);\n        }\n    }\n\n\n    private void ReconstructLightProbeData()\n    {\n        if (ProbesData.Probes != null && !isSetLightProbe)\n        {\n            isSetLightProbe = true;\n            defaultLightProbe = LightmapSettings.lightProbes;\n            LightmapSettings.lightProbes = ProbesData.Probes;\n        }\n    }\n\n    private LightProbes defaultLightProbe;\n    private bool isSetLightProbe;\n    private void ReSetLightProbeData()\n    {\n        if(defaultLightProbe!= null && isSetLightProbe)\n        {\n            LightmapSettings.lightProbes = defaultLightProbe;\n            isSetLightProbe =false;\n        }\n    }\n    public override void OnDestroy()\n    {\n        TAGlobalData.Instance.ReleaseTexture(_jerseyTexture, _socksTexture);\n        _jerseyTexture = null;\n        _socksTexture = null;\n        if (StadiumSceneController.Instance != null && StadiumSceneController.Instance.StadiumLight != null)\n        {\n            StadiumSceneController.Instance.StadiumLight.SetActive(true);\n        }\n\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(rt);\n        rt = null;\n    }\n}\n", "cropped_inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class HonorRoom3DView : View3DBase\n{\n\n    [System.NonSerialized]\n    public RenderTexture rt;\n\n    #region \u79c1\u6709\u6210\u5458\u53d8\u91cf\n    string PlayerNumber;\n    const string DefaultPlayerNumber = \"10\";\n    RenderTexture _jerseyTexture;\n    RenderTexture _socksTexture;\n\n    private FitnessRoomPlayer_Hotfix fitnessRoomPlayer;\n    private Camera playerCamera;\n\n    private LightProbesData ProbesData;\n    #endregion\n\n    // playerShowData[0] = curPlayerNum;\n    // playerShowData[1] = headModel_id;\n    // playerShowData[2] = bodyHeight;\n    // playerShowData[3] = color;\n    // playerShowData[4] = boots;\n    // playerShowData[5] = bodyWeight;\n    // playerShowData[6] = shirtNumber;\n\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        ProbesData = this.transform.GetComponent<LightProbesData>();\n        playerCamera = this.transform.Find(\"PlayerCamera\").GetComponent<Camera>();\n        fitnessRoomPlayer = RenderingHelper.Instance.GetComponent<FitnessRoomPlayer_Hotfix>(this.transform.Find(\"HighPolyPlayerRoot\").gameObject);\n\n        await fitnessRoomPlayer.Init_Hotfix(null, new Vector4(-1.3f, 4f, 1f, 0f), new Vector4(1.75f, 1.5f, 0.75f, 0f), 0);\n        ReconstructLightProbeData();\n\n        StadiumSceneController.InstanceLevel();\n        //var size = quality >= 3? Screen.height : Screen.height/2; // 1024 : 512\n        var size = Screen.height;\n        rt = GalaRenderPipeline.GalaRenderManager.CreateTemporaryRT(size, size, 16, RenderTextureFormat.ARGB32, \"honor_room_player\");\n\n        playerCamera.targetTexture = rt;\n    }\n\n    bool isSetting = false;\n\n    public async void SetPlayerData(PlayersInfoTransfer player, bool isKeeper = false, string PlayerName = \"\")\n    {\n        if (fitnessRoomPlayer!= null &&!isSetting)\n        {\n            isSetting = true;\n\n            await fitnessRoomPlayer.SetOneHighPolyPlayer(player.Player_id, int.Parse(player.HeadModel_id), isKeeper, (SkinColorForTexture)player.SkinColor, player.SkinColorCorrectionValue, (int)player.BodyHeight, player.Shoe_id, player.BodyWeight, \"GALA\", player.PlayerNumber);\n\n            fitnessRoomPlayer.gameObject.SetActive(true);\n\n            isSetting = false;\n        }\n    }\n\n    private async GTask SetPlayerJerseyTexture(string playerNum)\n    {\n        //\u8bbe\u7f6e\u7403\u8863\u8d34\u56fe\n        if (string.IsNullOrEmpty(playerNum))\n        {\n            playerNum = DefaultPlayerNumber;\n        }\n        if (string.IsNullOrEmpty(PlayerNumber) ||!PlayerNumber.Equals(playerNum))\n        {\n            PlayerNumber = playerNum;\n            TAGlobalData.Instance.ReleaseTexture(_jerseyTexture, _socksTexture);\n\n            //System.Tuple<Texture2D, Texture2D> t = (await TAGlobalData.Instance.GetJerserTexture(playerNum)).result;\n            System.Tuple<RenderTexture, RenderTexture> t = (await PlayerJerseyGenerator_Hotfix.GetJerserTexture(playerNum)).result;\n            _jerseyTexture = t.Item1;\n            _socksTexture = t.Item2;\n\n            fitnessRoomPlayer.InitTeamClothesTexture(_jerseyTexture, _jerseyTexture, _socksTexture, _socksTexture);\n        }\n    }\n\n\n    private void ReconstructLightProbeData()\n    {\n        if (ProbesData.Probes!= null &&!isSetLightProbe)\n        {\n            isSetLightProbe = true;\n            defaultLightProbe = LightmapSettings.lightProbes;\n            LightmapSettings.lightProbes = ProbesData.Probes;\n        }\n    }\n\n    private LightProbes defaultLightProbe;\n    private bool isSetLightProbe;\n    private void ReSetLightProbeData()\n    {\n        if(defaultLightProbe!= null && isSetLightProbe)\n        {\n            LightmapSettings.lightProbes = defaultLightProbe;\n            isSetLightProbe =false;\n        }\n    }\n    public override void OnDestroy()\n    {\n        TAGlobalData.Instance.ReleaseTexture(_jerseyTexture, _socksTexture);\n        _jerseyTexture = null;\n        _socksTexture = null;\n        if (StadiumSceneController.Instance!= null && StadiumSceneController.Instance.StadiumLight!= null)\n        {\n            StadiumSceneController.Instance.StadiumLight.SetActive(true);\n        }\n\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(rt);\n        rt = null;\n    }\n}\n", "starcoder_inputs": "<fim_prefix>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class HonorRoom3DView : View3DBase\n{\n\n    [System.NonSerialized]\n    public RenderTexture rt;\n\n    #region \u79c1\u6709\u6210\u5458\u53d8\u91cf\n    string PlayerNumber;\n    const string DefaultPlayerNumber = \"10\";\n    RenderTexture _jerseyTexture;\n    RenderTexture _socksTexture;\n\n    private FitnessRoomPlayer_Hotfix fitnessRoomPlayer;\n    private Camera playerCamera;\n\n    private LightProbesData ProbesData;\n    #endregion\n\n    // playerShowData[0] = curPlayerNum;\n    // playerShowData[1] = headModel_id;\n    // playerShowData[2] = bodyHeight;\n    // playerShowData[3] = color;\n    // playerShowData[4] = boots;\n    // playerShowData[5] = bodyWeight;\n    // playerShowData[6] = shirtNumber;\n\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        ProbesData = this.transform.GetComponent<LightProbesData>();\n        playerCamera = this.transform.Find(\"PlayerCamera\").GetComponent<Camera>();\n        fitnessRoomPlayer = RenderingHelper.Instance.GetComponent<FitnessRoomPlayer_Hotfix>(this.transform.Find(\"HighPolyPlayerRoot\").gameObject);\n\n        await fitnessRoomPlayer.Init_Hotfix(null, new Vector4(-1.3f, 4f, 1f, 0f), new Vector4(1.75f, 1.5f, 0.75f, 0f), 0);\n        ReconstructLightProbeData();\n\n        StadiumSceneController.Instance<fim_suffix>Level();\n        //var size = quality >= 3? Screen.height : Screen.height/2; // 1024 : 512\n        var size = Screen.height;\n        rt = GalaRenderPipeline.GalaRenderManager.CreateTemporaryRT(size, size, 16, RenderTextureFormat.ARGB32, \"honor_room_player\");\n\n        playerCamera.targetTexture = rt;\n    }\n\n    bool isSetting = false;\n\n    public async void SetPlayerData(PlayersInfoTransfer player, bool isKeeper = false, string PlayerName = \"\")\n    {\n        if (fitnessRoomPlayer!= null &&!isSetting)\n        {\n            isSetting = true;\n\n            await fitnessRoomPlayer.SetOneHighPolyPlayer(player.Player_id, int.Parse(player.HeadModel_id), isKeeper, (SkinColorForTexture)player.SkinColor, player.SkinColorCorrectionValue, (int)player.BodyHeight, player.Shoe_id, player.BodyWeight, \"GALA\", player.PlayerNumber);\n\n            fitnessRoomPlayer.gameObject.SetActive(true);\n\n            isSetting = false;\n        }\n    }\n\n    private async GTask SetPlayerJerseyTexture(string playerNum)\n    {\n        //\u8bbe\u7f6e\u7403\u8863\u8d34\u56fe\n        if (string.IsNullOrEmpty(playerNum))\n        {\n            playerNum = DefaultPlayerNumber;\n        }\n        if (string.IsNullOrEmpty(PlayerNumber) ||!PlayerNumber.Equals(playerNum))\n        {\n            PlayerNumber = playerNum;\n            TAGlobalData.Instance.ReleaseTexture(_jerseyTexture, _socksTexture);\n\n            //System.Tuple<Texture2D, Texture2D> t = (await TAGlobalData.Instance.GetJerserTexture(playerNum)).result;\n            System.Tuple<RenderTexture, RenderTexture> t = (await PlayerJerseyGenerator_Hotfix.GetJerserTexture(playerNum)).result;\n            _jerseyTexture = t.Item1;\n            _socksTexture = t.Item2;\n\n            fitnessRoomPlayer.InitTeamClothesTexture(_jerseyTexture, _jerseyTexture, _socksTexture, _socksTexture);\n        }\n    }\n\n\n    private void ReconstructLightProbeData()\n    {\n        if (ProbesData.Probes!= null &&!isSetLightProbe)\n        {\n            isSetLightProbe = true;\n            defaultLightProbe = LightmapSettings.lightProbes;\n            LightmapSettings.lightProbes = ProbesData.Probes;\n        }\n    }\n\n    private LightProbes defaultLightProbe;\n    private bool isSetLightProbe;\n    private void ReSetLightProbeData()\n    {\n        if(defaultLightProbe!= null && isSetLightProbe)\n        {\n            LightmapSettings.lightProbes = defaultLightProbe;\n            isSetLightProbe =false;\n        }\n    }\n    public override void OnDestroy()\n    {\n        TAGlobalData.Instance.ReleaseTexture(_jerseyTexture, _socksTexture);\n        _jerseyTexture = null;\n        _socksTexture = null;\n        if (StadiumSceneController.Instance!= null && StadiumSceneController.Instance.StadiumLight!= null)\n        {\n            StadiumSceneController.Instance.StadiumLight.SetActive(true);\n        }\n\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(rt);\n        rt = null;\n    }\n}\n<fim_middle>"}
{"inputs": "\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System;\nusing PlatformHotfix;\nusing UnityEngine.EventSystems;\n\npublic class RankMatchCup3DView :View3DBase\n{\n    private GameObject[] _cups;\n    private MeshRenderer[] _cupRenders;\n    private MeshRenderer[] _giftRenders;\n    private SkinnedMeshRenderer[] _gift2Renders1;\n\n    private Animator  _currentgiftBox2;\n    private GameObject[] _cupPillars;\n    private MeshRenderer[] _cupFlags;\n    private GameObject _effectPrefab;\n    private GameObject _effectObj;\n\n    private static Vector3 _initialPos;\n    private static int _selectedCupId = 0;\n\n    [HideInInspector]\n    public int SelectedCupId\n    {\n        get { return _selectedCupId; }\n        set\n        {\n            if (value >= 0 && value < CUP_NUM)\n            {\n                _selectedCupId = value;\n            }\n            else\n            {\n                DebugEX.LogError(\"\u9519\u8bef\uff0c\u5956\u676fID\u8d85\u51fa \uff1a\" + value);\n            }\n        }\n    }\n\n    private const int CUP_NUM = 7;\n    private const string CUP = \"Cup\";\n    private const string _GLIM_TIME = \"_GlimTime\";\n    private const string _CENTER_POS = \"_CenterPos\";\n    private const string _OUT_LINE = \"_OutLine\";\n    private const string GIFT_NAME = \"GiftBox\";\n    private const string GIFT2_NAME = \"GiftBox02\";\n    private const string LAYER_NAME = \"UI3D\";\n    private const string OPEN_SEASON_AWARD_VIEW = \"OpenSeasonAwardView\";\n    static bool _isFirstShow = true;\n    bool _show_effect = false;\n\n    Transform pillar1;\n    Transform pillar2;\n    Transform pillar3;\n\n    Vector3 pillar1_pos;\n    Vector3 pillar2_pos;\n    Vector3 pillar3_pos;\n\n    Action pillar1Func;\n    Action pillar2Func;\n    Action pillar3Func;\n\n    Vector3 lightAngles;\n\n    Camera ray_Camera;\n\n    float old_fieldOfView;\n    CameraRenderPassSetting setting;\n    float old_ShadowNear;\n    float old_ShadowFar;\n\n    bool isOpenGiftBox;\n    bool showSingleCuping;\n\n    static string [] CupRendersDic = new string[CUP_NUM]{\"Cup_01/Cup/Beginner_Cup\",\"Cup_02/Cup/Amateur_Cup02\",\"Cup_03/Cup/Cup_03\", \"Cup_04/Cup/Top Events_Cup_04\",\"Cup_05/Cup/SUPERSTAR\",\"Cup_06/Cup/Legen_Cup\" ,\"Cup_07/Cup/Trophy_Europe01\"};\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        _initialPos = this.transform.position;\n\n        _cups = new GameObject[CUP_NUM];\n        _cupRenders = new MeshRenderer[CUP_NUM];\n        _giftRenders = new MeshRenderer[CUP_NUM];\n        _gift2Renders1 = new SkinnedMeshRenderer[CUP_NUM];\n        _cupPillars = new GameObject[CUP_NUM];\n        _cupFlags = new MeshRenderer[CUP_NUM];\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            _cups[i] = this.transform.Find(string.Format(\"Cup_0{0}\", i+1)).gameObject;\n        }\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            _cupRenders[i] = this.transform.Find(CupRendersDic[i]).GetComponent<MeshRenderer>();\n        }\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            string path = string.Format(\"Cup_0{0}/Pillar/Pillar2/GiftBox\", i+1);\n            _giftRenders[i] = this.transform.Find(path).GetComponent<MeshRenderer>();\n        } //Home/Scene3D/RankMatchCup(Clone)/Cup_01/Pillar/Pillar2/GiftBox\n        \n         for(int i = 0; i< CUP_NUM;i++)\n        {\n            string path = string.Format(\"Cup_0{0}/Pillar/Pillar4/GiftBox02/GiftBox02_02\", i+1);\n            _gift2Renders1[i] = this.transform.Find(path).GetComponent<SkinnedMeshRenderer>();\n        }\n        \n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            _cupPillars[i] = this.transform.Find(string.Format(\"Cup_0{0}/Pillar\", i+1)).gameObject;\n        }\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            _cupFlags[i] = this.transform.Find(string.Format(\"Cup_0{0}/Flag\", i+1)).GetComponent<MeshRenderer>();\n        }\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            Transform cup = this.transform.Find(string.Format(\"Cup_0{0}/Cup\",i+1));\n            DynamicBoneCollider giftCollider = _giftRenders[i].transform.GetComponent<DynamicBoneCollider>();\n            DynamicBone [] dynamicBones = cup.GetComponents<DynamicBone>();\n            for(int j = 0; j< dynamicBones.Length;j++)\n            {\n                dynamicBones[j].m_Colliders.Add(giftCollider);\n            }\n        }\n\n        if (AppConfig.Instance.ChannelInfo == ChannelInfo.VIVO && GlobalDataManager.OpenVivoGiftRank)\n        {\n            for(int i = 0; i< CUP_NUM;i++)\n            {\n                try\n                {\n                    var gift = this.transform.Find(string.Format(\"Cup_0{0}/Pillar/Pillar3/Ball/Gifts\", i+1)).gameObject;\n                    gift.SetActive(true);\n                }\n                catch (Exception e)\n                {\n                \n                }\n            }\n        }\n       \n\n        //OpenUpdate();\n    }\n    public override  void OnEnable()\n    {\n        if(StadiumSceneController.Instance != null  && StadiumSceneController.Instance.StadiumLight != null)\n        {\n            if(lightAngles == Vector3.zero)\n            {\n                lightAngles = StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles;\n            }\n            StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = new Vector3(53, 107, 84);\n            if (ray_Camera == null)\n            {\n                ray_Camera = Platform.CameraAnimController.Instance.Cam.transform.Find(\"DummyCamera\").GetComponent<Camera>();\n                old_fieldOfView = ray_Camera.fieldOfView;\n                ray_Camera.fieldOfView = 42;\n            }\n        }\n       if(Platform.CameraAnimController.Instance != null)\n       {\n            setting = Platform.CameraAnimController.Instance.Cam.GetComponent<CameraRenderPassSetting>();\n            if (setting != null)\n            {\n                if((int)old_ShadowNear == 0)\n                {\n                    old_ShadowNear = setting.ShadowNear;\n                    old_ShadowFar = setting.ShadowFar;\n                }\n                setting.ShadowNear = 3;\n                setting.ShadowFar = 5;\n\n                var FOVPlayerFeature = setting.getRendererFeatureByName(\"FOVCameraObjects\");\n                FOVPlayerFeature?.SetActive(true);\n            }\n       }\n    }\n\n    public void ResetCameraInfo()\n    {\n        if(Platform.CameraAnimController.Instance == null) return;\n        Platform.CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 42, 0);\n        Platform.CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 42, 0);\n        Platform.CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", Vector4.zero, 0);\n        Platform.CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraForTransparentObjects\", Vector4.zero, 0);\n        Platform.CameraAnimController.Instance.SetFOV(70, 0);\n        Platform.CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f), 0);\n    }\n    public override void OnDisable()\n    {\n        if(StadiumSceneController.Instance != null && StadiumSceneController.Instance.StadiumLight != null){\n            StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = lightAngles;\n        }\n        \n        if (ray_Camera != null)\n        {\n            ray_Camera.fieldOfView = old_fieldOfView;\n        }\n        if (setting != null)\n        {\n            setting.ShadowNear = old_ShadowNear;\n            setting.ShadowFar = old_ShadowFar;\n        }\n    }\n\n    bool isShow = false;\n    public void ShowAllCups(bool show_effect = false)\n    {\n        if (isShow) return;\n        isShow = true;\n        float time = 0;\n        if (_isFirstShow)\n        {\n            time = 1.68f;\n            _isFirstShow = false;\n        }\n\n        _show_effect = show_effect;\n        gameObject.SetActive(true);\n        for (int i = 0; i < _cups.Length; i++)\n        {\n            _cups[i].SetActive(time > 0);\n            _cups[i].transform.Find(CUP).GetComponent<Cup_DynamicBone_Setting>().Weight = 0;\n            _cupFlags[i].material.SetFloat(_OUT_LINE, 0);\n            _cupPillars[i].transform.localEulerAngles = Vector3.zero;\n            _cupPillars[i].transform.GetChild(1).gameObject.SetActive(false);\n            _cupPillars[i].transform.GetChild(2).gameObject.SetActive(false);\n            _cupPillars[i].transform.GetChild(3).gameObject.SetActive(false);\n            _cupRenders[i].material.SetFloat(_GLIM_TIME, -1);\n            _gift2Renders1[i].material.SetFloat(_GLIM_TIME, -1);\n            _cupFlags[i].transform.Find(\"3DText\").GetComponent<TextMesh>().text = GetEachGradeName((GradeEnum)i);\n            if (time > 0)\n            {\n                Go.to(_cupRenders[i].material, 1f, new GoTweenConfig()\n                .materialFloat(1, _GLIM_TIME)\n                .setDelay(.6f)\n                .setEaseType(GoEaseType.ExpoOut));\n            }\n        }\n        if (SelectedCupId >= 0)\n        {\n            _cupFlags[SelectedCupId].gameObject.SetActive(true);\n            _cupFlags[SelectedCupId].material.SetFloat(_OUT_LINE, 1);\n        }\n        MoveTo(0, -0.04f, 0);\n        HidenEffect();\n\n        ShowSingleCup(time);\n    }\n\n\n    private void ShowSingleCup(float time)\n    {\n        showSingleCuping = true;\n        Go.DelayCall(() =>\n        {\n            FocusOnSelectedCup();\n            MoveTo(SelectedCupId - 2.5f, - (SelectedCupId -1)  * 0.05f, 0);\n        }, time);\n    }\n\n    private void FocusOnSelectedCup()\n    {\n        gameObject.SetActive(true);\n        SetSelectCupData(SelectedCupId);\n        pillar1Func = () =>\n        {\n            if (pillar1 != null)\n            {\n                pillar1.gameObject.SetActive(true);\n                Go.from(pillar1, .6f, new GoTweenConfig()\n                    .localPosition(pillar1_pos - new Vector3(0, .5f, 0))\n                    .setEaseType(GoEaseType.ExpoOut));\n            }\n        };\n        Go.DelayCall(pillar1Func, .3f);\n\n        pillar2Func = () =>\n        {\n            if (pillar2 != null)\n            {\n                pillar2.gameObject.SetActive(true);\n                Go.from(pillar2, .6f, new GoTweenConfig()\n                    .localPosition(pillar2_pos - new Vector3(0, .5f, 0))\n                    .setEaseType(GoEaseType.ExpoOut));\n            }\n        };\n        Go.DelayCall(pillar2Func, .6f);\n        \n        pillar3Func = () =>\n        {\n            if (pillar3 != null)\n            {\n                pillar3.gameObject.SetActive(true);\n                Go.from(pillar3, .6f, new GoTweenConfig()\n                    .localPosition(pillar3_pos - new Vector3(0, .5f, 0))\n                    .setEaseType(GoEaseType.ExpoOut));\n                GlimFocusedCup();\n                isShow = false;\n            }\n        };\n        Go.DelayCall(pillar3Func, .9f);\n        Go.DelayCall(ShowCupComplete, 1.5f);\n        if (_show_effect) //\u64ad\u653e\u7279\u6548\n        {\n            Go.DelayCall(ShowEffect, 1.5f);\n        }\n    }\n    private void ShowCupComplete()\n    {\n        showSingleCuping = false;\n        if(isOpenGiftBox)\n        {\n            OpenGiftBox(isOpenGiftBox);\n        }\n    }\n\n    private void SetSelectCupData(int selectid)\n    {\n        PillarsReset();\n        for (int i = 0; i < _cups.Length; i++)\n        {\n            if (i != selectid)\n            {\n                _cups[i].SetActive(false);\n            }\n        }\n        _cups[selectid].SetActive(true);\n        _cupPillars[selectid].transform.localEulerAngles = new Vector3(0, -55f, 0);\n        pillar1 = _cupPillars[selectid].transform.GetChild(1);\n        pillar2 = _cupPillars[selectid].transform.GetChild(2);\n        pillar3 = _cupPillars[selectid].transform.GetChild(3);\n        pillar1_pos = pillar1.localPosition;\n        pillar2_pos = pillar2.localPosition;\n        pillar3_pos = pillar3.localPosition;\n        _cupFlags[selectid].gameObject.SetActive(false);\n        _cups[selectid].transform.Find(CUP).GetComponent<Cup_DynamicBone_Setting>().Weight = 1;\n        _currentgiftBox2 = _gift2Renders1[selectid].transform.parent.GetComponent<Animator>();\n        CupRotation(2, selectid, new Vector3(0, -90, 0), new Vector3(0, 90, 0));\n    }\n    public void ShowRankCup(int selectid, float offset = 2.5f, float moveTime = 0, bool show_effect = false)\n    {\n        if (selectid < 0 || selectid >= CUP_NUM)\n        {\n            DebugEX.LogError(\"selectid is out\");\n            return;\n        }\n        SetSelectCupData(selectid);\n        pillar1.gameObject.SetActive(true);\n        pillar2.gameObject.SetActive(true);\n        pillar3.gameObject.SetActive(true);\n        MoveTo(selectid - offset, - (selectid -1) * 0.05f, moveTime);\n\n        if (show_effect) //\u64ad\u653e\u7279\u6548\n        {\n            Go.DelayCall(ShowEffect, 1.5f);\n        }\n    }\n\n    public void GlimFocusedCup()\n    {\n        // _cupRenders[SelectedCupId].material.SetFloat(\"_GlimTime\",-1);\n        // Go.to(_cupRenders[SelectedCupId].material,1f,new GoTweenConfig()\n        //         .materialFloat(1,\"_GlimTime\")\n        //         .setEaseType(GoEaseType.ExpoOut));\n\n        _cupRenders[SelectedCupId].material.SetFloat(_GLIM_TIME, -1);\n        //_giftRenders[SelectedCupId].materials[0].SetFloat(_GLIM_TIME,-1);  \n        _giftRenders[SelectedCupId].materials[1].SetFloat(_GLIM_TIME, -1);\n        _giftRenders[SelectedCupId].materials[1].SetVector(_CENTER_POS, _giftRenders[SelectedCupId].transform.position);\n\n        _gift2Renders1[SelectedCupId].material.SetFloat(_GLIM_TIME, -1);\n        _gift2Renders1[SelectedCupId].material.SetVector(_CENTER_POS, _gift2Renders1[SelectedCupId].transform.parent.position);\n        Go.to(this, 1f, new GoTweenConfig()\n                .onUpdate((obj) =>\n                {\n                    float glimTime = (obj.totalElapsedTime - 0.5f) * 2f;\n                    //_giftRenders[SelectedCupId].materials[0].SetFloat(_GLIM_TIME,glimTime);\n                    _giftRenders[SelectedCupId].materials[1].SetFloat(_GLIM_TIME, glimTime);\n                    _cupRenders[SelectedCupId].material.SetFloat(_GLIM_TIME, glimTime);\n                    _gift2Renders1[SelectedCupId].material.SetFloat(_GLIM_TIME, glimTime);\n                })\n                .setEaseType(GoEaseType.ExpoOut));\n    }\n\n\n\n    public void MoveTo(float z, float y, float duation = .6f, GoEaseType easeType = GoEaseType.ExpoOut)\n    {\n        Vector3 pos = _initialPos;\n        pos.y = y;\n        pos.z = -z;\n        if (duation == 0)\n        {\n            this.transform.position = pos;\n        }\n        else\n        {\n            Go.killAllTweensWithTarget(this.transform);\n            Go.to(this.transform, duation, new GoTweenConfig()\n                .position(pos)\n                .setEaseType(easeType));\n        }\n    }\n\n    public void CupRotation(float time, int selectid, Vector3 startEulerAngles, Vector3 endEulerAngles)\n    {\n        Transform cup = _cups[selectid].transform.Find(CUP);\n        Go.killAllTweensWithTarget(cup.transform);\n        RotationCup rotationCup = cup.GetComponent<RotationCup>();\n        if (rotationCup != null)\n        {\n            rotationCup.deltaX = 0;\n            rotationCup.isCanRotate = false;\n        }\n        cup.localRotation = Quaternion.Euler(startEulerAngles);\n        Go.to(cup.transform, time, new GoTweenConfig()\n           .localRotation(Quaternion.Euler(endEulerAngles))\n           .setDelay(.1f)\n           .setEaseType(GoEaseType.CubicOut)\n           .onComplete((obj) =>\n           {\n               if (rotationCup != null)\n               {\n                   rotationCup.deltaX = 0;\n                   rotationCup.isCanRotate = true;\n               }\n           }));\n    }\n\n    public Vector3 GetGiftBox2Pos()\n    {\n        Vector3 pos = Vector3.zero;\n        if(SelectedCupId >= 0 && SelectedCupId < CUP_NUM)\n        {\n            pos = _gift2Renders1[SelectedCupId].transform.parent.position;\n            pos.y += 0.08f;\n        }\n        return pos;\n    }\n    \n    public void OpenGiftBox(bool isOpen)\n    {\n        this.isOpenGiftBox = isOpen;\n        if(showSingleCuping) return;\n        if(isOpen)\n        {\n            _currentgiftBox2.Play(\"Open\", 0);\n        }else{\n            _currentgiftBox2.Play(\"Close\", 0);\n        }\n    }\n    private void ShowEffect()\n    {\n        if (_effectObj == null)\n        {\n            _effectObj = GameObject.Instantiate(_effectPrefab, _cups[SelectedCupId].transform);\n        }\n        _effectObj.SetActive(true);\n        Go.DelayCall(() =>\n        {\n            HidenEffect();\n        }, 4);\n    }\n\n    private void HidenEffect()\n    {\n        if (_effectObj != null)\n            _effectObj.SetActive(false);\n    }\n\n    private void PillarsReset()\n    {   \n        if (pillar1 != null)\n        {\n            pillar1.localPosition = pillar1_pos;\n            Go.killAllTweensWithTarget(pillar1);\n            pillar1 = null;\n        }\n        if(pillar2!= null)\n        {\n             pillar2.localPosition = pillar2_pos;\n             Go.killAllTweensWithTarget(pillar2);\n              pillar2 = null;\n        }\n        if(pillar3!= null)\n        {\n            pillar3.localPosition = pillar3_pos;\n            Go.killAllTweensWithTarget(pillar3);\n            pillar3 = null;\n        }\n        if (pillar1Func != null)\n        {\n            Go.CancelDelayCall(pillar1Func);\n            pillar1Func = null;\n        }\n        if(pillar2Func!= null)\n        {\n            Go.CancelDelayCall(pillar2Func);\n            pillar2Func = null;\n        }\n        if(pillar3Func!= null)\n        {\n            Go.CancelDelayCall(pillar3Func);\n            pillar3Func = null;\n        }\n    }\n    public override void OnDestroy()\n    {\n        //CloseUpdate();\n        if (_effectObj != null)\n        {\n            GameObject.Destroy(_effectObj);\n            _effectObj = null;\n        }\n        ray_Camera = null;\n        Go.CancelDelayCall(ShowEffect);\n        Go.killAllTweensWithTarget(this);\n        PillarsReset();\n        showSingleCuping = false;\n        isOpenGiftBox = false; \n    }\n\n    PointerEventData eventData = new PointerEventData(EventSystem.current);\n    List<RaycastResult> results = new List<RaycastResult>();\n    // public override void Update()\n    // {\n    //     if (IsPointerOverUIObject())\n    //     {\n    //         return;\n    //     }\n    //     if (Input.GetMouseButtonDown(0) || Input.touchCount > 0)\n    //     {\n    //         if (EventSystem.current.IsPointerOverGameObject())\n    //         {  //\u963b\u65ad\u7a7f\u900fUI\u7684\u4e8b\u4ef6\n    //             return;\n    //         }\n    //         Ray ray = ray_Camera.ScreenPointToRay(Input.mousePosition);\n    //         RaycastHit hit;\n    //         if (Physics.Raycast(ray, out hit, 1000, 1 << LayerMask.NameToLayer(LAYER_NAME)))\n    //         {\n    //             GameObject obj = hit.collider.gameObject;\n                \n    //         }\n    //     }\n    // }\n    private bool IsPointerOverUIObject()\n    {\n        results.Clear();\n        eventData.position = PlatformHotfix.Input.mousePosition;\n        EventSystem.current.RaycastAll(eventData, results);\n        return results.Count > 0;\n    }\n    public static string GetEachGradeName(GradeEnum grade)\n    {\n        switch (grade)\n        {\n            case GradeEnum.BEGINNER:\n                return LanguageKit.Get(\"Rank_Grade_Name1\");\n            case GradeEnum.AMATEUR:\n                return LanguageKit.Get(\"Rank_Grade_Name2\");\n            case GradeEnum.PROFESSIONAL:\n                return LanguageKit.Get(\"Rank_Grade_Name3\");\n            case GradeEnum.TOP:\n                return LanguageKit.Get(\"Rank_Grade_Name4\");\n            case GradeEnum.SUPERSTAR:\n                return LanguageKit.Get(\"Rank_Grade_Name5\");\n            case GradeEnum.LEGEND:\n                return LanguageKit.Get(\"Rank_Grade_Name7\");\n            case GradeEnum.EPIC:\n                return LanguageKit.Get(\"Rank_Grade_Name6\");\n        }\n        return \"\";\n    }\n}\npublic enum GradeEnum\n{\n    BEGINNER = 0,\n    AMATEUR = 1,\n    PROFESSIONAL = 2,\n    TOP = 3,\n    SUPERSTAR = 4,\n    LEGEND = 5,\n    EPIC = 6,\n}\n", "cropped_inputs": "\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System;\nusing PlatformHotfix;\nusing UnityEngine.EventSystems;\n\npublic class RankMatchCup3DView :View3DBase\n{\n    private GameObject[] _cups;\n    private MeshRenderer[] _cupRenders;\n    private MeshRenderer[] _giftRenders;\n    private SkinnedMeshRenderer[] _gift2Renders1;\n\n    private Animator  _currentgiftBox2;\n    private GameObject[] _cupPillars;\n    private MeshRenderer[] _cupFlags;\n    private GameObject _effectPrefab;\n    private GameObject _effectObj;\n\n    private static Vector3 _initialPos;\n    private static int _selectedCupId = 0;\n\n    [HideInInspector]\n    public int SelectedCupId\n    {\n        get { return _selectedCupId; }\n        set\n        {\n            if (value >= 0 && value < CUP_NUM)\n            {\n                _selectedCupId = value;\n            }\n            else\n            {\n                DebugEX.LogError(\"\u9519\u8bef\uff0c\u5956\u676fID\u8d85\u51fa \uff1a\" + value);\n            }\n        }\n    }\n\n    private const int CUP_NUM = 7;\n    private const string CUP = \"Cup\";\n    private const string _GLIM_TIME = \"_GlimTime\";\n    private const string _CENTER_POS = \"_CenterPos\";\n    private const string _OUT_LINE = \"_OutLine\";\n    private const string GIFT_NAME = \"GiftBox\";\n    private const string GIFT2_NAME = \"GiftBox02\";\n    private const string LAYER_NAME = \"UI3D\";\n    private const string OPEN_SEASON_AWARD_VIEW = \"OpenSeasonAwardView\";\n    static bool _isFirstShow = true;\n    bool _show_effect = false;\n\n    Transform pillar1;\n    Transform pillar2;\n    Transform pillar3;\n\n    Vector3 pillar1_pos;\n    Vector3 pillar2_pos;\n    Vector3 pillar3_pos;\n\n    Action pillar1Func;\n    Action pillar2Func;\n    Action pillar3Func;\n\n    Vector3 lightAngles;\n\n    Camera ray_Camera;\n\n    float old_fieldOfView;\n    CameraRenderPassSetting setting;\n    float old_ShadowNear;\n    float old_ShadowFar;\n\n    bool isOpenGiftBox;\n    bool showSingleCuping;\n\n    static string [] CupRendersDic = new string[CUP_NUM]{\"Cup_01/Cup/Beginner_Cup\",\"Cup_02/Cup/Amateur_Cup02\",\"Cup_03/Cup/Cup_03\", \"Cup_04/Cup/Top Events_Cup_04\",\"Cup_05/Cup/SUPERSTAR\",\"Cup_06/Cup/Legen_Cup\",\"Cup_07/Cup/Trophy_Europe01\"};\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        _initialPos = this.transform.position;\n\n        _cups = new GameObject[CUP_NUM];\n        _cupRenders = new MeshRenderer[CUP_NUM];\n        _giftRenders = new MeshRenderer[CUP_NUM];\n        _gift2Renders1 = new SkinnedMeshRenderer[CUP_NUM];\n        _cupPillars = new GameObject[CUP_NUM];\n        _cupFlags = new MeshRenderer[CUP_NUM];\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            _cups[i] = this.transform.Find(string.Format(\"Cup_0{0}\", i+1)).gameObject;\n        }\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            _cupRenders[i] = this.transform.Find(CupRendersDic[i]).GetComponent<MeshRenderer>();\n        }\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            string path = string.Format(\"Cup_0{0}/Pillar/Pillar2/GiftBox\", i+1);\n            _giftRenders[i] = this.transform.Find(path).GetComponent<MeshRenderer>();\n        } //Home/Scene3D/RankMatchCup(Clone)/Cup_01/Pillar/Pillar2/GiftBox\n        \n         for(int i = 0; i< CUP_NUM;i++)\n        {\n            string path = string.Format(\"Cup_0{0}/Pillar/Pillar4/GiftBox02/GiftBox02_02\", i+1);\n            _gift2Renders1[i] = this.transform.Find(path).GetComponent<SkinnedMeshRenderer>();\n        }\n        \n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            _cupPillars[i] = this.transform.Find(string.Format(\"Cup_0{0}/Pillar\", i+1)).gameObject;\n        }\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            _cupFlags[i] = this.transform.Find(string.Format(\"Cup_0{0}/Flag\", i+1)).GetComponent<MeshRenderer>();\n        }\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            Transform cup = this.transform.Find(string.Format(\"Cup_0{0}/Cup\",i+1));\n            DynamicBoneCollider giftCollider = _giftRenders[i].transform.GetComponent<DynamicBoneCollider>();\n            DynamicBone [] dynamicBones = cup.GetComponents<DynamicBone>();\n            for(int j = 0; j< dynamicBones.Length;j++)\n            {\n                dynamicBones[j].m_Colliders.Add(giftCollider);\n            }\n        }\n\n        if (AppConfig.Instance.ChannelInfo == ChannelInfo.VIVO && GlobalDataManager.OpenVivoGiftRank)\n        {\n            for(int i = 0; i< CUP_NUM;i++)\n            {\n                try\n                {\n                    var gift = this.transform.Find(string.Format(\"Cup_0{0}/Pillar/Pillar3/Ball/Gifts\", i+1)).gameObject;\n                    gift.SetActive(true);\n                }\n                catch (Exception e)\n                {\n                \n                }\n            }\n        }\n       \n\n        //OpenUpdate();\n    }\n    public override  void OnEnable()\n    {\n        if(StadiumSceneController.Instance!= null  && StadiumSceneController.Instance.StadiumLight!= null)\n        {\n            if(lightAngles == Vector3.zero)\n            {\n                lightAngles = StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles;\n            }\n            StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = new Vector3(53, 107, 84);\n            if (ray_Camera == null)\n            {\n                ray_Camera = Platform.CameraAnimController.Instance.Cam.transform.Find(\"DummyCamera\").GetComponent<Camera>();\n                old_fieldOfView = ray_Camera.fieldOfView;\n                ray_Camera.fieldOfView = 42;\n            }\n        }\n       if(Platform.CameraAnimController.Instance!= null)\n       {\n            setting = Platform.CameraAnimController.Instance.Cam.GetComponent<CameraRenderPassSetting>();\n            if (setting!= null)\n            {\n                if((int)old_ShadowNear == 0)\n                {\n                    old_ShadowNear = setting.ShadowNear;\n                    old_ShadowFar = setting.ShadowFar;\n                }\n                setting.ShadowNear = 3;\n                setting.ShadowFar = 5;\n\n                var FOVPlayerFeature = setting.getRendererFeatureByName(\"FOVCameraObjects\");\n                FOVPlayerFeature?.SetActive(true);\n            }\n       }\n    }\n\n    public void ResetCameraInfo()\n    {\n        if(Platform.CameraAnimController.Instance == null) return;\n        Platform.CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 42, 0);\n        Platform.CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 42, 0);\n        Platform.CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", Vector4.zero, 0);\n        Platform.CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraForSetFOV(70, 0);\n        Platform.CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f), 0);\n    }\n    public override void OnDisable()\n    {\n        if(StadiumSceneController.Instance!= null && StadiumSceneController.Instance.StadiumLight!= null){\n            StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = lightAngles;\n        }\n        \n        if (ray_Camera!= null)\n        {\n            ray_Camera.fieldOfView = old_fieldOfView;\n        }\n        if (setting!= null)\n        {\n            setting.ShadowNear = old_ShadowNear;\n            setting.ShadowFar = old_ShadowFar;\n        }\n    }\n\n    bool isShow = false;\n    public void ShowAllCups(bool show_effect = false)\n    {\n        if (isShow) return;\n        isShow = true;\n        float time = 0;\n        if (_isFirstShow)\n        {\n            time = 1.68f;\n            _isFirstShow = false;\n        }\n\n        _show_effect = show_effect;\n        gameObject.SetActive(true);\n        for (int i = 0; i < _cups.Length; i++)\n        {\n            _cups[i].SetActive(time > 0);\n            _cups[i].transform.Find(CUP).GetComponent<Cup_DynamicBone_Setting>().Weight = 0;\n            _cupFlags[i].material.SetFloat(_OUT_LINE, 0);\n            _cupPillars[i].transform.localEulerAngles = Vector3.zero;\n            _cupPillars[i].transform.GetChild(1).gameObject.SetActive(false);\n            _cupPillars[i].transform.GetChild(2).gameObject.SetActive(false);\n            _cupPillars[i].transform.GetChild(3).gameObject.SetActive(false);\n            _cupRenders[i].material.SetFloat(_GLIM_TIME, -1);\n            _gift2Renders1[i].material.SetFloat(_GLIM_TIME, -1);\n            _cupFlags[i].transform.Find(\"3DText\").GetComponent<TextMesh>().text = GetEachGradeName((GradeEnum)i);\n            if (time > 0)\n            {\n                Go.to(_cupRenders[i].material, 1f, new GoTweenConfig()\n               .materialFloat(1, _GLIM_TIME)\n               .setDelay(.6f)\n               .setEaseType(GoEaseType.ExpoOut));\n            }\n        }\n        if (SelectedCupId >= 0)\n        {\n            _cupFlags[SelectedCupId].gameObject.SetActive(true);\n            _cupFlags[SelectedCupId].material.SetFloat(_OUT_LINE, 1);\n        }\n        MoveTo(0, -0.04f, 0);\n        HidenEffect();\n\n        ShowSingleCup(time);\n    }\n\n\n    private void ShowSingleCup(float time)\n    {\n        showSingleCuping = true;\n        Go.DelayCall(() =>\n        {\n            FocusOnSelectedCup();\n            MoveTo(SelectedCupId - 2.5f, - (SelectedCupId -1)  * 0.05f, 0);\n        }, time);\n    }\n\n    private void FocusOnSelectedCup()\n    {\n        gameObject.SetActive(true);\n        SetSelectCupData(SelectedCupId);\n        pillar1Func = () =>\n        {\n            if (pillar1!= null)\n            {\n                pillar1.gameObject.SetActive(true);\n                Go.from(pillar1,.6f, new GoTweenConfig()\n                   .localPosition(pillar1_pos - new Vector3(0,.5f, 0))\n                   .setEaseType(GoEaseType.ExpoOut));\n            }\n        };\n        Go.DelayCall(pillar1Func,.3f);\n\n        pillar2Func = () =>\n        {\n            if (pillar2!= null)\n            {\n                pillar2.gameObject.SetActive(true);\n                Go.from(pillar2,.6f, new GoTweenConfig()\n                   .localPosition(pillar2_pos - new Vector3(0,.5f, 0))\n                   .setEaseType(GoEaseType.ExpoOut));\n            }\n        };\n        Go.DelayCall(pillar2Func,.6f);\n        \n        pillar3Func = () =>\n        {\n            if (pillar3!= null)\n            {\n                pillar3.gameObject.SetActive(true);\n                Go.from(pillar3,.6f, new GoTweenConfig()\n                   .localPosition(pillar3_pos - new Vector3(0,.5f, 0))\n                   .setEaseType(GoEaseType.ExpoOut));\n                GlimFocusedCup();\n                isShow = false;\n            }\n        };\n        Go.DelayCall(pillar3Func,.9f);\n        Go.DelayCall(ShowCupComplete, 1.5f);\n        if (_show_effect) //\u64ad\u653e\u7279\u6548\n        {\n            Go.DelayCall(ShowEffect, 1.5f);\n        }\n    }\n    private void ShowCupComplete()\n    {\n        showSingleCuping = false;\n        if(isOpenGiftBox)\n        {\n            OpenGiftBox(isOpenGiftBox);\n        }\n    }\n\n    private void SetSelectCupData(int selectid)\n    {\n        PillarsReset();\n        for (int i = 0; i < _cups.Length; i++)\n        {\n            if (i!= selectid)\n            {\n                _cups[i].SetActive(false);\n            }\n        }\n        _cups[selectid].SetActive(true);\n        _cupPillars[selectid].transform.localEulerAngles = new Vector3(0, -55f, 0);\n        pillar1 = _cupPillars[selectid].transform.GetChild(1);\n        pillar2 = _cupPillars[selectid].transform.GetChild(2);\n        pillar3 = _cupPillars[selectid].transform.GetChild(3);\n        pillar1_pos = pillar1.localPosition;\n        pillar2_pos = pillar2.localPosition;\n        pillar3_pos = pillar3.localPosition;\n        _cupFlags[selectid].gameObject.SetActive(false);\n        _cups[selectid].transform.Find(CUP).GetComponent<Cup_DynamicBone_Setting>().Weight = 1;\n        _currentgiftBox2 = _gift2Renders1[selectid].transform.parent.GetComponent<Animator>();\n        CupRotation(2, selectid, new Vector3(0, -90, 0), new Vector3(0, 90, 0));\n    }\n    public void ShowRankCup(int selectid, float offset = 2.5f, float moveTime = 0, bool show_effect = false)\n    {\n        if (selectid < 0 || selectid >= CUP_NUM)\n        {\n            DebugEX.LogError(\"selectid is out\");\n            return;\n        }\n        SetSelectCupData(selectid);\n        pillar1.gameObject.SetActive(true);\n        pillar2.gameObject.SetActive(true);\n        pillar3.gameObject.SetActive(true);\n        MoveTo(selectid - offset, - (selectid -1) * 0.05f, moveTime);\n\n        if (show_effect) //\u64ad\u653e\u7279\u6548\n        {\n            Go.DelayCall(ShowEffect, 1.5f);\n        }\n    }\n\n    public void GlimFocusedCup()\n    {\n        // _cupRenders[SelectedCupId].material.SetFloat(\"_GlimTime\",-1);\n        // Go.to(_cupRenders[SelectedCupId].material,1f,new GoTweenConfig()\n        //        .materialFloat(1,\"_GlimTime\")\n        //        .setEaseType(GoEaseType.ExpoOut));\n\n        _cupRenders[SelectedCupId].material.SetFloat(_GLIM_TIME, -1);\n        //_giftRenders[SelectedCupId].materials[0].SetFloat(_GLIM_TIME,-1);  \n        _giftRenders[SelectedCupId].materials[1].SetFloat(_GLIM_TIME, -1);\n        _giftRenders[SelectedCupId].materials[1].SetVector(_CENTER_POS, _giftRenders[SelectedCupId].transform.position);\n\n        _gift2Renders1[SelectedCupId].material.SetFloat(_GLIM_TIME, -1);\n        _gift2Renders1[SelectedCupId].material.SetVector(_CENTER_POS, _gift2Renders1[SelectedCupId].transform.parent.position);\n        Go.to(this, 1f, new GoTweenConfig()\n               .onUpdate((obj) =>\n                {\n                    float glimTime = (obj.totalElapsedTime - 0.5f) * 2f;\n                    //_giftRenders[SelectedCupId].materials[0].SetFloat(_GLIM_TIME,glimTime);\n                    _giftRenders[SelectedCupId].materials[1].SetFloat(_GLIM_TIME, glimTime);\n                    _cupRenders[SelectedCupId].material.SetFloat(_GLIM_TIME, glimTime);\n                    _gift2Renders1[SelectedCupId].material.SetFloat(_GLIM_TIME, glimTime);\n                })\n               .setEaseType(GoEaseType.ExpoOut));\n    }\n\n\n\n    public void MoveTo(float z, float y, float duation =.6f, GoEaseType easeType = GoEaseType.ExpoOut)\n    {\n        Vector3 pos = _initialPos;\n        pos.y = y;\n        pos.z = -z;\n        if (duation == 0)\n        {\n            this.transform.position = pos;\n        }\n        else\n        {\n            Go.killAllTweensWithTarget(this.transform);\n            Go.to(this.transform, duation, new GoTweenConfig()\n               .position(pos)\n               .setEaseType(easeType));\n        }\n    }\n\n    public void CupRotation(float time, int selectid, Vector3 startEulerAngles, Vector3 endEulerAngles)\n    {\n        Transform cup = _cups[selectid].transform.Find(CUP);\n        Go.killAllTweensWithTarget(cup.transform);\n        RotationCup rotationCup = cup.GetComponent<RotationCup>();\n        if (rotationCup!= null)\n        {\n            rotationCup.deltaX = 0;\n            rotationCup.isCanRotate = false;\n        }\n        cup.localRotation = Quaternion.Euler(startEulerAngles);\n        Go.to(cup.transform, time, new GoTweenConfig()\n          .localRotation(Quaternion.Euler(endEulerAngles))\n          .setDelay(.1f)\n          .setEaseType(GoEaseType.CubicOut)\n          .onComplete((obj) =>\n           {\n               if (rotationCup!= null)\n               {\n                   rotationCup.deltaX = 0;\n                   rotationCup.isCanRotate = true;\n               }\n           }));\n    }\n\n    public Vector3 GetGiftBox2Pos()\n    {\n        Vector3 pos = Vector3.zero;\n        if(SelectedCupId >= 0 && SelectedCupId < CUP_NUM)\n        {\n            pos = _gift2Renders1[SelectedCupId].transform.parent.position;\n            pos.y += 0.08f;\n        }\n        return pos;\n    }\n    \n    public void OpenGiftBox(bool isOpen)\n    {\n        this.isOpenGiftBox = isOpen;\n        if(showSingleCuping) return;\n        if(isOpen)\n        {\n            _currentgiftBox2.Play(\"Open\", 0);\n        }else{\n            _currentgiftBox2.Play(\"Close\", 0);\n        }\n    }\n    private void ShowEffect()\n    {\n        if (_effectObj == null)\n        {\n            _effectObj = GameObject.Instantiate(_effectPrefab, _cups[SelectedCupId].transform);\n        }\n        _effectObj.SetActive(true);\n        Go.DelayCall(() =>\n        {\n            HidenEffect();\n        }, 4);\n    }\n\n    private void HidenEffect()\n    {\n        if (_effectObj!= null)\n            _effectObj.SetActive(false);\n    }\n\n    private void PillarsReset()\n    {   \n        if (pillar1!= null)\n        {\n            pillar1.localPosition = pillar1_pos;\n            Go.killAllTweensWithTarget(pillar1);\n            pillar1 = null;\n        }\n        if(pillar2!= null)\n        {\n             pillar2.localPosition = pillar2_pos;\n             Go.killAllTweensWithTarget(pillar2);\n              pillar2 = null;\n        }\n        if(pillar3!= null)\n        {\n            pillar3.localPosition = pillar3_pos;\n            Go.killAllTweensWithTarget(pillar3);\n            pillar3 = null;\n        }\n        if (pillar1Func!= null)\n        {\n            Go.CancelDelayCall(pillar1Func);\n            pillar1Func = null;\n        }\n        if(pillar2Func!= null)\n        {\n            Go.CancelDelayCall(pillar2Func);\n            pillar2Func = null;\n        }\n        if(pillar3Func!= null)\n        {\n            Go.CancelDelayCall(pillar3Func);\n            pillar3Func = null;\n        }\n    }\n    public override void OnDestroy()\n    {\n        //CloseUpdate();\n        if (_effectObj!= null)\n        {\n            GameObject.Destroy(_effectObj);\n            _effectObj = null;\n        }\n        ray_Camera = null;\n        Go.CancelDelayCall(ShowEffect);\n        Go.killAllTweensWithTarget(this);\n        PillarsReset();\n        showSingleCuping = false;\n        isOpenGiftBox = false; \n    }\n\n    PointerEventData eventData = new PointerEventData(EventSystem.current);\n    List<RaycastResult> results = new List<RaycastResult>();\n    // public override void Update()\n    // {\n    //     if (IsPointerOverUIObject())\n    //     {\n    //         return;\n    //     }\n    //     if (Input.GetMouseButtonDown(0) || Input.touchCount > 0)\n    //     {\n    //         if (EventSystem.current.IsPointerOverGameObject())\n    //         {  //\u963b\u65ad\u7a7f\u900fUI\u7684\u4e8b\u4ef6\n    //             return;\n    //         }\n    //         Ray ray = ray_Camera.ScreenPointToRay(Input.mousePosition);\n    //         RaycastHit hit;\n    //         if (Physics.Raycast(ray, out hit, 1000, 1 << LayerMask.NameToLayer(LAYER_NAME)))\n    //         {\n    //             GameObject obj = hit.collider.gameObject;\n                \n    //         }\n    //     }\n    // }\n    private bool IsPointerOverUIObject()\n    {\n        results.Clear();\n        eventData.position = PlatformHotfix.Input.mousePosition;\n        EventSystem.current.RaycastAll(eventData, results);\n        return results.Count > 0;\n    }\n    public static string GetEachGradeName(GradeEnum grade)\n    {\n        switch (grade)\n        {\n            case GradeEnum.BEGINNER:\n                return LanguageKit.Get(\"Rank_Grade_Name1\");\n            case GradeEnum.AMATEUR:\n                return LanguageKit.Get(\"Rank_Grade_Name2\");\n            case GradeEnum.PROFESSIONAL:\n                return LanguageKit.Get(\"Rank_Grade_Name3\");\n            case GradeEnum.TOP:\n                return LanguageKit.Get(\"Rank_Grade_Name4\");\n            case GradeEnum.SUPERSTAR:\n                return LanguageKit.Get(\"Rank_Grade_Name5\");\n            case GradeEnum.LEGEND:\n                return LanguageKit.Get(\"Rank_Grade_Name7\");\n            case GradeEnum.EPIC:\n                return LanguageKit.Get(\"Rank_Grade_Name6\");\n        }\n        return \"\";\n    }\n}\npublic enum GradeEnum\n{\n    BEGINNER = 0,\n    AMATEUR = 1,\n    PROFESSIONAL = 2,\n    TOP = 3,\n    SUPERSTAR = 4,\n    LEGEND = 5,\n    EPIC = 6,\n}\n", "starcoder_inputs": "<fim_prefix>\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System;\nusing PlatformHotfix;\nusing UnityEngine.EventSystems;\n\npublic class RankMatchCup3DView :View3DBase\n{\n    private GameObject[] _cups;\n    private MeshRenderer[] _cupRenders;\n    private MeshRenderer[] _giftRenders;\n    private SkinnedMeshRenderer[] _gift2Renders1;\n\n    private Animator  _currentgiftBox2;\n    private GameObject[] _cupPillars;\n    private MeshRenderer[] _cupFlags;\n    private GameObject _effectPrefab;\n    private GameObject _effectObj;\n\n    private static Vector3 _initialPos;\n    private static int _selectedCupId = 0;\n\n    [HideInInspector]\n    public int SelectedCupId\n    {\n        get { return _selectedCupId; }\n        set\n        {\n            if (value >= 0 && value < CUP_NUM)\n            {\n                _selectedCupId = value;\n            }\n            else\n            {\n                DebugEX.LogError(\"\u9519\u8bef\uff0c\u5956\u676fID\u8d85\u51fa \uff1a\" + value);\n            }\n        }\n    }\n\n    private const int CUP_NUM = 7;\n    private const string CUP = \"Cup\";\n    private const string _GLIM_TIME = \"_GlimTime\";\n    private const string _CENTER_POS = \"_CenterPos\";\n    private const string _OUT_LINE = \"_OutLine\";\n    private const string GIFT_NAME = \"GiftBox\";\n    private const string GIFT2_NAME = \"GiftBox02\";\n    private const string LAYER_NAME = \"UI3D\";\n    private const string OPEN_SEASON_AWARD_VIEW = \"OpenSeasonAwardView\";\n    static bool _isFirstShow = true;\n    bool _show_effect = false;\n\n    Transform pillar1;\n    Transform pillar2;\n    Transform pillar3;\n\n    Vector3 pillar1_pos;\n    Vector3 pillar2_pos;\n    Vector3 pillar3_pos;\n\n    Action pillar1Func;\n    Action pillar2Func;\n    Action pillar3Func;\n\n    Vector3 lightAngles;\n\n    Camera ray_Camera;\n\n    float old_fieldOfView;\n    CameraRenderPassSetting setting;\n    float old_ShadowNear;\n    float old_ShadowFar;\n\n    bool isOpenGiftBox;\n    bool showSingleCuping;\n\n    static string [] CupRendersDic = new string[CUP_NUM]{\"Cup_01/Cup/Beginner_Cup\",\"Cup_02/Cup/Amateur_Cup02\",\"Cup_03/Cup/Cup_03\", \"Cup_04/Cup/Top Events_Cup_04\",\"Cup_05/Cup/SUPERSTAR\",\"Cup_06/Cup/Legen_Cup\",\"Cup_07/Cup/Trophy_Europe01\"};\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        _initialPos = this.transform.position;\n\n        _cups = new GameObject[CUP_NUM];\n        _cupRenders = new MeshRenderer[CUP_NUM];\n        _giftRenders = new MeshRenderer[CUP_NUM];\n        _gift2Renders1 = new SkinnedMeshRenderer[CUP_NUM];\n        _cupPillars = new GameObject[CUP_NUM];\n        _cupFlags = new MeshRenderer[CUP_NUM];\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            _cups[i] = this.transform.Find(string.Format(\"Cup_0{0}\", i+1)).gameObject;\n        }\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            _cupRenders[i] = this.transform.Find(CupRendersDic[i]).GetComponent<MeshRenderer>();\n        }\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            string path = string.Format(\"Cup_0{0}/Pillar/Pillar2/GiftBox\", i+1);\n            _giftRenders[i] = this.transform.Find(path).GetComponent<MeshRenderer>();\n        } //Home/Scene3D/RankMatchCup(Clone)/Cup_01/Pillar/Pillar2/GiftBox\n        \n         for(int i = 0; i< CUP_NUM;i++)\n        {\n            string path = string.Format(\"Cup_0{0}/Pillar/Pillar4/GiftBox02/GiftBox02_02\", i+1);\n            _gift2Renders1[i] = this.transform.Find(path).GetComponent<SkinnedMeshRenderer>();\n        }\n        \n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            _cupPillars[i] = this.transform.Find(string.Format(\"Cup_0{0}/Pillar\", i+1)).gameObject;\n        }\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            _cupFlags[i] = this.transform.Find(string.Format(\"Cup_0{0}/Flag\", i+1)).GetComponent<MeshRenderer>();\n        }\n\n        for(int i = 0; i< CUP_NUM;i++)\n        {\n            Transform cup = this.transform.Find(string.Format(\"Cup_0{0}/Cup\",i+1));\n            DynamicBoneCollider giftCollider = _giftRenders[i].transform.GetComponent<DynamicBoneCollider>();\n            DynamicBone [] dynamicBones = cup.GetComponents<DynamicBone>();\n            for(int j = 0; j< dynamicBones.Length;j++)\n            {\n                dynamicBones[j].m_Colliders.Add(giftCollider);\n            }\n        }\n\n        if (AppConfig.Instance.ChannelInfo == ChannelInfo.VIVO && GlobalDataManager.OpenVivoGiftRank)\n        {\n            for(int i = 0; i< CUP_NUM;i++)\n            {\n                try\n                {\n                    var gift = this.transform.Find(string.Format(\"Cup_0{0}/Pillar/Pillar3/Ball/Gifts\", i+1)).gameObject;\n                    gift.SetActive(true);\n                }\n                catch (Exception e)\n                {\n                \n                }\n            }\n        }\n       \n\n        //OpenUpdate();\n    }\n    public override  void OnEnable()\n    {\n        if(StadiumSceneController.Instance!= null  && StadiumSceneController.Instance.StadiumLight!= null)\n        {\n            if(lightAngles == Vector3.zero)\n            {\n                lightAngles = StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles;\n            }\n            StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = new Vector3(53, 107, 84);\n            if (ray_Camera == null)\n            {\n                ray_Camera = Platform.CameraAnimController.Instance.Cam.transform.Find(\"DummyCamera\").GetComponent<Camera>();\n                old_fieldOfView = ray_Camera.fieldOfView;\n                ray_Camera.fieldOfView = 42;\n            }\n        }\n       if(Platform.CameraAnimController.Instance!= null)\n       {\n            setting = Platform.CameraAnimController.Instance.Cam.GetComponent<CameraRenderPassSetting>();\n            if (setting!= null)\n            {\n                if((int)old_ShadowNear == 0)\n                {\n                    old_ShadowNear = setting.ShadowNear;\n                    old_ShadowFar = setting.ShadowFar;\n                }\n                setting.ShadowNear = 3;\n                setting.ShadowFar = 5;\n\n                var FOVPlayerFeature = setting.getRendererFeatureByName(\"FOVCameraObjects\");\n                FOVPlayerFeature?.SetActive(true);\n            }\n       }\n    }\n\n    public void ResetCameraInfo()\n    {\n        if(Platform.CameraAnimController.Instance == null) return;\n        Platform.CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 42, 0);\n        Platform.CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 42, 0);\n        Platform.CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", Vector4.zero, 0);\n        Platform.CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraFor<fim_suffix>SetFOV(70, 0);\n        Platform.CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f), 0);\n    }\n    public override void OnDisable()\n    {\n        if(StadiumSceneController.Instance!= null && StadiumSceneController.Instance.StadiumLight!= null){\n            StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = lightAngles;\n        }\n        \n        if (ray_Camera!= null)\n        {\n            ray_Camera.fieldOfView = old_fieldOfView;\n        }\n        if (setting!= null)\n        {\n            setting.ShadowNear = old_ShadowNear;\n            setting.ShadowFar = old_ShadowFar;\n        }\n    }\n\n    bool isShow = false;\n    public void ShowAllCups(bool show_effect = false)\n    {\n        if (isShow) return;\n        isShow = true;\n        float time = 0;\n        if (_isFirstShow)\n        {\n            time = 1.68f;\n            _isFirstShow = false;\n        }\n\n        _show_effect = show_effect;\n        gameObject.SetActive(true);\n        for (int i = 0; i < _cups.Length; i++)\n        {\n            _cups[i].SetActive(time > 0);\n            _cups[i].transform.Find(CUP).GetComponent<Cup_DynamicBone_Setting>().Weight = 0;\n            _cupFlags[i].material.SetFloat(_OUT_LINE, 0);\n            _cupPillars[i].transform.localEulerAngles = Vector3.zero;\n            _cupPillars[i].transform.GetChild(1).gameObject.SetActive(false);\n            _cupPillars[i].transform.GetChild(2).gameObject.SetActive(false);\n            _cupPillars[i].transform.GetChild(3).gameObject.SetActive(false);\n            _cupRenders[i].material.SetFloat(_GLIM_TIME, -1);\n            _gift2Renders1[i].material.SetFloat(_GLIM_TIME, -1);\n            _cupFlags[i].transform.Find(\"3DText\").GetComponent<TextMesh>().text = GetEachGradeName((GradeEnum)i);\n            if (time > 0)\n            {\n                Go.to(_cupRenders[i].material, 1f, new GoTweenConfig()\n               .materialFloat(1, _GLIM_TIME)\n               .setDelay(.6f)\n               .setEaseType(GoEaseType.ExpoOut));\n            }\n        }\n        if (SelectedCupId >= 0)\n        {\n            _cupFlags[SelectedCupId].gameObject.SetActive(true);\n            _cupFlags[SelectedCupId].material.SetFloat(_OUT_LINE, 1);\n        }\n        MoveTo(0, -0.04f, 0);\n        HidenEffect();\n\n        ShowSingleCup(time);\n    }\n\n\n    private void ShowSingleCup(float time)\n    {\n        showSingleCuping = true;\n        Go.DelayCall(() =>\n        {\n            FocusOnSelectedCup();\n            MoveTo(SelectedCupId - 2.5f, - (SelectedCupId -1)  * 0.05f, 0);\n        }, time);\n    }\n\n    private void FocusOnSelectedCup()\n    {\n        gameObject.SetActive(true);\n        SetSelectCupData(SelectedCupId);\n        pillar1Func = () =>\n        {\n            if (pillar1!= null)\n            {\n                pillar1.gameObject.SetActive(true);\n                Go.from(pillar1,.6f, new GoTweenConfig()\n                   .localPosition(pillar1_pos - new Vector3(0,.5f, 0))\n                   .setEaseType(GoEaseType.ExpoOut));\n            }\n        };\n        Go.DelayCall(pillar1Func,.3f);\n\n        pillar2Func = () =>\n        {\n            if (pillar2!= null)\n            {\n                pillar2.gameObject.SetActive(true);\n                Go.from(pillar2,.6f, new GoTweenConfig()\n                   .localPosition(pillar2_pos - new Vector3(0,.5f, 0))\n                   .setEaseType(GoEaseType.ExpoOut));\n            }\n        };\n        Go.DelayCall(pillar2Func,.6f);\n        \n        pillar3Func = () =>\n        {\n            if (pillar3!= null)\n            {\n                pillar3.gameObject.SetActive(true);\n                Go.from(pillar3,.6f, new GoTweenConfig()\n                   .localPosition(pillar3_pos - new Vector3(0,.5f, 0))\n                   .setEaseType(GoEaseType.ExpoOut));\n                GlimFocusedCup();\n                isShow = false;\n            }\n        };\n        Go.DelayCall(pillar3Func,.9f);\n        Go.DelayCall(ShowCupComplete, 1.5f);\n        if (_show_effect) //\u64ad\u653e\u7279\u6548\n        {\n            Go.DelayCall(ShowEffect, 1.5f);\n        }\n    }\n    private void ShowCupComplete()\n    {\n        showSingleCuping = false;\n        if(isOpenGiftBox)\n        {\n            OpenGiftBox(isOpenGiftBox);\n        }\n    }\n\n    private void SetSelectCupData(int selectid)\n    {\n        PillarsReset();\n        for (int i = 0; i < _cups.Length; i++)\n        {\n            if (i!= selectid)\n            {\n                _cups[i].SetActive(false);\n            }\n        }\n        _cups[selectid].SetActive(true);\n        _cupPillars[selectid].transform.localEulerAngles = new Vector3(0, -55f, 0);\n        pillar1 = _cupPillars[selectid].transform.GetChild(1);\n        pillar2 = _cupPillars[selectid].transform.GetChild(2);\n        pillar3 = _cupPillars[selectid].transform.GetChild(3);\n        pillar1_pos = pillar1.localPosition;\n        pillar2_pos = pillar2.localPosition;\n        pillar3_pos = pillar3.localPosition;\n        _cupFlags[selectid].gameObject.SetActive(false);\n        _cups[selectid].transform.Find(CUP).GetComponent<Cup_DynamicBone_Setting>().Weight = 1;\n        _currentgiftBox2 = _gift2Renders1[selectid].transform.parent.GetComponent<Animator>();\n        CupRotation(2, selectid, new Vector3(0, -90, 0), new Vector3(0, 90, 0));\n    }\n    public void ShowRankCup(int selectid, float offset = 2.5f, float moveTime = 0, bool show_effect = false)\n    {\n        if (selectid < 0 || selectid >= CUP_NUM)\n        {\n            DebugEX.LogError(\"selectid is out\");\n            return;\n        }\n        SetSelectCupData(selectid);\n        pillar1.gameObject.SetActive(true);\n        pillar2.gameObject.SetActive(true);\n        pillar3.gameObject.SetActive(true);\n        MoveTo(selectid - offset, - (selectid -1) * 0.05f, moveTime);\n\n        if (show_effect) //\u64ad\u653e\u7279\u6548\n        {\n            Go.DelayCall(ShowEffect, 1.5f);\n        }\n    }\n\n    public void GlimFocusedCup()\n    {\n        // _cupRenders[SelectedCupId].material.SetFloat(\"_GlimTime\",-1);\n        // Go.to(_cupRenders[SelectedCupId].material,1f,new GoTweenConfig()\n        //        .materialFloat(1,\"_GlimTime\")\n        //        .setEaseType(GoEaseType.ExpoOut));\n\n        _cupRenders[SelectedCupId].material.SetFloat(_GLIM_TIME, -1);\n        //_giftRenders[SelectedCupId].materials[0].SetFloat(_GLIM_TIME,-1);  \n        _giftRenders[SelectedCupId].materials[1].SetFloat(_GLIM_TIME, -1);\n        _giftRenders[SelectedCupId].materials[1].SetVector(_CENTER_POS, _giftRenders[SelectedCupId].transform.position);\n\n        _gift2Renders1[SelectedCupId].material.SetFloat(_GLIM_TIME, -1);\n        _gift2Renders1[SelectedCupId].material.SetVector(_CENTER_POS, _gift2Renders1[SelectedCupId].transform.parent.position);\n        Go.to(this, 1f, new GoTweenConfig()\n               .onUpdate((obj) =>\n                {\n                    float glimTime = (obj.totalElapsedTime - 0.5f) * 2f;\n                    //_giftRenders[SelectedCupId].materials[0].SetFloat(_GLIM_TIME,glimTime);\n                    _giftRenders[SelectedCupId].materials[1].SetFloat(_GLIM_TIME, glimTime);\n                    _cupRenders[SelectedCupId].material.SetFloat(_GLIM_TIME, glimTime);\n                    _gift2Renders1[SelectedCupId].material.SetFloat(_GLIM_TIME, glimTime);\n                })\n               .setEaseType(GoEaseType.ExpoOut));\n    }\n\n\n\n    public void MoveTo(float z, float y, float duation =.6f, GoEaseType easeType = GoEaseType.ExpoOut)\n    {\n        Vector3 pos = _initialPos;\n        pos.y = y;\n        pos.z = -z;\n        if (duation == 0)\n        {\n            this.transform.position = pos;\n        }\n        else\n        {\n            Go.killAllTweensWithTarget(this.transform);\n            Go.to(this.transform, duation, new GoTweenConfig()\n               .position(pos)\n               .setEaseType(easeType));\n        }\n    }\n\n    public void CupRotation(float time, int selectid, Vector3 startEulerAngles, Vector3 endEulerAngles)\n    {\n        Transform cup = _cups[selectid].transform.Find(CUP);\n        Go.killAllTweensWithTarget(cup.transform);\n        RotationCup rotationCup = cup.GetComponent<RotationCup>();\n        if (rotationCup!= null)\n        {\n            rotationCup.deltaX = 0;\n            rotationCup.isCanRotate = false;\n        }\n        cup.localRotation = Quaternion.Euler(startEulerAngles);\n        Go.to(cup.transform, time, new GoTweenConfig()\n          .localRotation(Quaternion.Euler(endEulerAngles))\n          .setDelay(.1f)\n          .setEaseType(GoEaseType.CubicOut)\n          .onComplete((obj) =>\n           {\n               if (rotationCup!= null)\n               {\n                   rotationCup.deltaX = 0;\n                   rotationCup.isCanRotate = true;\n               }\n           }));\n    }\n\n    public Vector3 GetGiftBox2Pos()\n    {\n        Vector3 pos = Vector3.zero;\n        if(SelectedCupId >= 0 && SelectedCupId < CUP_NUM)\n        {\n            pos = _gift2Renders1[SelectedCupId].transform.parent.position;\n            pos.y += 0.08f;\n        }\n        return pos;\n    }\n    \n    public void OpenGiftBox(bool isOpen)\n    {\n        this.isOpenGiftBox = isOpen;\n        if(showSingleCuping) return;\n        if(isOpen)\n        {\n            _currentgiftBox2.Play(\"Open\", 0);\n        }else{\n            _currentgiftBox2.Play(\"Close\", 0);\n        }\n    }\n    private void ShowEffect()\n    {\n        if (_effectObj == null)\n        {\n            _effectObj = GameObject.Instantiate(_effectPrefab, _cups[SelectedCupId].transform);\n        }\n        _effectObj.SetActive(true);\n        Go.DelayCall(() =>\n        {\n            HidenEffect();\n        }, 4);\n    }\n\n    private void HidenEffect()\n    {\n        if (_effectObj!= null)\n            _effectObj.SetActive(false);\n    }\n\n    private void PillarsReset()\n    {   \n        if (pillar1!= null)\n        {\n            pillar1.localPosition = pillar1_pos;\n            Go.killAllTweensWithTarget(pillar1);\n            pillar1 = null;\n        }\n        if(pillar2!= null)\n        {\n             pillar2.localPosition = pillar2_pos;\n             Go.killAllTweensWithTarget(pillar2);\n              pillar2 = null;\n        }\n        if(pillar3!= null)\n        {\n            pillar3.localPosition = pillar3_pos;\n            Go.killAllTweensWithTarget(pillar3);\n            pillar3 = null;\n        }\n        if (pillar1Func!= null)\n        {\n            Go.CancelDelayCall(pillar1Func);\n            pillar1Func = null;\n        }\n        if(pillar2Func!= null)\n        {\n            Go.CancelDelayCall(pillar2Func);\n            pillar2Func = null;\n        }\n        if(pillar3Func!= null)\n        {\n            Go.CancelDelayCall(pillar3Func);\n            pillar3Func = null;\n        }\n    }\n    public override void OnDestroy()\n    {\n        //CloseUpdate();\n        if (_effectObj!= null)\n        {\n            GameObject.Destroy(_effectObj);\n            _effectObj = null;\n        }\n        ray_Camera = null;\n        Go.CancelDelayCall(ShowEffect);\n        Go.killAllTweensWithTarget(this);\n        PillarsReset();\n        showSingleCuping = false;\n        isOpenGiftBox = false; \n    }\n\n    PointerEventData eventData = new PointerEventData(EventSystem.current);\n    List<RaycastResult> results = new List<RaycastResult>();\n    // public override void Update()\n    // {\n    //     if (IsPointerOverUIObject())\n    //     {\n    //         return;\n    //     }\n    //     if (Input.GetMouseButtonDown(0) || Input.touchCount > 0)\n    //     {\n    //         if (EventSystem.current.IsPointerOverGameObject())\n    //         {  //\u963b\u65ad\u7a7f\u900fUI\u7684\u4e8b\u4ef6\n    //             return;\n    //         }\n    //         Ray ray = ray_Camera.ScreenPointToRay(Input.mousePosition);\n    //         RaycastHit hit;\n    //         if (Physics.Raycast(ray, out hit, 1000, 1 << LayerMask.NameToLayer(LAYER_NAME)))\n    //         {\n    //             GameObject obj = hit.collider.gameObject;\n                \n    //         }\n    //     }\n    // }\n    private bool IsPointerOverUIObject()\n    {\n        results.Clear();\n        eventData.position = PlatformHotfix.Input.mousePosition;\n        EventSystem.current.RaycastAll(eventData, results);\n        return results.Count > 0;\n    }\n    public static string GetEachGradeName(GradeEnum grade)\n    {\n        switch (grade)\n        {\n            case GradeEnum.BEGINNER:\n                return LanguageKit.Get(\"Rank_Grade_Name1\");\n            case GradeEnum.AMATEUR:\n                return LanguageKit.Get(\"Rank_Grade_Name2\");\n            case GradeEnum.PROFESSIONAL:\n                return LanguageKit.Get(\"Rank_Grade_Name3\");\n            case GradeEnum.TOP:\n                return LanguageKit.Get(\"Rank_Grade_Name4\");\n            case GradeEnum.SUPERSTAR:\n                return LanguageKit.Get(\"Rank_Grade_Name5\");\n            case GradeEnum.LEGEND:\n                return LanguageKit.Get(\"Rank_Grade_Name7\");\n            case GradeEnum.EPIC:\n                return LanguageKit.Get(\"Rank_Grade_Name6\");\n        }\n        return \"\";\n    }\n}\npublic enum GradeEnum\n{\n    BEGINNER = 0,\n    AMATEUR = 1,\n    PROFESSIONAL = 2,\n    TOP = 3,\n    SUPERSTAR = 4,\n    LEGEND = 5,\n    EPIC = 6,\n}\n<fim_middle>"}
{"inputs": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Challenge3DView : View3DBase\n{\n    private List<int> _solidIntLine = new List<int>();\n    private List<int> _growIntLine = new List<int>();\n\n    // \u5168\u90e8\u5173\u5361\u7ebf\u6bb5\uff0c\u76ee\u524d\u5199\u6b7b\uff0c\u540e\u7eed\u65b0\u73a9\u6cd5\u5f00\u653e\n    private List<int> _dotIntLine = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n    private List<int> _mainIntLine = new List<int>() { 1, 3, 5, 8, 11, 14, 17 };\n\n    private float Angle;\n    [Range(0, 5)] public float Speed = 1;\n\n    [Space]\n    public MeshFilter Filter;\n    public Material LineMat;\n\n    private float _delta;\n    private Action _action;\n    private float _progress;\n    private bool _grow;\n\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        // for test\n        // List<int> test_solid = new List<int>() { 1, 2, 3, 4 ,5, 6,};\n        // List<int> test_grow = new List<int>() {  7 };\n        // UpdateLines(test_solid, test_grow, 0f);\n        // Grow(0.05f, null);\n\n        Filter = transform.Find(\"MapLine\").GetComponent<MeshFilter>();\n        LineMat = transform.Find(\"MapLine\").GetComponent<MeshRenderer>().material;\n\n        UpdateLines();\n        OpenUpdate();\n    }\n\n\n    public override void Update()\n    {\n        // #if UNITY_EDITOR\n        //         this.UpdateLines();\n        // #endif\n\n        Angle += 0.001f * Speed;\n        LineMat.SetFloat(\"_Angle\", Angle);\n\n        if (this._grow)\n        {\n            SetProgress(this._progress + this._delta);\n        }\n    }\n\n    private void UpdateLines()\n    {\n        if (Filter == null) return;\n\n        Mesh mesh = Filter.mesh;\n        Vector3[] vertices = mesh.vertices;\n        Color[] colors = new Color[vertices.Length];\n        Vector2[] uv2s = mesh.uv2;\n\n        for (int i = 0; i < vertices.Length; i++)\n        {\n            // calculate color\n            int curUVValue = Mathf.RoundToInt(uv2s[i].y);\n            bool isMainLine = _mainIntLine.IndexOf(curUVValue) != -1;\n            colors[i] =  isMainLine ? new Color(1, 0, 0, 1) : new Color(1, 0, 1, 1);\n            if (_dotIntLine.IndexOf(curUVValue) != -1)//\u672a\u6311\u6218\n            {\n                colors[i].r = 1f;\n                colors[i].g = 0f;\n                colors[i].a = 0.5f;\n            }\n            if (_solidIntLine.IndexOf(curUVValue) != -1)//\u5df2\u6311\u6218\n            {\n                colors[i].r = 1f;\n                colors[i].g = 0f;\n                colors[i].a = 1f;\n            }\n            if (_growIntLine.IndexOf(curUVValue) != -1)//\u53ef\u6311\u6218\n            {\n                colors[i].r = 0f;\n                colors[i].g = 1f;\n                colors[i].a = 1f;\n            }\n\n        }\n        mesh.colors = colors;\n        mesh.RecalculateBounds();\n        mesh.RecalculateNormals();\n        mesh.RecalculateTangents();\n    }\n\n    private void SetProgress(float progress)\n    {\n        if (progress >= 1)\n        {\n            this._grow = false;\n            var action = this._action;\n            this._action = null;\n\n            action?.Invoke();\n        }\n\n        this._progress = Mathf.Clamp01(progress);\n        if (this.LineMat != null)\n            this.LineMat.SetFloat(\"_Progress\", progress);\n    }\n\n    public void Grow(float delta, Action action)\n    {\n        SetProgress(0);\n        this._delta = delta;\n        this._action = action;\n        this._grow = true;\n    }\n\n    public void SetMapLine(Mesh curMapLine)\n    {\n        if (curMapLine != null)\n        {\n            Filter.mesh = curMapLine;\n        }\n    }\n\n    /// <summary>\n    /// \u66f4\u65b0\u6311\u6218\u7ebf\u8def\u72b6\u6001\n    /// </summary>\n    /// <param name=\"solidLines\">\u5df2\u7ecf\u6311\u6218\u7684\u5173\u5361</param>\n    /// <param name=\"growLines\">\u53ef\u6311\u6218\u7684\u5173\u5361</param>\n    /// <param name=\"progress\">\u52a8\u753b\u53c2\u6570\u9ed8\u8ba4\u662f 1</param>\n    public void UpdateLines(List<int> solidLines, List<int> growLines, float progress = 1f)\n    {\n        if(solidLines == null || growLines == null)\n        {\n            UpdateLines();\n            return;\n        }\n\n        _solidIntLine.Clear();\n        _growIntLine.Clear();\n        for (int i = 0; i < solidLines.Count; i++)\n        {\n            _solidIntLine.Add(solidLines[i]);\n        }\n        for (int i = 0; i < growLines.Count; i++)\n        {\n            _growIntLine.Add(growLines[i]);\n        }\n\n        SetProgress(progress);\n        UpdateLines();\n    }\n\n    /// <summary>\n    /// \u5df2\u7ecf\u6311\u6218\u7684\u5173\u5361\n    /// </summary>\n    /// <param name=\"solidLines\">\u5df2\u7ecf\u6311\u6218\u7684\u5173\u5361</param>\n    public void AddSolidLine(int[] solidLine)\n    {\n        for (int i = 0; i < solidLine.Length; i++)\n        {\n            _growIntLine.Remove(solidLine[i]);\n        }\n        _solidIntLine.AddRange(solidLine);\n        SetProgress(0f);\n        UpdateLines();\n    }\n    /// <summary>\n    /// \u53ef\u6311\u6218\u7684\u5173\u5361\n    /// </summary>\n    /// <param name=\"solidLines\">\u5df2\u7ecf\u6311\u6218\u7684\u5173\u5361</param>\n    public void AddGrowIntLine(int[] growIntLine, Action callback)\n    {\n        _growIntLine.Clear();\n        _growIntLine.AddRange(growIntLine);\n        SetProgress(0f);\n        UpdateLines();\n        callback += ()=>\n        {\n            AddSolidLine(growIntLine);\n        };\n        Grow(.05f, callback);\n    }\n}\n", "cropped_inputs": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Challenge3DView : View3DBase\n{\n    private List<int> _solidIntLine = new List<int>();\n    private List<int> _growIntLine = new List<int>();\n\n    // \u5168\u90e8\u5173\u5361\u7ebf\u6bb5\uff0c\u76ee\u524d\u5199\u6b7b\uff0c\u540e\u7eed\u65b0\u73a9\u6cd5\u5f00\u653e\n    private List<int> _dotIntLine = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n    private List<int> _mainIntLine = new List<int>() { 1, 3, 5, 8, 11, 14, 17 };\n\n    private float Angle;\n    [Range(0, 5)] public float Speed = 1;\n\n    [Space]\n    public MeshFilter Filter;\n    public Material LineMat;\n\n    private float _delta;\n    private Action _action;\n    private float _progress;\n    private bool _grow;\n\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        // for test\n        // List<int> test_solid = new List<int>() { 1, 2, 3, 4,5, 6,};\n        // List<int> test_grow = new List<int>() {  7 };\n        // UpdateLines(test_solid, test_grow, 0f);\n        // Grow(0.05f, null);\n\n        Filter = transform.Find(\"MapLine\").GetComponent<MeshFilter>();\n        LineMat = transform.Find(\"MapLine\").GetComponent<MeshRenderer>().material;\n\n        UpdateLines();\n        OpenUpdate();\n    }\n\n\n    public override void Update()\n    {\n        // #if UNITY_EDITOR\n        //         this.UpdateLines();\n        // #endif\n\n        Angle += 0.001f * Speed;\n        LineMat.SetFloat(\"_Angle\", Angle);\n\n        if (this._grow)\n        {\n            SetProgress(this._progress + this._delta);\n        }\n    }\n\n    private void UpdateLines() Vector3[] vertices = mesh.vertices;\n        Color[] colors = new Color[vertices.Length];\n        Vector2[] uv2s = mesh.uv2;\n\n        for (int i = 0; i < vertices.Length; i++)\n        {\n            // calculate color\n            int curUVValue = Mathf.RoundToInt(uv2s[i].y);\n            bool isMainLine = _mainIntLine.IndexOf(curUVValue)!= -1;\n            colors[i] =  isMainLine? new Color(1, 0, 0, 1) : new Color(1, 0, 1, 1);\n            if (_dotIntLine.IndexOf(curUVValue)!= -1)//\u672a\u6311\u6218\n            {\n                colors[i].r = 1f;\n                colors[i].g = 0f;\n                colors[i].a = 0.5f;\n            }\n            if (_solidIntLine.IndexOf(curUVValue)!= -1)//\u5df2\u6311\u6218\n            {\n                colors[i].r = 1f;\n                colors[i].g = 0f;\n                colors[i].a = 1f;\n            }\n            if (_growIntLine.IndexOf(curUVValue)!= -1)//\u53ef\u6311\u6218\n            {\n                colors[i].r = 0f;\n                colors[i].g = 1f;\n                colors[i].a = 1f;\n            }\n\n        }\n        mesh.colors = colors;\n        mesh.RecalculateBounds();\n        mesh.RecalculateNormals();\n        mesh.RecalculateTangents();\n    }\n\n    private void SetProgress(float progress)\n    {\n        if (progress >= 1)\n        {\n            this._grow = false;\n            var action = this._action;\n            this._action = null;\n\n            action?.Invoke();\n        }\n\n        this._progress = Mathf.Clamp01(progress);\n        if (this.LineMat!= null)\n            this.LineMat.SetFloat(\"_Progress\", progress);\n    }\n\n    public void Grow(float delta, Action action)\n    {\n        SetProgress(0);\n        this._delta = delta;\n        this._action = action;\n        this._grow = true;\n    }\n\n    public void SetMapLine(Mesh curMapLine)\n    {\n        if (curMapLine!= null)\n        {\n            Filter.mesh = curMapLine;\n        }\n    }\n\n    /// <summary>\n    /// \u66f4\u65b0\u6311\u6218\u7ebf\u8def\u72b6\u6001\n    /// </summary>\n    /// <param name=\"solidLines\">\u5df2\u7ecf\u6311\u6218\u7684\u5173\u5361</param>\n    /// <param name=\"growLines\">\u53ef\u6311\u6218\u7684\u5173\u5361</param>\n    /// <param name=\"progress\">\u52a8\u753b\u53c2\u6570\u9ed8\u8ba4\u662f 1</param>\n    public void UpdateLines(List<int> solidLines, List<int> growLines, float progress = 1f)\n    {\n        if(solidLines == null || growLines == null)\n        {\n            UpdateLines();\n            return;\n        }\n\n        _solidIntLine.Clear();\n        _growIntLine.Clear();\n        for (int i = 0; i < solidLines.Count; i++)\n        {\n            _solidIntLine.Add(solidLines[i]);\n        }\n        for (int i = 0; i < growLines.Count; i++)\n        {\n            _growIntLine.Add(growLines[i]);\n        }\n\n        SetProgress(progress);\n        UpdateLines();\n    }\n\n    /// <summary>\n    /// \u5df2\u7ecf\u6311\u6218\u7684\u5173\u5361\n    /// </summary>\n    /// <param name=\"solidLines\">\u5df2\u7ecf\u6311\u6218\u7684\u5173\u5361</param>\n    public void AddSolidLine(int[] solidLine)\n    {\n        for (int i = 0; i < solidLine.Length; i++)\n        {\n            _growIntLine.Remove(solidLine[i]);\n        }\n        _solidIntLine.AddRange(solidLine);\n        SetProgress(0f);\n        UpdateLines();\n    }\n    /// <summary>\n    /// \u53ef\u6311\u6218\u7684\u5173\u5361\n    /// </summary>\n    /// <param name=\"solidLines\">\u5df2\u7ecf\u6311\u6218\u7684\u5173\u5361</param>\n    public void AddGrowIntLine(int[] growIntLine, Action callback)\n    {\n        _growIntLine.Clear();\n        _growIntLine.AddRange(growIntLine);\n        SetProgress(0f);\n        UpdateLines();\n        callback += ()=>\n        {\n            AddSolidLine(growIntLine);\n        };\n        Grow(.05f, callback);\n    }\n}\n", "starcoder_inputs": "<fim_prefix>using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Challenge3DView : View3DBase\n{\n    private List<int> _solidIntLine = new List<int>();\n    private List<int> _growIntLine = new List<int>();\n\n    // \u5168\u90e8\u5173\u5361\u7ebf\u6bb5\uff0c\u76ee\u524d\u5199\u6b7b\uff0c\u540e\u7eed\u65b0\u73a9\u6cd5\u5f00\u653e\n    private List<int> _dotIntLine = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n    private List<int> _mainIntLine = new List<int>() { 1, 3, 5, 8, 11, 14, 17 };\n\n    private float Angle;\n    [Range(0, 5)] public float Speed = 1;\n\n    [Space]\n    public MeshFilter Filter;\n    public Material LineMat;\n\n    private float _delta;\n    private Action _action;\n    private float _progress;\n    private bool _grow;\n\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        // for test\n        // List<int> test_solid = new List<int>() { 1, 2, 3, 4,5, 6,};\n        // List<int> test_grow = new List<int>() {  7 };\n        // UpdateLines(test_solid, test_grow, 0f);\n        // Grow(0.05f, null);\n\n        Filter = transform.Find(\"MapLine\").GetComponent<MeshFilter>();\n        LineMat = transform.Find(\"MapLine\").GetComponent<MeshRenderer>().material;\n\n        UpdateLines();\n        OpenUpdate();\n    }\n\n\n    public override void Update()\n    {\n        // #if UNITY_EDITOR\n        //         this.UpdateLines();\n        // #endif\n\n        Angle += 0.001f * Speed;\n        LineMat.SetFloat(\"_Angle\", Angle);\n\n        if (this._grow)\n        {\n            SetProgress(this._progress + this._delta);\n        }\n    }\n\n    private void UpdateLines()<fim_suffix> Vector3[] vertices = mesh.vertices;\n        Color[] colors = new Color[vertices.Length];\n        Vector2[] uv2s = mesh.uv2;\n\n        for (int i = 0; i < vertices.Length; i++)\n        {\n            // calculate color\n            int curUVValue = Mathf.RoundToInt(uv2s[i].y);\n            bool isMainLine = _mainIntLine.IndexOf(curUVValue)!= -1;\n            colors[i] =  isMainLine? new Color(1, 0, 0, 1) : new Color(1, 0, 1, 1);\n            if (_dotIntLine.IndexOf(curUVValue)!= -1)//\u672a\u6311\u6218\n            {\n                colors[i].r = 1f;\n                colors[i].g = 0f;\n                colors[i].a = 0.5f;\n            }\n            if (_solidIntLine.IndexOf(curUVValue)!= -1)//\u5df2\u6311\u6218\n            {\n                colors[i].r = 1f;\n                colors[i].g = 0f;\n                colors[i].a = 1f;\n            }\n            if (_growIntLine.IndexOf(curUVValue)!= -1)//\u53ef\u6311\u6218\n            {\n                colors[i].r = 0f;\n                colors[i].g = 1f;\n                colors[i].a = 1f;\n            }\n\n        }\n        mesh.colors = colors;\n        mesh.RecalculateBounds();\n        mesh.RecalculateNormals();\n        mesh.RecalculateTangents();\n    }\n\n    private void SetProgress(float progress)\n    {\n        if (progress >= 1)\n        {\n            this._grow = false;\n            var action = this._action;\n            this._action = null;\n\n            action?.Invoke();\n        }\n\n        this._progress = Mathf.Clamp01(progress);\n        if (this.LineMat!= null)\n            this.LineMat.SetFloat(\"_Progress\", progress);\n    }\n\n    public void Grow(float delta, Action action)\n    {\n        SetProgress(0);\n        this._delta = delta;\n        this._action = action;\n        this._grow = true;\n    }\n\n    public void SetMapLine(Mesh curMapLine)\n    {\n        if (curMapLine!= null)\n        {\n            Filter.mesh = curMapLine;\n        }\n    }\n\n    /// <summary>\n    /// \u66f4\u65b0\u6311\u6218\u7ebf\u8def\u72b6\u6001\n    /// </summary>\n    /// <param name=\"solidLines\">\u5df2\u7ecf\u6311\u6218\u7684\u5173\u5361</param>\n    /// <param name=\"growLines\">\u53ef\u6311\u6218\u7684\u5173\u5361</param>\n    /// <param name=\"progress\">\u52a8\u753b\u53c2\u6570\u9ed8\u8ba4\u662f 1</param>\n    public void UpdateLines(List<int> solidLines, List<int> growLines, float progress = 1f)\n    {\n        if(solidLines == null || growLines == null)\n        {\n            UpdateLines();\n            return;\n        }\n\n        _solidIntLine.Clear();\n        _growIntLine.Clear();\n        for (int i = 0; i < solidLines.Count; i++)\n        {\n            _solidIntLine.Add(solidLines[i]);\n        }\n        for (int i = 0; i < growLines.Count; i++)\n        {\n            _growIntLine.Add(growLines[i]);\n        }\n\n        SetProgress(progress);\n        UpdateLines();\n    }\n\n    /// <summary>\n    /// \u5df2\u7ecf\u6311\u6218\u7684\u5173\u5361\n    /// </summary>\n    /// <param name=\"solidLines\">\u5df2\u7ecf\u6311\u6218\u7684\u5173\u5361</param>\n    public void AddSolidLine(int[] solidLine)\n    {\n        for (int i = 0; i < solidLine.Length; i++)\n        {\n            _growIntLine.Remove(solidLine[i]);\n        }\n        _solidIntLine.AddRange(solidLine);\n        SetProgress(0f);\n        UpdateLines();\n    }\n    /// <summary>\n    /// \u53ef\u6311\u6218\u7684\u5173\u5361\n    /// </summary>\n    /// <param name=\"solidLines\">\u5df2\u7ecf\u6311\u6218\u7684\u5173\u5361</param>\n    public void AddGrowIntLine(int[] growIntLine, Action callback)\n    {\n        _growIntLine.Clear();\n        _growIntLine.AddRange(growIntLine);\n        SetProgress(0f);\n        UpdateLines();\n        callback += ()=>\n        {\n            AddSolidLine(growIntLine);\n        };\n        Grow(.05f, callback);\n    }\n}\n<fim_middle>"}
{"inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System.Threading.Tasks;\nusing Framework.GalaSports.Service;\n\npublic class RankUpgradeCup3DView : View3DBase\n{\n    const string path_root = \"3D/RankMatchCups/Cup0{0}\";\n    const string Layer_Name = \"UI3D\";\n\n    GameObject old_cup_asset;\n    GameObject new_cup_asset;\n    Transform old_cup;\n    Transform new_cup;\n\n\n    Vector3 lightAngles;\n\n    Camera ray_Camera;\n\n    float old_fieldOfView;\n    CameraRenderPassSetting setting;\n    float old_ShadowNear;\n    float old_ShadowFar;\n\n    //\u521b\u5efa\u5956\u676f\n    public async Task Init(int old_cup_id, int new_cup_id)\n    {\n        RemoveCup();\n        string old_path = string.Format(path_root, old_cup_id);\n        var obj = await ResourceMgr.Instance.LoadAssetAsync<GameObject>(old_path);\n        if(obj!= null)\n        {\n            old_cup_asset = obj.result;\n            GameObject gmObj = GameObject.Instantiate(old_cup_asset);\n            old_cup = gmObj.transform;\n            old_cup.SetParent(this.transform);\n            old_cup.localPosition = Vector3.zero;\n            if(old_cup_id == 7)\n            {\n                old_cup.localScale = Vector3.one * 4.4f;\n            }else{\n                old_cup.localScale = Vector3.one * 11;\n            }\n            \n            SetLayer(old_cup, Layer_Name);\n            old_cup.gameObject.SetActive(true);\n        }\n        string new_path = string.Format(path_root, new_cup_id);\n        obj = await ResourceMgr.Instance.LoadAssetAsync<GameObject>(new_path);\n        if(obj !=null)\n        {\n            new_cup_asset = obj.result;\n            GameObject gmObj = GameObject.Instantiate(new_cup_asset);\n            new_cup = gmObj.transform;\n            new_cup.SetParent(this.transform);\n            new_cup.localPosition = Vector3.zero;\n             if(new_cup_id == 7)\n            {\n                new_cup.localScale = Vector3.one * 4.4f;\n            }else{\n                new_cup.localScale = Vector3.one * 11;\n            }\n            SetLayer(new_cup, Layer_Name);\n            new_cup.gameObject.SetActive(false);\n        }\n    }\n    //\u5347\u7ea7\u52a8\u753b\n    public void RankUpgradeAnim()\n    {\n        old_cup.gameObject.SetActive(true);\n        CupRotation(old_cup, 0.5f, 0, new Vector3(0, -90, 0), new Vector3(0, 0, 0), GoEaseType.SineIn, ()=>{\n            old_cup.gameObject.SetActive(false);\n            new_cup.gameObject.SetActive(true);\n        });\n        CupRotation(new_cup, 0.5f, 0.5f, new Vector3(0, 0, 0), new Vector3(0, 90, 0), GoEaseType.SineOut);\n    }\n\n    void CupRotation(Transform cup, float time, float delayTime, Vector3 startEulerAngles, Vector3 endEulerAngles, GoEaseType easeType, System.Action complete = null)\n    {\n        Go.killAllTweensWithTarget(cup);\n        RotationCup rotationCup = cup.GetComponent<RotationCup>();\n        if (rotationCup != null)\n        {\n            rotationCup.deltaX = 0;\n            rotationCup.isCanRotate = false;\n        }\n        cup.localRotation = Quaternion.Euler(startEulerAngles);\n        Go.to(cup, time, new GoTweenConfig()\n           .localRotation(Quaternion.Euler(endEulerAngles))\n           .setDelay(delayTime)\n           .setEaseType(easeType)\n           .onComplete((obj) => {\n               if (rotationCup != null)\n               {\n                   rotationCup.deltaX = 0;\n                   rotationCup.isCanRotate = true;\n                   complete?.Invoke();\n               }\n           }));\n    }\n\n    void SetLayer(Transform cup, string layerName)\n    {\n        int layer = LayerMask.NameToLayer(layerName);\n        Renderer [] renders = cup.GetComponentsInChildren<Renderer>();\n        if(renders != null)\n        {\n            for(int i = 0; i< renders.Length;i++)\n            {\n                renders[i].gameObject.layer = layer;\n            }\n        }\n    }\n\n    void RemoveCup()\n    {\n        if(old_cup !=null)\n        {\n            Go.killAllTweensWithTarget(old_cup);\n            GameObject.Destroy(old_cup.gameObject);\n            old_cup = null;\n\n            ResourceMgr.Instance.UnloadAsset<GameObject>(old_cup_asset);\n            old_cup_asset = null;\n        }\n        if(new_cup != null)\n        {\n            Go.killAllTweensWithTarget(new_cup);\n            GameObject.Destroy(new_cup.gameObject);\n            new_cup = null;\n\n            ResourceMgr.Instance.UnloadAsset<GameObject>(new_cup_asset);\n            new_cup_asset = null;\n        }\n    }\n    public override void OnDestroy(){\n        RemoveCup();\n    }\n\n\n   \n    public override void OnEnable()\n    {\n        if(StadiumSceneController.Instance == null) return;\n        lightAngles = StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles;\n        StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = new Vector3(40,123,115);\n        if(ray_Camera == null)\n        {\n            ray_Camera = Platform.CameraAnimController.Instance.Cam.transform.Find(\"DummyCamera\").GetComponent<Camera>();\n            old_fieldOfView = ray_Camera.fieldOfView;\n            ray_Camera.fieldOfView = 42;\n        }\n        setting = Platform.CameraAnimController.Instance.Cam.GetComponent<CameraRenderPassSetting>();\n        if(setting!=null)\n        {\n            old_ShadowNear = setting.ShadowNear;\n            old_ShadowFar = setting.ShadowFar;\n            setting.ShadowNear = 5;\n            setting.ShadowFar = 7;\n        }\n    }\n    public override void OnDisable() {\n        // StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = lightAngles;\n        //  if(ray_Camera != null)\n        // {\n        //     ray_Camera.fieldOfView = old_fieldOfView;\n        // }\n        // if(setting!=null)\n        // {\n        //     setting.ShadowNear = old_ShadowNear;\n        //     setting.ShadowFar = old_ShadowFar;\n        // }\n    }\n}\n", "cropped_inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System.Threading.Tasks;\nusing Framework.GalaSports.Service;\n\npublic class RankUpgradeCup3DView : View3DBase\n{\n    const string path_root = \"3D/RankMatchCups/Cup0{0}\";\n    const string Layer_Name = \"UI3D\";\n\n    GameObject old_cup_asset;\n    GameObject new_cup_asset;\n    Transform old_cup;\n    Transform new_cup;\n\n\n    Vector3 lightAngles;\n\n    Camera ray_Camera;\n\n    float old_fieldOfView;\n    CameraRenderPassSetting setting;\n    float old_ShadowNear;\n    float old_ShadowFar;\n\n    //\u521b\u5efa\u5956\u676f\n    public async Task Init(int old_cup_id, int new_cup_id)\n    {\n        RemoveCup();\n        string old_path = string.Format(path_root, old_cup_id);\n        var obj = await ResourceMgr.Instance.LoadAssetAsync<GameObject>(old_path);\n        if(obj!= null)\n        {\n            old_cup_asset = obj.result;\n            GameObject gmObj = GameObject.Instantiate(old_cup_asset);\n            old_cup = gmObj.transform;\n            old_cup.SetParent(this.transform);\n            old_cup.localPosition = Vector3.zero;\n            if(old_cup_id == 7)\n            {\n                old_cup.localScale = Vector3.one * 4.4f;\n            }else{\n                old_cup.localScale = Vector3.one * 11;\n            }\n            \n            SetLayer(old_cup, Layer_Name);\n            old_cup.gameObject.SetActive(true);\n        }\n        string new_path = string.Format(path_root, new_cup_id);\n        obj = await ResourceMgr.Instance.LoadAssetAsync<GameObject>(new_path);\n        if(obj!=null)\n        {\n            new_cup_asset = obj.result;\n            GameObject gmObj = GameObject.Instantiate(new_cup_asset);\n            new_cup = gmObj.transform;\n            new_cup.SetParent(this.transform);\n            new_cup.localPosition = Vector3.zero;\n             if(new_cup_id == 7)\n            {\n                new_\n                new_cup.localScale = Vector3.one * 11;\n            }\n            SetLayer(new_cup, Layer_Name);\n            new_cup.gameObject.SetActive(false);\n        }\n    }\n    //\u5347\u7ea7\u52a8\u753b\n    public void RankUpgradeAnim()\n    {\n        old_cup.gameObject.SetActive(true);\n        CupRotation(old_cup, 0.5f, 0, new Vector3(0, -90, 0), new Vector3(0, 0, 0), GoEaseType.SineIn, ()=>{\n            old_cup.gameObject.SetActive(false);\n            new_cup.gameObject.SetActive(true);\n        });\n        CupRotation(new_cup, 0.5f, 0.5f, new Vector3(0, 0, 0), new Vector3(0, 90, 0), GoEaseType.SineOut);\n    }\n\n    void CupRotation(Transform cup, float time, float delayTime, Vector3 startEulerAngles, Vector3 endEulerAngles, GoEaseType easeType, System.Action complete = null)\n    {\n        Go.killAllTweensWithTarget(cup);\n        RotationCup rotationCup = cup.GetComponent<RotationCup>();\n        if (rotationCup!= null)\n        {\n            rotationCup.deltaX = 0;\n            rotationCup.isCanRotate = false;\n        }\n        cup.localRotation = Quaternion.Euler(startEulerAngles);\n        Go.to(cup, time, new GoTweenConfig()\n          .localRotation(Quaternion.Euler(endEulerAngles))\n          .setDelay(delayTime)\n          .setEaseType(easeType)\n          .onComplete((obj) => {\n               if (rotationCup!= null)\n               {\n                   rotationCup.deltaX = 0;\n                   rotationCup.isCanRotate = true;\n                   complete?.Invoke();\n               }\n           }));\n    }\n\n    void SetLayer(Transform cup, string layerName)\n    {\n        int layer = LayerMask.NameToLayer(layerName);\n        Renderer [] renders = cup.GetComponentsInChildren<Renderer>();\n        if(renders!= null)\n        {\n            for(int i = 0; i< renders.Length;i++)\n            {\n                renders[i].gameObject.layer = layer;\n            }\n        }\n    }\n\n    void RemoveCup()\n    {\n        if(old_cup!=null)\n        {\n            Go.killAllTweensWithTarget(old_cup);\n            GameObject.Destroy(old_cup.gameObject);\n            old_cup = null;\n\n            ResourceMgr.Instance.UnloadAsset<GameObject>(old_cup_asset);\n            old_cup_asset = null;\n        }\n        if(new_cup!= null)\n        {\n            Go.killAllTweensWithTarget(new_cup);\n            GameObject.Destroy(new_cup.gameObject);\n            new_cup = null;\n\n            ResourceMgr.Instance.UnloadAsset<GameObject>(new_cup_asset);\n            new_cup_asset = null;\n        }\n    }\n    public override void OnDestroy(){\n        RemoveCup();\n    }\n\n\n   \n    public override void OnEnable()\n    {\n        if(StadiumSceneController.Instance == null) return;\n        lightAngles = StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles;\n        StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = new Vector3(40,123,115);\n        if(ray_Camera == null)\n        {\n            ray_Camera = Platform.CameraAnimController.Instance.Cam.transform.Find(\"DummyCamera\").GetComponent<Camera>();\n            old_fieldOfView = ray_Camera.fieldOfView;\n            ray_Camera.fieldOfView = 42;\n        }\n        setting = Platform.CameraAnimController.Instance.Cam.GetComponent<CameraRenderPassSetting>();\n        if(setting!=null)\n        {\n            old_ShadowNear = setting.ShadowNear;\n            old_ShadowFar = setting.ShadowFar;\n            setting.ShadowNear = 5;\n            setting.ShadowFar = 7;\n        }\n    }\n    public override void OnDisable() {\n        // StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = lightAngles;\n        //  if(ray_Camera!= null)\n        // {\n        //     ray_Camera.fieldOfView = old_fieldOfView;\n        // }\n        // if(setting!=null)\n        // {\n        //     setting.ShadowNear = old_ShadowNear;\n        //     setting.ShadowFar = old_ShadowFar;\n        // }\n    }\n}\n", "starcoder_inputs": "<fim_prefix>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System.Threading.Tasks;\nusing Framework.GalaSports.Service;\n\npublic class RankUpgradeCup3DView : View3DBase\n{\n    const string path_root = \"3D/RankMatchCups/Cup0{0}\";\n    const string Layer_Name = \"UI3D\";\n\n    GameObject old_cup_asset;\n    GameObject new_cup_asset;\n    Transform old_cup;\n    Transform new_cup;\n\n\n    Vector3 lightAngles;\n\n    Camera ray_Camera;\n\n    float old_fieldOfView;\n    CameraRenderPassSetting setting;\n    float old_ShadowNear;\n    float old_ShadowFar;\n\n    //\u521b\u5efa\u5956\u676f\n    public async Task Init(int old_cup_id, int new_cup_id)\n    {\n        RemoveCup();\n        string old_path = string.Format(path_root, old_cup_id);\n        var obj = await ResourceMgr.Instance.LoadAssetAsync<GameObject>(old_path);\n        if(obj!= null)\n        {\n            old_cup_asset = obj.result;\n            GameObject gmObj = GameObject.Instantiate(old_cup_asset);\n            old_cup = gmObj.transform;\n            old_cup.SetParent(this.transform);\n            old_cup.localPosition = Vector3.zero;\n            if(old_cup_id == 7)\n            {\n                old_cup.localScale = Vector3.one * 4.4f;\n            }else{\n                old_cup.localScale = Vector3.one * 11;\n            }\n            \n            SetLayer(old_cup, Layer_Name);\n            old_cup.gameObject.SetActive(true);\n        }\n        string new_path = string.Format(path_root, new_cup_id);\n        obj = await ResourceMgr.Instance.LoadAssetAsync<GameObject>(new_path);\n        if(obj!=null)\n        {\n            new_cup_asset = obj.result;\n            GameObject gmObj = GameObject.Instantiate(new_cup_asset);\n            new_cup = gmObj.transform;\n            new_cup.SetParent(this.transform);\n            new_cup.localPosition = Vector3.zero;\n             if(new_cup_id == 7)\n            {\n                new_<fim_suffix>\n                new_cup.localScale = Vector3.one * 11;\n            }\n            SetLayer(new_cup, Layer_Name);\n            new_cup.gameObject.SetActive(false);\n        }\n    }\n    //\u5347\u7ea7\u52a8\u753b\n    public void RankUpgradeAnim()\n    {\n        old_cup.gameObject.SetActive(true);\n        CupRotation(old_cup, 0.5f, 0, new Vector3(0, -90, 0), new Vector3(0, 0, 0), GoEaseType.SineIn, ()=>{\n            old_cup.gameObject.SetActive(false);\n            new_cup.gameObject.SetActive(true);\n        });\n        CupRotation(new_cup, 0.5f, 0.5f, new Vector3(0, 0, 0), new Vector3(0, 90, 0), GoEaseType.SineOut);\n    }\n\n    void CupRotation(Transform cup, float time, float delayTime, Vector3 startEulerAngles, Vector3 endEulerAngles, GoEaseType easeType, System.Action complete = null)\n    {\n        Go.killAllTweensWithTarget(cup);\n        RotationCup rotationCup = cup.GetComponent<RotationCup>();\n        if (rotationCup!= null)\n        {\n            rotationCup.deltaX = 0;\n            rotationCup.isCanRotate = false;\n        }\n        cup.localRotation = Quaternion.Euler(startEulerAngles);\n        Go.to(cup, time, new GoTweenConfig()\n          .localRotation(Quaternion.Euler(endEulerAngles))\n          .setDelay(delayTime)\n          .setEaseType(easeType)\n          .onComplete((obj) => {\n               if (rotationCup!= null)\n               {\n                   rotationCup.deltaX = 0;\n                   rotationCup.isCanRotate = true;\n                   complete?.Invoke();\n               }\n           }));\n    }\n\n    void SetLayer(Transform cup, string layerName)\n    {\n        int layer = LayerMask.NameToLayer(layerName);\n        Renderer [] renders = cup.GetComponentsInChildren<Renderer>();\n        if(renders!= null)\n        {\n            for(int i = 0; i< renders.Length;i++)\n            {\n                renders[i].gameObject.layer = layer;\n            }\n        }\n    }\n\n    void RemoveCup()\n    {\n        if(old_cup!=null)\n        {\n            Go.killAllTweensWithTarget(old_cup);\n            GameObject.Destroy(old_cup.gameObject);\n            old_cup = null;\n\n            ResourceMgr.Instance.UnloadAsset<GameObject>(old_cup_asset);\n            old_cup_asset = null;\n        }\n        if(new_cup!= null)\n        {\n            Go.killAllTweensWithTarget(new_cup);\n            GameObject.Destroy(new_cup.gameObject);\n            new_cup = null;\n\n            ResourceMgr.Instance.UnloadAsset<GameObject>(new_cup_asset);\n            new_cup_asset = null;\n        }\n    }\n    public override void OnDestroy(){\n        RemoveCup();\n    }\n\n\n   \n    public override void OnEnable()\n    {\n        if(StadiumSceneController.Instance == null) return;\n        lightAngles = StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles;\n        StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = new Vector3(40,123,115);\n        if(ray_Camera == null)\n        {\n            ray_Camera = Platform.CameraAnimController.Instance.Cam.transform.Find(\"DummyCamera\").GetComponent<Camera>();\n            old_fieldOfView = ray_Camera.fieldOfView;\n            ray_Camera.fieldOfView = 42;\n        }\n        setting = Platform.CameraAnimController.Instance.Cam.GetComponent<CameraRenderPassSetting>();\n        if(setting!=null)\n        {\n            old_ShadowNear = setting.ShadowNear;\n            old_ShadowFar = setting.ShadowFar;\n            setting.ShadowNear = 5;\n            setting.ShadowFar = 7;\n        }\n    }\n    public override void OnDisable() {\n        // StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = lightAngles;\n        //  if(ray_Camera!= null)\n        // {\n        //     ray_Camera.fieldOfView = old_fieldOfView;\n        // }\n        // if(setting!=null)\n        // {\n        //     setting.ShadowNear = old_ShadowNear;\n        //     setting.ShadowFar = old_ShadowFar;\n        // }\n    }\n}\n<fim_middle>"}
{"inputs": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Framework.GalaSports.Service;\nusing GalaRenderPipeline.URPPass;\nusing UnityEngine.UI;\n\n\npublic class BattlePass3DView : View3DBase\n{\n    HighPolyPlayerAppearanceController[] PlayersAppearance = new HighPolyPlayerAppearanceController[3];\n    HighPolyPlayerAnimationController[] PlayersAnimation = new HighPolyPlayerAnimationController[3];\n    Transform[] Players = new Transform[3];\n    Transform[] Pelvis = new Transform[3];\n\n    // Transform player;\n    Material TeamJerseyMat;\n    Material TeamShoesMat;\n    Material TeamSockMat;\n    Material SkinMatBlack;\n    Material SkinMatWhite;\n    Material SkinMatLatin;\n    Material SkinMatAsian;\n    Vector3 localPos = new Vector3(25f, 0f, 0f);\n    Vector3 localEulerAngle = new Vector3(0, 90, 0);\n\n    static Vector3[] PlayerLocalPosition = new Vector3[3] { new Vector3(0.535f, 0f, -0.04f), new Vector3(0.97f, 0f, -0.42f), new Vector3(0.26f, 0f, -0.42f) };\n    static Vector3[] PlayerLocalEuler = new Vector3[3] { new Vector3(0f, -13.29f, 0), new Vector3(0, -16.848f, 0), new Vector3(0, -6.295f, 0) };\n    static Vector3 defultEuler = new Vector3(0, -90, 0);\n    GalaRenderObjectsFeature fovFeatrue;\n    GalaRenderObjectsFeature transpartFovFeatrue;\n    Vector3 oldCameraOffest;\n    float oldCameraFOV;\n    float shadowFar = 0;\n    float shadowNear = 0;\n    // Start is called before the first frame update\n    bool isLoadCompeleted = false;\n\n    static string[] clothDataNames = new string[] { \"Idle01\", \"Idle02\" };\n\n    static string[] jerseyCodes = new string[]\n    {\n        \"-1_Marcos Llorente_e0b244FF_deb043FF_e0b244FF_1_20222023_22_ab0425ff_232841FF_232841ff\",\n        \"-1_Fabinho_28973bFF_d3cb4aFF_37362fFF_1_20222023_22_c9be44ff_28973bFF_4f3db5ff\",\n        \"-1_Milinkovi\u0107_d7b475FF_d7b475FF_d7b475FF_1_20222023_22_c10729ff_d7b475FF_c10729ff\"\n    };\n    static int[] headIds = new int[] { 72, 123, 981 };\n    Texture2D teamLogo = null;\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        await Instantiate3PlayerPrefab();\n        ClothDataLoader.AsyncPreLoadMultiClotDataSet(clothDataNames);\n        PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(headIds);\n        for (int i = 0; i < jerseyCodes.Length; i++)\n        {\n            PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(jerseyCodes[i]);\n            PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(jerseyCodes[i]);\n        }\n        this.transform.localPosition = localPos;\n        this.transform.localEulerAngles = localEulerAngle;\n        for (int i = 0; i < Players.Length; i++)\n            Players[i].GetComponent<HighPolyPlayerAnimationController>().Hide();\n\n\n        fovFeatrue = Camera.main.GetComponent<CameraRenderPassSetting>().getRendererFeatureByName(\"FOVCameraObjects\") as GalaRenderObjectsFeature;\n        transpartFovFeatrue = Camera.main.GetComponent<CameraRenderPassSetting>().getRendererFeatureByName(\"FOVCameraForTransparentObjects\") as GalaRenderObjectsFeature;\n        if (fovFeatrue)\n        {\n            oldCameraOffest = fovFeatrue.settings.cameraSettings.offset;\n            oldCameraFOV = fovFeatrue.settings.cameraSettings.cameraFieldOfView;\n            shadowFar = Camera.main.GetComponent<CameraRenderPassSetting>().ShadowFar;\n            shadowNear = Camera.main.GetComponent<CameraRenderPassSetting>().ShadowNear;\n        }\n        if (teamLogo == null)\n        {\n            teamLogo = new Texture2D(2, 2);\n            teamLogo.SetPixel(0, 0, Color.clear);\n            teamLogo.SetPixel(0, 1, Color.clear);\n            teamLogo.SetPixel(1, 0, Color.clear);\n            teamLogo.SetPixel(1, 1, Color.clear);\n            teamLogo.Apply();\n        }\n        Platform.EventDispatcher.AddEventListener(\"TempHideBattlePassPlayer\", TempHide);\n        Platform.EventDispatcher.AddEventListener(\"TempShowBattlePassPlayer\", TempShow);\n        Platform.EventDispatcher.AddEventListener(\"HideBattlePassPlayer\", HidePlayer);\n        Platform.EventDispatcher.AddEventListener<PlayersInfoTransfer[]>(\"ShowBattlePassPlayer\", ShowPlayer);\n        Platform.EventDispatcher.AddEventListener<PlayersInfoTransfer[],string[]>(\"ShowBattlePassPlayer1\", ShowPlayer1);\n    }\n\n    GameObject _prefab;\n    GTask<GameObject> _prefabTask;\n    private async GTask Instantiate3PlayerPrefab()\n    {\n        _prefabTask = ResourceMgr.Instance.LoadAssetAsync<GameObject>(\"3D/Prefab/TeamPlayer\");\n        var prefabTaskResult = await _prefabTask;\n        _prefab = prefabTaskResult.result;\n        _prefab.transform.position = new Vector3(500,0,500);\n        for (int i = 0; i < 3; i++)\n        {\n            GameObject instantiated = GameObject.Instantiate(_prefab, gameObject.transform);\n            Players[i] = instantiated.transform;\n            Players[i].name = \"TeamPlayer\" + i.ToString();\n            PlayersAppearance[i] = instantiated.GetComponent<HighPolyPlayerAppearanceController>();\n            PlayersAnimation[i] = instantiated.GetComponent<HighPolyPlayerAnimationController>();\n            PlayersAnimation[i].SetUI3DLayer();\n            PlayersAnimation[i].HideFootball();\n            Pelvis[i] = PlayersAnimation[i].Pelvis;\n            await GAsync.WaitNextFrame();\n        }\n    }\n\n\n    //int player_id\n    //int headModel_id\n    //bool isKeeper,\n    //SkinColorForTexture skinColor,\n    //int bodyHeight,\n    //int shoe_Id = 1,\n    //int bodyWeight = 0\n\n    //Texture clothTexture,\n    //Texture keeperClothTexture,\n    //Texture sockTexture,\n    //Texture keeperSockTexture\n\n    //public int id=0;\n    //0 1 2\u5206\u522b\u4e3a\u4e2d\u95f4\u3001\u5de6\u8fb9\u3001\u53f3\u8fb9\u7684\u4eba\n    GalaShaderGlobalSetting galaShaderGlobalSetting;\n    private async void ShowPlayer(PlayersInfoTransfer[] playersInfoTransfer)\n    {\n\n        try\n        {\n            if (fovFeatrue && transpartFovFeatrue)\n            {\n                fovFeatrue.settings.cameraSettings.offset = new Vector3(0f, 0.2f, 0);\n                transpartFovFeatrue.settings.cameraSettings.offset = new Vector3(0f, 0.2f, 0);\n                fovFeatrue.settings.cameraSettings.cameraFieldOfView = 28;\n                transpartFovFeatrue.settings.cameraSettings.cameraFieldOfView = 28;\n            }\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowNear = 2.8f;\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowFar = 3.5f;\n\n            for (int i = 0; i < playersInfoTransfer.Length; i++)\n            {\n                string jerseyCode = \"\";\n                string playerNumber = \"10\";\n                string playerName = \"GALA\";\n                if (playersInfoTransfer[i].PlayerNumber == 30077)\n                {\n                    playerName = \"Marcos Llorente\";\n                    playerNumber = \"-1\";\n                    jerseyCode = \"-1_Marcos Llorente_e0b244FF_deb043FF_e0b244FF_1_20222023_22_ab0425ff_232841FF_232841ff\";\n                }\n                else if (playersInfoTransfer[i].PlayerNumber == 30039)\n                {\n                    playerName = \"Fabinho\";\n                    playerNumber = \"-1\";\n                    jerseyCode = \"-1_Fabinho_28973bFF_d3cb4aFF_37362fFF_1_20222023_22_c9be44ff_28973bFF_4f3db5ff\";\n                }\n                else\n                {\n                    playerName = \"Milinkovi\u0107\";\n                    playerNumber = \"-1\";\n                    jerseyCode = \"-1_Milinkovi\u0107_d7b475FF_d7b475FF_d7b475FF_1_20222023_22_c10729ff_d7b475FF_c10729ff\";\n                }\n\n                PlayersAppearance[i].gameObject.SetActive(false);\n\n                PlayersAppearance[i].SetPlayerAppearance(int.Parse(playersInfoTransfer[i].HeadModel_id), (int)playersInfoTransfer[i].BodyHeight, playersInfoTransfer[i].BodyWeight, (SkinColorForTexture)playersInfoTransfer[i].SkinColor, playersInfoTransfer[i].SkinColorCorrectionValue, jerseyCode, 0, playersInfoTransfer[i].Player_id, playersInfoTransfer[i].IsKeeper, playerName, playerNumber, false, teamLogo, true);\n\n                InitPlayer(playersInfoTransfer[i].PlayerNumber, PlayersAppearance[i], PlayersAnimation[i]);\n\n                PlayerComeOutAnimation(i, PlayersAnimation[i]);\n                PlayersAppearance[i].gameObject.SetActive(true);\n                await GAsync.WaitNextFrame();\n            }\n            Platform.EventDispatcher.TriggerEvent(\"OverrideShadowForHomeScenePlayer\", true);\n            isLoadCompeleted = true;\n        }\n        catch (Exception ex)\n        {\n            DebugEX.LogError(\"\u901a\u884c\u8bc1\u751f\u6210\u4e09\u4eba\u51fa\u9519\");\n        }\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting != null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat != null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i] != null)\n                    grassMat[i].DisableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n    private async void ShowPlayer1(PlayersInfoTransfer[] playersInfoTransfer, string[] jerseyCode)\n    {\n        try\n        {\n            await Instantiate3PlayerPrefab();\n            for (int i = 0; i < jerseyCode.Length; i++)\n            {\n                PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(jerseyCode[i]);\n                PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(jerseyCode[i]);\n                headIds[i] = int.Parse(playersInfoTransfer[i].HeadModel_id);\n            }\n            ClothDataLoader.AsyncPreLoadMultiClotDataSet(clothDataNames);\n            PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(headIds);\n            for (int i = 0; i < Players.Length; i++)\n                Players[i].GetComponent<HighPolyPlayerAnimationController>().Hide();\n            if (fovFeatrue && transpartFovFeatrue)\n            {\n                fovFeatrue.settings.cameraSettings.offset = new Vector3(0f, 0.2f, 0);\n                transpartFovFeatrue.settings.cameraSettings.offset = new Vector3(0f, 0.2f, 0);\n                fovFeatrue.settings.cameraSettings.cameraFieldOfView = 28;\n                transpartFovFeatrue.settings.cameraSettings.cameraFieldOfView = 28;\n            }\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowNear = 2.8f;\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowFar = 3.5f;\n\n            for (int i = 0; i < playersInfoTransfer.Length; i++)\n            {\n                PlayersAppearance[i].gameObject.SetActive(false);\n                DebugEX.LogError(playersInfoTransfer[i].PlayerName);\n                PlayersAppearance[i].SetPlayerAppearance(int.Parse(playersInfoTransfer[i].HeadModel_id), (int)playersInfoTransfer[i].BodyHeight, playersInfoTransfer[i].BodyWeight, (SkinColorForTexture)playersInfoTransfer[i].SkinColor, playersInfoTransfer[i].SkinColorCorrectionValue, jerseyCodes[i], 0, playersInfoTransfer[i].Player_id, playersInfoTransfer[i].IsKeeper, playersInfoTransfer[i].PlayerName, playersInfoTransfer[i].PlayerNumber.ToString(), false, teamLogo, true);\n\n                InitPlayer(playersInfoTransfer[i].PlayerNumber, PlayersAppearance[i], PlayersAnimation[i]);\n\n                PlayerComeOutAnimation(i, PlayersAnimation[i]);\n                PlayersAppearance[i].gameObject.SetActive(true);\n                await GAsync.WaitNextFrame();\n            }\n\n            Platform.EventDispatcher.TriggerEvent(\"OverrideShadowForHomeScenePlayer\", true);\n            isLoadCompeleted = true;\n        }\n        catch (Exception ex)\n        {\n            DebugEX.LogError(\"\u901a\u884c\u8bc1\u751f\u6210\u4e09\u4eba\u51fa\u9519\");\n        }\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting != null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat != null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i] != null)\n                    grassMat[i].DisableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n    private void InitPlayer(int playerId, HighPolyPlayerAppearanceController playerAppearance, HighPolyPlayerAnimationController playerAnimation)\n    {\n        playerAnimation.Init(true, false);\n    }\n\n\n\n    private void TempShow()\n    {\n        for (int i = 0; i < 3; i++)\n        {\n            if (PlayersAnimation[i] && isLoadCompeleted)\n                PlayersAnimation[i].Show();\n        }\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting != null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat != null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i] != null)\n                    grassMat[i].DisableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n    private void TempHide()\n    {\n        for (int i = 0; i < 3; i++)\n        {\n            if (PlayersAnimation[i])\n                PlayersAnimation[i].Hide();\n        }\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting != null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat != null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i] != null)\n                    grassMat[i].EnableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n    private void HidePlayer()\n    {\n        if (fovFeatrue && transpartFovFeatrue)\n        {\n            fovFeatrue.settings.cameraSettings.offset = oldCameraOffest;\n            transpartFovFeatrue.settings.cameraSettings.offset = oldCameraOffest;\n            fovFeatrue.settings.cameraSettings.cameraFieldOfView = oldCameraFOV;\n            transpartFovFeatrue.settings.cameraSettings.cameraFieldOfView = oldCameraFOV;\n        }\n        for (int i = 0; i < 3; i++)\n        {\n            if (PlayersAnimation[i])\n                PlayersAnimation[i].Hide();\n        }\n        Platform.EventDispatcher.TriggerEvent(\"OverrideShadowForHomeScenePlayer\", false);\n        if (Camera.main != null)\n        {\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowFar = shadowFar;\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowNear = shadowNear;\n        }\n        isLoadCompeleted = false;\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting != null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat != null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i] != null)\n                    grassMat[i].EnableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n\n    private void PlayerComeOutAnimation(int playerIndex, HighPolyPlayerAnimationController playerAnimation)\n    {\n        int poseId = 0;\n        if (playerIndex == 0)\n            poseId = 1;\n        playerAnimation.PlayAnimation(ComeOutAndIdleAnimationConfigs.IdleStateNamesSet[poseId]);\n        playerAnimation.transform.localPosition = PlayerLocalPosition[playerIndex];\n        playerAnimation.transform.eulerAngles = PlayerLocalEuler[playerIndex] - defultEuler;\n    }\n\n\n\n\n\n    public override void OnDestroy()\n    {\n        if (TeamJerseyMat != null)\n        {\n            ResourceMgr.Instance.UnloadAsset(TeamJerseyMat);\n            TeamJerseyMat = null;\n        }\n        if (TeamShoesMat != null)\n        {\n            ResourceMgr.Instance.UnloadAsset(TeamShoesMat);\n            TeamShoesMat = null;\n        }\n        if (TeamSockMat != null)\n        {\n            ResourceMgr.Instance.UnloadAsset(TeamSockMat);\n            TeamSockMat = null;\n        }\n        if (SkinMatBlack != null)\n        {\n            ResourceMgr.Instance.UnloadAsset(SkinMatBlack);\n            SkinMatBlack = null;\n        }\n        if (SkinMatWhite != null)\n        {\n            ResourceMgr.Instance.UnloadAsset(SkinMatWhite);\n            SkinMatWhite = null;\n        }\n        if (SkinMatLatin != null)\n        {\n            ResourceMgr.Instance.UnloadAsset(SkinMatLatin);\n            SkinMatLatin = null;\n        }\n        if (SkinMatAsian != null)\n        {\n            ResourceMgr.Instance.UnloadAsset(SkinMatAsian);\n            SkinMatAsian = null;\n        }\n\n        HidePlayer();\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(clothDataNames);\n        teamLogo.DestroySelf();\n        teamLogo = null;\n\n        if (_prefab != null)\n        {\n            ResourceMgr.Instance.UnloadAsset(_prefab);\n        }\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting != null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat != null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i] != null)\n                    grassMat[i].EnableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n        Platform.EventDispatcher.RemoveEventListener(\"TempHideBattlePassPlayer\", TempHide);\n        Platform.EventDispatcher.RemoveEventListener(\"TempShowBattlePassPlayer\", TempShow);\n        Platform.EventDispatcher.RemoveEventListener(\"HideBattlePassPlayer\", HidePlayer);\n        Platform.EventDispatcher.RemoveEventListener<PlayersInfoTransfer[]>(\"ShowBattlePassPlayer\", ShowPlayer);\n        Platform.EventDispatcher.RemoveEventListener<PlayersInfoTransfer[], string[]>(\"ShowBattlePassPlayer1\", ShowPlayer1);\n    }\n}\n", "cropped_inputs": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Framework.GalaSports.Service;\nusing GalaRenderPipeline.URPPass;\nusing UnityEngine.UI;\n\n\npublic class BattlePass3DView : View3DBase\n{\n    HighPolyPlayerAppearanceController[] PlayersAppearance = new HighPolyPlayerAppearanceController[3];\n    HighPolyPlayerAnimationController[] PlayersAnimation = new HighPolyPlayerAnimationController[3];\n    Transform[] Players = new Transform[3];\n    Transform[] Pelvis = new Transform[3];\n\n    // Transform player;\n    Material TeamJerseyMat;\n    Material TeamShoesMat;\n    Material TeamSockMat;\n    Material SkinMatBlack;\n    Material SkinMatWhite;\n    Material SkinMatLatin;\n    Material SkinMatAsian;\n    Vector3 localPos = new Vector3(25f, 0f, 0f);\n    Vector3 localEulerAngle = new Vector3(0, 90, 0);\n\n    static Vector3[] PlayerLocalPosition = new Vector3[3] { new Vector3(0.535f, 0f, -0.04f), new Vector3(0.97f, 0f, -0.42f), new Vector3(0.26f, 0f, -0.42f) };\n    static Vector3[] PlayerLocalEuler = new Vector3[3] { new Vector3(0f, -13.29f, 0), new Vector3(0, -16.848f, 0), new Vector3(0, -6.295f, 0) };\n    static Vector3 defultEuler = new Vector3(0, -90, 0);\n    GalaRenderObjectsFeature fovFeatrue;\n    GalaRenderObjectsFeature transpartFovFeatrue;\n    Vector3 oldCameraOffest;\n    float oldCameraFOV;\n    float shadowFar = 0;\n    float shadowNear = 0;\n    // Start is called before the first frame update\n    bool isLoadCompeleted = false;\n\n    static string[] clothDataNames = new string[] { \"Idle01\", \"Idle02\" };\n\n    static string[] jerseyCodes = new string[]\n    {\n        \"-1_Marcos Llorente_e0b244FF_deb043FF_e0b244FF_1_20222023_22_ab0425ff_232841FF_232841ff\",\n        \"-1_Fabinho_28973bFF_d3cb4aFF_37362fFF_1_20222023_22_c9be44ff_28973bFF_4f3db5ff\",\n        \"-1_Milinkovi\u0107_d7b475FF_d7b475FF_d7b475FF_1_20222023_22_c10729ff_d7b475FF_c10729ff\"\n    };\n    static int[] headIds = new int[] { 72, 123, 981 };\n    Texture2D teamLogo = null;\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        await Instantiate3PlayerPrefab();\n        ClothDataLoader.AsyncPreLoadMultiClotDataSet(clothDataNames);\n        PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(headIds);\n        for (int i = 0; i < jerseyCodes.Length; i++)\n        {\n            PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(jerseyCodes[i]);\n            PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(jerseyCodes[i]);\n        }\n        this.transform.localPosition = localPos;\n        this.transform.localEulerAngles = localEulerAngle;\n        for (int i = 0; i < Players.Length; i++)\n            Players[i].GetComponent<HighPolyPlayerAnimationController>().Hide();\n\n\n        fovFeatrue = Camera.main.GetComponent<CameraRenderPassSetting>().getRendererFeatureByName(\"FOVCameraObjects\") as GalaRenderObjectsFeature;\n        transpartFovFeatrue = Camera.main.GetComponent<CameraRenderPassSetting>().getRendererFeatureByName(\"FOVCameraForTransparentObjects\") as GalaRenderObjectsFeature;\n        if (fovFeatrue)\n        {\n            oldCameraOffest = fovFeatrue.settings.cameraSettings.offset;\n            oldCameraFOV = fovFeatrue.settings.cameraSettings.cameraFieldOfView;\n            shadowFar = Camera.main.GetComponent<CameraRenderPassSetting>().ShadowFar;\n            shadowNear = Camera.main.GetComponent<CameraRenderPassSetting>().ShadowNear;\n        }\n        if (teamLogo == null)\n        {\n            teamLogo = new Texture2D(2, 2);\n            teamLogo.SetPixel(0, 0, Color.clear);\n            teamLogo.SetPixel(0, 1, Color.clear);\n            teamLogo.SetPixel(1, 0, Color.clear);\n            teamLogo.SetPixel(1, 1, Color.clear);\n            teamLogo.Apply();\n        }\n        Platform.EventDispatcher.AddEventListener(\"TempHideBattlePassPlayer\", TempHide);\n        Platform.EventDispatcher.AddEventListener(\"TempShowBattlePassPlayer\", TempShow);\n        Platform.EventDispatcher.AddEventListener(\"HideBattlePassPlayer\", HidePlayer);\n        Platform.EventDispatcher.AddEventListener<PlayersInfoTransfer[]>(\"ShowBattlePassPlayer\", ShowPlayer);\n        Platform.EventDispatcher.AddEventListener<PlayersInfoTransfer[],string[]>(\"ShowBattlePassPlayer1\", ShowPlayer1);\n    }\n\n    GameObject _prefab;\n    GTask<GameObject> _prefabTask;\n    private async GTask Instantiate3PlayerPrefab()\n    {\n        _prefabTask = ResourceMgr.Instance.LoadAssetAsync<GameObject>(\"3D/Prefab/TeamPlayer\");\n        var prefabTaskResult = await _prefabTask;\n        _prefab = prefabTaskResult.result;\n        _prefab.transform.position = new Vector3(500,0,500);\n        for (int i = 0; i < 3; i++)\n        {\n            GameObject instantiated = GameObject.Instantiate(_prefab, gameObject.transform);\n            Players[i] = instantiated.transform;\n            Players[i].name = \"TeamPlayer\" + i.ToString();\n            PlayersAppearance[i] = instantiated.GetComponent<HighPolyPlayerAppearanceController>();\n            PlayersAnimation[i] = instantiated.GetComponent<HighPolyPlayerAnimationController>();\n            PlayersAnimation[i].SetUI3DLayer();\n            PlayersAnimation[i].HideFootball();\n            Pelvis[i] = PlayersAnimation[i].Pelvis;\n            await GAsync.WaitNextFrame();\n        }\n    }\n\n\n    //int player_id\n    //int headModel_id\n    //bool isKeeper,\n    //SkinColorForTexture skinColor,\n    //int bodyHeight,\n    //int shoe_Id = 1,\n    //int bodyWeight = 0\n\n    //Texture clothTexture,\n    //Texture keeperClothTexture,\n    //Texture sockTexture,\n    //Texture keeperSockTexture\n\n    //public int id=0;\n    //Setting galaShaderGlobalSetting;\n    private async void ShowPlayer(PlayersInfoTransfer[] playersInfoTransfer)\n    {\n\n        try\n        {\n            if (fovFeatrue && transpartFovFeatrue)\n            {\n                fovFeatrue.settings.cameraSettings.offset = new Vector3(0f, 0.2f, 0);\n                transpartFovFeatrue.settings.cameraSettings.offset = new Vector3(0f, 0.2f, 0);\n                fovFeatrue.settings.cameraSettings.cameraFieldOfView = 28;\n                transpartFovFeatrue.settings.cameraSettings.cameraFieldOfView = 28;\n            }\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowNear = 2.8f;\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowFar = 3.5f;\n\n            for (int i = 0; i < playersInfoTransfer.Length; i++)\n            {\n                string jerseyCode = \"\";\n                string playerNumber = \"10\";\n                string playerName = \"GALA\";\n                if (playersInfoTransfer[i].PlayerNumber == 30077)\n                {\n                    playerName = \"Marcos Llorente\";\n                    playerNumber = \"-1\";\n                    jerseyCode = \"-1_Marcos Llorente_e0b244FF_deb043FF_e0b244FF_1_20222023_22_ab0425ff_232841FF_232841ff\";\n                }\n                else if (playersInfoTransfer[i].PlayerNumber == 30039)\n                {\n                    playerName = \"Fabinho\";\n                    playerNumber = \"-1\";\n                    jerseyCode = \"-1_Fabinho_28973bFF_d3cb4aFF_37362fFF_1_20222023_22_c9be44ff_28973bFF_4f3db5ff\";\n                }\n                else\n                {\n                    playerName = \"Milinkovi\u0107\";\n                    playerNumber = \"-1\";\n                    jerseyCode = \"-1_Milinkovi\u0107_d7b475FF_d7b475FF_d7b475FF_1_20222023_22_c10729ff_d7b475FF_c10729ff\";\n                }\n\n                PlayersAppearance[i].gameObject.SetActive(false);\n\n                PlayersAppearance[i].SetPlayerAppearance(int.Parse(playersInfoTransfer[i].HeadModel_id), (int)playersInfoTransfer[i].BodyHeight, playersInfoTransfer[i].BodyWeight, (SkinColorForTexture)playersInfoTransfer[i].SkinColor, playersInfoTransfer[i].SkinColorCorrectionValue, jerseyCode, 0, playersInfoTransfer[i].Player_id, playersInfoTransfer[i].IsKeeper, playerName, playerNumber, false, teamLogo, true);\n\n                InitPlayer(playersInfoTransfer[i].PlayerNumber, PlayersAppearance[i], PlayersAnimation[i]);\n\n                PlayerComeOutAnimation(i, PlayersAnimation[i]);\n                PlayersAppearance[i].gameObject.SetActive(true);\n                await GAsync.WaitNextFrame();\n            }\n            Platform.EventDispatcher.TriggerEvent(\"OverrideShadowForHomeScenePlayer\", true);\n            isLoadCompeleted = true;\n        }\n        catch (Exception ex)\n        {\n            DebugEX.LogError(\"\u901a\u884c\u8bc1\u751f\u6210\u4e09\u4eba\u51fa\u9519\");\n        }\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting!= null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat!= null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i]!= null)\n                    grassMat[i].DisableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n    private async void ShowPlayer1(PlayersInfoTransfer[] playersInfoTransfer, string[] jerseyCode)\n    {\n        try\n        {\n            await Instantiate3PlayerPrefab();\n            for (int i = 0; i < jerseyCode.Length; i++)\n            {\n                PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(jerseyCode[i]);\n                PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(jerseyCode[i]);\n                headIds[i] = int.Parse(playersInfoTransfer[i].HeadModel_id);\n            }\n            ClothDataLoader.AsyncPreLoadMultiClotDataSet(clothDataNames);\n            PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(headIds);\n            for (int i = 0; i < Players.Length; i++)\n                Players[i].GetComponent<HighPolyPlayerAnimationController>().Hide();\n            if (fovFeatrue && transpartFovFeatrue)\n            {\n                fovFeatrue.settings.cameraSettings.offset = new Vector3(0f, 0.2f, 0);\n                transpartFovFeatrue.settings.cameraSettings.offset = new Vector3(0f, 0.2f, 0);\n                fovFeatrue.settings.cameraSettings.cameraFieldOfView = 28;\n                transpartFovFeatrue.settings.cameraSettings.cameraFieldOfView = 28;\n            }\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowNear = 2.8f;\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowFar = 3.5f;\n\n            for (int i = 0; i < playersInfoTransfer.Length; i++)\n            {\n                PlayersAppearance[i].gameObject.SetActive(false);\n                DebugEX.LogError(playersInfoTransfer[i].PlayerName);\n                PlayersAppearance[i].SetPlayerAppearance(int.Parse(playersInfoTransfer[i].HeadModel_id), (int)playersInfoTransfer[i].BodyHeight, playersInfoTransfer[i].BodyWeight, (SkinColorForTexture)playersInfoTransfer[i].SkinColor, playersInfoTransfer[i].SkinColorCorrectionValue, jerseyCodes[i], 0, playersInfoTransfer[i].Player_id, playersInfoTransfer[i].IsKeeper, playersInfoTransfer[i].PlayerName, playersInfoTransfer[i].PlayerNumber.ToString(), false, teamLogo, true);\n\n                InitPlayer(playersInfoTransfer[i].PlayerNumber, PlayersAppearance[i], PlayersAnimation[i]);\n\n                PlayerComeOutAnimation(i, PlayersAnimation[i]);\n                PlayersAppearance[i].gameObject.SetActive(true);\n                await GAsync.WaitNextFrame();\n            }\n\n            Platform.EventDispatcher.TriggerEvent(\"OverrideShadowForHomeScenePlayer\", true);\n            isLoadCompeleted = true;\n        }\n        catch (Exception ex)\n        {\n            DebugEX.LogError(\"\u901a\u884c\u8bc1\u751f\u6210\u4e09\u4eba\u51fa\u9519\");\n        }\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting!= null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat!= null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i]!= null)\n                    grassMat[i].DisableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n    private void InitPlayer(int playerId, HighPolyPlayerAppearanceController playerAppearance, HighPolyPlayerAnimationController playerAnimation)\n    {\n        playerAnimation.Init(true, false);\n    }\n\n\n\n    private void TempShow()\n    {\n        for (int i = 0; i < 3; i++)\n        {\n            if (PlayersAnimation[i] && isLoadCompeleted)\n                PlayersAnimation[i].Show();\n        }\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting!= null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat!= null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i]!= null)\n                    grassMat[i].DisableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n    private void TempHide()\n    {\n        for (int i = 0; i < 3; i++)\n        {\n            if (PlayersAnimation[i])\n                PlayersAnimation[i].Hide();\n        }\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting!= null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat!= null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i]!= null)\n                    grassMat[i].EnableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n    private void HidePlayer()\n    {\n        if (fovFeatrue && transpartFovFeatrue)\n        {\n            fovFeatrue.settings.cameraSettings.offset = oldCameraOffest;\n            transpartFovFeatrue.settings.cameraSettings.offset = oldCameraOffest;\n            fovFeatrue.settings.cameraSettings.cameraFieldOfView = oldCameraFOV;\n            transpartFovFeatrue.settings.cameraSettings.cameraFieldOfView = oldCameraFOV;\n        }\n        for (int i = 0; i < 3; i++)\n        {\n            if (PlayersAnimation[i])\n                PlayersAnimation[i].Hide();\n        }\n        Platform.EventDispatcher.TriggerEvent(\"OverrideShadowForHomeScenePlayer\", false);\n        if (Camera.main!= null)\n        {\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowFar = shadowFar;\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowNear = shadowNear;\n        }\n        isLoadCompeleted = false;\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting!= null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat!= null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i]!= null)\n                    grassMat[i].EnableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n\n    private void PlayerComeOutAnimation(int playerIndex, HighPolyPlayerAnimationController playerAnimation)\n    {\n        int poseId = 0;\n        if (playerIndex == 0)\n            poseId = 1;\n        playerAnimation.PlayAnimation(ComeOutAndIdleAnimationConfigs.IdleStateNamesSet[poseId]);\n        playerAnimation.transform.localPosition = PlayerLocalPosition[playerIndex];\n        playerAnimation.transform.eulerAngles = PlayerLocalEuler[playerIndex] - defultEuler;\n    }\n\n\n\n\n\n    public override void OnDestroy()\n    {\n        if (TeamJerseyMat!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(TeamJerseyMat);\n            TeamJerseyMat = null;\n        }\n        if (TeamShoesMat!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(TeamShoesMat);\n            TeamShoesMat = null;\n        }\n        if (TeamSockMat!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(TeamSockMat);\n            TeamSockMat = null;\n        }\n        if (SkinMatBlack!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(SkinMatBlack);\n            SkinMatBlack = null;\n        }\n        if (SkinMatWhite!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(SkinMatWhite);\n            SkinMatWhite = null;\n        }\n        if (SkinMatLatin!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(SkinMatLatin);\n            SkinMatLatin = null;\n        }\n        if (SkinMatAsian!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(SkinMatAsian);\n            SkinMatAsian = null;\n        }\n\n        HidePlayer();\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(clothDataNames);\n        teamLogo.DestroySelf();\n        teamLogo = null;\n\n        if (_prefab!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(_prefab);\n        }\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting!= null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat!= null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i]!= null)\n                    grassMat[i].EnableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n        Platform.EventDispatcher.RemoveEventListener(\"TempHideBattlePassPlayer\", TempHide);\n        Platform.EventDispatcher.RemoveEventListener(\"TempShowBattlePassPlayer\", TempShow);\n        Platform.EventDispatcher.RemoveEventListener(\"HideBattlePassPlayer\", HidePlayer);\n        Platform.EventDispatcher.RemoveEventListener<PlayersInfoTransfer[]>(\"ShowBattlePassPlayer\", ShowPlayer);\n        Platform.EventDispatcher.RemoveEventListener<PlayersInfoTransfer[], string[]>(\"ShowBattlePassPlayer1\", ShowPlayer1);\n    }\n}\n", "starcoder_inputs": "<fim_prefix>using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Framework.GalaSports.Service;\nusing GalaRenderPipeline.URPPass;\nusing UnityEngine.UI;\n\n\npublic class BattlePass3DView : View3DBase\n{\n    HighPolyPlayerAppearanceController[] PlayersAppearance = new HighPolyPlayerAppearanceController[3];\n    HighPolyPlayerAnimationController[] PlayersAnimation = new HighPolyPlayerAnimationController[3];\n    Transform[] Players = new Transform[3];\n    Transform[] Pelvis = new Transform[3];\n\n    // Transform player;\n    Material TeamJerseyMat;\n    Material TeamShoesMat;\n    Material TeamSockMat;\n    Material SkinMatBlack;\n    Material SkinMatWhite;\n    Material SkinMatLatin;\n    Material SkinMatAsian;\n    Vector3 localPos = new Vector3(25f, 0f, 0f);\n    Vector3 localEulerAngle = new Vector3(0, 90, 0);\n\n    static Vector3[] PlayerLocalPosition = new Vector3[3] { new Vector3(0.535f, 0f, -0.04f), new Vector3(0.97f, 0f, -0.42f), new Vector3(0.26f, 0f, -0.42f) };\n    static Vector3[] PlayerLocalEuler = new Vector3[3] { new Vector3(0f, -13.29f, 0), new Vector3(0, -16.848f, 0), new Vector3(0, -6.295f, 0) };\n    static Vector3 defultEuler = new Vector3(0, -90, 0);\n    GalaRenderObjectsFeature fovFeatrue;\n    GalaRenderObjectsFeature transpartFovFeatrue;\n    Vector3 oldCameraOffest;\n    float oldCameraFOV;\n    float shadowFar = 0;\n    float shadowNear = 0;\n    // Start is called before the first frame update\n    bool isLoadCompeleted = false;\n\n    static string[] clothDataNames = new string[] { \"Idle01\", \"Idle02\" };\n\n    static string[] jerseyCodes = new string[]\n    {\n        \"-1_Marcos Llorente_e0b244FF_deb043FF_e0b244FF_1_20222023_22_ab0425ff_232841FF_232841ff\",\n        \"-1_Fabinho_28973bFF_d3cb4aFF_37362fFF_1_20222023_22_c9be44ff_28973bFF_4f3db5ff\",\n        \"-1_Milinkovi\u0107_d7b475FF_d7b475FF_d7b475FF_1_20222023_22_c10729ff_d7b475FF_c10729ff\"\n    };\n    static int[] headIds = new int[] { 72, 123, 981 };\n    Texture2D teamLogo = null;\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        await Instantiate3PlayerPrefab();\n        ClothDataLoader.AsyncPreLoadMultiClotDataSet(clothDataNames);\n        PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(headIds);\n        for (int i = 0; i < jerseyCodes.Length; i++)\n        {\n            PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(jerseyCodes[i]);\n            PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(jerseyCodes[i]);\n        }\n        this.transform.localPosition = localPos;\n        this.transform.localEulerAngles = localEulerAngle;\n        for (int i = 0; i < Players.Length; i++)\n            Players[i].GetComponent<HighPolyPlayerAnimationController>().Hide();\n\n\n        fovFeatrue = Camera.main.GetComponent<CameraRenderPassSetting>().getRendererFeatureByName(\"FOVCameraObjects\") as GalaRenderObjectsFeature;\n        transpartFovFeatrue = Camera.main.GetComponent<CameraRenderPassSetting>().getRendererFeatureByName(\"FOVCameraForTransparentObjects\") as GalaRenderObjectsFeature;\n        if (fovFeatrue)\n        {\n            oldCameraOffest = fovFeatrue.settings.cameraSettings.offset;\n            oldCameraFOV = fovFeatrue.settings.cameraSettings.cameraFieldOfView;\n            shadowFar = Camera.main.GetComponent<CameraRenderPassSetting>().ShadowFar;\n            shadowNear = Camera.main.GetComponent<CameraRenderPassSetting>().ShadowNear;\n        }\n        if (teamLogo == null)\n        {\n            teamLogo = new Texture2D(2, 2);\n            teamLogo.SetPixel(0, 0, Color.clear);\n            teamLogo.SetPixel(0, 1, Color.clear);\n            teamLogo.SetPixel(1, 0, Color.clear);\n            teamLogo.SetPixel(1, 1, Color.clear);\n            teamLogo.Apply();\n        }\n        Platform.EventDispatcher.AddEventListener(\"TempHideBattlePassPlayer\", TempHide);\n        Platform.EventDispatcher.AddEventListener(\"TempShowBattlePassPlayer\", TempShow);\n        Platform.EventDispatcher.AddEventListener(\"HideBattlePassPlayer\", HidePlayer);\n        Platform.EventDispatcher.AddEventListener<PlayersInfoTransfer[]>(\"ShowBattlePassPlayer\", ShowPlayer);\n        Platform.EventDispatcher.AddEventListener<PlayersInfoTransfer[],string[]>(\"ShowBattlePassPlayer1\", ShowPlayer1);\n    }\n\n    GameObject _prefab;\n    GTask<GameObject> _prefabTask;\n    private async GTask Instantiate3PlayerPrefab()\n    {\n        _prefabTask = ResourceMgr.Instance.LoadAssetAsync<GameObject>(\"3D/Prefab/TeamPlayer\");\n        var prefabTaskResult = await _prefabTask;\n        _prefab = prefabTaskResult.result;\n        _prefab.transform.position = new Vector3(500,0,500);\n        for (int i = 0; i < 3; i++)\n        {\n            GameObject instantiated = GameObject.Instantiate(_prefab, gameObject.transform);\n            Players[i] = instantiated.transform;\n            Players[i].name = \"TeamPlayer\" + i.ToString();\n            PlayersAppearance[i] = instantiated.GetComponent<HighPolyPlayerAppearanceController>();\n            PlayersAnimation[i] = instantiated.GetComponent<HighPolyPlayerAnimationController>();\n            PlayersAnimation[i].SetUI3DLayer();\n            PlayersAnimation[i].HideFootball();\n            Pelvis[i] = PlayersAnimation[i].Pelvis;\n            await GAsync.WaitNextFrame();\n        }\n    }\n\n\n    //int player_id\n    //int headModel_id\n    //bool isKeeper,\n    //SkinColorForTexture skinColor,\n    //int bodyHeight,\n    //int shoe_Id = 1,\n    //int bodyWeight = 0\n\n    //Texture clothTexture,\n    //Texture keeperClothTexture,\n    //Texture sockTexture,\n    //Texture keeperSockTexture\n\n    //public int id=0;\n    //<fim_suffix>Setting galaShaderGlobalSetting;\n    private async void ShowPlayer(PlayersInfoTransfer[] playersInfoTransfer)\n    {\n\n        try\n        {\n            if (fovFeatrue && transpartFovFeatrue)\n            {\n                fovFeatrue.settings.cameraSettings.offset = new Vector3(0f, 0.2f, 0);\n                transpartFovFeatrue.settings.cameraSettings.offset = new Vector3(0f, 0.2f, 0);\n                fovFeatrue.settings.cameraSettings.cameraFieldOfView = 28;\n                transpartFovFeatrue.settings.cameraSettings.cameraFieldOfView = 28;\n            }\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowNear = 2.8f;\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowFar = 3.5f;\n\n            for (int i = 0; i < playersInfoTransfer.Length; i++)\n            {\n                string jerseyCode = \"\";\n                string playerNumber = \"10\";\n                string playerName = \"GALA\";\n                if (playersInfoTransfer[i].PlayerNumber == 30077)\n                {\n                    playerName = \"Marcos Llorente\";\n                    playerNumber = \"-1\";\n                    jerseyCode = \"-1_Marcos Llorente_e0b244FF_deb043FF_e0b244FF_1_20222023_22_ab0425ff_232841FF_232841ff\";\n                }\n                else if (playersInfoTransfer[i].PlayerNumber == 30039)\n                {\n                    playerName = \"Fabinho\";\n                    playerNumber = \"-1\";\n                    jerseyCode = \"-1_Fabinho_28973bFF_d3cb4aFF_37362fFF_1_20222023_22_c9be44ff_28973bFF_4f3db5ff\";\n                }\n                else\n                {\n                    playerName = \"Milinkovi\u0107\";\n                    playerNumber = \"-1\";\n                    jerseyCode = \"-1_Milinkovi\u0107_d7b475FF_d7b475FF_d7b475FF_1_20222023_22_c10729ff_d7b475FF_c10729ff\";\n                }\n\n                PlayersAppearance[i].gameObject.SetActive(false);\n\n                PlayersAppearance[i].SetPlayerAppearance(int.Parse(playersInfoTransfer[i].HeadModel_id), (int)playersInfoTransfer[i].BodyHeight, playersInfoTransfer[i].BodyWeight, (SkinColorForTexture)playersInfoTransfer[i].SkinColor, playersInfoTransfer[i].SkinColorCorrectionValue, jerseyCode, 0, playersInfoTransfer[i].Player_id, playersInfoTransfer[i].IsKeeper, playerName, playerNumber, false, teamLogo, true);\n\n                InitPlayer(playersInfoTransfer[i].PlayerNumber, PlayersAppearance[i], PlayersAnimation[i]);\n\n                PlayerComeOutAnimation(i, PlayersAnimation[i]);\n                PlayersAppearance[i].gameObject.SetActive(true);\n                await GAsync.WaitNextFrame();\n            }\n            Platform.EventDispatcher.TriggerEvent(\"OverrideShadowForHomeScenePlayer\", true);\n            isLoadCompeleted = true;\n        }\n        catch (Exception ex)\n        {\n            DebugEX.LogError(\"\u901a\u884c\u8bc1\u751f\u6210\u4e09\u4eba\u51fa\u9519\");\n        }\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting!= null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat!= null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i]!= null)\n                    grassMat[i].DisableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n    private async void ShowPlayer1(PlayersInfoTransfer[] playersInfoTransfer, string[] jerseyCode)\n    {\n        try\n        {\n            await Instantiate3PlayerPrefab();\n            for (int i = 0; i < jerseyCode.Length; i++)\n            {\n                PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(jerseyCode[i]);\n                PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(jerseyCode[i]);\n                headIds[i] = int.Parse(playersInfoTransfer[i].HeadModel_id);\n            }\n            ClothDataLoader.AsyncPreLoadMultiClotDataSet(clothDataNames);\n            PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(headIds);\n            for (int i = 0; i < Players.Length; i++)\n                Players[i].GetComponent<HighPolyPlayerAnimationController>().Hide();\n            if (fovFeatrue && transpartFovFeatrue)\n            {\n                fovFeatrue.settings.cameraSettings.offset = new Vector3(0f, 0.2f, 0);\n                transpartFovFeatrue.settings.cameraSettings.offset = new Vector3(0f, 0.2f, 0);\n                fovFeatrue.settings.cameraSettings.cameraFieldOfView = 28;\n                transpartFovFeatrue.settings.cameraSettings.cameraFieldOfView = 28;\n            }\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowNear = 2.8f;\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowFar = 3.5f;\n\n            for (int i = 0; i < playersInfoTransfer.Length; i++)\n            {\n                PlayersAppearance[i].gameObject.SetActive(false);\n                DebugEX.LogError(playersInfoTransfer[i].PlayerName);\n                PlayersAppearance[i].SetPlayerAppearance(int.Parse(playersInfoTransfer[i].HeadModel_id), (int)playersInfoTransfer[i].BodyHeight, playersInfoTransfer[i].BodyWeight, (SkinColorForTexture)playersInfoTransfer[i].SkinColor, playersInfoTransfer[i].SkinColorCorrectionValue, jerseyCodes[i], 0, playersInfoTransfer[i].Player_id, playersInfoTransfer[i].IsKeeper, playersInfoTransfer[i].PlayerName, playersInfoTransfer[i].PlayerNumber.ToString(), false, teamLogo, true);\n\n                InitPlayer(playersInfoTransfer[i].PlayerNumber, PlayersAppearance[i], PlayersAnimation[i]);\n\n                PlayerComeOutAnimation(i, PlayersAnimation[i]);\n                PlayersAppearance[i].gameObject.SetActive(true);\n                await GAsync.WaitNextFrame();\n            }\n\n            Platform.EventDispatcher.TriggerEvent(\"OverrideShadowForHomeScenePlayer\", true);\n            isLoadCompeleted = true;\n        }\n        catch (Exception ex)\n        {\n            DebugEX.LogError(\"\u901a\u884c\u8bc1\u751f\u6210\u4e09\u4eba\u51fa\u9519\");\n        }\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting!= null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat!= null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i]!= null)\n                    grassMat[i].DisableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n    private void InitPlayer(int playerId, HighPolyPlayerAppearanceController playerAppearance, HighPolyPlayerAnimationController playerAnimation)\n    {\n        playerAnimation.Init(true, false);\n    }\n\n\n\n    private void TempShow()\n    {\n        for (int i = 0; i < 3; i++)\n        {\n            if (PlayersAnimation[i] && isLoadCompeleted)\n                PlayersAnimation[i].Show();\n        }\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting!= null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat!= null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i]!= null)\n                    grassMat[i].DisableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n    private void TempHide()\n    {\n        for (int i = 0; i < 3; i++)\n        {\n            if (PlayersAnimation[i])\n                PlayersAnimation[i].Hide();\n        }\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting!= null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat!= null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i]!= null)\n                    grassMat[i].EnableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n    private void HidePlayer()\n    {\n        if (fovFeatrue && transpartFovFeatrue)\n        {\n            fovFeatrue.settings.cameraSettings.offset = oldCameraOffest;\n            transpartFovFeatrue.settings.cameraSettings.offset = oldCameraOffest;\n            fovFeatrue.settings.cameraSettings.cameraFieldOfView = oldCameraFOV;\n            transpartFovFeatrue.settings.cameraSettings.cameraFieldOfView = oldCameraFOV;\n        }\n        for (int i = 0; i < 3; i++)\n        {\n            if (PlayersAnimation[i])\n                PlayersAnimation[i].Hide();\n        }\n        Platform.EventDispatcher.TriggerEvent(\"OverrideShadowForHomeScenePlayer\", false);\n        if (Camera.main!= null)\n        {\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowFar = shadowFar;\n            Camera.main.GetComponent<CameraRenderPassSetting>().ShadowNear = shadowNear;\n        }\n        isLoadCompeleted = false;\n\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting!= null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat!= null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i]!= null)\n                    grassMat[i].EnableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n    }\n\n    private void PlayerComeOutAnimation(int playerIndex, HighPolyPlayerAnimationController playerAnimation)\n    {\n        int poseId = 0;\n        if (playerIndex == 0)\n            poseId = 1;\n        playerAnimation.PlayAnimation(ComeOutAndIdleAnimationConfigs.IdleStateNamesSet[poseId]);\n        playerAnimation.transform.localPosition = PlayerLocalPosition[playerIndex];\n        playerAnimation.transform.eulerAngles = PlayerLocalEuler[playerIndex] - defultEuler;\n    }\n\n\n\n\n\n    public override void OnDestroy()\n    {\n        if (TeamJerseyMat!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(TeamJerseyMat);\n            TeamJerseyMat = null;\n        }\n        if (TeamShoesMat!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(TeamShoesMat);\n            TeamShoesMat = null;\n        }\n        if (TeamSockMat!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(TeamSockMat);\n            TeamSockMat = null;\n        }\n        if (SkinMatBlack!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(SkinMatBlack);\n            SkinMatBlack = null;\n        }\n        if (SkinMatWhite!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(SkinMatWhite);\n            SkinMatWhite = null;\n        }\n        if (SkinMatLatin!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(SkinMatLatin);\n            SkinMatLatin = null;\n        }\n        if (SkinMatAsian!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(SkinMatAsian);\n            SkinMatAsian = null;\n        }\n\n        HidePlayer();\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(clothDataNames);\n        teamLogo.DestroySelf();\n        teamLogo = null;\n\n        if (_prefab!= null)\n        {\n            ResourceMgr.Instance.UnloadAsset(_prefab);\n        }\n        galaShaderGlobalSetting = GameObject.FindObjectOfType<GalaShaderGlobalSetting>();\n        if (galaShaderGlobalSetting == null || galaShaderGlobalSetting.GrassRender == null)\n            return;\n        Material[] grassMat = null;\n        if (galaShaderGlobalSetting!= null)\n            grassMat = galaShaderGlobalSetting.GrassRender.sharedMaterials;\n        if (grassMat!= null)\n        {\n            for (int i = 0; i < grassMat.Length; i++)\n            {\n                if (grassMat[i]!= null)\n                    grassMat[i].EnableKeyword(\"_RECEIVE_SHADOWS_ON\");\n            }\n\n        }\n        Platform.EventDispatcher.RemoveEventListener(\"TempHideBattlePassPlayer\", TempHide);\n        Platform.EventDispatcher.RemoveEventListener(\"TempShowBattlePassPlayer\", TempShow);\n        Platform.EventDispatcher.RemoveEventListener(\"HideBattlePassPlayer\", HidePlayer);\n        Platform.EventDispatcher.RemoveEventListener<PlayersInfoTransfer[]>(\"ShowBattlePassPlayer\", ShowPlayer);\n        Platform.EventDispatcher.RemoveEventListener<PlayersInfoTransfer[], string[]>(\"ShowBattlePassPlayer1\", ShowPlayer1);\n    }\n}\n<fim_middle>"}
{"inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System;\nusing Framework.GalaSports.Service;\n\nnamespace PlatformHotfix{\n    public class Loading3DView{\n        public bool isDestroy =false;\n        public List<Action<View3DBase>> loadedCallBackList = new List<Action<View3DBase>>();\n    }\n    public class Scene3DManager\n    {\n        \n        private static Scene3DManager _instance;\n        public static Scene3DManager Instance\n        {\n            get {\n                if(_instance == null)\n                {\n                    _instance = new Scene3DManager();\n                    _instance.Awake();\n                }\n                return _instance; \n            }\n\n        }\n        public GameObject gameObject;\n        public Transform transform;\n        public HomeScene3DPlayers3DView Home3DPlayers3DView;\n        // public Home3DPlayersLodView Home3DPlayersLodView;\n\n        private Dictionary<Type, Scene3DConfig.Config3D> _assetPathDict = new Dictionary<Type, Scene3DConfig.Config3D>();\n\n        private Dictionary<Type, View3DBase> _3DViewDict = new Dictionary<Type, View3DBase>();\n\n        private List<View3DBase> _3DViewList = new List<View3DBase>();\n\n        private Dictionary<Type, Loading3DView> _3DViewAsyncLoadingDict = new Dictionary<Type, Loading3DView>();\n\n        private Dictionary<Type, int> addCountDic = new Dictionary<Type, int>();\n        \n        //private GameObject _mainStage;\n        public void SetHome3DPlayers3DView(Transform transform)\n        {\n            //\u540e\u7eedHomeScene3DPlayers3DView \u79fb\u5230\u70ed\u66f4\u5c42\uff0c\u518d\u53d6\u6d88\u8fd9\u4e2a\u4ee3\u7801\n            Home3DPlayers3DView = transform.Find(\"Home3DPlayers\").GetComponent<HomeScene3DPlayers3DView>();\n            // Home3DPlayersLodView = transform.Find(\"Home3DPlayers_lod\").GetComponent<Home3DPlayersLodView>();\n\n        }\n\n         private void Awake()\n        {\n           GetMainStage();\n           Scene3DConfig.InitConfig(_assetPathDict);\n            if(gameObject == null)\n            {\n                gameObject = new GameObject(\"Scene3D\");\n                transform = gameObject.transform;\n                GameObject.DontDestroyOnLoad(gameObject);\n                gameObject.AddComponent<UpdateManager>();\n            }\n\n            Platform.EventDispatcher.AddEventListener(UpdateManager.Home3DUpdate, Update);\n            Platform.EventDispatcher.AddEventListener(UpdateManager.Home3DLateUpdate, LateUpdate);\n            //\u517c\u5bb9\u975e\u70ed\u66f4\u63a5\u53e3\uff0c \n            Platform.EventDispatcher.AddEventListener<string>(\"Scene3DManager_Hide\", Tmp_Hide); \n            Platform.EventDispatcher.AddEventListener<bool>(\"Scene3DManager_SetSceneActive\",SetSceneActive);\n        }\n\n        public void Destroy()\n        {\n            if(_instance != null)\n            {\n                foreach (var item in _3DViewDict)\n                {\n                    var cachedObj = item.Value;\n                    cachedObj.OnDisable();\n                    cachedObj.OnDestroy();\n                    ResourceMgr.Instance.UnloadGameObject(cachedObj.gameObject);\n                }\n                _3DViewDict.Clear();\n                _3DViewList.Clear();\n                _3DViewAsyncLoadingDict.Clear();\n\n                Platform.EventDispatcher.RemoveEventListener<string>(\"Scene3DManager_Hide\", Tmp_Hide);\n                Platform.EventDispatcher.RemoveEventListener<bool>(\"Scene3DManager_SetSceneActive\",SetSceneActive);\n                Platform.EventDispatcher.RemoveEventListener(UpdateManager.Home3DUpdate, Update);\n                Platform.EventDispatcher.RemoveEventListener(UpdateManager.Home3DLateUpdate, LateUpdate);\n            }\n            _instance = null;\n            if(this.gameObject)\n            {\n                GameObject.Destroy(this.gameObject);\n                this.gameObject = null;\n            }\n            this.transform = null;\n            this.Home3DPlayers3DView = null;\n            // this.Home3DPlayersLodView = null;\n\n            _assetPathDict.Clear();\n        }\n\n        private static GameObject _mainStage;\n        public GameObject GetMainStage()\n        {\n             if (_mainStage == null)\n            {\n                _mainStage = GameObject.Find(\"StadiumScene\");\n                if (_mainStage == null)\n                {\n                    return new GameObject(\"MainStage\");\n                }\n            }\n            return _mainStage;\n        }\n        public void SetSceneActive(bool isActive)\n        {\n            GameObject sceneObj = GetMainStage();\n            sceneObj?.SetActive(isActive);\n\n            foreach( var item in _3DViewDict)\n            {\n                if(_assetPathDict.ContainsKey(item.Key) && _assetPathDict[item.Key].isInScene)\n                {\n                    if(!isActive)\n                    {\n                        Hide(item.Key);\n                    }else{\n                        Show(item.Key);\n                    }\n                }\n            }\n            //\u573a\u8fb9\u7279\u6548\u7279\u6b8a\u5904\u7406\n            StadiumSideLines.Instance.gameObject?.SetActive(isActive);\n        }\n\n        public void Update()\n        {\n            for(int i = 0; i<_3DViewList.Count; i++)\n            {\n                if(_3DViewList[i].gameObject.activeInHierarchy && _3DViewList[i].isCanUpdate)\n                {\n                    _3DViewList[i].Update();\n                } \n            }\n        }\n        public void LateUpdate()\n        {\n            for(int i = 0; i<_3DViewList.Count; i++)\n            {\n                if(_3DViewList[i].gameObject.activeInHierarchy && _3DViewList[i].isCanLateUpdate)\n                {\n                    _3DViewList[i].LateUpdate();\n                } \n            }\n        }\n\n        public async GTask<T> Add3DView<T>()where T : View3DBase\n        {\n            T view = null;\n            bool IsComplete = false;\n            Action<View3DBase> loadedCallBack = (v)=>{\n                view = v as T;\n                IsComplete = true;\n            };\n            Add3DView<T>(loadedCallBack);\n            await GAsync.WaitUntil(()=> IsComplete);\n            return view;\n        }\n        public async void Add3DView<T>(Action<View3DBase> loadedCallBack) where T : View3DBase\n        {\n            Type type = typeof(T);\n            if (addCountDic.ContainsKey(type))\n            {\n                addCountDic[type]++;\n            }               \n            else\n                addCountDic.Add(type, 1);\n\n            if(!_assetPathDict.ContainsKey(type))\n            {\n                DebugEX.LogError(\"\u6ca1\u6709\u914d\u7f6e : \"+ type.Name);\n                loadedCallBack?.Invoke(null);\n                return;\n            }\n\n            View3DBase cachedObj;\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                if(!cachedObj.gameObject.activeSelf)\n                {\n                    cachedObj.OnEnable();\n                }\n                cachedObj.gameObject.SetActive(true);\n                loadedCallBack?.Invoke(cachedObj);\n                return;\n            }\n\n\n            if(_3DViewAsyncLoadingDict.ContainsKey(type))\n            {\n                //\u6b63\u5728\u52a0\u8f7d\u4e2d\n                if(loadedCallBack!=null)\n                {\n                    _3DViewAsyncLoadingDict[type].loadedCallBackList.Add(loadedCallBack);\n                }\n                return;\n            }\n            if(loadedCallBack!=null)\n            {\n                Loading3DView loading3dview = new Loading3DView();\n                _3DViewAsyncLoadingDict.Add(type, loading3dview);\n                _3DViewAsyncLoadingDict[type].loadedCallBackList.Add(loadedCallBack);\n            }\n            string asset_path = GetABPath(_assetPathDict[type]);  //_assetPathDict[type].abpath;\n            var obj = await ResourceMgr.Instance.InstantiateAsync(asset_path);\n            T gameObj = Activator.CreateInstance<T>();\n            if(obj != null)\n            {\n                gameObj.gameObject = obj.result;\n                gameObj.transform = gameObj.gameObject.transform;\n                gameObj.transform.SetParent(this.transform);\n                await gameObj.Awake();\n                await gameObj.Start();\n                gameObj.OnEnable();\n                _3DViewDict.Add(type, gameObj);\n\n                _3DViewList.Add(gameObj);\n                \n            }else{\n                DebugEX.LogError (asset_path + \" \u52a0\u8f7d\u5931\u8d25 \uff01\uff01 \");\n            }\n            if(_3DViewAsyncLoadingDict.ContainsKey(type))\n            {\n                var list = _3DViewAsyncLoadingDict[type];\n                _3DViewAsyncLoadingDict.Remove(type);\n                for(int i = 0;i< list.loadedCallBackList.Count;i++)\n                {\n                    list.loadedCallBackList[i]?.Invoke(gameObj);\n                }\n                \n                if(list.isDestroy)\n                {\n                    Remove3DView<T>();\n                }\n            }\n        }\n\n        public T GetUI3DView<T>() where T : View3DBase\n        {\n            View3DBase cachedObj;\n            _3DViewDict.TryGetValue(typeof(T), out cachedObj);\n            if (cachedObj != null)\n            {\n                return cachedObj as T;\n            }\n            else\n            {\n                return default(T);\n            }\n        }\n\n        public bool IsHave3DView<T>()where T : View3DBase\n        {\n            return _3DViewDict.ContainsKey(typeof(T));\n        }\n        public void Remove3DView<T>(bool force = false)\n        {\n            View3DBase cachedObj;\n            Type type = typeof(T);\n            if (addCountDic.ContainsKey(type))\n            {\n                if(!force)\n                {\n                    addCountDic[type]--;\n                    if (addCountDic[type] > 0)\n                        return;\n                    else\n                        addCountDic[type] = 0;\n                }else{\n                    addCountDic[type] = 0;\n                }\n            }\n            //\u5982\u679c\u5df2\u5b8c\u6210\u52a0\u8f7d\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                cachedObj.OnDisable();\n                cachedObj.OnDestroy();\n                ResourceMgr.Instance.UnloadGameObject(cachedObj.gameObject);\n                _3DViewDict.Remove(type);\n\n                _3DViewList.Remove(cachedObj);\n                return;\n            }\n            //\u5982\u679c\u5df2\u5728\u52a0\u8f7d\u4e2d\n            Loading3DView cachedAsyncHandler;\n            bool isLoading = _3DViewAsyncLoadingDict.TryGetValue(type, out cachedAsyncHandler);\n            if (isLoading)\n            {\n                cachedAsyncHandler.isDestroy = true;\n            }\n        }\n\n        public void HideOthersExcept<T>()\n        {\n            Type type = typeof(T);\n            foreach (KeyValuePair<Type, View3DBase> item in _3DViewDict)\n            {\n                item.Value.gameObject.SetActive(item.Key == type);\n            }\n        }\n\n        public void Hide<T>()\n        {\n            Type type = typeof(T);\n            Hide(type);\n        }\n\n        private void Hide(Type type)\n        {\n            View3DBase cachedObj;\n            //\u5982\u679c\u5df2\u5b8c\u6210\u52a0\u8f7d\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                cachedObj.gameObject.SetActive(false);\n                cachedObj.OnDisable();\n            }\n        }\n\n        public void Show<T>()\n        {\n            Type type = typeof(T);\n            Show(type);\n        }\n\n        private void Show(Type type)\n        {\n            View3DBase cachedObj;\n            //\u5982\u679c\u5df2\u5b8c\u6210\u52a0\u8f7d\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                cachedObj.gameObject.SetActive(true);\n                cachedObj.OnEnable();\n            }\n        }\n        \n        /// <summary>\n        /// \u8fd9\u4e2a\u63a5\u53e3\u614e\u7528\uff0c\u522b\u8bef\u5220\u522b\u76843Dview\n        /// </summary>\n        public void HideAll() \n        {\n            foreach (KeyValuePair<Type, View3DBase> item in _3DViewDict)\n            {\n                item.Value.gameObject.SetActive(false);\n                item.Value.OnDisable();\n            }\n        }\n\n        //\u517c\u5bb9\u975e\u70ed\u66f4\u63a5\u53e3\uff0c\u4fee\u6539\u6210\u6240\u6709\u70ed\u66f4\u4ee3\u7801\u540e\u5c31\u5220\u6389\n        private void Tmp_Hide(string ClassName)\n        {\n            Type type = Type.GetType(ClassName);\n            View3DBase cachedObj;\n            //\u5982\u679c\u5df2\u5b8c\u6210\u52a0\u8f7d\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                cachedObj.gameObject.SetActive(false);\n                cachedObj.OnDisable();\n            }\n        }\n        public Dictionary<string,bool> GetView3DObjState()\n        {\n            Dictionary<string,bool> _viewStateDic = new Dictionary<string,bool>();\n            foreach(var item in _3DViewList)\n            {\n                _viewStateDic.Add(item.gameObject.name,item.gameObject.activeSelf);\n            }\n            return _viewStateDic;\n        }\n        public void SetView3DObjState(Dictionary<string,bool> _viewStateDic)\n        {\n            foreach(var item in _3DViewList)\n            {\n                if(_viewStateDic.ContainsKey(item.gameObject.name))\n                item.gameObject.SetActive(_viewStateDic[item.gameObject.name]); \n            }\n        }\n\n        const string Medium = \"_Medium\";\n        const string Low = \"_Low\";\n        private string GetABPath(Scene3DConfig.Config3D config)\n        {\n            if(config.supportQuality)\n            {\n                int level = SettingConfig.CurQualityLevel; \n                if(level <=2)\n                {\n                    return config.abpath+ Low;\n                }else if(level <= 4)\n                {\n                    return config.abpath+ Medium;\n                }else{\n                    return config.abpath;\n                }\n            }else{\n                return config.abpath;\n            }\n        }\n    }\n    \n}", "cropped_inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System;\nusing Framework.GalaSports.Service;\n\nnamespace PlatformHotfix{\n    public class Loading3DView{\n        public bool isDestroy =false;\n        public List<Action<View3DBase>> loadedCallBackList = new List<Action<View3DBase>>();\n    }\n    public class Scene3DManager\n    {\n        \n        private static Scene3DManager _instance;\n        public static Scene3DManager Instance\n        {\n            get {\n                if(_instance == null)\n                {\n                    _instance = new Scene3DManager();\n                    _instance.Awake();\n                }\n                return _instance; \n            }\n\n        }\n        public GameObject gameObject;\n        public Transform transform;\n        public HomeScene3DPlayers3DView Home3DPlayers3DView;\n        // public Home3DPlayersLodView Home3DPlayersLodView;\n\n        private Dictionary<Type, Scene3DConfig.Config3D> _assetPathDict = new Dictionary<Type, Scene3DConfig.Config3D>();\n\n        private Dictionary<Type, View3DBase> _3DViewDict = new Dictionary<Type, View3DBase>();\n\n        private List<View3DBase> _3DViewList = new List<View3DBase>();\n\n        private Dictionary<Type, Loading3DView> _3DViewAsyncLoadingDict = new Dictionary<Type, Loading3DView>();\n\n        private Dictionary<Type, int> addCountDic = new Dictionary<Type, int>();\n        \n        //private GameObject _mainStage;\n        public void SetHome3DPlayers3DView(Transform transform)\n        {\n            //\u540e\u7eedHomeScene3DPlayers3DView \u79fb\u5230\u70ed\u66f4\u5c42\uff0c\u518d\u53d6\u6d88\u8fd9\u4e2a\u4ee3\u7801\n            Home3DPlayers3DView = transform.Find(\"Home3DPlayers\").GetComponent<HomeScene3DPlayers3DView>();\n            // Home3DPlayersLodView = transform.Find(\"Home3DPlayers_lod\").GetComponent<Home3DPlayersLodView>();\n\n        }\n\n         private void Awake()\n        {\n           GetMainStage();\n           Scene3DConfig.InitConfig(_assetPathDict);\n            if(gameObject == null)\n            {\n                gameObject = new GameObject(\"Scene3D\");\n                transform = gameObject.transform;\n                GameObject.DontDestroyOnLoad(gameObject);\n                gameObject.AddComponent<UpdateManager>();\n            }\n\n            Platform.EventDispatcher.AddEventListener(UpdateManager.Home3DUpdate, Update);\n            Platform.EventDispatcher.AddEventListener(UpdateManager.Home3DLateUpdate, LateUpdate);\n            //\u517c\u5bb9\u975e\u70ed\u66f4\u63a5\u53e3\uff0c \n            Platform.EventDispatcher.AddEventListener<string>(\"Scene3DManager_Hide\", Tmp_Hide); \n            Platform.EventDispatcher.AddEventListener<bool>(\"Scene3DManager_SetSceneActive\",SetSceneActive);\n        }\n\n        public void Destroy()\n        {\n            if(_instance!= null)\n            {\n                foreach (var item in _3DViewDict)\n                {\n                    var cachedObj = item.Value;\n                    cachedObj.OnDisable();\n                    cachedObj.OnDestroy();\n                    ResourceMgr.Instance.UnloadGameObject(cachedObj.gameObject);\n                }\n                _3DViewDict.Clear();\n                _3DViewList.Clear();\n                _3DViewAsyncLoadingDict.Clear();\n\n                Platform.EventDispatcher.RemoveEventListener<string>(\"Scene3DManager_Hide\", Tmp_Hide);\n                Platform.EventDispatcher.RemoveEventListener<bool>(\"Scene3DManager_SetSceneActive\",SetSceneActive);\n                Platform.EventDispatcher.RemoveEventListener(UpdateManager.Home3DUpdate, Update);\n                Platform.EventDispatcher.RemoveEventListener(UpdateManager.Home3DLateUpdate, LateUpdate);\n            }\n            _instance = null;\n            if(this.gameObject)\n            {\n                GameObject.Destroy(this.gameObject);\n                this.gameObject = null;\n            }\n            this.transform = null;\n            this.Home3DPlayers3DView = null;\n            // this.Home3DPlayersLodView = null;\n\n            _assetPathDict.Clear();\n        }\n\n        private static GameObject _mainStage;\n        public GameObject GetMainStage()\n        {\n             if (_mainStage == null)\n            {\n                _mainStage = GameObject.Find(\"StadiumScene\");\n                if (_mainStage == null)\n                {\n                    return new GameObject(\"MainStage\");\n                }\n            }\n            return _mainStage;\n        }\n        public void SetSceneActive(bool isActive)\n        {\n            GameObject sceneObj = GetMainStage();\n            sceneObj?.SetActive(isActive);\n\n            foreach( var item in _3DViewDict)\n            {\n                if(_assetPathDict.ContainsKey(item.Key) && _assetPathDict[item.Key].isInScene{\n                        Show(item.Key);\n                    }\n                }\n            }\n            //\u573a\u8fb9\u7279\u6548\u7279\u6b8a\u5904\u7406\n            StadiumSideLines.Instance.gameObject?.SetActive(isActive);\n        }\n\n        public void Update()\n        {\n            for(int i = 0; i<_3DViewList.Count; i++)\n            {\n                if(_3DViewList[i].gameObject.activeInHierarchy && _3DViewList[i].isCanUpdate)\n                {\n                    _3DViewList[i].Update();\n                } \n            }\n        }\n        public void LateUpdate()\n        {\n            for(int i = 0; i<_3DViewList.Count; i++)\n            {\n                if(_3DViewList[i].gameObject.activeInHierarchy && _3DViewList[i].isCanLateUpdate)\n                {\n                    _3DViewList[i].LateUpdate();\n                } \n            }\n        }\n\n        public async GTask<T> Add3DView<T>()where T : View3DBase\n        {\n            T view = null;\n            bool IsComplete = false;\n            Action<View3DBase> loadedCallBack = (v)=>{\n                view = v as T;\n                IsComplete = true;\n            };\n            Add3DView<T>(loadedCallBack);\n            await GAsync.WaitUntil(()=> IsComplete);\n            return view;\n        }\n        public async void Add3DView<T>(Action<View3DBase> loadedCallBack) where T : View3DBase\n        {\n            Type type = typeof(T);\n            if (addCountDic.ContainsKey(type))\n            {\n                addCountDic[type]++;\n            }               \n            else\n                addCountDic.Add(type, 1);\n\n            if(!_assetPathDict.ContainsKey(type))\n            {\n                DebugEX.LogError(\"\u6ca1\u6709\u914d\u7f6e : \"+ type.Name);\n                loadedCallBack?.Invoke(null);\n                return;\n            }\n\n            View3DBase cachedObj;\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                if(!cachedObj.gameObject.activeSelf)\n                {\n                    cachedObj.OnEnable();\n                }\n                cachedObj.gameObject.SetActive(true);\n                loadedCallBack?.Invoke(cachedObj);\n                return;\n            }\n\n\n            if(_3DViewAsyncLoadingDict.ContainsKey(type))\n            {\n                //\u6b63\u5728\u52a0\u8f7d\u4e2d\n                if(loadedCallBack!=null)\n                {\n                    _3DViewAsyncLoadingDict[type].loadedCallBackList.Add(loadedCallBack);\n                }\n                return;\n            }\n            if(loadedCallBack!=null)\n            {\n                Loading3DView loading3dview = new Loading3DView();\n                _3DViewAsyncLoadingDict.Add(type, loading3dview);\n                _3DViewAsyncLoadingDict[type].loadedCallBackList.Add(loadedCallBack);\n            }\n            string asset_path = GetABPath(_assetPathDict[type]);  //_assetPathDict[type].abpath;\n            var obj = await ResourceMgr.Instance.InstantiateAsync(asset_path);\n            T gameObj = Activator.CreateInstance<T>();\n            if(obj!= null)\n            {\n                gameObj.gameObject = obj.result;\n                gameObj.transform = gameObj.gameObject.transform;\n                gameObj.transform.SetParent(this.transform);\n                await gameObj.Awake();\n                await gameObj.Start();\n                gameObj.OnEnable();\n                _3DViewDict.Add(type, gameObj);\n\n                _3DViewList.Add(gameObj);\n                \n            }else{\n                DebugEX.LogError (asset_path + \" \u52a0\u8f7d\u5931\u8d25 \uff01\uff01 \");\n            }\n            if(_3DViewAsyncLoadingDict.ContainsKey(type))\n            {\n                var list = _3DViewAsyncLoadingDict[type];\n                _3DViewAsyncLoadingDict.Remove(type);\n                for(int i = 0;i< list.loadedCallBackList.Count;i++)\n                {\n                    list.loadedCallBackList[i]?.Invoke(gameObj);\n                }\n                \n                if(list.isDestroy)\n                {\n                    Remove3DView<T>();\n                }\n            }\n        }\n\n        public T GetUI3DView<T>() where T : View3DBase\n        {\n            View3DBase cachedObj;\n            _3DViewDict.TryGetValue(typeof(T), out cachedObj);\n            if (cachedObj!= null)\n            {\n                return cachedObj as T;\n            }\n            else\n            {\n                return default(T);\n            }\n        }\n\n        public bool IsHave3DView<T>()where T : View3DBase\n        {\n            return _3DViewDict.ContainsKey(typeof(T));\n        }\n        public void Remove3DView<T>(bool force = false)\n        {\n            View3DBase cachedObj;\n            Type type = typeof(T);\n            if (addCountDic.ContainsKey(type))\n            {\n                if(!force)\n                {\n                    addCountDic[type]--;\n                    if (addCountDic[type] > 0)\n                        return;\n                    else\n                        addCountDic[type] = 0;\n                }else{\n                    addCountDic[type] = 0;\n                }\n            }\n            //\u5982\u679c\u5df2\u5b8c\u6210\u52a0\u8f7d\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                cachedObj.OnDisable();\n                cachedObj.OnDestroy();\n                ResourceMgr.Instance.UnloadGameObject(cachedObj.gameObject);\n                _3DViewDict.Remove(type);\n\n                _3DViewList.Remove(cachedObj);\n                return;\n            }\n            //\u5982\u679c\u5df2\u5728\u52a0\u8f7d\u4e2d\n            Loading3DView cachedAsyncHandler;\n            bool isLoading = _3DViewAsyncLoadingDict.TryGetValue(type, out cachedAsyncHandler);\n            if (isLoading)\n            {\n                cachedAsyncHandler.isDestroy = true;\n            }\n        }\n\n        public void HideOthersExcept<T>()\n        {\n            Type type = typeof(T);\n            foreach (KeyValuePair<Type, View3DBase> item in _3DViewDict)\n            {\n                item.Value.gameObject.SetActive(item.Key == type);\n            }\n        }\n\n        public void Hide<T>()\n        {\n            Type type = typeof(T);\n            Hide(type);\n        }\n\n        private void Hide(Type type)\n        {\n            View3DBase cachedObj;\n            //\u5982\u679c\u5df2\u5b8c\u6210\u52a0\u8f7d\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                cachedObj.gameObject.SetActive(false);\n                cachedObj.OnDisable();\n            }\n        }\n\n        public void Show<T>()\n        {\n            Type type = typeof(T);\n            Show(type);\n        }\n\n        private void Show(Type type)\n        {\n            View3DBase cachedObj;\n            //\u5982\u679c\u5df2\u5b8c\u6210\u52a0\u8f7d\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                cachedObj.gameObject.SetActive(true);\n                cachedObj.OnEnable();\n            }\n        }\n        \n        /// <summary>\n        /// \u8fd9\u4e2a\u63a5\u53e3\u614e\u7528\uff0c\u522b\u8bef\u5220\u522b\u76843Dview\n        /// </summary>\n        public void HideAll() \n        {\n            foreach (KeyValuePair<Type, View3DBase> item in _3DViewDict)\n            {\n                item.Value.gameObject.SetActive(false);\n                item.Value.OnDisable();\n            }\n        }\n\n        //\u517c\u5bb9\u975e\u70ed\u66f4\u63a5\u53e3\uff0c\u4fee\u6539\u6210\u6240\u6709\u70ed\u66f4\u4ee3\u7801\u540e\u5c31\u5220\u6389\n        private void Tmp_Hide(string ClassName)\n        {\n            Type type = Type.GetType(ClassName);\n            View3DBase cachedObj;\n            //\u5982\u679c\u5df2\u5b8c\u6210\u52a0\u8f7d\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                cachedObj.gameObject.SetActive(false);\n                cachedObj.OnDisable();\n            }\n        }\n        public Dictionary<string,bool> GetView3DObjState()\n        {\n            Dictionary<string,bool> _viewStateDic = new Dictionary<string,bool>();\n            foreach(var item in _3DViewList)\n            {\n                _viewStateDic.Add(item.gameObject.name,item.gameObject.activeSelf);\n            }\n            return _viewStateDic;\n        }\n        public void SetView3DObjState(Dictionary<string,bool> _viewStateDic)\n        {\n            foreach(var item in _3DViewList)\n            {\n                if(_viewStateDic.ContainsKey(item.gameObject.name))\n                item.gameObject.SetActive(_viewStateDic[item.gameObject.name]); \n            }\n        }\n\n        const string Medium = \"_Medium\";\n        const string Low = \"_Low\";\n        private string GetABPath(Scene3DConfig.Config3D config)\n        {\n            if(config.supportQuality)\n            {\n                int level = SettingConfig.CurQualityLevel; \n                if(level <=2)\n                {\n                    return config.abpath+ Low;\n                }else if(level <= 4)\n                {\n                    return config.abpath+ Medium;\n                }else{\n                    return config.abpath;\n                }\n            }else{\n                return config.abpath;\n            }\n        }\n    }\n    \n}", "starcoder_inputs": "<fim_prefix>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System;\nusing Framework.GalaSports.Service;\n\nnamespace PlatformHotfix{\n    public class Loading3DView{\n        public bool isDestroy =false;\n        public List<Action<View3DBase>> loadedCallBackList = new List<Action<View3DBase>>();\n    }\n    public class Scene3DManager\n    {\n        \n        private static Scene3DManager _instance;\n        public static Scene3DManager Instance\n        {\n            get {\n                if(_instance == null)\n                {\n                    _instance = new Scene3DManager();\n                    _instance.Awake();\n                }\n                return _instance; \n            }\n\n        }\n        public GameObject gameObject;\n        public Transform transform;\n        public HomeScene3DPlayers3DView Home3DPlayers3DView;\n        // public Home3DPlayersLodView Home3DPlayersLodView;\n\n        private Dictionary<Type, Scene3DConfig.Config3D> _assetPathDict = new Dictionary<Type, Scene3DConfig.Config3D>();\n\n        private Dictionary<Type, View3DBase> _3DViewDict = new Dictionary<Type, View3DBase>();\n\n        private List<View3DBase> _3DViewList = new List<View3DBase>();\n\n        private Dictionary<Type, Loading3DView> _3DViewAsyncLoadingDict = new Dictionary<Type, Loading3DView>();\n\n        private Dictionary<Type, int> addCountDic = new Dictionary<Type, int>();\n        \n        //private GameObject _mainStage;\n        public void SetHome3DPlayers3DView(Transform transform)\n        {\n            //\u540e\u7eedHomeScene3DPlayers3DView \u79fb\u5230\u70ed\u66f4\u5c42\uff0c\u518d\u53d6\u6d88\u8fd9\u4e2a\u4ee3\u7801\n            Home3DPlayers3DView = transform.Find(\"Home3DPlayers\").GetComponent<HomeScene3DPlayers3DView>();\n            // Home3DPlayersLodView = transform.Find(\"Home3DPlayers_lod\").GetComponent<Home3DPlayersLodView>();\n\n        }\n\n         private void Awake()\n        {\n           GetMainStage();\n           Scene3DConfig.InitConfig(_assetPathDict);\n            if(gameObject == null)\n            {\n                gameObject = new GameObject(\"Scene3D\");\n                transform = gameObject.transform;\n                GameObject.DontDestroyOnLoad(gameObject);\n                gameObject.AddComponent<UpdateManager>();\n            }\n\n            Platform.EventDispatcher.AddEventListener(UpdateManager.Home3DUpdate, Update);\n            Platform.EventDispatcher.AddEventListener(UpdateManager.Home3DLateUpdate, LateUpdate);\n            //\u517c\u5bb9\u975e\u70ed\u66f4\u63a5\u53e3\uff0c \n            Platform.EventDispatcher.AddEventListener<string>(\"Scene3DManager_Hide\", Tmp_Hide); \n            Platform.EventDispatcher.AddEventListener<bool>(\"Scene3DManager_SetSceneActive\",SetSceneActive);\n        }\n\n        public void Destroy()\n        {\n            if(_instance!= null)\n            {\n                foreach (var item in _3DViewDict)\n                {\n                    var cachedObj = item.Value;\n                    cachedObj.OnDisable();\n                    cachedObj.OnDestroy();\n                    ResourceMgr.Instance.UnloadGameObject(cachedObj.gameObject);\n                }\n                _3DViewDict.Clear();\n                _3DViewList.Clear();\n                _3DViewAsyncLoadingDict.Clear();\n\n                Platform.EventDispatcher.RemoveEventListener<string>(\"Scene3DManager_Hide\", Tmp_Hide);\n                Platform.EventDispatcher.RemoveEventListener<bool>(\"Scene3DManager_SetSceneActive\",SetSceneActive);\n                Platform.EventDispatcher.RemoveEventListener(UpdateManager.Home3DUpdate, Update);\n                Platform.EventDispatcher.RemoveEventListener(UpdateManager.Home3DLateUpdate, LateUpdate);\n            }\n            _instance = null;\n            if(this.gameObject)\n            {\n                GameObject.Destroy(this.gameObject);\n                this.gameObject = null;\n            }\n            this.transform = null;\n            this.Home3DPlayers3DView = null;\n            // this.Home3DPlayersLodView = null;\n\n            _assetPathDict.Clear();\n        }\n\n        private static GameObject _mainStage;\n        public GameObject GetMainStage()\n        {\n             if (_mainStage == null)\n            {\n                _mainStage = GameObject.Find(\"StadiumScene\");\n                if (_mainStage == null)\n                {\n                    return new GameObject(\"MainStage\");\n                }\n            }\n            return _mainStage;\n        }\n        public void SetSceneActive(bool isActive)\n        {\n            GameObject sceneObj = GetMainStage();\n            sceneObj?.SetActive(isActive);\n\n            foreach( var item in _3DViewDict)\n            {\n                if(_assetPathDict.ContainsKey(item.Key) && _assetPathDict[item.Key].isInScene<fim_suffix>{\n                        Show(item.Key);\n                    }\n                }\n            }\n            //\u573a\u8fb9\u7279\u6548\u7279\u6b8a\u5904\u7406\n            StadiumSideLines.Instance.gameObject?.SetActive(isActive);\n        }\n\n        public void Update()\n        {\n            for(int i = 0; i<_3DViewList.Count; i++)\n            {\n                if(_3DViewList[i].gameObject.activeInHierarchy && _3DViewList[i].isCanUpdate)\n                {\n                    _3DViewList[i].Update();\n                } \n            }\n        }\n        public void LateUpdate()\n        {\n            for(int i = 0; i<_3DViewList.Count; i++)\n            {\n                if(_3DViewList[i].gameObject.activeInHierarchy && _3DViewList[i].isCanLateUpdate)\n                {\n                    _3DViewList[i].LateUpdate();\n                } \n            }\n        }\n\n        public async GTask<T> Add3DView<T>()where T : View3DBase\n        {\n            T view = null;\n            bool IsComplete = false;\n            Action<View3DBase> loadedCallBack = (v)=>{\n                view = v as T;\n                IsComplete = true;\n            };\n            Add3DView<T>(loadedCallBack);\n            await GAsync.WaitUntil(()=> IsComplete);\n            return view;\n        }\n        public async void Add3DView<T>(Action<View3DBase> loadedCallBack) where T : View3DBase\n        {\n            Type type = typeof(T);\n            if (addCountDic.ContainsKey(type))\n            {\n                addCountDic[type]++;\n            }               \n            else\n                addCountDic.Add(type, 1);\n\n            if(!_assetPathDict.ContainsKey(type))\n            {\n                DebugEX.LogError(\"\u6ca1\u6709\u914d\u7f6e : \"+ type.Name);\n                loadedCallBack?.Invoke(null);\n                return;\n            }\n\n            View3DBase cachedObj;\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                if(!cachedObj.gameObject.activeSelf)\n                {\n                    cachedObj.OnEnable();\n                }\n                cachedObj.gameObject.SetActive(true);\n                loadedCallBack?.Invoke(cachedObj);\n                return;\n            }\n\n\n            if(_3DViewAsyncLoadingDict.ContainsKey(type))\n            {\n                //\u6b63\u5728\u52a0\u8f7d\u4e2d\n                if(loadedCallBack!=null)\n                {\n                    _3DViewAsyncLoadingDict[type].loadedCallBackList.Add(loadedCallBack);\n                }\n                return;\n            }\n            if(loadedCallBack!=null)\n            {\n                Loading3DView loading3dview = new Loading3DView();\n                _3DViewAsyncLoadingDict.Add(type, loading3dview);\n                _3DViewAsyncLoadingDict[type].loadedCallBackList.Add(loadedCallBack);\n            }\n            string asset_path = GetABPath(_assetPathDict[type]);  //_assetPathDict[type].abpath;\n            var obj = await ResourceMgr.Instance.InstantiateAsync(asset_path);\n            T gameObj = Activator.CreateInstance<T>();\n            if(obj!= null)\n            {\n                gameObj.gameObject = obj.result;\n                gameObj.transform = gameObj.gameObject.transform;\n                gameObj.transform.SetParent(this.transform);\n                await gameObj.Awake();\n                await gameObj.Start();\n                gameObj.OnEnable();\n                _3DViewDict.Add(type, gameObj);\n\n                _3DViewList.Add(gameObj);\n                \n            }else{\n                DebugEX.LogError (asset_path + \" \u52a0\u8f7d\u5931\u8d25 \uff01\uff01 \");\n            }\n            if(_3DViewAsyncLoadingDict.ContainsKey(type))\n            {\n                var list = _3DViewAsyncLoadingDict[type];\n                _3DViewAsyncLoadingDict.Remove(type);\n                for(int i = 0;i< list.loadedCallBackList.Count;i++)\n                {\n                    list.loadedCallBackList[i]?.Invoke(gameObj);\n                }\n                \n                if(list.isDestroy)\n                {\n                    Remove3DView<T>();\n                }\n            }\n        }\n\n        public T GetUI3DView<T>() where T : View3DBase\n        {\n            View3DBase cachedObj;\n            _3DViewDict.TryGetValue(typeof(T), out cachedObj);\n            if (cachedObj!= null)\n            {\n                return cachedObj as T;\n            }\n            else\n            {\n                return default(T);\n            }\n        }\n\n        public bool IsHave3DView<T>()where T : View3DBase\n        {\n            return _3DViewDict.ContainsKey(typeof(T));\n        }\n        public void Remove3DView<T>(bool force = false)\n        {\n            View3DBase cachedObj;\n            Type type = typeof(T);\n            if (addCountDic.ContainsKey(type))\n            {\n                if(!force)\n                {\n                    addCountDic[type]--;\n                    if (addCountDic[type] > 0)\n                        return;\n                    else\n                        addCountDic[type] = 0;\n                }else{\n                    addCountDic[type] = 0;\n                }\n            }\n            //\u5982\u679c\u5df2\u5b8c\u6210\u52a0\u8f7d\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                cachedObj.OnDisable();\n                cachedObj.OnDestroy();\n                ResourceMgr.Instance.UnloadGameObject(cachedObj.gameObject);\n                _3DViewDict.Remove(type);\n\n                _3DViewList.Remove(cachedObj);\n                return;\n            }\n            //\u5982\u679c\u5df2\u5728\u52a0\u8f7d\u4e2d\n            Loading3DView cachedAsyncHandler;\n            bool isLoading = _3DViewAsyncLoadingDict.TryGetValue(type, out cachedAsyncHandler);\n            if (isLoading)\n            {\n                cachedAsyncHandler.isDestroy = true;\n            }\n        }\n\n        public void HideOthersExcept<T>()\n        {\n            Type type = typeof(T);\n            foreach (KeyValuePair<Type, View3DBase> item in _3DViewDict)\n            {\n                item.Value.gameObject.SetActive(item.Key == type);\n            }\n        }\n\n        public void Hide<T>()\n        {\n            Type type = typeof(T);\n            Hide(type);\n        }\n\n        private void Hide(Type type)\n        {\n            View3DBase cachedObj;\n            //\u5982\u679c\u5df2\u5b8c\u6210\u52a0\u8f7d\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                cachedObj.gameObject.SetActive(false);\n                cachedObj.OnDisable();\n            }\n        }\n\n        public void Show<T>()\n        {\n            Type type = typeof(T);\n            Show(type);\n        }\n\n        private void Show(Type type)\n        {\n            View3DBase cachedObj;\n            //\u5982\u679c\u5df2\u5b8c\u6210\u52a0\u8f7d\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                cachedObj.gameObject.SetActive(true);\n                cachedObj.OnEnable();\n            }\n        }\n        \n        /// <summary>\n        /// \u8fd9\u4e2a\u63a5\u53e3\u614e\u7528\uff0c\u522b\u8bef\u5220\u522b\u76843Dview\n        /// </summary>\n        public void HideAll() \n        {\n            foreach (KeyValuePair<Type, View3DBase> item in _3DViewDict)\n            {\n                item.Value.gameObject.SetActive(false);\n                item.Value.OnDisable();\n            }\n        }\n\n        //\u517c\u5bb9\u975e\u70ed\u66f4\u63a5\u53e3\uff0c\u4fee\u6539\u6210\u6240\u6709\u70ed\u66f4\u4ee3\u7801\u540e\u5c31\u5220\u6389\n        private void Tmp_Hide(string ClassName)\n        {\n            Type type = Type.GetType(ClassName);\n            View3DBase cachedObj;\n            //\u5982\u679c\u5df2\u5b8c\u6210\u52a0\u8f7d\n            bool isLoaded = _3DViewDict.TryGetValue(type, out cachedObj);\n            if (isLoaded)\n            {\n                cachedObj.gameObject.SetActive(false);\n                cachedObj.OnDisable();\n            }\n        }\n        public Dictionary<string,bool> GetView3DObjState()\n        {\n            Dictionary<string,bool> _viewStateDic = new Dictionary<string,bool>();\n            foreach(var item in _3DViewList)\n            {\n                _viewStateDic.Add(item.gameObject.name,item.gameObject.activeSelf);\n            }\n            return _viewStateDic;\n        }\n        public void SetView3DObjState(Dictionary<string,bool> _viewStateDic)\n        {\n            foreach(var item in _3DViewList)\n            {\n                if(_viewStateDic.ContainsKey(item.gameObject.name))\n                item.gameObject.SetActive(_viewStateDic[item.gameObject.name]); \n            }\n        }\n\n        const string Medium = \"_Medium\";\n        const string Low = \"_Low\";\n        private string GetABPath(Scene3DConfig.Config3D config)\n        {\n            if(config.supportQuality)\n            {\n                int level = SettingConfig.CurQualityLevel; \n                if(level <=2)\n                {\n                    return config.abpath+ Low;\n                }else if(level <= 4)\n                {\n                    return config.abpath+ Medium;\n                }else{\n                    return config.abpath;\n                }\n            }else{\n                return config.abpath;\n            }\n        }\n    }\n    \n}<fim_middle>"}
{"inputs": "using System.Collections.Generic;\nusing UnityEngine;\nusing Framework.GalaSports.Service;\npublic struct HotFixLowPlayerInfo\n{\n    public Texture jerseyTex;\n    public bool isGK;\n    public string playerName;\n}\npublic struct HotFixHighPlayerInfo\n{\n    public string teamId;\n    public int playerId;\n    public int headId;\n    public string playerName;\n    public string playerNumber;\n    public int playerHeight;\n    public int playerWeight;\n    public SkinColorForTexture playerSkinColor;\n    public string jerseyCode;\n    public int shoesId;\n    public bool isGK;\n    public int position;\n    public bool isStarter; // \u662f\u5426\u662f\u9996\u53d1:true:\u662f   false:\u66ff\u8865\n    public bool isCaptial;\n    public Vector3 skinColorCorrectionValue;\n}\npublic class HotFixHighPolyPlayerInstantiate\n{\n    public List<GameObject> highPolyPlayers;\n    public List<string> jerseyCodes;\n    public List<int> headIds;\n    public GameObject gameObject;\n    public Transform transform;\n    bool isCharactersDestroyed = false;\n    // Start is called before the first frame update\n\n    public void Init()\n    {\n        highPolyPlayers = new List<GameObject>();\n        jerseyCodes = new List<string>();\n        headIds = new List<int>();\n    }\n    void InitData()\n    {\n        for(int i=0;i<1;i++)\n        { //\u4ee5\u4e0b\u6570\u636e\u5728\u6b63\u5f0f\u751f\u4ea7\u73af\u5883\u4e2d\u5e94\u8be5\u7531\u524d\u7aef\u4f20\u7ed9TA\n            int playerHeadModelId = playerHeadModelIds3[i]; //\u8138\u6a213D\u8d44\u6e90\u7684id\n            int playerHeight = playerHeights3[i]; //\u8eab\u9ad8\n            int playerWeight = playerWeights3[i]; //\u4f53\u91cd\uff0c\u5f71\u54cd\u7403\u5458\u4f53\u578b\u80d6\u7626\n            SkinColorForTexture playerSkinColor = playerSkinColors3[i]; //\u80a4\u8272\n            string jerseyCode = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(jerseyId, playerShirtNumbers3[i].ToString(), playerNames3[i]); //\u7403\u8863Id\u5b57\u7b26\u4e32\uff0c\u8fd9\u91cc\u4f7f\u7528ApplyNameAndNumberToJerseyId\u65b9\u6cd5\u628a\u7403\u5458\u540d\u5b57\u548c\u7403\u5458\u53f7\u7801\u62fc\u5230\u7403\u8863Id\u5b57\u7b26\u4e32\u4e2d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u751f\u6210\u5177\u6709\u5bf9\u5e94\u540d\u5b57\u548c\u53f7\u7801\u7684\u7403\u8863\u8d34\u56fe\n            int playerShoesType = PlayerShoeTypes3[i]; //\u7403\u5458\u978b\u5b50\u6837\u5f0f\n            int playerId = playerCfgIds3[i]; //\u7403\u5458\u5728\u914d\u7f6e\u8868\u91cc\u7684id\n            bool isGK = playerIsGKs3[i]; //\u662f\u4e0d\u662f\u5b88\u95e8\u5458\uff0c\u5b88\u95e8\u5458\u4f1a\u6234\u624b\u5957\uff0c\u7403\u8863\u4e5f\u4e0d\u4e00\u6837\n            string playerName = playerNames3[i]; //\u7403\u5458\u540d\u5b57\n            string playerShirtNumber = playerShirtNumbers3[i].ToString(); //\u7403\u8863\u53f7\u7801\n            //\u4ee5\u4e0a\u6570\u636e\u5728\u6b63\u5f0f\u751f\u4ea7\u73af\u5883\u4e2d\u5e94\u8be5\u7531\u524d\u7aef\u4f20\u7ed9TA   \n        }\n       \n\n    }\n    //1.a\n    //\u9884\u52a0\u8f7d\u4eba\u7269\u76f8\u5173\u8d44\u6e90\uff08\u540c\u6b65\u6267\u884c\uff09,\u9884\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\u5b9e\u4f8b\u5316\u4eba\u7269\u5c31\u4e0d\u4f1a\u518d\u4ea7\u751f\u52a0\u8f7d\u8d44\u6e90\u7684\u8017\u65f6\n    //\u8fd9\u91cc\u4f7f\u7528\u7684\u4ecd\u7136\u662f\u5f02\u6b65\u7684LoadAssetAsync\uff0c\u53ea\u662f\u5916\u90e8\u8c03\u7528\u662f\u540c\u6b65\u7684\uff0c\u4eba\u6570\u591a\u7684\u65f6\u5019\u4f1a\u9020\u6210\u4e3b\u7ebf\u7a0b\u5361\u987f\u3002\u4eba\u6570<=3\u4eba\u65f6\uff0c\u6216\u8005\u6709\u8bfb\u6761\u754c\u9762\u65f6\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\n    public void PreloadCharacterResources(List<HotFixHighPlayerInfo> playerInfos, string[] clothNames)\n    {\n        isCharactersDestroyed = false;\n        headIds.Clear();\n        jerseyCodes.Clear();\n        for (int i = 0; i < playerInfos.Count; i++)\n            headIds.Add(playerInfos[i].headId);\n        PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(headIds.ToArray());\n        ClothDataLoader.AsyncPreLoadMultiClotDataSet(clothNames);\n        for (int i = 0; i <playerInfos.Count; i++)\n        {\n            if (playerInfos[i].isGK)\n            {\n                //\u5b88\u95e8\u5458\u76ee\u524d\u662f\u5199\u6b7b\u7684\u7403\u8863\uff0c\u4e0d\u9700\u8981\u989d\u5916\u751f\u6210\n                continue;\n            }\n            string jerseyCode = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(playerInfos[i].jerseyCode, playerInfos[i].playerNumber, playerInfos[i].playerName);\n            jerseyCodes.Add(jerseyCode);\n            PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(jerseyCode);\n            PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(jerseyCode);\n        }\n    }\n\n    //2.a\n    //\u5b9e\u4f8b\u5316\u4eba\u7269\uff08\u540c\u6b65\u6267\u884c\uff09\uff0c\u4eba\u6570<=3\u4eba\u65f6\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\n    //\u5982\u679c\u6ca1\u6709\u6267\u884c\u9884\u52a0\u8f7d\u8d44\u6e90\u7684\u6b65\u9aa4\uff0c\u5c31\u4f1a\u5728\u5b9e\u4f8b\u5316\u4eba\u7269\u7684\u65f6\u5019\u6267\u884c\u52a0\u8f7d\u8d44\u6e90\uff0c\u4ea7\u751f\u8017\u65f6\n    //\u521d\u59cb\u5316\u9636\u6bb5\u7684\u8bbe\u7f6e\u6750\u8d28\u5c5e\u6027\u8017\u65f6\u8f83\u957f\uff0c\u5982\u679c\u4eba\u6570\u8f83\u591a\uff0c\u4f1a\u5bfc\u81f4\u4e3b\u7ebf\u7a0b\u5361\u987f\n    public void InstantiateCharacters(List<HotFixHighPlayerInfo> playerInfos,string playerInstantiatePath, RuntimeAnimatorController runtimeAnimator)\n    {\n        isCharactersDestroyed = false;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            GameObject player =ResourceMgr.Instance.Instantiate(playerInstantiatePath) ;\n\n            #region \u5b9a\u4e49\u7403\u5458\u5916\u89c2\n            HighPolyPlayerAppearanceController playerAppearance = player.GetComponent<HighPolyPlayerAppearanceController>();\n            playerAppearance.SetPlayerAppearance(playerInfos[i].headId, playerInfos[i].playerHeight, playerInfos[i].playerWeight, playerInfos[i].playerSkinColor, playerInfos[i].skinColorCorrectionValue, playerInfos[i].jerseyCode, playerInfos[i].shoesId, playerInfos[i].playerId, playerInfos[i].isGK, playerInfos[i].playerName,\n               playerInfos[i].playerNumber);\n            HighPolyPlayerAnimationController playerAnimation = player.GetComponent<HighPolyPlayerAnimationController>();\n            //\u5982\u679cGameObject player\u4e0a\u6ca1\u6709\u6302\u8f7d\u9ed8\u8ba4Animator\uff0c\u9700\u8981\u53e6\u5916\u6307\u5b9aanimator\uff0c\u5c31\u7528\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u6307\u5b9a\n            playerAnimation.MyAnimator.runtimeAnimatorController = runtimeAnimator;\n            playerAnimation.Init(true, false);\n            playerAnimation.HideFootball();\n            #endregion\n            highPolyPlayers.Add(player);\n        }\n    }\n\n\n    //1.b\n    //\u9884\u52a0\u8f7d\u4eba\u7269\u76f8\u5173\u8d44\u6e90\uff08\u5f02\u6b65\u6267\u884c\uff09,\u9884\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\u5b9e\u4f8b\u5316\u4eba\u7269\u5c31\u4e0d\u4f1a\u518d\u4ea7\u751f\u52a0\u8f7d\u8d44\u6e90\u7684\u8017\u65f6\n    //\u57fa\u672c\u4e0a\u4e0d\u4f1a\u5f15\u8d77\u4e3b\u7ebf\u7a0b\u5361\u987f\uff0c\u4f46\u5b9e\u9645\u52a0\u8f7d\u8017\u65f6\u4f1a\u6bd4\u540c\u6b65\u6267\u884c\u66f4\u957f\uff0c\u6309\u9700\u9009\u62e9\u3002\u4eba\u6570>3\u4eba\u4e14\u6ca1\u6709\u8bfb\u6761\u754c\u9762\u65f6\u5efa\u8bae\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\n    public async GTask PreloadCharacterResourcesAsync(List<HotFixHighPlayerInfo> playerInfos, string[] clothNames)\n    {\n        isCharactersDestroyed = false;\n        headIds.Clear();\n        jerseyCodes.Clear();\n        for (int i = 0; i < playerInfos.Count; i++)\n            headIds.Add(playerInfos[i].headId);\n        await PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(headIds.ToArray());\n        await ClothDataLoader.AsyncPreLoadMultiClotDataSet(clothNames);\n\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            if (playerInfos[i].isGK)\n            {\n                //\u5b88\u95e8\u5458\u76ee\u524d\u662f\u5199\u6b7b\u7684\u7403\u8863\uff0c\u4e0d\u9700\u8981\u989d\u5916\u751f\u6210\n                continue;\n            }\n            string jerseyCode = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(playerInfos[i].jerseyCode, playerInfos[i].playerNumber, playerInfos[i].playerName);\n            jerseyCodes.Add(jerseyCode);\n            await PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(jerseyCode);\n            await PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(jerseyCode);\n            if (isCharactersDestroyed)\n            {\n                //\u9632\u6b62\u4eba\u7269\u9500\u6bc1\u540e\uff0c\u8d44\u6e90\u9884\u52a0\u8f7d\u7684\u7ebf\u7a0b\u7ee7\u7eed\u6267\u884c\n                return;\n            }\n        }\n    }\n\n    //2.b\n    //\u5b9e\u4f8b\u5316\u4eba\u7269\uff08\u5f02\u6b65\u6267\u884c\uff09\uff0c\u4eba\u6570>3\u4eba\u65f6\u5efa\u8bae\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\n    //\u5982\u679c\u6ca1\u6709\u6267\u884c\u9884\u52a0\u8f7d\u8d44\u6e90\u7684\u6b65\u9aa4\uff0c\u5c31\u4f1a\u5728\u5b9e\u4f8b\u5316\u4eba\u7269\u7684\u65f6\u5019\u6267\u884c\u52a0\u8f7d\u8d44\u6e90\uff0c\u4ea7\u751f\u8017\u65f6\n    //\u521d\u59cb\u5316\u9636\u6bb5\u7684\u8bbe\u7f6e\u6750\u8d28\u5c5e\u6027\u8017\u65f6\u8f83\u957f\uff0c\u56e0\u6b64\u6bcf\u5b9e\u4f8b\u5316\u4e00\u4e2a\u4eba\u7269\u90fdWaitForNextFrame\uff0c\u5c06\u8fd9\u4e2a\u5f00\u9500\u5e73\u644a\u5230\u4e0d\u540c\u7684\u5e27\uff0c\u9632\u6b62\u4e3b\u7ebf\u7a0b\u5361\u987f\n    public async void InstantiateCharactersAsync(List<HotFixHighPlayerInfo> playerInfos, string playerInstantiatePath,Transform parent)\n    {\n        isCharactersDestroyed = false;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            GameObject player = (await ResourceMgr.Instance.InstantiateAsync(playerInstantiatePath)).result;\n            player.transform.name = \"TeamPlayer\" + i.ToString();\n            player.SetActive(false);\n            #region \u5b9a\u4e49\u7403\u5458\u5916\u89c2\n            HighPolyPlayerAppearanceController playerAppearance = player.GetComponent<HighPolyPlayerAppearanceController>();\n            playerAppearance.SetPlayerAppearance(playerInfos[i].headId, playerInfos[i].playerHeight, playerInfos[i].playerWeight, playerInfos[i].playerSkinColor, playerInfos[i].skinColorCorrectionValue, playerInfos[i].jerseyCode, playerInfos[i].shoesId, playerInfos[i].playerId, playerInfos[i].isGK, playerInfos[i].playerName,\n                playerInfos[i].playerNumber);\n            #endregion\n            HighPolyPlayerAnimationController playerAnimation = player.GetComponent<HighPolyPlayerAnimationController>();\n            //\u5982\u679cGameObject player\u4e0a\u6ca1\u6709\u6302\u8f7d\u9ed8\u8ba4Animator\uff0c\u9700\u8981\u53e6\u5916\u6307\u5b9aanimator\uff0c\u5c31\u7528\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u6307\u5b9a\n            playerAnimation.Init(true, false);\n            playerAnimation.HideFootball();\n            //\u628a\u5df2\u7ecf\u5b9e\u4f8b\u5316\u7684\u4eba\u7269\u632a\u5230\u89c6\u7ebf\u5916\n            player.transform.localPosition = new Vector3(0, 0, 500);\n            player.transform.localEulerAngles = Vector3.zero;\n            player.transform.parent = parent;\n            highPolyPlayers.Add(player);\n          //  await GAsync.WaitNextFrame();\n\n            if (isCharactersDestroyed)\n            {\n                //\u9632\u6b62\u5f02\u6b65\u6267\u884c\u65f6\uff0c\u5728\u8c03\u7528\u9500\u6bc1\u65b9\u6cd5\u540e\u4ecd\u7136\u6709\u4eba\u7269\u5b9e\u4f8b\u5316\u51fa\u6765\n                GameObject.Destroy(player);\n                highPolyPlayers.Clear();\n                return;\n            }\n        }\n    }\n\n    public async GTask InstantiateCharactersAsyncGTask(List<HotFixHighPlayerInfo> playerInfos, string playerInstantiatePath, Transform parent)\n    {\n        isCharactersDestroyed = false;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            GameObject player = (await ResourceMgr.Instance.InstantiateAsync(playerInstantiatePath)).result;\n            player.transform.name = \"TeamPlayer\" + i.ToString();\n            player.SetActive(false);\n            #region \u5b9a\u4e49\u7403\u5458\u5916\u89c2\n            HighPolyPlayerAppearanceController playerAppearance = player.GetComponent<HighPolyPlayerAppearanceController>();\n            playerAppearance.SetPlayerAppearance(playerInfos[i].headId, playerInfos[i].playerHeight, playerInfos[i].playerWeight, playerInfos[i].playerSkinColor, playerInfos[i].skinColorCorrectionValue, playerInfos[i].jerseyCode, playerInfos[i].shoesId, playerInfos[i].playerId, playerInfos[i].isGK, playerInfos[i].playerName,\n                playerInfos[i].playerNumber);\n            #endregion\n            HighPolyPlayerAnimationController playerAnimation = player.GetComponent<HighPolyPlayerAnimationController>();\n            //\u5982\u679cGameObject player\u4e0a\u6ca1\u6709\u6302\u8f7d\u9ed8\u8ba4Animator\uff0c\u9700\u8981\u53e6\u5916\u6307\u5b9aanimator\uff0c\u5c31\u7528\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u6307\u5b9a\n            playerAnimation.Init(true, false);\n            playerAnimation.HideFootball();\n            //\u628a\u5df2\u7ecf\u5b9e\u4f8b\u5316\u7684\u4eba\u7269\u632a\u5230\u89c6\u7ebf\u5916\n            player.transform.localPosition = new Vector3(0, 0, 500);\n            player.transform.localEulerAngles = Vector3.zero;\n            player.transform.parent = parent;\n            highPolyPlayers.Add(player);\n            //  await GAsync.WaitNextFrame();\n\n            if (isCharactersDestroyed)\n            {\n                //\u9632\u6b62\u5f02\u6b65\u6267\u884c\u65f6\uff0c\u5728\u8c03\u7528\u9500\u6bc1\u65b9\u6cd5\u540e\u4ecd\u7136\u6709\u4eba\u7269\u5b9e\u4f8b\u5316\u51fa\u6765\n                GameObject.Destroy(player);\n                highPolyPlayers.Clear();\n                return;\n            }\n        }\n    }\n    //\u4e00\u4e2a\u955c\u5934\u7684\u5e03\u6599\u4f1a\u4e00\u8d77\u5378\u8f7d\uff0c\u4e0d\u9700\u8981\u5728\u5378\u8f7d\u7403\u5458\u7684\u65f6\u5019\u5355\u72ec\u5904\u7406\n    public void UnloadCharaters(int startIndex,int endIndex)\n    {\n        for (int i =startIndex; i <endIndex; i++)\n        {\n            if (highPolyPlayers[i] != null&&endIndex<highPolyPlayers.Count)\n            {\n                ResourceMgr.Instance.UnloadGameObject(highPolyPlayers[i].gameObject);\n                GameObject.Destroy(highPolyPlayers[i]);\n                highPolyPlayers[i] = null;\n            }\n        }\n    }\n    //3.\n    //\u9500\u6bc1\u4eba\u7269\u5e76\u5378\u8f7d\u8d44\u6e90\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728OnDestroy\u65f6\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u8c03\u7528\n    public void DestroyCharaters()\n    {\n        for (int i = 0; i < highPolyPlayers.Count; i++)\n        {\n            if (highPolyPlayers[i] != null)\n            {\n                ResourceMgr.Instance.UnloadGameObject(highPolyPlayers[i].gameObject);\n                GameObject.Destroy(highPolyPlayers[i]);\n                highPolyPlayers[i] = null;\n            }\n        }\n        isCharactersDestroyed = true;\n        if(highPolyPlayers!=null)\n          highPolyPlayers.Clear();\n        ClothDataLoader.UnloadAllPreLoadedClothDatas();\n        //Destroy\u6240\u6709player GameObject\u540e\uff0c\u5c31\u5df2\u7ecf\u628a\u6240\u6709\u4eba\u7269\u76f8\u5173\u7684\u8d44\u6e90\u5378\u8f7d\u5e72\u51c0\u4e86\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u627e\u9ec4\u667a\u6656\u4feebug\n\n\n        //\u5f02\u6b65\u5b9e\u4f8b\u5316\u4eba\u7269\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4eba\u7269\u6ca1\u5b9e\u4f8b\u5316\u51fa\u6765\uff0c\u5c31\u8c03\u7528\u4e86\u9500\u6bc1\u4eba\u7269\u7684\u65b9\u6cd5\u3002\u8fd9\u65f6\u53ef\u80fd\u4f1a\u6709\u9884\u52a0\u8f7d\u7684\u8d44\u6e90\u672a\u88ab\u4eba\u7269\u5f15\u7528\u5230\uff0c\u81ea\u7136\u4e0d\u4f1a\u968f\u7740\u4eba\u7269\u9500\u6bc1\u800c\u5378\u8f7d\u3002\u56e0\u6b64\u6211\u4eec\u8981\u624b\u52a8\u5378\u8f7d\u5f15\u7528\u8ba1\u6570\u4e3a0\u7684\u8d44\u6e90\n        PlayerHeadDataLoader.UnloadUnreferencedHeadData();\n        PlayerJerseyDataLoader.UnloadUnreferencedJerseyDatas();\n        PlayerSockDataLoader.UnloadUnreferencedSockDatas();\n\n        PlayerHeadDataLoader.UnloadMultiPreLoadedHeadDatas(headIds.ToArray());\n        PlayerJerseyDataLoader.UnloadMultiPreLoadedJerseyDatas(jerseyCodes.ToArray());\n        //\u4e0b\u9762\u4e24\u53e5\u4f1a\u5f3a\u5236\u5378\u8f7d\u6240\u6709\u4eba\u7269\u76f8\u5173\u7684\u8d44\u6e90\uff0c\u5982\u679c\u4f60\u786e\u5b9a\u4e00\u4e2a\u9636\u6bb5\u7ed3\u675f\u4e86\uff08\u6bd4\u5982\u9000\u51fa\u767b\u5f55\u573a\u666f\u8fdb\u5165\u4e3b\u754c\u9762\u3001\u9000\u51fa\u4e3b\u754c\u9762\u8fdb\u5165\u6bd4\u8d5b\u573a\u666f\u3001\u70ed\u8eab\u52a8\u753b\u7ed3\u675f\u7b49\u7b49\uff09\uff0c\u53ef\u4ee5\u8c03\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff0c\u907f\u514d\u6709\u4eba\u7269\u8d44\u6e90\u6ca1\u5378\u8f7d\u6389\u3002\n        //\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981player\u7684GameObject\u88ab\u9500\u6bc1\uff0c\u5c31\u4f1a\u628a\u8d44\u6e90\u4e00\u5e76\u5378\u8f7d\u5e72\u51c0\u3002\u4ee5\u4e0b\u7684\u65b9\u6cd5\u53ea\u662f\u4e00\u79cd\u4fdd\u5e95\u63aa\u65bd\u3002\n        //\u5982\u679c\u5728\u573a\u666f\u5185\u8fd8\u6709\u5176\u4ed6\u9ad8\u6a21\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\uff0c\u4f1a\u5bfc\u81f4\u8fd9\u4e9b\u9ad8\u6a21\u7684\u8d44\u6e90\u4e22\u5931\u3002\n        //PlayerHeadDataLoader.UnloadAllPreLoadedHeadDatas();\n        //PlayerJerseyDataLoader.UnloadAllPreLoadedJerseyDatas();\n        if (headIds!=null)\n          headIds.Clear();\n        if(jerseyCodes!=null)\n          jerseyCodes.Clear();\n       // GameObject.Destroy(gameObject);\n    }\n\n    private void OnDestroy()\n    {\n        DestroyCharaters();\n    }\n\n\n\n    // Update is called once per frame\n\n\n    #region \u5199\u6b7b\u7684\u7403\u5458\u914d\u7f6e\u6570\u636e\n    static int[] playerCfgIds = new int[11]\n    {\n        1,2,3,4,8,10,26,5,19,7,13\n    };\n    static int[] playerHeadModelIds = new int[11]\n    {\n        1,2,4,5,19,8,22,6,35,7,11\n    };\n    static SkinColorForTexture[] playerSkinColors = new SkinColorForTexture[11]\n    {\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.LATIN,\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.BLACK,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.WHITE\n    };\n    static string[] playerNames = new string[11]\n    {\n        \"MESSI\",\n        \"RONALDO\",\n        \"NEYMAR\",\n        \"DE BRUYNE\",\n        \"SALAH\",\n        \"MBAPPE\",\n        \"BENZEMA\",\n        \"OBLAK\",\n        \"KANTE\",\n        \"VAN DIJK\",\n        \"KANE\",\n    };\n    static int[] playerShirtNumbers = new int[11]\n    {\n        30,7,10,17,11,7,9,13,7,4,10\n    };\n    static int[] PlayerShoeTypes = new int[11]\n    {\n        1,2,3,4,3,1,2,1,2,2,3\n    };\n    static int[] playerHeights = new int[11]\n    {\n        170,187,175,180,175,177,185,187,167,193,187\n    };\n    static int[] playerWeights = new int[11]\n    {\n        72,83,68,69,71,73,81,87,69,92,88\n    };\n    static bool[] playerIsGKs = new bool[11]\n    {\n        false,false,false,false,false,false,false,true,false,false,false\n    };\n    static string[] playerAnimationNames = new string[11]\n    {\n        \"Cultivate_Idle1\",\n        \"Cultivate_Idle1_SmallMotion1\",\n        \"Cultivate_Idle1_SmallMotion2\",\n        \"Cultivate_Idle1_SmallMotion3\",\n        \"Cultivate_Idle1_SmallMotion4\",\n        \"Cultivate_Idle1_SmallMotion5\",\n        \"Cultivate_Idle1_Upgrade1\",\n        \"Cultivate_Idle1_Upgrade2\",\n        \"Cultivate_Idle1_Upgrade3\",\n        \"Cultivate_Idle1_Upgrade4\",\n        \"Cultivate_Idle1_Upgrade5\"\n    };\n    static string[] clothDataNames = new string[11]\n    {\n        \"Idle1\",\n        \"Idle1_SmallMotion1\",\n        \"Idle1_SmallMotion2\",\n        \"Idle1_SmallMotion3\",\n        \"Idle1_SmallMotion4\",\n        \"Idle1_SmallMotion5\",\n        \"Idle1_Upgrade1\",\n        \"Idle1_Upgrade2\",\n        \"Idle1_Upgrade3\",\n        \"Idle1_Upgrade4\",\n        \"Idle1_Upgrade5\"\n    };\n    static string jerseyId = \"10_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\";\n\n\n\n    static int[] playerCfgIds3 = new int[3]\n{\n        1,2,3\n};\n    static int[] playerHeadModelIds3 = new int[3]\n    {\n        1,2,4\n    };\n    static SkinColorForTexture[] playerSkinColors3 = new SkinColorForTexture[3]\n    {\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.ASIAN,\n    };\n    static string[] playerNames3 = new string[3]\n    {\n        \"MESSI\",\n        \"RONALDO\",\n        \"NEYMAR\",\n    };\n    static int[] playerShirtNumbers3 = new int[3]\n    {\n        30,7,10,\n    };\n    static int[] PlayerShoeTypes3 = new int[3]\n    {\n        1,2,3,\n    };\n    static int[] playerHeights3 = new int[3]\n    {\n        170,187,175\n    };\n    static int[] playerWeights3 = new int[3]\n    {\n        72,83,68,\n    };\n    static bool[] playerIsGKs3 = new bool[3]\n    {\n        false,false,false,\n    };\n    static string[] playerAnimationNames3 = new string[3]\n    {\n        \"Cultivate_Idle1\",\n        \"Cultivate_Idle1_SmallMotion1\",\n        \"Cultivate_Idle1_SmallMotion2\",\n    };\n    static string[] clothDataNames3 = new string[3]\n    {\n        \"Idle1\",\n        \"Idle1_SmallMotion1\",\n        \"Idle1_SmallMotion2\",\n    };\n    #endregion\n}\n", "cropped_inputs": "using System.Collections.Generic;\nusing UnityEngine;\nusing Framework.GalaSports.Service;\npublic struct HotFixLowPlayerInfo\n{\n    public Texture jerseyTex;\n    public bool isGK;\n    public string playerName;\n}\npublic struct HotFixHighPlayerInfo\n{\n    public string teamId;\n    public int playerId;\n    public int headId;\n    public string playerName;\n    public string playerNumber;\n    public int playerHeight;\n    public int playerWeight;\n    public SkinColorForTexture playerSkinColor;\n    public string jerseyCode;\n    public int shoesId;\n    public bool isGK;\n    public int position;\n    public bool isStarter; // \u662f\u5426\u662f\u9996\u53d1:true:\u662f   false:\u66ff\u8865\n    public bool isCaptial;\n    public Vector3 skinColorCorrectionValue;\n}\npublic class HotFixHighPolyPlayerInstantiate\n{\n    public List<GameObject> highPolyPlayers;\n    public List<string> jerseyCodes;\n    public List<int> headIds;\n    public GameObject gameObject;\n    public Transform transform;\n    bool isCharactersDestroyed = false;\n    // Start is called before the first frame update\n\n    public void Init()\n    {\n        highPolyPlayers = new List<GameObject>();\n        jerseyCodes = new List<string>();\n        headIds = new List<int>();\n    }\n    void InitData()\n    {\n        for(int i=0;i<1;i++)\n        { //\u4ee5\u4e0b\u6570\u636e\u5728\u6b63\u5f0f\u751f\u4ea7\u73af\u5883\u4e2d\u5e94\u8be5\u7531\u524d\u7aef\u4f20\u7ed9TA\n            int playerHeadModelId = playerHeadModelIds3[i]; //\u8138\u6a213D\u8d44\u6e90\u7684id\n            int playerHeight = playerHeights3[i]; //\u8eab\u9ad8\n            int playerWeight = playerWeights3[i]; //\u4f53\u91cd\uff0c\u5f71\u54cd\u7403\u5458\u4f53\u578b\u80d6\u7626\n            SkinColorForTexture playerSkinColor = playerSkinColors3[i]; //\u80a4\u8272\n            string jerseyCode = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(jerseyId, playerShirtNumbers3[i].ToString(), playerNames3[i]); //\u7403\u8863Id\u5b57\u7b26\u4e32\uff0c\u8fd9\u91cc\u4f7f\u7528ApplyNameAndNumberToJerseyId\u65b9\u6cd5\u628a\u7403\u5458\u540d\u5b57\u548c\u7403\u5458\u53f7\u7801\u62fc\u5230\u7403\u8863Id\u5b57\u7b26\u4e32\u4e2d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u751f\u6210\u5177\u6709\u5bf9\u5e94\u540d\u5b57\u548c\u53f7\u7801\u7684\u7403\u8863\u8d34\u56fe\n            int playerShoesType = PlayerShoeTypes3[i]; //\u7403\u5458\u978b\u5b50\u6837\u5f0f\n            int playerId = playerCfgIds3[i]; //\u7403\u5458\u5728\u914d\u7f6e\u8868\u91cc\u7684id\n            bool isGK = playerIsGKs3[i]; //\u662f\u4e0d\u662f\u5b88\u95e8\u5458\uff0c\u5b88\u95e8\u5458\u4f1a\u6234\u624b\u5957\uff0c\u7403\u8863\u4e5f\u4e0d\u4e00\u6837\n            string playerName = playerNames3[i]; //\u7403\u5458\u540d\u5b57\n            string playerShirtNumber = playerShirtNumbers3[i].ToString(); //\u7403\u8863\u53f7\u7801\n            //\u4ee5\u4e0a\u6570\u636e\u5728\u6b63\u5f0f\u751f\u4ea7\u73af\u5883\u4e2d\u5e94\u8be5\u7531\u524d\u7aef\u4f20\u7ed9TA   \n        }\n       \n\n    }\n    //1.a\n    //\u9884\u52a0\u8f7d\u4eba\u7269\u76f8\u5173\u8d44\u6e90\uff08\u540c\u6b65\u6267\u884c\uff09,\u9884\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\u5b9e\u4f8b\u5316\u4eba\u7269\u5c31\u4e0d\u4f1a\u518d\u4ea7\u751f\u52a0\u8f7d\u8d44\u6e90\u7684\u8017\u65f6\n    //\u8fd9\u91cc\u4f7f\u7528\u7684\u4ecd\u7136\u662f\u5f02\u6b65\u7684LoadAssetAsync\uff0c\u53ea\u662f\u5916\u90e8\u8c03\u7528\u662f\u540c\u6b65\u7684\uff0c\u4eba\u6570\u591a\u7684\u65f6\u5019\u4f1a\u9020\u6210\u4e3b\u7ebf\u7a0b\u5361\u987f\u3002\u4eba\u6570<=3\u4eba\u65f6\uff0c\u6216\u8005\u6709\u8bfb\u6761\u754c\u9762\u65f6\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\n    public void PreloadCharacterResources(List<HotFixHighPlayerInfo> playerInfos, string[] clothNames)\n    {\n        isCharactersDestroyed = false;\n        headIds.Clear();\n        jerseyCodes.Clear();\n        for (int i = 0; i < playerInfos.Count; i++)\n            headIds.Add(playerInfos[i].headId);\n        PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(headIds.ToArray());\n        ClothDataLoader.AsyncPreLoadMultiClotDataSet(clothNames);\n        for (int i = 0; i <playerInfos.Count; i++)\n        {\n            if (playerInfos[i].isGK)\n            {\n                //\u5b88\u95e8\u5458\u76ee\u524d\u662f\u5199\u6b7b\u7684\u7403\u8863\uff0c\u4e0d\u9700\u8981\u989d\u5916\u751f\u6210\n                continue;\n            }\n            string jerseyCode = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(playerInfos[i].jerseyCode, playerInfos[i].playerNumber, playerInfos[i].playerName);\n            jerseyCodes.Add(jerseyCode);\n            PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(jerseyCode);\n            PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(jerseyCode);\n        }\n    }\n\n    //2.a\n    //\u5b9e\u4f8b\u5316\u4eba\u7269\uff08\u540c\u6b65\u6267\u884c\uff09\uff0c\u4eba\u6570<=3\u4eba\u65f6\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\n    //\u5982\u679c\u6ca1\u6709\u6267\u884c\u9884\u52a0\u8f7d\u8d44\u6e90\u7684\u6b65\u9aa4\uff0c\u5c31\u4f1a\u5728\u5b9e\u4f8b\u5316\u4eba\u7269\u7684\u65f6\u5019\u6267\u884c\u52a0\u8f7d\u8d44\u6e90\uff0c\u4ea7\u751f\u8017\u65f6\n    //\u521d\u59cb\u5316\u9636\u6bb5\u7684\u8bbe\u7f6e\u6750\u8d28\u5c5e\u6027\u8017\u65f6\u8f83\u957f\uff0c\u5982\u679c\u4eba\u6570\u8f83\u591a\uff0c\u4f1a\u5bfc\u81f4\u4e3b\u7ebf\u7a0b\u5361\u987f\n    public void InstantiateCharacters(List<HotFixHighPlayerInfo> playerInfos,string playerInstantiatePath, RuntimeAnimatorController runtimeAnimator)\n    {\n        isCharactersDestroyed = false;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            GameObject player =ResourceMgr.Instance.Instantiate(playerInstantiatePath) ;\n\n            #region \u5b9a\u4e49\u7403\u5458\u5916\u89c2\n            HighPolyPlayerAppearanceController playerAppearance = player.GetComponent<HighPolyPlayerAppearanceController>();\n            playerAppearance.SetPlayerAppearance(playerInfos[i].headId, playerInfos[i].playerHeight, playerInfos[i].playerWeight, playerInfos[i].playerSkinColor, playerInfos[i].skinColorCorrectionValue, playerInfos[i].jerseyCode, playerInfos[i].shoesId, playerInfos[i].playerId, playerInfos[i].isGK, playerInfos[i].playerName,\n               playerInfos[i].playerNumber);\n            HighPolyPlayerAnimationController playerAnimation = player.GetComponent<HighPolyPlayerAnimationController>();\n            //\u5982\u679cGameObject player\u4e0a\u6ca1\u6709\u6302\u8f7d\u9ed8\u8ba4Animator\uff0c\u9700\u8981\u53e6\u5916\u6307\u5b9aanimator\uff0c\u5c31\u7528\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u6307\u5b9a\n            playerAnimation.MyAnimator.runtimeAnimatorController = runtimeAnimator;\n            playerAnimation.Init(true, false);\n            playerAnimation.HideFootball();\n            #endregion\n            highPolyPlayers.Add(player);\n        }\n    }\n\n\n    //1.b\n    //\u9884\u52a0\u8f7d\u4eba\u7269\u76f8\u5173\u8d44\u6e90\uff08\u5f02\u6b65\u6267\u884c\uff09,\u9884\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\u5b9e\u4f8b\u5316\u4eba\u7269\u5c31\u4e0d\u4f1a\u518d\u4ea7\u751f\u52a0\u8f7d\u8d44\u6e90\u7684\u8017\u65f6\n    //\u57fa\u672c\u4e0a\u4e0d\u4f1a\u5f15\u8d77\u4e3b\u7ebf\u7a0b\u5361\u987f\uff0c\u4f46\u5b9e\u9645\u52a0\u8f7d\u8017\u65f6\u4f1a\u6bd4\u540c\u6b65\u6267\u884c\u66f4\u957f\uff0c\u6309\u9700\u9009\u62e9\u3002\u4eba\u6570>3\u4eba\u4e14\u6ca1\u6709\u8bfb\u6761\u754c\u9762\u65f6\u5efa\u8bae\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\n    public async GTask PreloadCharacterResourcesAsync(List<HotFixHighPlayerInfo> playerInfos, string[] clothNames)\n    {\n        isCharactersDestroyed = false;\n        headIds.Clear();\n        jerseyCodes.Clear();\n        for (int i = 0; i < playerInfos.Count; i++)\n            headIds.Add(playerInfos[i].headId);\n        await PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(headIds.ToArray());\n        await i = 0; i < playerInfos.Count; i++)\n        {\n            if (playerInfos[i].isGK)\n            {\n                //\u5b88\u95e8\u5458\u76ee\u524d\u662f\u5199\u6b7b\u7684\u7403\u8863\uff0c\u4e0d\u9700\u8981\u989d\u5916\u751f\u6210\n                continue;\n            }\n            string jerseyCode = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(playerInfos[i].jerseyCode, playerInfos[i].playerNumber, playerInfos[i].playerName);\n            jerseyCodes.Add(jerseyCode);\n            await PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(jerseyCode);\n            await PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(jerseyCode);\n            if (isCharactersDestroyed)\n            {\n                //\u9632\u6b62\u4eba\u7269\u9500\u6bc1\u540e\uff0c\u8d44\u6e90\u9884\u52a0\u8f7d\u7684\u7ebf\u7a0b\u7ee7\u7eed\u6267\u884c\n                return;\n            }\n        }\n    }\n\n    //2.b\n    //\u5b9e\u4f8b\u5316\u4eba\u7269\uff08\u5f02\u6b65\u6267\u884c\uff09\uff0c\u4eba\u6570>3\u4eba\u65f6\u5efa\u8bae\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\n    //\u5982\u679c\u6ca1\u6709\u6267\u884c\u9884\u52a0\u8f7d\u8d44\u6e90\u7684\u6b65\u9aa4\uff0c\u5c31\u4f1a\u5728\u5b9e\u4f8b\u5316\u4eba\u7269\u7684\u65f6\u5019\u6267\u884c\u52a0\u8f7d\u8d44\u6e90\uff0c\u4ea7\u751f\u8017\u65f6\n    //\u521d\u59cb\u5316\u9636\u6bb5\u7684\u8bbe\u7f6e\u6750\u8d28\u5c5e\u6027\u8017\u65f6\u8f83\u957f\uff0c\u56e0\u6b64\u6bcf\u5b9e\u4f8b\u5316\u4e00\u4e2a\u4eba\u7269\u90fdWaitForNextFrame\uff0c\u5c06\u8fd9\u4e2a\u5f00\u9500\u5e73\u644a\u5230\u4e0d\u540c\u7684\u5e27\uff0c\u9632\u6b62\u4e3b\u7ebf\u7a0b\u5361\u987f\n    public async void InstantiateCharactersAsync(List<HotFixHighPlayerInfo> playerInfos, string playerInstantiatePath,Transform parent)\n    {\n        isCharactersDestroyed = false;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            GameObject player = (await ResourceMgr.Instance.InstantiateAsync(playerInstantiatePath)).result;\n            player.transform.name = \"TeamPlayer\" + i.ToString();\n            player.SetActive(false);\n            #region \u5b9a\u4e49\u7403\u5458\u5916\u89c2\n            HighPolyPlayerAppearanceController playerAppearance = player.GetComponent<HighPolyPlayerAppearanceController>();\n            playerAppearance.SetPlayerAppearance(playerInfos[i].headId, playerInfos[i].playerHeight, playerInfos[i].playerWeight, playerInfos[i].playerSkinColor, playerInfos[i].skinColorCorrectionValue, playerInfos[i].jerseyCode, playerInfos[i].shoesId, playerInfos[i].playerId, playerInfos[i].isGK, playerInfos[i].playerName,\n                playerInfos[i].playerNumber);\n            #endregion\n            HighPolyPlayerAnimationController playerAnimation = player.GetComponent<HighPolyPlayerAnimationController>();\n            //\u5982\u679cGameObject player\u4e0a\u6ca1\u6709\u6302\u8f7d\u9ed8\u8ba4Animator\uff0c\u9700\u8981\u53e6\u5916\u6307\u5b9aanimator\uff0c\u5c31\u7528\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u6307\u5b9a\n            playerAnimation.Init(true, false);\n            playerAnimation.HideFootball();\n            //\u628a\u5df2\u7ecf\u5b9e\u4f8b\u5316\u7684\u4eba\u7269\u632a\u5230\u89c6\u7ebf\u5916\n            player.transform.localPosition = new Vector3(0, 0, 500);\n            player.transform.localEulerAngles = Vector3.zero;\n            player.transform.parent = parent;\n            highPolyPlayers.Add(player);\n          //  await GAsync.WaitNextFrame();\n\n            if (isCharactersDestroyed)\n            {\n                //\u9632\u6b62\u5f02\u6b65\u6267\u884c\u65f6\uff0c\u5728\u8c03\u7528\u9500\u6bc1\u65b9\u6cd5\u540e\u4ecd\u7136\u6709\u4eba\u7269\u5b9e\u4f8b\u5316\u51fa\u6765\n                GameObject.Destroy(player);\n                highPolyPlayers.Clear();\n                return;\n            }\n        }\n    }\n\n    public async GTask InstantiateCharactersAsyncGTask(List<HotFixHighPlayerInfo> playerInfos, string playerInstantiatePath, Transform parent)\n    {\n        isCharactersDestroyed = false;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            GameObject player = (await ResourceMgr.Instance.InstantiateAsync(playerInstantiatePath)).result;\n            player.transform.name = \"TeamPlayer\" + i.ToString();\n            player.SetActive(false);\n            #region \u5b9a\u4e49\u7403\u5458\u5916\u89c2\n            HighPolyPlayerAppearanceController playerAppearance = player.GetComponent<HighPolyPlayerAppearanceController>();\n            playerAppearance.SetPlayerAppearance(playerInfos[i].headId, playerInfos[i].playerHeight, playerInfos[i].playerWeight, playerInfos[i].playerSkinColor, playerInfos[i].skinColorCorrectionValue, playerInfos[i].jerseyCode, playerInfos[i].shoesId, playerInfos[i].playerId, playerInfos[i].isGK, playerInfos[i].playerName,\n                playerInfos[i].playerNumber);\n            #endregion\n            HighPolyPlayerAnimationController playerAnimation = player.GetComponent<HighPolyPlayerAnimationController>();\n            //\u5982\u679cGameObject player\u4e0a\u6ca1\u6709\u6302\u8f7d\u9ed8\u8ba4Animator\uff0c\u9700\u8981\u53e6\u5916\u6307\u5b9aanimator\uff0c\u5c31\u7528\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u6307\u5b9a\n            playerAnimation.Init(true, false);\n            playerAnimation.HideFootball();\n            //\u628a\u5df2\u7ecf\u5b9e\u4f8b\u5316\u7684\u4eba\u7269\u632a\u5230\u89c6\u7ebf\u5916\n            player.transform.localPosition = new Vector3(0, 0, 500);\n            player.transform.localEulerAngles = Vector3.zero;\n            player.transform.parent = parent;\n            highPolyPlayers.Add(player);\n            //  await GAsync.WaitNextFrame();\n\n            if (isCharactersDestroyed)\n            {\n                //\u9632\u6b62\u5f02\u6b65\u6267\u884c\u65f6\uff0c\u5728\u8c03\u7528\u9500\u6bc1\u65b9\u6cd5\u540e\u4ecd\u7136\u6709\u4eba\u7269\u5b9e\u4f8b\u5316\u51fa\u6765\n                GameObject.Destroy(player);\n                highPolyPlayers.Clear();\n                return;\n            }\n        }\n    }\n    //\u4e00\u4e2a\u955c\u5934\u7684\u5e03\u6599\u4f1a\u4e00\u8d77\u5378\u8f7d\uff0c\u4e0d\u9700\u8981\u5728\u5378\u8f7d\u7403\u5458\u7684\u65f6\u5019\u5355\u72ec\u5904\u7406\n    public void UnloadCharaters(int startIndex,int endIndex)\n    {\n        for (int i =startIndex; i <endIndex; i++)\n        {\n            if (highPolyPlayers[i]!= null&&endIndex<highPolyPlayers.Count)\n            {\n                ResourceMgr.Instance.UnloadGameObject(highPolyPlayers[i].gameObject);\n                GameObject.Destroy(highPolyPlayers[i]);\n                highPolyPlayers[i] = null;\n            }\n        }\n    }\n    //3.\n    //\u9500\u6bc1\u4eba\u7269\u5e76\u5378\u8f7d\u8d44\u6e90\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728OnDestroy\u65f6\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u8c03\u7528\n    public void DestroyCharaters()\n    {\n        for (int i = 0; i < highPolyPlayers.Count; i++)\n        {\n            if (highPolyPlayers[i]!= null)\n            {\n                ResourceMgr.Instance.UnloadGameObject(highPolyPlayers[i].gameObject);\n                GameObject.Destroy(highPolyPlayers[i]);\n                highPolyPlayers[i] = null;\n            }\n        }\n        isCharactersDestroyed = true;\n        if(highPolyPlayers!=null)\n          highPolyPlayers.Clear();\n        ClothDataLoader.UnloadAllPreLoadedClothDatas();\n        //Destroy\u6240\u6709player GameObject\u540e\uff0c\u5c31\u5df2\u7ecf\u628a\u6240\u6709\u4eba\u7269\u76f8\u5173\u7684\u8d44\u6e90\u5378\u8f7d\u5e72\u51c0\u4e86\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u627e\u9ec4\u667a\u6656\u4feebug\n\n\n        //\u5f02\u6b65\u5b9e\u4f8b\u5316\u4eba\u7269\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4eba\u7269\u6ca1\u5b9e\u4f8b\u5316\u51fa\u6765\uff0c\u5c31\u8c03\u7528\u4e86\u9500\u6bc1\u4eba\u7269\u7684\u65b9\u6cd5\u3002\u8fd9\u65f6\u53ef\u80fd\u4f1a\u6709\u9884\u52a0\u8f7d\u7684\u8d44\u6e90\u672a\u88ab\u4eba\u7269\u5f15\u7528\u5230\uff0c\u81ea\u7136\u4e0d\u4f1a\u968f\u7740\u4eba\u7269\u9500\u6bc1\u800c\u5378\u8f7d\u3002\u56e0\u6b64\u6211\u4eec\u8981\u624b\u52a8\u5378\u8f7d\u5f15\u7528\u8ba1\u6570\u4e3a0\u7684\u8d44\u6e90\n        PlayerHeadDataLoader.UnloadUnreferencedHeadData();\n        PlayerJerseyDataLoader.UnloadUnreferencedJerseyDatas();\n        PlayerSockDataLoader.UnloadUnreferencedSockDatas();\n\n        PlayerHeadDataLoader.UnloadMultiPreLoadedHeadDatas(headIds.ToArray());\n        PlayerJerseyDataLoader.UnloadMultiPreLoadedJerseyDatas(jerseyCodes.ToArray());\n        //\u4e0b\u9762\u4e24\u53e5\u4f1a\u5f3a\u5236\u5378\u8f7d\u6240\u6709\u4eba\u7269\u76f8\u5173\u7684\u8d44\u6e90\uff0c\u5982\u679c\u4f60\u786e\u5b9a\u4e00\u4e2a\u9636\u6bb5\u7ed3\u675f\u4e86\uff08\u6bd4\u5982\u9000\u51fa\u767b\u5f55\u573a\u666f\u8fdb\u5165\u4e3b\u754c\u9762\u3001\u9000\u51fa\u4e3b\u754c\u9762\u8fdb\u5165\u6bd4\u8d5b\u573a\u666f\u3001\u70ed\u8eab\u52a8\u753b\u7ed3\u675f\u7b49\u7b49\uff09\uff0c\u53ef\u4ee5\u8c03\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff0c\u907f\u514d\u6709\u4eba\u7269\u8d44\u6e90\u6ca1\u5378\u8f7d\u6389\u3002\n        //\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981player\u7684GameObject\u88ab\u9500\u6bc1\uff0c\u5c31\u4f1a\u628a\u8d44\u6e90\u4e00\u5e76\u5378\u8f7d\u5e72\u51c0\u3002\u4ee5\u4e0b\u7684\u65b9\u6cd5\u53ea\u662f\u4e00\u79cd\u4fdd\u5e95\u63aa\u65bd\u3002\n        //\u5982\u679c\u5728\u573a\u666f\u5185\u8fd8\u6709\u5176\u4ed6\u9ad8\u6a21\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\uff0c\u4f1a\u5bfc\u81f4\u8fd9\u4e9b\u9ad8\u6a21\u7684\u8d44\u6e90\u4e22\u5931\u3002\n        //PlayerHeadDataLoader.UnloadAllPreLoadedHeadDatas();\n        //PlayerJerseyDataLoader.UnloadAllPreLoadedJerseyDatas();\n        if (headIds!=null)\n          headIds.Clear();\n        if(jerseyCodes!=null)\n          jerseyCodes.Clear();\n       // GameObject.Destroy(gameObject);\n    }\n\n    private void OnDestroy()\n    {\n        DestroyCharaters();\n    }\n\n\n\n    // Update is called once per frame\n\n\n    #region \u5199\u6b7b\u7684\u7403\u5458\u914d\u7f6e\u6570\u636e\n    static int[] playerCfgIds = new int[11]\n    {\n        1,2,3,4,8,10,26,5,19,7,13\n    };\n    static int[] playerHeadModelIds = new int[11]\n    {\n        1,2,4,5,19,8,22,6,35,7,11\n    };\n    static SkinColorForTexture[] playerSkinColors = new SkinColorForTexture[11]\n    {\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.LATIN,\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.BLACK,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.WHITE\n    };\n    static string[] playerNames = new string[11]\n    {\n        \"MESSI\",\n        \"RONALDO\",\n        \"NEYMAR\",\n        \"DE BRUYNE\",\n        \"SALAH\",\n        \"MBAPPE\",\n        \"BENZEMA\",\n        \"OBLAK\",\n        \"KANTE\",\n        \"VAN DIJK\",\n        \"KANE\",\n    };\n    static int[] playerShirtNumbers = new int[11]\n    {\n        30,7,10,17,11,7,9,13,7,4,10\n    };\n    static int[] PlayerShoeTypes = new int[11]\n    {\n        1,2,3,4,3,1,2,1,2,2,3\n    };\n    static int[] playerHeights = new int[11]\n    {\n        170,187,175,180,175,177,185,187,167,193,187\n    };\n    static int[] playerWeights = new int[11]\n    {\n        72,83,68,69,71,73,81,87,69,92,88\n    };\n    static bool[] playerIsGKs = new bool[11]\n    {\n        false,false,false,false,false,false,false,true,false,false,false\n    };\n    static string[] playerAnimationNames = new string[11]\n    {\n        \"Cultivate_Idle1\",\n        \"Cultivate_Idle1_SmallMotion1\",\n        \"Cultivate_Idle1_SmallMotion2\",\n        \"Cultivate_Idle1_SmallMotion3\",\n        \"Cultivate_Idle1_SmallMotion4\",\n        \"Cultivate_Idle1_SmallMotion5\",\n        \"Cultivate_Idle1_Upgrade1\",\n        \"Cultivate_Idle1_Upgrade2\",\n        \"Cultivate_Idle1_Upgrade3\",\n        \"Cultivate_Idle1_Upgrade4\",\n        \"Cultivate_Idle1_Upgrade5\"\n    };\n    static string[] clothDataNames = new string[11]\n    {\n        \"Idle1\",\n        \"Idle1_SmallMotion1\",\n        \"Idle1_SmallMotion2\",\n        \"Idle1_SmallMotion3\",\n        \"Idle1_SmallMotion4\",\n        \"Idle1_SmallMotion5\",\n        \"Idle1_Upgrade1\",\n        \"Idle1_Upgrade2\",\n        \"Idle1_Upgrade3\",\n        \"Idle1_Upgrade4\",\n        \"Idle1_Upgrade5\"\n    };\n    static string jerseyId = \"10_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\";\n\n\n\n    static int[] playerCfgIds3 = new int[3]\n{\n        1,2,3\n};\n    static int[] playerHeadModelIds3 = new int[3]\n    {\n        1,2,4\n    };\n    static SkinColorForTexture[] playerSkinColors3 = new SkinColorForTexture[3]\n    {\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.ASIAN,\n    };\n    static string[] playerNames3 = new string[3]\n    {\n        \"MESSI\",\n        \"RONALDO\",\n        \"NEYMAR\",\n    };\n    static int[] playerShirtNumbers3 = new int[3]\n    {\n        30,7,10,\n    };\n    static int[] PlayerShoeTypes3 = new int[3]\n    {\n        1,2,3,\n    };\n    static int[] playerHeights3 = new int[3]\n    {\n        170,187,175\n    };\n    static int[] playerWeights3 = new int[3]\n    {\n        72,83,68,\n    };\n    static bool[] playerIsGKs3 = new bool[3]\n    {\n        false,false,false,\n    };\n    static string[] playerAnimationNames3 = new string[3]\n    {\n        \"Cultivate_Idle1\",\n        \"Cultivate_Idle1_SmallMotion1\",\n        \"Cultivate_Idle1_SmallMotion2\",\n    };\n    static string[] clothDataNames3 = new string[3]\n    {\n        \"Idle1\",\n        \"Idle1_SmallMotion1\",\n        \"Idle1_SmallMotion2\",\n    };\n    #endregion\n}\n", "starcoder_inputs": "<fim_prefix>using System.Collections.Generic;\nusing UnityEngine;\nusing Framework.GalaSports.Service;\npublic struct HotFixLowPlayerInfo\n{\n    public Texture jerseyTex;\n    public bool isGK;\n    public string playerName;\n}\npublic struct HotFixHighPlayerInfo\n{\n    public string teamId;\n    public int playerId;\n    public int headId;\n    public string playerName;\n    public string playerNumber;\n    public int playerHeight;\n    public int playerWeight;\n    public SkinColorForTexture playerSkinColor;\n    public string jerseyCode;\n    public int shoesId;\n    public bool isGK;\n    public int position;\n    public bool isStarter; // \u662f\u5426\u662f\u9996\u53d1:true:\u662f   false:\u66ff\u8865\n    public bool isCaptial;\n    public Vector3 skinColorCorrectionValue;\n}\npublic class HotFixHighPolyPlayerInstantiate\n{\n    public List<GameObject> highPolyPlayers;\n    public List<string> jerseyCodes;\n    public List<int> headIds;\n    public GameObject gameObject;\n    public Transform transform;\n    bool isCharactersDestroyed = false;\n    // Start is called before the first frame update\n\n    public void Init()\n    {\n        highPolyPlayers = new List<GameObject>();\n        jerseyCodes = new List<string>();\n        headIds = new List<int>();\n    }\n    void InitData()\n    {\n        for(int i=0;i<1;i++)\n        { //\u4ee5\u4e0b\u6570\u636e\u5728\u6b63\u5f0f\u751f\u4ea7\u73af\u5883\u4e2d\u5e94\u8be5\u7531\u524d\u7aef\u4f20\u7ed9TA\n            int playerHeadModelId = playerHeadModelIds3[i]; //\u8138\u6a213D\u8d44\u6e90\u7684id\n            int playerHeight = playerHeights3[i]; //\u8eab\u9ad8\n            int playerWeight = playerWeights3[i]; //\u4f53\u91cd\uff0c\u5f71\u54cd\u7403\u5458\u4f53\u578b\u80d6\u7626\n            SkinColorForTexture playerSkinColor = playerSkinColors3[i]; //\u80a4\u8272\n            string jerseyCode = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(jerseyId, playerShirtNumbers3[i].ToString(), playerNames3[i]); //\u7403\u8863Id\u5b57\u7b26\u4e32\uff0c\u8fd9\u91cc\u4f7f\u7528ApplyNameAndNumberToJerseyId\u65b9\u6cd5\u628a\u7403\u5458\u540d\u5b57\u548c\u7403\u5458\u53f7\u7801\u62fc\u5230\u7403\u8863Id\u5b57\u7b26\u4e32\u4e2d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u751f\u6210\u5177\u6709\u5bf9\u5e94\u540d\u5b57\u548c\u53f7\u7801\u7684\u7403\u8863\u8d34\u56fe\n            int playerShoesType = PlayerShoeTypes3[i]; //\u7403\u5458\u978b\u5b50\u6837\u5f0f\n            int playerId = playerCfgIds3[i]; //\u7403\u5458\u5728\u914d\u7f6e\u8868\u91cc\u7684id\n            bool isGK = playerIsGKs3[i]; //\u662f\u4e0d\u662f\u5b88\u95e8\u5458\uff0c\u5b88\u95e8\u5458\u4f1a\u6234\u624b\u5957\uff0c\u7403\u8863\u4e5f\u4e0d\u4e00\u6837\n            string playerName = playerNames3[i]; //\u7403\u5458\u540d\u5b57\n            string playerShirtNumber = playerShirtNumbers3[i].ToString(); //\u7403\u8863\u53f7\u7801\n            //\u4ee5\u4e0a\u6570\u636e\u5728\u6b63\u5f0f\u751f\u4ea7\u73af\u5883\u4e2d\u5e94\u8be5\u7531\u524d\u7aef\u4f20\u7ed9TA   \n        }\n       \n\n    }\n    //1.a\n    //\u9884\u52a0\u8f7d\u4eba\u7269\u76f8\u5173\u8d44\u6e90\uff08\u540c\u6b65\u6267\u884c\uff09,\u9884\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\u5b9e\u4f8b\u5316\u4eba\u7269\u5c31\u4e0d\u4f1a\u518d\u4ea7\u751f\u52a0\u8f7d\u8d44\u6e90\u7684\u8017\u65f6\n    //\u8fd9\u91cc\u4f7f\u7528\u7684\u4ecd\u7136\u662f\u5f02\u6b65\u7684LoadAssetAsync\uff0c\u53ea\u662f\u5916\u90e8\u8c03\u7528\u662f\u540c\u6b65\u7684\uff0c\u4eba\u6570\u591a\u7684\u65f6\u5019\u4f1a\u9020\u6210\u4e3b\u7ebf\u7a0b\u5361\u987f\u3002\u4eba\u6570<=3\u4eba\u65f6\uff0c\u6216\u8005\u6709\u8bfb\u6761\u754c\u9762\u65f6\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\n    public void PreloadCharacterResources(List<HotFixHighPlayerInfo> playerInfos, string[] clothNames)\n    {\n        isCharactersDestroyed = false;\n        headIds.Clear();\n        jerseyCodes.Clear();\n        for (int i = 0; i < playerInfos.Count; i++)\n            headIds.Add(playerInfos[i].headId);\n        PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(headIds.ToArray());\n        ClothDataLoader.AsyncPreLoadMultiClotDataSet(clothNames);\n        for (int i = 0; i <playerInfos.Count; i++)\n        {\n            if (playerInfos[i].isGK)\n            {\n                //\u5b88\u95e8\u5458\u76ee\u524d\u662f\u5199\u6b7b\u7684\u7403\u8863\uff0c\u4e0d\u9700\u8981\u989d\u5916\u751f\u6210\n                continue;\n            }\n            string jerseyCode = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(playerInfos[i].jerseyCode, playerInfos[i].playerNumber, playerInfos[i].playerName);\n            jerseyCodes.Add(jerseyCode);\n            PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(jerseyCode);\n            PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(jerseyCode);\n        }\n    }\n\n    //2.a\n    //\u5b9e\u4f8b\u5316\u4eba\u7269\uff08\u540c\u6b65\u6267\u884c\uff09\uff0c\u4eba\u6570<=3\u4eba\u65f6\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\n    //\u5982\u679c\u6ca1\u6709\u6267\u884c\u9884\u52a0\u8f7d\u8d44\u6e90\u7684\u6b65\u9aa4\uff0c\u5c31\u4f1a\u5728\u5b9e\u4f8b\u5316\u4eba\u7269\u7684\u65f6\u5019\u6267\u884c\u52a0\u8f7d\u8d44\u6e90\uff0c\u4ea7\u751f\u8017\u65f6\n    //\u521d\u59cb\u5316\u9636\u6bb5\u7684\u8bbe\u7f6e\u6750\u8d28\u5c5e\u6027\u8017\u65f6\u8f83\u957f\uff0c\u5982\u679c\u4eba\u6570\u8f83\u591a\uff0c\u4f1a\u5bfc\u81f4\u4e3b\u7ebf\u7a0b\u5361\u987f\n    public void InstantiateCharacters(List<HotFixHighPlayerInfo> playerInfos,string playerInstantiatePath, RuntimeAnimatorController runtimeAnimator)\n    {\n        isCharactersDestroyed = false;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            GameObject player =ResourceMgr.Instance.Instantiate(playerInstantiatePath) ;\n\n            #region \u5b9a\u4e49\u7403\u5458\u5916\u89c2\n            HighPolyPlayerAppearanceController playerAppearance = player.GetComponent<HighPolyPlayerAppearanceController>();\n            playerAppearance.SetPlayerAppearance(playerInfos[i].headId, playerInfos[i].playerHeight, playerInfos[i].playerWeight, playerInfos[i].playerSkinColor, playerInfos[i].skinColorCorrectionValue, playerInfos[i].jerseyCode, playerInfos[i].shoesId, playerInfos[i].playerId, playerInfos[i].isGK, playerInfos[i].playerName,\n               playerInfos[i].playerNumber);\n            HighPolyPlayerAnimationController playerAnimation = player.GetComponent<HighPolyPlayerAnimationController>();\n            //\u5982\u679cGameObject player\u4e0a\u6ca1\u6709\u6302\u8f7d\u9ed8\u8ba4Animator\uff0c\u9700\u8981\u53e6\u5916\u6307\u5b9aanimator\uff0c\u5c31\u7528\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u6307\u5b9a\n            playerAnimation.MyAnimator.runtimeAnimatorController = runtimeAnimator;\n            playerAnimation.Init(true, false);\n            playerAnimation.HideFootball();\n            #endregion\n            highPolyPlayers.Add(player);\n        }\n    }\n\n\n    //1.b\n    //\u9884\u52a0\u8f7d\u4eba\u7269\u76f8\u5173\u8d44\u6e90\uff08\u5f02\u6b65\u6267\u884c\uff09,\u9884\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\u5b9e\u4f8b\u5316\u4eba\u7269\u5c31\u4e0d\u4f1a\u518d\u4ea7\u751f\u52a0\u8f7d\u8d44\u6e90\u7684\u8017\u65f6\n    //\u57fa\u672c\u4e0a\u4e0d\u4f1a\u5f15\u8d77\u4e3b\u7ebf\u7a0b\u5361\u987f\uff0c\u4f46\u5b9e\u9645\u52a0\u8f7d\u8017\u65f6\u4f1a\u6bd4\u540c\u6b65\u6267\u884c\u66f4\u957f\uff0c\u6309\u9700\u9009\u62e9\u3002\u4eba\u6570>3\u4eba\u4e14\u6ca1\u6709\u8bfb\u6761\u754c\u9762\u65f6\u5efa\u8bae\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\n    public async GTask PreloadCharacterResourcesAsync(List<HotFixHighPlayerInfo> playerInfos, string[] clothNames)\n    {\n        isCharactersDestroyed = false;\n        headIds.Clear();\n        jerseyCodes.Clear();\n        for (int i = 0; i < playerInfos.Count; i++)\n            headIds.Add(playerInfos[i].headId);\n        await PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(headIds.ToArray());\n        await<fim_suffix> i = 0; i < playerInfos.Count; i++)\n        {\n            if (playerInfos[i].isGK)\n            {\n                //\u5b88\u95e8\u5458\u76ee\u524d\u662f\u5199\u6b7b\u7684\u7403\u8863\uff0c\u4e0d\u9700\u8981\u989d\u5916\u751f\u6210\n                continue;\n            }\n            string jerseyCode = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(playerInfos[i].jerseyCode, playerInfos[i].playerNumber, playerInfos[i].playerName);\n            jerseyCodes.Add(jerseyCode);\n            await PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(jerseyCode);\n            await PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(jerseyCode);\n            if (isCharactersDestroyed)\n            {\n                //\u9632\u6b62\u4eba\u7269\u9500\u6bc1\u540e\uff0c\u8d44\u6e90\u9884\u52a0\u8f7d\u7684\u7ebf\u7a0b\u7ee7\u7eed\u6267\u884c\n                return;\n            }\n        }\n    }\n\n    //2.b\n    //\u5b9e\u4f8b\u5316\u4eba\u7269\uff08\u5f02\u6b65\u6267\u884c\uff09\uff0c\u4eba\u6570>3\u4eba\u65f6\u5efa\u8bae\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\n    //\u5982\u679c\u6ca1\u6709\u6267\u884c\u9884\u52a0\u8f7d\u8d44\u6e90\u7684\u6b65\u9aa4\uff0c\u5c31\u4f1a\u5728\u5b9e\u4f8b\u5316\u4eba\u7269\u7684\u65f6\u5019\u6267\u884c\u52a0\u8f7d\u8d44\u6e90\uff0c\u4ea7\u751f\u8017\u65f6\n    //\u521d\u59cb\u5316\u9636\u6bb5\u7684\u8bbe\u7f6e\u6750\u8d28\u5c5e\u6027\u8017\u65f6\u8f83\u957f\uff0c\u56e0\u6b64\u6bcf\u5b9e\u4f8b\u5316\u4e00\u4e2a\u4eba\u7269\u90fdWaitForNextFrame\uff0c\u5c06\u8fd9\u4e2a\u5f00\u9500\u5e73\u644a\u5230\u4e0d\u540c\u7684\u5e27\uff0c\u9632\u6b62\u4e3b\u7ebf\u7a0b\u5361\u987f\n    public async void InstantiateCharactersAsync(List<HotFixHighPlayerInfo> playerInfos, string playerInstantiatePath,Transform parent)\n    {\n        isCharactersDestroyed = false;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            GameObject player = (await ResourceMgr.Instance.InstantiateAsync(playerInstantiatePath)).result;\n            player.transform.name = \"TeamPlayer\" + i.ToString();\n            player.SetActive(false);\n            #region \u5b9a\u4e49\u7403\u5458\u5916\u89c2\n            HighPolyPlayerAppearanceController playerAppearance = player.GetComponent<HighPolyPlayerAppearanceController>();\n            playerAppearance.SetPlayerAppearance(playerInfos[i].headId, playerInfos[i].playerHeight, playerInfos[i].playerWeight, playerInfos[i].playerSkinColor, playerInfos[i].skinColorCorrectionValue, playerInfos[i].jerseyCode, playerInfos[i].shoesId, playerInfos[i].playerId, playerInfos[i].isGK, playerInfos[i].playerName,\n                playerInfos[i].playerNumber);\n            #endregion\n            HighPolyPlayerAnimationController playerAnimation = player.GetComponent<HighPolyPlayerAnimationController>();\n            //\u5982\u679cGameObject player\u4e0a\u6ca1\u6709\u6302\u8f7d\u9ed8\u8ba4Animator\uff0c\u9700\u8981\u53e6\u5916\u6307\u5b9aanimator\uff0c\u5c31\u7528\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u6307\u5b9a\n            playerAnimation.Init(true, false);\n            playerAnimation.HideFootball();\n            //\u628a\u5df2\u7ecf\u5b9e\u4f8b\u5316\u7684\u4eba\u7269\u632a\u5230\u89c6\u7ebf\u5916\n            player.transform.localPosition = new Vector3(0, 0, 500);\n            player.transform.localEulerAngles = Vector3.zero;\n            player.transform.parent = parent;\n            highPolyPlayers.Add(player);\n          //  await GAsync.WaitNextFrame();\n\n            if (isCharactersDestroyed)\n            {\n                //\u9632\u6b62\u5f02\u6b65\u6267\u884c\u65f6\uff0c\u5728\u8c03\u7528\u9500\u6bc1\u65b9\u6cd5\u540e\u4ecd\u7136\u6709\u4eba\u7269\u5b9e\u4f8b\u5316\u51fa\u6765\n                GameObject.Destroy(player);\n                highPolyPlayers.Clear();\n                return;\n            }\n        }\n    }\n\n    public async GTask InstantiateCharactersAsyncGTask(List<HotFixHighPlayerInfo> playerInfos, string playerInstantiatePath, Transform parent)\n    {\n        isCharactersDestroyed = false;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            GameObject player = (await ResourceMgr.Instance.InstantiateAsync(playerInstantiatePath)).result;\n            player.transform.name = \"TeamPlayer\" + i.ToString();\n            player.SetActive(false);\n            #region \u5b9a\u4e49\u7403\u5458\u5916\u89c2\n            HighPolyPlayerAppearanceController playerAppearance = player.GetComponent<HighPolyPlayerAppearanceController>();\n            playerAppearance.SetPlayerAppearance(playerInfos[i].headId, playerInfos[i].playerHeight, playerInfos[i].playerWeight, playerInfos[i].playerSkinColor, playerInfos[i].skinColorCorrectionValue, playerInfos[i].jerseyCode, playerInfos[i].shoesId, playerInfos[i].playerId, playerInfos[i].isGK, playerInfos[i].playerName,\n                playerInfos[i].playerNumber);\n            #endregion\n            HighPolyPlayerAnimationController playerAnimation = player.GetComponent<HighPolyPlayerAnimationController>();\n            //\u5982\u679cGameObject player\u4e0a\u6ca1\u6709\u6302\u8f7d\u9ed8\u8ba4Animator\uff0c\u9700\u8981\u53e6\u5916\u6307\u5b9aanimator\uff0c\u5c31\u7528\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u6307\u5b9a\n            playerAnimation.Init(true, false);\n            playerAnimation.HideFootball();\n            //\u628a\u5df2\u7ecf\u5b9e\u4f8b\u5316\u7684\u4eba\u7269\u632a\u5230\u89c6\u7ebf\u5916\n            player.transform.localPosition = new Vector3(0, 0, 500);\n            player.transform.localEulerAngles = Vector3.zero;\n            player.transform.parent = parent;\n            highPolyPlayers.Add(player);\n            //  await GAsync.WaitNextFrame();\n\n            if (isCharactersDestroyed)\n            {\n                //\u9632\u6b62\u5f02\u6b65\u6267\u884c\u65f6\uff0c\u5728\u8c03\u7528\u9500\u6bc1\u65b9\u6cd5\u540e\u4ecd\u7136\u6709\u4eba\u7269\u5b9e\u4f8b\u5316\u51fa\u6765\n                GameObject.Destroy(player);\n                highPolyPlayers.Clear();\n                return;\n            }\n        }\n    }\n    //\u4e00\u4e2a\u955c\u5934\u7684\u5e03\u6599\u4f1a\u4e00\u8d77\u5378\u8f7d\uff0c\u4e0d\u9700\u8981\u5728\u5378\u8f7d\u7403\u5458\u7684\u65f6\u5019\u5355\u72ec\u5904\u7406\n    public void UnloadCharaters(int startIndex,int endIndex)\n    {\n        for (int i =startIndex; i <endIndex; i++)\n        {\n            if (highPolyPlayers[i]!= null&&endIndex<highPolyPlayers.Count)\n            {\n                ResourceMgr.Instance.UnloadGameObject(highPolyPlayers[i].gameObject);\n                GameObject.Destroy(highPolyPlayers[i]);\n                highPolyPlayers[i] = null;\n            }\n        }\n    }\n    //3.\n    //\u9500\u6bc1\u4eba\u7269\u5e76\u5378\u8f7d\u8d44\u6e90\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728OnDestroy\u65f6\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u8c03\u7528\n    public void DestroyCharaters()\n    {\n        for (int i = 0; i < highPolyPlayers.Count; i++)\n        {\n            if (highPolyPlayers[i]!= null)\n            {\n                ResourceMgr.Instance.UnloadGameObject(highPolyPlayers[i].gameObject);\n                GameObject.Destroy(highPolyPlayers[i]);\n                highPolyPlayers[i] = null;\n            }\n        }\n        isCharactersDestroyed = true;\n        if(highPolyPlayers!=null)\n          highPolyPlayers.Clear();\n        ClothDataLoader.UnloadAllPreLoadedClothDatas();\n        //Destroy\u6240\u6709player GameObject\u540e\uff0c\u5c31\u5df2\u7ecf\u628a\u6240\u6709\u4eba\u7269\u76f8\u5173\u7684\u8d44\u6e90\u5378\u8f7d\u5e72\u51c0\u4e86\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u627e\u9ec4\u667a\u6656\u4feebug\n\n\n        //\u5f02\u6b65\u5b9e\u4f8b\u5316\u4eba\u7269\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4eba\u7269\u6ca1\u5b9e\u4f8b\u5316\u51fa\u6765\uff0c\u5c31\u8c03\u7528\u4e86\u9500\u6bc1\u4eba\u7269\u7684\u65b9\u6cd5\u3002\u8fd9\u65f6\u53ef\u80fd\u4f1a\u6709\u9884\u52a0\u8f7d\u7684\u8d44\u6e90\u672a\u88ab\u4eba\u7269\u5f15\u7528\u5230\uff0c\u81ea\u7136\u4e0d\u4f1a\u968f\u7740\u4eba\u7269\u9500\u6bc1\u800c\u5378\u8f7d\u3002\u56e0\u6b64\u6211\u4eec\u8981\u624b\u52a8\u5378\u8f7d\u5f15\u7528\u8ba1\u6570\u4e3a0\u7684\u8d44\u6e90\n        PlayerHeadDataLoader.UnloadUnreferencedHeadData();\n        PlayerJerseyDataLoader.UnloadUnreferencedJerseyDatas();\n        PlayerSockDataLoader.UnloadUnreferencedSockDatas();\n\n        PlayerHeadDataLoader.UnloadMultiPreLoadedHeadDatas(headIds.ToArray());\n        PlayerJerseyDataLoader.UnloadMultiPreLoadedJerseyDatas(jerseyCodes.ToArray());\n        //\u4e0b\u9762\u4e24\u53e5\u4f1a\u5f3a\u5236\u5378\u8f7d\u6240\u6709\u4eba\u7269\u76f8\u5173\u7684\u8d44\u6e90\uff0c\u5982\u679c\u4f60\u786e\u5b9a\u4e00\u4e2a\u9636\u6bb5\u7ed3\u675f\u4e86\uff08\u6bd4\u5982\u9000\u51fa\u767b\u5f55\u573a\u666f\u8fdb\u5165\u4e3b\u754c\u9762\u3001\u9000\u51fa\u4e3b\u754c\u9762\u8fdb\u5165\u6bd4\u8d5b\u573a\u666f\u3001\u70ed\u8eab\u52a8\u753b\u7ed3\u675f\u7b49\u7b49\uff09\uff0c\u53ef\u4ee5\u8c03\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff0c\u907f\u514d\u6709\u4eba\u7269\u8d44\u6e90\u6ca1\u5378\u8f7d\u6389\u3002\n        //\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981player\u7684GameObject\u88ab\u9500\u6bc1\uff0c\u5c31\u4f1a\u628a\u8d44\u6e90\u4e00\u5e76\u5378\u8f7d\u5e72\u51c0\u3002\u4ee5\u4e0b\u7684\u65b9\u6cd5\u53ea\u662f\u4e00\u79cd\u4fdd\u5e95\u63aa\u65bd\u3002\n        //\u5982\u679c\u5728\u573a\u666f\u5185\u8fd8\u6709\u5176\u4ed6\u9ad8\u6a21\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\uff0c\u4f1a\u5bfc\u81f4\u8fd9\u4e9b\u9ad8\u6a21\u7684\u8d44\u6e90\u4e22\u5931\u3002\n        //PlayerHeadDataLoader.UnloadAllPreLoadedHeadDatas();\n        //PlayerJerseyDataLoader.UnloadAllPreLoadedJerseyDatas();\n        if (headIds!=null)\n          headIds.Clear();\n        if(jerseyCodes!=null)\n          jerseyCodes.Clear();\n       // GameObject.Destroy(gameObject);\n    }\n\n    private void OnDestroy()\n    {\n        DestroyCharaters();\n    }\n\n\n\n    // Update is called once per frame\n\n\n    #region \u5199\u6b7b\u7684\u7403\u5458\u914d\u7f6e\u6570\u636e\n    static int[] playerCfgIds = new int[11]\n    {\n        1,2,3,4,8,10,26,5,19,7,13\n    };\n    static int[] playerHeadModelIds = new int[11]\n    {\n        1,2,4,5,19,8,22,6,35,7,11\n    };\n    static SkinColorForTexture[] playerSkinColors = new SkinColorForTexture[11]\n    {\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.LATIN,\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.BLACK,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.WHITE\n    };\n    static string[] playerNames = new string[11]\n    {\n        \"MESSI\",\n        \"RONALDO\",\n        \"NEYMAR\",\n        \"DE BRUYNE\",\n        \"SALAH\",\n        \"MBAPPE\",\n        \"BENZEMA\",\n        \"OBLAK\",\n        \"KANTE\",\n        \"VAN DIJK\",\n        \"KANE\",\n    };\n    static int[] playerShirtNumbers = new int[11]\n    {\n        30,7,10,17,11,7,9,13,7,4,10\n    };\n    static int[] PlayerShoeTypes = new int[11]\n    {\n        1,2,3,4,3,1,2,1,2,2,3\n    };\n    static int[] playerHeights = new int[11]\n    {\n        170,187,175,180,175,177,185,187,167,193,187\n    };\n    static int[] playerWeights = new int[11]\n    {\n        72,83,68,69,71,73,81,87,69,92,88\n    };\n    static bool[] playerIsGKs = new bool[11]\n    {\n        false,false,false,false,false,false,false,true,false,false,false\n    };\n    static string[] playerAnimationNames = new string[11]\n    {\n        \"Cultivate_Idle1\",\n        \"Cultivate_Idle1_SmallMotion1\",\n        \"Cultivate_Idle1_SmallMotion2\",\n        \"Cultivate_Idle1_SmallMotion3\",\n        \"Cultivate_Idle1_SmallMotion4\",\n        \"Cultivate_Idle1_SmallMotion5\",\n        \"Cultivate_Idle1_Upgrade1\",\n        \"Cultivate_Idle1_Upgrade2\",\n        \"Cultivate_Idle1_Upgrade3\",\n        \"Cultivate_Idle1_Upgrade4\",\n        \"Cultivate_Idle1_Upgrade5\"\n    };\n    static string[] clothDataNames = new string[11]\n    {\n        \"Idle1\",\n        \"Idle1_SmallMotion1\",\n        \"Idle1_SmallMotion2\",\n        \"Idle1_SmallMotion3\",\n        \"Idle1_SmallMotion4\",\n        \"Idle1_SmallMotion5\",\n        \"Idle1_Upgrade1\",\n        \"Idle1_Upgrade2\",\n        \"Idle1_Upgrade3\",\n        \"Idle1_Upgrade4\",\n        \"Idle1_Upgrade5\"\n    };\n    static string jerseyId = \"10_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\";\n\n\n\n    static int[] playerCfgIds3 = new int[3]\n{\n        1,2,3\n};\n    static int[] playerHeadModelIds3 = new int[3]\n    {\n        1,2,4\n    };\n    static SkinColorForTexture[] playerSkinColors3 = new SkinColorForTexture[3]\n    {\n        SkinColorForTexture.WHITE,\n        SkinColorForTexture.ASIAN,\n        SkinColorForTexture.ASIAN,\n    };\n    static string[] playerNames3 = new string[3]\n    {\n        \"MESSI\",\n        \"RONALDO\",\n        \"NEYMAR\",\n    };\n    static int[] playerShirtNumbers3 = new int[3]\n    {\n        30,7,10,\n    };\n    static int[] PlayerShoeTypes3 = new int[3]\n    {\n        1,2,3,\n    };\n    static int[] playerHeights3 = new int[3]\n    {\n        170,187,175\n    };\n    static int[] playerWeights3 = new int[3]\n    {\n        72,83,68,\n    };\n    static bool[] playerIsGKs3 = new bool[3]\n    {\n        false,false,false,\n    };\n    static string[] playerAnimationNames3 = new string[3]\n    {\n        \"Cultivate_Idle1\",\n        \"Cultivate_Idle1_SmallMotion1\",\n        \"Cultivate_Idle1_SmallMotion2\",\n    };\n    static string[] clothDataNames3 = new string[3]\n    {\n        \"Idle1\",\n        \"Idle1_SmallMotion1\",\n        \"Idle1_SmallMotion2\",\n    };\n    #endregion\n}\n<fim_middle>"}
{"inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class RealtimeMatch3DView : View3DBase\n{\n\n    //d1d1d1ff_d1d1d1ff_d1d1d1ff_0_20212022_22_538bc1ff_d8d8d8ff_538bc1ff\n    //201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\n    static string[] JerseyIds = new string[] {\n        \"3_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",\n        \"6_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"7_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"31_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\", //\u5b88\u95e8\u5458\n        \"10_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"17_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",\n\n    };\n    static Vector3 [] footBallPos = new Vector3[3]{\n        new Vector3(-0.6f,0.18f,-1.3f),\n        new Vector3(58.058f,1.833f,47.439f),\n        new Vector3(20.5f,0.2f,3.33f) \n    };\n\n     //\u961f\u5fbd\n    private Texture2D TeamLogoTex;\n    [SerializeField]\n    private Transform[] Players;\n    private Texture[] Shoes;\n\n    [SerializeField]\n    private Transform footBallTrans;\n\n    private PlayerTextures playerTextures;\n    \n    HighPolyPlayerAppearanceController[] playersAppearance;\n\n    List<RenderTexture> JerseyTexList = new List<RenderTexture>();\n\n     //\u5b88\u95e8\u5458\n    int GoalKeeperId = 3;\n    private Texture2D GoalKeeper_Jerseytex; //\u7403\u8863\n    private Texture2D GoalKeeper_Socktex; //\u889c\u5b50\n\n    private BezierCurve curCurve;\n\n    static string [] PlayersPath = new string []{\"1A\",\"1B\",\"2A\",\"2B\",\"3A\",\"3B\"};\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        playerTextures = this.gameObject.GetComponent<PlayerTextures>();\n        TeamLogoTex = playerTextures.TeamLogoTex;\n        Shoes = playerTextures.Shoes;\n        GoalKeeper_Jerseytex = playerTextures.GoalKeeper_Jerseytex;\n        GoalKeeper_Socktex = playerTextures.GoalKeeper_Socktex;\n\n        footBallTrans = this.transform.Find(\"FootballRoot\");\n\n        Players = new Transform[PlayersPath.Length];\n        for(int i = 0; i< Players.Length;i++)\n        {\n            Players[i] = this.transform.Find(PlayersPath[i]);\n            Players[i].gameObject.SetActive(false);\n        }\n    }\n\n    public override async GTask Start()\n    {\n        PlayerJerseyGenerator.Instance.Initialize();\n\n        playersAppearance = new HighPolyPlayerAppearanceController[Players.Length];\n\n        List<GTask> taskList = new List<GTask>(); \n        for (int i = 0; i < Players.Length; i++)\n        {\n            playersAppearance[i] = Players[i].GetComponent<HighPolyPlayerAppearanceController>();\n\n            if (i == GoalKeeperId)\n            {\n                playersAppearance[i].IsKeeper = true;\n                playersAppearance[i].SetGlove(true);\n            }\n\n            GTask task = CreateJersey(i);\n            taskList.Add(task);\n            // playersAppearance[i].HeadMR.material.SetFloat(\"_Smoothness\", 1.42f);\n            // playersAppearance[i].LimbGPUSKM.material.SetFloat(\"_Smoothness\", 1.15f);\n        }\n\n         await GAsync.WaitUntil(() => {\n            bool IsCompleted = true;\n            for(int i = 0; i < taskList.Count;i++)\n            {\n                IsCompleted = IsCompleted & taskList[i].IsCompleted;\n            }\n            return IsCompleted;\n         });\n        PlayerJerseyGenerator.Instance.SetCameraActive(false);\n    }\n\n    Vector3 lightLocalEulerAngles;\n    public override void OnEnable()\n    {\n        base.OnEnable();\n        StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = new Vector3(60,60,0);\n\n    }\n\n    public override void OnDisable()\n    {\n        base.OnDisable();\n        StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = HomeScene3DPlayersController.HomeSceneMainLightEuler;\n    }\n\n\n    async GTask CreateJersey(int playerid)\n    {\n        \n        Material JerseyMat = playersAppearance[playerid].ClothGPUSKM.material;\n        Material SockMat = playersAppearance[playerid].LegMR.materials[0];\n        if (playerid == GoalKeeperId)\n        {\n            playersAppearance[playerid].HomeGKJerseyTex = GoalKeeper_Jerseytex;\n            playersAppearance[playerid].HomeGKSockTex = GoalKeeper_Socktex;\n\n            JerseyMat.SetTexture(\"_BaseMap\", GoalKeeper_Jerseytex);\n            SockMat.SetTexture(\"_BaseMap\", GoalKeeper_Socktex);\n        }\n        else\n        {\n            RenderTexture jerseytex;\n            RenderTexture socktex;\n            PlayerJerseyGenerator.Instance.TeamLogoTex = TeamLogoTex;\n            await PlayerJerseyGenerator_Hotfix.SetJerseyInfoAsync(JerseyIds[playerid]);\n\n            jerseytex = PlayerJerseyGenerator_Hotfix.GetDIYTex();\n            socktex = PlayerJerseyGenerator_Hotfix.GetSockTex();\n\n            JerseyTexList.Add(jerseytex);\n            JerseyTexList.Add(socktex);\n            JerseyMat.SetTexture(\"_BaseMap\", jerseytex);\n            SockMat.SetTexture(\"_BaseMap\", socktex);\n        }\n\n        Material ShoesMat = playersAppearance[playerid].LegMR.materials[1];\n        ShoesMat.SetTexture(\"_BaseMap\", Shoes[playerid]);\n    }\n\n   \n\n    bool isFrist = true;\n    public void Play(int index)\n    {\n        switch(index)\n        {\n            case 0:\n                curCurve = PlatformHotfix.SceneZoomManager.Instance.PvPMatchCamCurve;\n                //Platform.CameraAnimController.Instance.Cam.fieldOfView = 72;\n                break;\n            case 1:\n                curCurve = PlatformHotfix.SceneZoomManager.Instance.PvPMatchCamCurve2;\n                //Platform.CameraAnimController.Instance.Cam.fieldOfView = 40;\n                break;\n            case 2:\n                curCurve = PlatformHotfix.SceneZoomManager.Instance.PvPMatchCamCurve3;\n                //Platform.CameraAnimController.Instance.Cam.fieldOfView = 40;\n                break;\n        }\n\n        if(isFrist){\n            ReSetCamCurve();\n            isFrist = false;\n        }else{\n            Platform.CameraAnimController.Instance.EaseCurve = curCurve;\n            Platform.CameraAnimController.Instance.CurveEaseVal = 0f;\n            Platform.CameraAnimController.Instance.SetCurveEaseVal(1,0.3f);\n        }\n\n        footBallTrans.localPosition = footBallPos[index];\n\n        for(int i = 0; i< Players.Length;i++)\n        {\n            if(index * 2 == i || (index*2+1) == i)\n            {\n                Players[i].gameObject.SetActive(true);\n            }else{\n                Players[i].gameObject.SetActive(false);\n            }\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"SetShadowForIncident\");\n    }\n\n    public void ReSetCamCurve()\n    {\n        Platform.StackViewManager.Instance.SetCamEaseCurve(curCurve);\n    }\n    public override void OnDestroy()\n    {\n        foreach(var tex in JerseyTexList)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(tex);\n        }\n        JerseyTexList.Clear();\n    }\n}\n//#endif", "cropped_inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class RealtimeMatch3DView : View3DBase\n{\n\n    //d1d1d1ff_d1d1d1ff_d1d1d1ff_0_20212022_22_538bc1ff_d8d8d8ff_538bc1ff\n    //201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\n    static string[] JerseyIds = new string[] {\n        \"3_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",\n        \"6_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"7_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"31_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\", //\u5b88\u95e8\u5458\n        \"10_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"17_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",\n\n    };\n    static Vector3 [] footBallPos = new Vector3[3]{\n        new Vector3(-0.6f,0.18f,-1.3f),\n        new Vector3(58.058f,1.833f,47.439f),\n        new Vector3(20.5f,0.2f,3.33f) \n    };\n\n     //\u961f\u5fbd\n    private Texture2D TeamLogoTex;\n    [SerializeField]\n    private Transform[] Players;\n    private Texture[] Shoes;\n\n    [SerializeField]\n    private Transform footBallTrans;\n\n    private PlayerTextures playerTextures;\n    \n    HighPolyPlayerAppearanceController[] playersAppearance;\n\n    List<RenderTexture> JerseyTexList = new List<RenderTexture>();\n\n     //\u5b88erseytex; //\u7403\u8863\n    private Texture2D GoalKeeper_Socktex; //\u889c\u5b50\n\n    private BezierCurve curCurve;\n\n    static string [] PlayersPath = new string []{\"1A\",\"1B\",\"2A\",\"2B\",\"3A\",\"3B\"};\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        playerTextures = this.gameObject.GetComponent<PlayerTextures>();\n        TeamLogoTex = playerTextures.TeamLogoTex;\n        Shoes = playerTextures.Shoes;\n        GoalKeeper_Jerseytex = playerTextures.GoalKeeper_Jerseytex;\n        GoalKeeper_Socktex = playerTextures.GoalKeeper_Socktex;\n\n        footBallTrans = this.transform.Find(\"FootballRoot\");\n\n        Players = new Transform[PlayersPath.Length];\n        for(int i = 0; i< Players.Length;i++)\n        {\n            Players[i] = this.transform.Find(PlayersPath[i]);\n            Players[i].gameObject.SetActive(false);\n        }\n    }\n\n    public override async GTask Start()\n    {\n        PlayerJerseyGenerator.Instance.Initialize();\n\n        playersAppearance = new HighPolyPlayerAppearanceController[Players.Length];\n\n        List<GTask> taskList = new List<GTask>(); \n        for (int i = 0; i < Players.Length; i++)\n        {\n            playersAppearance[i] = Players[i].GetComponent<HighPolyPlayerAppearanceController>();\n\n            if (i == GoalKeeperId)\n            {\n                playersAppearance[i].IsKeeper = true;\n                playersAppearance[i].SetGlove(true);\n            }\n\n            GTask task = CreateJersey(i);\n            taskList.Add(task);\n            // playersAppearance[i].HeadMR.material.SetFloat(\"_Smoothness\", 1.42f);\n            // playersAppearance[i].LimbGPUSKM.material.SetFloat(\"_Smoothness\", 1.15f);\n        }\n\n         await GAsync.WaitUntil(() => {\n            bool IsCompleted = true;\n            for(int i = 0; i < taskList.Count;i++)\n            {\n                IsCompleted = IsCompleted & taskList[i].IsCompleted;\n            }\n            return IsCompleted;\n         });\n        PlayerJerseyGenerator.Instance.SetCameraActive(false);\n    }\n\n    Vector3 lightLocalEulerAngles;\n    public override void OnEnable()\n    {\n        base.OnEnable();\n        StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = new Vector3(60,60,0);\n\n    }\n\n    public override void OnDisable()\n    {\n        base.OnDisable();\n        StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = HomeScene3DPlayersController.HomeSceneMainLightEuler;\n    }\n\n\n    async GTask CreateJersey(int playerid)\n    {\n        \n        Material JerseyMat = playersAppearance[playerid].ClothGPUSKM.material;\n        Material SockMat = playersAppearance[playerid].LegMR.materials[0];\n        if (playerid == GoalKeeperId)\n        {\n            playersAppearance[playerid].HomeGKJerseyTex = GoalKeeper_Jerseytex;\n            playersAppearance[playerid].HomeGKSockTex = GoalKeeper_Socktex;\n\n            JerseyMat.SetTexture(\"_BaseMap\", GoalKeeper_Jerseytex);\n            SockMat.SetTexture(\"_BaseMap\", GoalKeeper_Socktex);\n        }\n        else\n        {\n            RenderTexture jerseytex;\n            RenderTexture socktex;\n            PlayerJerseyGenerator.Instance.TeamLogoTex = TeamLogoTex;\n            await PlayerJerseyGenerator_Hotfix.SetJerseyInfoAsync(JerseyIds[playerid]);\n\n            jerseytex = PlayerJerseyGenerator_Hotfix.GetDIYTex();\n            socktex = PlayerJerseyGenerator_Hotfix.GetSockTex();\n\n            JerseyTexList.Add(jerseytex);\n            JerseyTexList.Add(socktex);\n            JerseyMat.SetTexture(\"_BaseMap\", jerseytex);\n            SockMat.SetTexture(\"_BaseMap\", socktex);\n        }\n\n        Material ShoesMat = playersAppearance[playerid].LegMR.materials[1];\n        ShoesMat.SetTexture(\"_BaseMap\", Shoes[playerid]);\n    }\n\n   \n\n    bool isFrist = true;\n    public void Play(int index)\n    {\n        switch(index)\n        {\n            case 0:\n                curCurve = PlatformHotfix.SceneZoomManager.Instance.PvPMatchCamCurve;\n                //Platform.CameraAnimController.Instance.Cam.fieldOfView = 72;\n                break;\n            case 1:\n                curCurve = PlatformHotfix.SceneZoomManager.Instance.PvPMatchCamCurve2;\n                //Platform.CameraAnimController.Instance.Cam.fieldOfView = 40;\n                break;\n            case 2:\n                curCurve = PlatformHotfix.SceneZoomManager.Instance.PvPMatchCamCurve3;\n                //Platform.CameraAnimController.Instance.Cam.fieldOfView = 40;\n                break;\n        }\n\n        if(isFrist){\n            ReSetCamCurve();\n            isFrist = false;\n        }else{\n            Platform.CameraAnimController.Instance.EaseCurve = curCurve;\n            Platform.CameraAnimController.Instance.CurveEaseVal = 0f;\n            Platform.CameraAnimController.Instance.SetCurveEaseVal(1,0.3f);\n        }\n\n        footBallTrans.localPosition = footBallPos[index];\n\n        for(int i = 0; i< Players.Length;i++)\n        {\n            if(index * 2 == i || (index*2+1) == i)\n            {\n                Players[i].gameObject.SetActive(true);\n            }else{\n                Players[i].gameObject.SetActive(false);\n            }\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"SetShadowForIncident\");\n    }\n\n    public void ReSetCamCurve()\n    {\n        Platform.StackViewManager.Instance.SetCamEaseCurve(curCurve);\n    }\n    public override void OnDestroy()\n    {\n        foreach(var tex in JerseyTexList)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(tex);\n        }\n        JerseyTexList.Clear();\n    }\n}\n//#endif", "starcoder_inputs": "<fim_prefix>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class RealtimeMatch3DView : View3DBase\n{\n\n    //d1d1d1ff_d1d1d1ff_d1d1d1ff_0_20212022_22_538bc1ff_d8d8d8ff_538bc1ff\n    //201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\n    static string[] JerseyIds = new string[] {\n        \"3_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",\n        \"6_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"7_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"31_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\", //\u5b88\u95e8\u5458\n        \"10_GALASPORTS_ffffffff_ffffffff_ffffffff_3_20202021_1_052134ff_d32f2fff_052134ff\",\n        \"17_GALASPORTS_201f40FF_201f40FF_201f40FF_0_20222023_22_5289beff_5a191fFF_dbdbdbff\",\n\n    };\n    static Vector3 [] footBallPos = new Vector3[3]{\n        new Vector3(-0.6f,0.18f,-1.3f),\n        new Vector3(58.058f,1.833f,47.439f),\n        new Vector3(20.5f,0.2f,3.33f) \n    };\n\n     //\u961f\u5fbd\n    private Texture2D TeamLogoTex;\n    [SerializeField]\n    private Transform[] Players;\n    private Texture[] Shoes;\n\n    [SerializeField]\n    private Transform footBallTrans;\n\n    private PlayerTextures playerTextures;\n    \n    HighPolyPlayerAppearanceController[] playersAppearance;\n\n    List<RenderTexture> JerseyTexList = new List<RenderTexture>();\n\n     //\u5b88<fim_suffix>erseytex; //\u7403\u8863\n    private Texture2D GoalKeeper_Socktex; //\u889c\u5b50\n\n    private BezierCurve curCurve;\n\n    static string [] PlayersPath = new string []{\"1A\",\"1B\",\"2A\",\"2B\",\"3A\",\"3B\"};\n    public override async GTask Awake()\n    {\n        await base.Awake();\n        playerTextures = this.gameObject.GetComponent<PlayerTextures>();\n        TeamLogoTex = playerTextures.TeamLogoTex;\n        Shoes = playerTextures.Shoes;\n        GoalKeeper_Jerseytex = playerTextures.GoalKeeper_Jerseytex;\n        GoalKeeper_Socktex = playerTextures.GoalKeeper_Socktex;\n\n        footBallTrans = this.transform.Find(\"FootballRoot\");\n\n        Players = new Transform[PlayersPath.Length];\n        for(int i = 0; i< Players.Length;i++)\n        {\n            Players[i] = this.transform.Find(PlayersPath[i]);\n            Players[i].gameObject.SetActive(false);\n        }\n    }\n\n    public override async GTask Start()\n    {\n        PlayerJerseyGenerator.Instance.Initialize();\n\n        playersAppearance = new HighPolyPlayerAppearanceController[Players.Length];\n\n        List<GTask> taskList = new List<GTask>(); \n        for (int i = 0; i < Players.Length; i++)\n        {\n            playersAppearance[i] = Players[i].GetComponent<HighPolyPlayerAppearanceController>();\n\n            if (i == GoalKeeperId)\n            {\n                playersAppearance[i].IsKeeper = true;\n                playersAppearance[i].SetGlove(true);\n            }\n\n            GTask task = CreateJersey(i);\n            taskList.Add(task);\n            // playersAppearance[i].HeadMR.material.SetFloat(\"_Smoothness\", 1.42f);\n            // playersAppearance[i].LimbGPUSKM.material.SetFloat(\"_Smoothness\", 1.15f);\n        }\n\n         await GAsync.WaitUntil(() => {\n            bool IsCompleted = true;\n            for(int i = 0; i < taskList.Count;i++)\n            {\n                IsCompleted = IsCompleted & taskList[i].IsCompleted;\n            }\n            return IsCompleted;\n         });\n        PlayerJerseyGenerator.Instance.SetCameraActive(false);\n    }\n\n    Vector3 lightLocalEulerAngles;\n    public override void OnEnable()\n    {\n        base.OnEnable();\n        StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = new Vector3(60,60,0);\n\n    }\n\n    public override void OnDisable()\n    {\n        base.OnDisable();\n        StadiumSceneController.Instance.StadiumLight.transform.localEulerAngles = HomeScene3DPlayersController.HomeSceneMainLightEuler;\n    }\n\n\n    async GTask CreateJersey(int playerid)\n    {\n        \n        Material JerseyMat = playersAppearance[playerid].ClothGPUSKM.material;\n        Material SockMat = playersAppearance[playerid].LegMR.materials[0];\n        if (playerid == GoalKeeperId)\n        {\n            playersAppearance[playerid].HomeGKJerseyTex = GoalKeeper_Jerseytex;\n            playersAppearance[playerid].HomeGKSockTex = GoalKeeper_Socktex;\n\n            JerseyMat.SetTexture(\"_BaseMap\", GoalKeeper_Jerseytex);\n            SockMat.SetTexture(\"_BaseMap\", GoalKeeper_Socktex);\n        }\n        else\n        {\n            RenderTexture jerseytex;\n            RenderTexture socktex;\n            PlayerJerseyGenerator.Instance.TeamLogoTex = TeamLogoTex;\n            await PlayerJerseyGenerator_Hotfix.SetJerseyInfoAsync(JerseyIds[playerid]);\n\n            jerseytex = PlayerJerseyGenerator_Hotfix.GetDIYTex();\n            socktex = PlayerJerseyGenerator_Hotfix.GetSockTex();\n\n            JerseyTexList.Add(jerseytex);\n            JerseyTexList.Add(socktex);\n            JerseyMat.SetTexture(\"_BaseMap\", jerseytex);\n            SockMat.SetTexture(\"_BaseMap\", socktex);\n        }\n\n        Material ShoesMat = playersAppearance[playerid].LegMR.materials[1];\n        ShoesMat.SetTexture(\"_BaseMap\", Shoes[playerid]);\n    }\n\n   \n\n    bool isFrist = true;\n    public void Play(int index)\n    {\n        switch(index)\n        {\n            case 0:\n                curCurve = PlatformHotfix.SceneZoomManager.Instance.PvPMatchCamCurve;\n                //Platform.CameraAnimController.Instance.Cam.fieldOfView = 72;\n                break;\n            case 1:\n                curCurve = PlatformHotfix.SceneZoomManager.Instance.PvPMatchCamCurve2;\n                //Platform.CameraAnimController.Instance.Cam.fieldOfView = 40;\n                break;\n            case 2:\n                curCurve = PlatformHotfix.SceneZoomManager.Instance.PvPMatchCamCurve3;\n                //Platform.CameraAnimController.Instance.Cam.fieldOfView = 40;\n                break;\n        }\n\n        if(isFrist){\n            ReSetCamCurve();\n            isFrist = false;\n        }else{\n            Platform.CameraAnimController.Instance.EaseCurve = curCurve;\n            Platform.CameraAnimController.Instance.CurveEaseVal = 0f;\n            Platform.CameraAnimController.Instance.SetCurveEaseVal(1,0.3f);\n        }\n\n        footBallTrans.localPosition = footBallPos[index];\n\n        for(int i = 0; i< Players.Length;i++)\n        {\n            if(index * 2 == i || (index*2+1) == i)\n            {\n                Players[i].gameObject.SetActive(true);\n            }else{\n                Players[i].gameObject.SetActive(false);\n            }\n        }\n\n        Platform.EventDispatcher.TriggerEvent(\"SetShadowForIncident\");\n    }\n\n    public void ReSetCamCurve()\n    {\n        Platform.StackViewManager.Instance.SetCamEaseCurve(curCurve);\n    }\n    public override void OnDestroy()\n    {\n        foreach(var tex in JerseyTexList)\n        {\n            GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(tex);\n        }\n        JerseyTexList.Clear();\n    }\n}\n//#endif<fim_middle>"}
{"inputs": "\ufeffusing System;\nusing UnityEngine;\nusing UnityEngine.Rendering.Universal;\nusing Platform;\n\nnamespace PlatformHotfix\n{\n    public class SceneZoomManager\n    {\n         private static SceneZoomManager _instance;\n        public static SceneZoomManager Instance\n        {\n            get {\n                if(_instance == null)\n                {\n                    _instance = new SceneZoomManager();\n                    _instance.Init();\n                }\n                return _instance; \n            }\n        }\n\n        Transform transform;\n\n        SceneZoomData sceneZoomData;\n\n        private Camera _cam => sceneZoomData._cam;\n        public BezierCurve TeamViewCamCurve =>sceneZoomData.TeamViewCamCurve;\n        public BezierCurve[] TrainingRoomCamCurves =>sceneZoomData.TrainingRoomCamCurves;\n        public BezierCurve TransferEntranceCurve =>sceneZoomData.TransferEntranceCurve;\n        public BezierCurve CollectionEntranceCurve =>sceneZoomData.CollectionEntranceCurve;\n        public BezierCurve BossDesktopCamCurve =>sceneZoomData.BossDesktopCamCurve;\n        public BezierCurve LockRoomCamCurve =>sceneZoomData.LockRoomCamCurve;\n        public BezierCurve LockRoomCamCurve2 =>sceneZoomData.LockRoomCamCurve2;\n        public BezierCurve PvPMatchCamCurve =>sceneZoomData.PvPMatchCamCurve;\n        public BezierCurve PvPMatchCamCurve2 =>sceneZoomData.PvPMatchCamCurve2;\n        public BezierCurve PvPMatchCamCurve3 =>sceneZoomData.PvPMatchCamCurve3;\n        public BezierCurve RankMatchCamCurve =>sceneZoomData.RankMatchCamCurve;\n        public BezierCurve RankMatchCamCurve_WS =>sceneZoomData.RankMatchCamCurve_WS;\n        public BezierCurve RankUpgradeCamCurve => sceneZoomData.RankUpgradeCamCurve;\n        public BezierCurve EliteMatchCamCurve =>sceneZoomData.EliteMatchCamCurve;\n        public BezierCurve LiveEventMatchCamCurve =>sceneZoomData.LiveEventMatchCamCurve;\n        public BezierCurve PvpWaitCamCurve =>sceneZoomData.PvpWaitCamCurve;\n        public BezierCurve RoadOfGloryCamCurve =>sceneZoomData.RoadOfGloryCamCurve;\n        public BezierCurve BattlePassCamCurve =>sceneZoomData.BattlePassCamCurve;\n        public BezierCurve FullScreenUICurve =>sceneZoomData.FullScreenUICurve;\n        public BezierCurve DreamLineupCurve =>sceneZoomData.DreamLineupCurve;\n        //private Material _stadiumSkymat => sceneZoomData._stadiumSkymat;\n        //private Material _indoorSkymat => sceneZoomData._stadiumSkymat;\n        \n        public int UpgradeCurveIndex = 0;\n\n        private float _coverDepthDelta=.5f;\n        private Color _backgroundColor = new Color(0.1982f,0,0.368f);\n\n      \n\n        public void Awake(Transform transform)\n        {\n            this.transform = transform;\n\n            sceneZoomData = this.transform.GetComponent<SceneZoomData>();\n        }\n        private void Init() {\n           \n        }\n\n        public void Destroy()\n        {\n            _instance = null;\n            transform = null;\n            sceneZoomData = null;\n        }\n        /*******************************************\n        \u4e0d\u540c\u573a\u666f\u4e0b\u955c\u5934\u72b6\u6001\u8bbe\u7f6e\n    *******************************************/\n        public void SetStadiumCamMode(bool isPush){\n            //Scene3DManager.Instance.HideAll();\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            Scene3DManager.Instance.SetSceneActive(true);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(72,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f),0);\n            // CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n            CameraAnimController.Instance.EnablePostProcess(true);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n        public void SetPvPMode(bool isPush){\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(72,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0.13f, 0.15f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta =  0.2f;\n        }\n\n        public void SetRankMatchMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetBlur(true);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n            CameraAnimController.Instance.EaseCurve = null;\n\n            if (isPush){\n                CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n                CameraAnimController.Instance.SetFOV(54, 0);\n                CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 54, 0);\n                CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 54, 0);\n                CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", Vector4.zero, 0);\n                CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraForTransparentObjects\", Vector4.zero, 0);\n            }\n            else{\n                float fov = HomeScene3DPlayers3DView.FeatureFOV_Wide;\n                if (!TAManager.IsWideScreen())\n                {\n                    //\u6bd4\u8f83\u7a84\u7684\u5c4f\u5e55\u8bbe\u7f6e\n                    fov = HomeScene3DPlayers3DView.FeatureFOV_Slim;\n                }\n                CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0.15f),0);\n                CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", fov, 0);\n                CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", fov, 0);\n                CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", new Vector4(0, 0,-1,0), 0);\n                CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraForTransparentObjects\", new Vector4(0, 0, -1, 0), 0);\n                CameraAnimController.Instance.SetFOV(70, 0);\n            }\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n         public void SetRankUpgradeMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n            CameraAnimController.Instance.EaseCurve = null;\n            CameraAnimController.Instance.SetLensShift(Vector2.zero,0);\n            CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 54, 0);\n            CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 54, 0);\n            CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", Vector4.zero, 0);\n            CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraForTransparentObjects\", Vector4.zero, 0);\n            CameraAnimController.Instance.SetFOV(54, 0);\n            \n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetTeamManageMode(bool isPush){\n            //Scene3DManager.Instance.HideAll();\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,.6f,0f);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetFOV( ((float)Screen.width / Screen.height < 1.5f ? 80f : 67f),0);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            CameraAnimController.Instance.SetLensShift(new Vector2(-.075f, 0),0);\n            CameraAnimController.Instance.SetBlur(false);\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetTrainingRoomMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,.0f,0f);\n\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(45,0);\n            CameraAnimController.Instance.SetLensShift(Vector2.zero,0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n        \n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _indoorSkymat;\n            _coverDepthDelta = 0.1f;\n        }\n    \n        public void SetBossRoomMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,.0f,0f);\n\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(45,0);\n        \n            CameraAnimController.Instance.SetLensShift(Vector2.zero,0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _indoorSkymat;\n            Platform.EventDispatcher.TriggerEvent(\"SetBossRoomReflectionProbe\",0);\n            _coverDepthDelta = 0.1f;\n        }\n\n        public void SetBossDesktopMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,0f,0f,.0f,0f);\n\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(70,0);\n            CameraAnimController.Instance.SetLensShift(new Vector3(-0.14f,0),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n        \n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _indoorSkymat;\n            Platform.EventDispatcher.TriggerEvent(\"SetBossRoomReflectionProbe\",1);\n            _coverDepthDelta = 0.1f;\n        }\n        public void SetLockRoomMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,.0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(45,0);\n            CameraAnimController.Instance.SetLensShift(Vector2.zero,0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n        \n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _indoorSkymat;\n            _coverDepthDelta = 0.1f;\n        }\n    \n        public void SetEliteMatchMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(70,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0.16f, 0.15f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n        \n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetLiveEventMatchMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,.3f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(40,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.EnablePostProcess(false);\n        \n            _cam.clearFlags = CameraClearFlags.Color;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetChallengeRoadMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,1f,0f,0f,.3f);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetFOV(40,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.EnablePostProcess(false);\n        \n            _cam.clearFlags = CameraClearFlags.Color;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetRoadOfGloryMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,0f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n        \n            CameraAnimController.Instance.SetFOV(40,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n\n            _cam.clearFlags = CameraClearFlags.Color;\n            _cam.backgroundColor = new Color(63f/255,29f/255,118/255f,0);\n\n        }\n        public void SetPVPWaitMode(bool isPush){\n            //Scene3DManager.Instance.HideOthersExcept(Scene3DManager.Instance.PvpWaitPlayers3DView);\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,0f,0f,0f,.3f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(48,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetFullScreenUIMode(bool isPush){\n            //Scene3DManager.Instance.HideOthersExcept(Scene3DManager.Instance.FullScreenBgView);\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,0f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(40f,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            _cam.clearFlags = CameraClearFlags.Color;\n            _cam.backgroundColor = _backgroundColor;\n            _coverDepthDelta = 0.5f;\n        }\n         public void SetElevenGuyCamMode(bool isPush){\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            Scene3DManager.Instance.SetSceneActive(true);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(72,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f),0);\n            // CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n            CameraAnimController.Instance.EnablePostProcess(true);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            Platform.EventDispatcher.TriggerEvent(\"ShowElevenGuyWithAni\");\n            Scene3DManager.Instance.Remove3DView<LockRoom3DView>();\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetDreamLineupCamMode(bool isPush)\n        {\n            Scene3DManager.Instance.SetSceneActive(true);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetFOV(30,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0, -0.1f),0);\n            CameraAnimController.Instance.SetBlur(true,doFBlurStart:0.4f);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n        }\n        /*******************************************\n        \u955c\u5934\u8fd0\u52a8\u51fd\u6570\u52a8\u753b\n    *******************************************/\n\n        public void MatchEntranceAnim(Action onComplete)\n        {\n            CameraAnimController.Instance.EaseCurve = null;\n            CameraAnimController.Instance.StopCurveEase();\n            CameraAnimController.Instance.SetAnchorToHome();\n            _cam.transform.position = GetCamPosAtDepth(0);\n            _cam.transform.rotation = GetCamRot();\n            Vector3 endPos = GetCamPosAtDepth(1);\n            CameraAnimController.Instance.MoveTo(endPos, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut,false,onComplete);\n        }\n        public void RankMatchEnterAnim(Action onComplete){\n            if(TAManager.IsWideScreen()) //\u5c4f\u5e55\u9002\u914d\n            {\n                CameraAnimController.Instance.EaseCurve = RankMatchCamCurve;\n            }else{\n                CameraAnimController.Instance.EaseCurve = RankMatchCamCurve_WS;\n            }\n            CameraAnimController.Instance.CurveEaseVal = 0f;\n            CameraAnimController.Instance.SetCurveEaseVal(1,StackViewManager.Instance.AnimSpeed*2);\n            Go.DelayCall(()=>{\n                CameraAnimController.Instance.EaseCurve = null;\n                CameraAnimController.Instance.MoveTo(new Vector3(31.3f, 1.6f, 0), StackViewManager.Instance.AnimPushSpeed, GoEaseType.ExpoIn, true, () => {\n                   RankMatchShowCupAnim(onComplete);\n                });\n            },1.4f);\n        }\n\n        public void RankMatchShowCupAnim(Action onComplete)\n        {\n            CameraAnimController.Instance.EaseCurve = null;\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0.15f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.Cam.transform.position = new Vector3(31.5f, 1.4f, 0);\n            CameraAnimController.Instance.Cam.transform.eulerAngles = new Vector3(0, -90, 0);\n            CameraAnimController.Instance.MoveTo(new Vector3(30.5f, 1.4f, 0), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut, true, onComplete);\n            CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 42, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 42, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", Vector4.zero, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraForTransparentObjects\", Vector4.zero, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetFOV(70, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        }\n\n        // public void RankUpgradeShowCupAnim(Action onComplete)\n        // {\n        //     CameraAnimController.Instance.EaseCurve = null;\n        //     CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0.15f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        //     CameraAnimController.Instance.Cam.transform.position = new Vector3(-6f, 1.4f, 500);\n        //     CameraAnimController.Instance.Cam.transform.eulerAngles = new Vector3(0, 90, 0);\n        //     CameraAnimController.Instance.MoveTo(new Vector3(-11f, 1.4f, 500f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut, true, onComplete);\n        //     CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 42, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        //     CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 42, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        //     CameraAnimController.Instance.SetFOV(70, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        //     CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        // }\n\n        public void LiveEventMatchEnterAnim(Action onComplete){\n            CameraAnimController.Instance.EaseCurve = LiveEventMatchCamCurve;\n            CameraAnimController.Instance.CurveEaseVal = 0f;\n            CameraAnimController.Instance.SetCurveEaseVal(1f, StackViewManager.Instance.AnimSpeed,GoEaseType.ExpoOut);\n            Go.DelayCall(()=>{\n                CameraAnimController.Instance.EaseCurve = null;\n                CameraAnimController.Instance.MoveTo(new Vector3(200,0,7), StackViewManager.Instance.AnimSpeed*2,GoEaseType.ExpoInOut, true,onComplete);\n            },.5f);\n        }\n\n        public void ChallengeRoadEnterAnim(Action onComplete)\n        {\n            CameraAnimController.Instance.EaseCurve = LiveEventMatchCamCurve;\n            CameraAnimController.Instance.CurveEaseVal = 0f;\n            CameraAnimController.Instance.SetCurveEaseVal(1f, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            Go.DelayCall(() =>\n            {\n                CameraAnimController.Instance.EaseCurve = null;\n                CameraAnimController.Instance.MoveTo(new Vector3(200,0,10), StackViewManager.Instance.AnimSpeed*2,GoEaseType.ExpoInOut, true,onComplete);\n            }, .5f);\n        }\n\n        Vector3 GetCamPosAtDepth(float depth){\n            if(StackViewManager.Instance.IsCovered){\n                depth+=_coverDepthDelta;\n            }\n            Vector3 pos = CameraAnimController.Instance.CamAnchorPos - depth*2*CameraAnimController.Instance.CamAnchorDir;\n            return  pos;\n        }\n        Quaternion GetCamRot(){\n            Quaternion rot =  CameraAnimController.Instance.CamAnchorRot;\n            rot = rot*Quaternion.Euler(CameraAnimController.Instance.AddRotation);\n            return rot;\n        }\n\n        public BezierCurve GetRandomUpgradeViewEnterExitCurve()\n        {\n            UpgradeCurveIndex = UnityEngine.Random.Range(0, TrainingRoomCamCurves.Length);\n            return TrainingRoomCamCurves[UpgradeCurveIndex];\n        }\n        public BezierCurve GetUpgradeViewEnterExitCurve()\n        {\n            return TrainingRoomCamCurves[UpgradeCurveIndex];\n        }\n\n#region  \u6682\u5b58\u6444\u50cf\u673a\u6570\u636e\n       \n        const int Render_Cout = 10; \n        public CameraCacheData StorageCameraProperty()\n        {\n            CameraCacheData _camerData = new CameraCacheData();\n            _camerData.position           = _cam.transform.position;\n            _camerData.eulerAngles        = _cam.transform.eulerAngles;\n            _camerData.localScale         = _cam.transform.localScale;\n            _camerData.fieldOfView        = _cam.fieldOfView;\n            _camerData.layerCullSpherical = _cam.layerCullSpherical;\n            _camerData.lensShift          = _cam.lensShift;\n            _camerData.gateFit            = _cam.gateFit;\n            _camerData.clearFlags         = _cam.clearFlags;\n            _camerData.renderIndex        = GetRenderIndex(_cam.GetComponent<UniversalAdditionalCameraData>().scriptableRenderer);\n            return _camerData;\n        }\n\n        public void RevertCameraProperty(CameraCacheData _camerData)\n        {\n            _cam.transform.position       = _camerData.position;\n            _cam.transform.eulerAngles    = _camerData.eulerAngles;\n            _cam.transform.localScale     = _camerData.localScale;\n            _cam.fieldOfView              = _camerData.fieldOfView;\n            _cam.layerCullSpherical       = _camerData.layerCullSpherical;\n            _cam.lensShift                = _camerData.lensShift;\n            _cam.gateFit                  = _camerData.gateFit;\n            _cam.clearFlags               = _camerData.clearFlags;\n            if(_camerData.renderIndex >=0)\n            {\n                _cam.GetComponent<UniversalAdditionalCameraData>().SetRenderer(_camerData.renderIndex);\n            }\n        }\n\n        private int GetRenderIndex(ScriptableRenderer scriptableRenderer)\n        {\n             for(int i = 0; i< Render_Cout;i++)\n            {\n                var render = UniversalRenderPipeline.asset.GetRenderer(i);\n                if(render == scriptableRenderer) \n                {\n                   return i;\n                }\n            }\n            return -1;\n        }\n#endregion\n    }\n}\n", "cropped_inputs": "\ufeffusing System;\nusing UnityEngine;\nusing UnityEngine.Rendering.Universal;\nusing Platform;\n\nnamespace PlatformHotfix\n{\n    public class SceneZoomManager\n    {\n         private static SceneZoomManager _instance;\n        public static SceneZoomManager Instance\n        {\n            get {\n                if(_instance == null)\n                {\n                    _instance = new SceneZoomManager();\n                    _instance.Init();\n                }\n                return _instance; \n            }\n        }\n\n        Transform transform;\n\n        SceneZoomData sceneZoomData;\n\n        private Camera _cam => sceneZoomData._cam;\n        public BezierCurve TeamViewCamCurve =>sceneZoomData.TeamViewCamCurve;\n        public BezierCurve[] TrainingRoomCamCurves =>sceneZoomData.TrainingRoomCamCurves;\n        public BezierCurve TransferEntranceCurve =>sceneZoomData.TransferEntranceCurve;\n        public BezierCurve CollectionEntranceCurve =>sceneZoomData.CollectionEntranceCurve;\n        public BezierCurve BossDesktopCamCurve =>sceneZoomData.BossDesktopCamCurve;\n        public BezierCurve LockRoomCamCurve =>sceneZoomData.LockRoomCamCurve;\n        public BezierCurve LockRoomCamCurve2 =>sceneZoomData.LockRoomCamCurve2;\n        public BezierCurve PvPMatchCamCurve =>sceneZoomData.PvPMatchCamCurve;\n        public BezierCurve PvPMatchCamCurve2 =>sceneZoomData.PvPMatchCamCurve2;\n        public BezierCurve PvPMatchCamCurve3 =>sceneZoomData.PvPMatchCamCurve3;\n        public BezierCurve RankMatchCamCurve =>sceneZoomData.RankMatchCamCurve;\n        public BezierCurve RankMatchCamCurve_WS =>sceneZoomData.RankMatchCamCurve_WS;\n        public BezierCurve RankUpgradeCamCurve => sceneZoomData.RankUpgradeCamCurve;\n        public BezierCurve EliteMatchCamCurve =>sceneZoomData.EliteMatchCamCurve;\n        public BezierCurve LiveEventMatchCamCurve =>sceneZoomData.LiveEventMatchCamCurve;\n        public BezierCurve PvpWaitCamCurve =>sceneZoomData.PvpWaitCamCurve;\n        public BezierCurve RoadOfGloryCamCurve =>sceneZoomData.RoadOfGloryCamCurve;\n        public BezierCurve BattlePassCamCurve =>sceneZoomData.BattlePassCamCurve;\n        public BezierCurve FullScreenUICurve =>sceneZoomData.FullScreenUICurve;\n        public BezierCurve DreamLineupCurve =>sceneZoomData.DreamLineupCurve;\n        //private Material _stadiumSkymat => sceneZoomData._stadiumSkymat;\n        //private Material _indoorSkymat => sceneZoomData._stadiumSkymat;\n        \n        public int UpgradeCurveIndex = 0;\n\n        private float _coverDepthDelta=.5f;\n        private Color _backgroundColor = new Color(0.1982f,0,0.368f);\n\n      \n\n        public void Awake(Transform transform)\n        {\n            this.transform = transform;\n\n            sceneZoomData = this.transform.GetComponent<SceneZoomData>();\n        }\n        private void Init() {\n           \n        }\n\n        public void Destroy()\n        {\n            _instance = null;\n            transform = null;\n            sceneZoomData = null;\n        }\n        /*******************************************\n        \u4e0d\u540c\u573a\u666f\u4e0b\u955c\u5934\u72b6\u6001\u8bbe\u7f6e\n    *******************************************/\n        public void SetStadiumCamMode(bool isPush){\n            //Scene3DManager.Instance.HideAll();\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            Scene3DManager.Instance.SetSceneActive(true);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(72,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f),0);\n            // CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n            CameraAnimController.Instance.EnablePostProcess(true);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n        public void SetPvPMode(bool isPush){\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(72,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0.13f, 0.15f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta =  0.2f;\n        }\n\n        public void SetRankMatchMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetBlur(true);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n            CameraAnimController.Instance.EaseCurve = null;\n\n            if (isPush){\n                CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n                CameraAnimController.Instance.SetFOV(54, 0);\n                CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 54, 0);\n                CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 54, 0);\n                CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", Vector4.zero, 0);\n                CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraForTransparentObjects\", Vector4.zero, 0);\n            }\n            else{\n                float fov = HomeScene3DPlayers3DView.FeatureFOV_Wide;\n                if (!TAManager.IsWideScreen())\n                {\n                    //\u6bd4\u8f83\u7a84\u7684\u5c4f\u5e55\u8bbe\u7f6e\n                    fov = HomeScene3DPlayers3DView.FeatureFOV_Slim;\n                }\n                CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0.15f),0);\n                CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", fov, 0);\n                CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", fov, 0);\n                CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", new Vector4(0, 0,-1,0), 0);\n                CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraForTransparentObjects\", new Vector4(0, 0, -1, 0), 0);\n                CameraAnimController.Instance.SetFOV(70, 0);\n            }\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n         public void SetRankUpgradeMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n            CameraAnimController.Instance.EaseCurve = null;\n            CameraAnimController.Instance.SetLensShift(Vector2.zero,0);\n            CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 54, 0);\n            CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 54, 0);\n            CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", Vector4.zero, 0);\n            CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraForTransparentObjects\", Vector4.zero, 0);\n            CameraAnimController.Instance.SetFOV(54, 0);\n            \n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetTeamManageMode(bool isPush){\n            //Scene3DManager.Instance.HideAll();\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,.6f,0f);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetFOV( ((float)Screen.width / Screen.height < 1.5f? 80f : 67f),0);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            CameraAnimController.Instance.SetLensShift(new Vector2(-.075f, 0),0);\n            CameraAnimController.Instance.SetBlur(false);\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetTrainingRoomMode(bool isPush){\n            Scene3DManager.Instance.Set,.5f,0f,.0f,0f);\n\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(45,0);\n            CameraAnimController.Instance.SetLensShift(Vector2.zero,0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n        \n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _indoorSkymat;\n            _coverDepthDelta = 0.1f;\n        }\n    \n        public void SetBossRoomMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,.0f,0f);\n\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(45,0);\n        \n            CameraAnimController.Instance.SetLensShift(Vector2.zero,0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _indoorSkymat;\n            Platform.EventDispatcher.TriggerEvent(\"SetBossRoomReflectionProbe\",0);\n            _coverDepthDelta = 0.1f;\n        }\n\n        public void SetBossDesktopMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,0f,0f,.0f,0f);\n\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(70,0);\n            CameraAnimController.Instance.SetLensShift(new Vector3(-0.14f,0),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n        \n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _indoorSkymat;\n            Platform.EventDispatcher.TriggerEvent(\"SetBossRoomReflectionProbe\",1);\n            _coverDepthDelta = 0.1f;\n        }\n        public void SetLockRoomMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,.0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(45,0);\n            CameraAnimController.Instance.SetLensShift(Vector2.zero,0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n        \n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _indoorSkymat;\n            _coverDepthDelta = 0.1f;\n        }\n    \n        public void SetEliteMatchMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(70,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0.16f, 0.15f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n        \n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetLiveEventMatchMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,.3f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(40,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.EnablePostProcess(false);\n        \n            _cam.clearFlags = CameraClearFlags.Color;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetChallengeRoadMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,1f,0f,0f,.3f);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetFOV(40,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.EnablePostProcess(false);\n        \n            _cam.clearFlags = CameraClearFlags.Color;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetRoadOfGloryMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,0f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n        \n            CameraAnimController.Instance.SetFOV(40,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n\n            _cam.clearFlags = CameraClearFlags.Color;\n            _cam.backgroundColor = new Color(63f/255,29f/255,118/255f,0);\n\n        }\n        public void SetPVPWaitMode(bool isPush){\n            //Scene3DManager.Instance.HideOthersExcept(Scene3DManager.Instance.PvpWaitPlayers3DView);\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,0f,0f,0f,.3f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(48,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetFullScreenUIMode(bool isPush){\n            //Scene3DManager.Instance.HideOthersExcept(Scene3DManager.Instance.FullScreenBgView);\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,0f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(40f,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            _cam.clearFlags = CameraClearFlags.Color;\n            _cam.backgroundColor = _backgroundColor;\n            _coverDepthDelta = 0.5f;\n        }\n         public void SetElevenGuyCamMode(bool isPush){\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            Scene3DManager.Instance.SetSceneActive(true);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(72,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f),0);\n            // CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n            CameraAnimController.Instance.EnablePostProcess(true);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            Platform.EventDispatcher.TriggerEvent(\"ShowElevenGuyWithAni\");\n            Scene3DManager.Instance.Remove3DView<LockRoom3DView>();\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetDreamLineupCamMode(bool isPush)\n        {\n            Scene3DManager.Instance.SetSceneActive(true);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetFOV(30,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0, -0.1f),0);\n            CameraAnimController.Instance.SetBlur(true,doFBlurStart:0.4f);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n        }\n        /*******************************************\n        \u955c\u5934\u8fd0\u52a8\u51fd\u6570\u52a8\u753b\n    *******************************************/\n\n        public void MatchEntranceAnim(Action onComplete)\n        {\n            CameraAnimController.Instance.EaseCurve = null;\n            CameraAnimController.Instance.StopCurveEase();\n            CameraAnimController.Instance.SetAnchorToHome();\n            _cam.transform.position = GetCamPosAtDepth(0);\n            _cam.transform.rotation = GetCamRot();\n            Vector3 endPos = GetCamPosAtDepth(1);\n            CameraAnimController.Instance.MoveTo(endPos, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut,false,onComplete);\n        }\n        public void RankMatchEnterAnim(Action onComplete){\n            if(TAManager.IsWideScreen()) //\u5c4f\u5e55\u9002\u914d\n            {\n                CameraAnimController.Instance.EaseCurve = RankMatchCamCurve;\n            }else{\n                CameraAnimController.Instance.EaseCurve = RankMatchCamCurve_WS;\n            }\n            CameraAnimController.Instance.CurveEaseVal = 0f;\n            CameraAnimController.Instance.SetCurveEaseVal(1,StackViewManager.Instance.AnimSpeed*2);\n            Go.DelayCall(()=>{\n                CameraAnimController.Instance.EaseCurve = null;\n                CameraAnimController.Instance.MoveTo(new Vector3(31.3f, 1.6f, 0), StackViewManager.Instance.AnimPushSpeed, GoEaseType.ExpoIn, true, () => {\n                   RankMatchShowCupAnim(onComplete);\n                });\n            },1.4f);\n        }\n\n        public void RankMatchShowCupAnim(Action onComplete)\n        {\n            CameraAnimController.Instance.EaseCurve = null;\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0.15f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.Cam.transform.position = new Vector3(31.5f, 1.4f, 0);\n            CameraAnimController.Instance.Cam.transform.eulerAngles = new Vector3(0, -90, 0);\n            CameraAnimController.Instance.MoveTo(new Vector3(30.5f, 1.4f, 0), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut, true, onComplete);\n            CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 42, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 42, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", Vector4.zero, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraForTransparentObjects\", Vector4.zero, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetFOV(70, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        }\n\n        // public void RankUpgradeShowCupAnim(Action onComplete)\n        // {\n        //     CameraAnimController.Instance.EaseCurve = null;\n        //     CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0.15f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        //     CameraAnimController.Instance.Cam.transform.position = new Vector3(-6f, 1.4f, 500);\n        //     CameraAnimController.Instance.Cam.transform.eulerAngles = new Vector3(0, 90, 0);\n        //     CameraAnimController.Instance.MoveTo(new Vector3(-11f, 1.4f, 500f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut, true, onComplete);\n        //     CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 42, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        //     CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 42, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        //     CameraAnimController.Instance.SetFOV(70, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        //     CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        // }\n\n        public void LiveEventMatchEnterAnim(Action onComplete){\n            CameraAnimController.Instance.EaseCurve = LiveEventMatchCamCurve;\n            CameraAnimController.Instance.CurveEaseVal = 0f;\n            CameraAnimController.Instance.SetCurveEaseVal(1f, StackViewManager.Instance.AnimSpeed,GoEaseType.ExpoOut);\n            Go.DelayCall(()=>{\n                CameraAnimController.Instance.EaseCurve = null;\n                CameraAnimController.Instance.MoveTo(new Vector3(200,0,7), StackViewManager.Instance.AnimSpeed*2,GoEaseType.ExpoInOut, true,onComplete);\n            },.5f);\n        }\n\n        public void ChallengeRoadEnterAnim(Action onComplete)\n        {\n            CameraAnimController.Instance.EaseCurve = LiveEventMatchCamCurve;\n            CameraAnimController.Instance.CurveEaseVal = 0f;\n            CameraAnimController.Instance.SetCurveEaseVal(1f, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            Go.DelayCall(() =>\n            {\n                CameraAnimController.Instance.EaseCurve = null;\n                CameraAnimController.Instance.MoveTo(new Vector3(200,0,10), StackViewManager.Instance.AnimSpeed*2,GoEaseType.ExpoInOut, true,onComplete);\n            },.5f);\n        }\n\n        Vector3 GetCamPosAtDepth(float depth){\n            if(StackViewManager.Instance.IsCovered){\n                depth+=_coverDepthDelta;\n            }\n            Vector3 pos = CameraAnimController.Instance.CamAnchorPos - depth*2*CameraAnimController.Instance.CamAnchorDir;\n            return  pos;\n        }\n        Quaternion GetCamRot(){\n            Quaternion rot =  CameraAnimController.Instance.CamAnchorRot;\n            rot = rot*Quaternion.Euler(CameraAnimController.Instance.AddRotation);\n            return rot;\n        }\n\n        public BezierCurve GetRandomUpgradeViewEnterExitCurve()\n        {\n            UpgradeCurveIndex = UnityEngine.Random.Range(0, TrainingRoomCamCurves.Length);\n            return TrainingRoomCamCurves[UpgradeCurveIndex];\n        }\n        public BezierCurve GetUpgradeViewEnterExitCurve()\n        {\n            return TrainingRoomCamCurves[UpgradeCurveIndex];\n        }\n\n#region  \u6682\u5b58\u6444\u50cf\u673a\u6570\u636e\n       \n        const int Render_Cout = 10; \n        public CameraCacheData StorageCameraProperty()\n        {\n            CameraCacheData _camerData = new CameraCacheData();\n            _camerData.position           = _cam.transform.position;\n            _camerData.eulerAngles        = _cam.transform.eulerAngles;\n            _camerData.localScale         = _cam.transform.localScale;\n            _camerData.fieldOfView        = _cam.fieldOfView;\n            _camerData.layerCullSpherical = _cam.layerCullSpherical;\n            _camerData.lensShift          = _cam.lensShift;\n            _camerData.gateFit            = _cam.gateFit;\n            _camerData.clearFlags         = _cam.clearFlags;\n            _camerData.renderIndex        = GetRenderIndex(_cam.GetComponent<UniversalAdditionalCameraData>().scriptableRenderer);\n            return _camerData;\n        }\n\n        public void RevertCameraProperty(CameraCacheData _camerData)\n        {\n            _cam.transform.position       = _camerData.position;\n            _cam.transform.eulerAngles    = _camerData.eulerAngles;\n            _cam.transform.localScale     = _camerData.localScale;\n            _cam.fieldOfView              = _camerData.fieldOfView;\n            _cam.layerCullSpherical       = _camerData.layerCullSpherical;\n            _cam.lensShift                = _camerData.lensShift;\n            _cam.gateFit                  = _camerData.gateFit;\n            _cam.clearFlags               = _camerData.clearFlags;\n            if(_camerData.renderIndex >=0)\n            {\n                _cam.GetComponent<UniversalAdditionalCameraData>().SetRenderer(_camerData.renderIndex);\n            }\n        }\n\n        private int GetRenderIndex(ScriptableRenderer scriptableRenderer)\n        {\n             for(int i = 0; i< Render_Cout;i++)\n            {\n                var render = UniversalRenderPipeline.asset.GetRenderer(i);\n                if(render == scriptableRenderer) \n                {\n                   return i;\n                }\n            }\n            return -1;\n        }\n#endregion\n    }\n}\n", "starcoder_inputs": "<fim_prefix>\ufeffusing System;\nusing UnityEngine;\nusing UnityEngine.Rendering.Universal;\nusing Platform;\n\nnamespace PlatformHotfix\n{\n    public class SceneZoomManager\n    {\n         private static SceneZoomManager _instance;\n        public static SceneZoomManager Instance\n        {\n            get {\n                if(_instance == null)\n                {\n                    _instance = new SceneZoomManager();\n                    _instance.Init();\n                }\n                return _instance; \n            }\n        }\n\n        Transform transform;\n\n        SceneZoomData sceneZoomData;\n\n        private Camera _cam => sceneZoomData._cam;\n        public BezierCurve TeamViewCamCurve =>sceneZoomData.TeamViewCamCurve;\n        public BezierCurve[] TrainingRoomCamCurves =>sceneZoomData.TrainingRoomCamCurves;\n        public BezierCurve TransferEntranceCurve =>sceneZoomData.TransferEntranceCurve;\n        public BezierCurve CollectionEntranceCurve =>sceneZoomData.CollectionEntranceCurve;\n        public BezierCurve BossDesktopCamCurve =>sceneZoomData.BossDesktopCamCurve;\n        public BezierCurve LockRoomCamCurve =>sceneZoomData.LockRoomCamCurve;\n        public BezierCurve LockRoomCamCurve2 =>sceneZoomData.LockRoomCamCurve2;\n        public BezierCurve PvPMatchCamCurve =>sceneZoomData.PvPMatchCamCurve;\n        public BezierCurve PvPMatchCamCurve2 =>sceneZoomData.PvPMatchCamCurve2;\n        public BezierCurve PvPMatchCamCurve3 =>sceneZoomData.PvPMatchCamCurve3;\n        public BezierCurve RankMatchCamCurve =>sceneZoomData.RankMatchCamCurve;\n        public BezierCurve RankMatchCamCurve_WS =>sceneZoomData.RankMatchCamCurve_WS;\n        public BezierCurve RankUpgradeCamCurve => sceneZoomData.RankUpgradeCamCurve;\n        public BezierCurve EliteMatchCamCurve =>sceneZoomData.EliteMatchCamCurve;\n        public BezierCurve LiveEventMatchCamCurve =>sceneZoomData.LiveEventMatchCamCurve;\n        public BezierCurve PvpWaitCamCurve =>sceneZoomData.PvpWaitCamCurve;\n        public BezierCurve RoadOfGloryCamCurve =>sceneZoomData.RoadOfGloryCamCurve;\n        public BezierCurve BattlePassCamCurve =>sceneZoomData.BattlePassCamCurve;\n        public BezierCurve FullScreenUICurve =>sceneZoomData.FullScreenUICurve;\n        public BezierCurve DreamLineupCurve =>sceneZoomData.DreamLineupCurve;\n        //private Material _stadiumSkymat => sceneZoomData._stadiumSkymat;\n        //private Material _indoorSkymat => sceneZoomData._stadiumSkymat;\n        \n        public int UpgradeCurveIndex = 0;\n\n        private float _coverDepthDelta=.5f;\n        private Color _backgroundColor = new Color(0.1982f,0,0.368f);\n\n      \n\n        public void Awake(Transform transform)\n        {\n            this.transform = transform;\n\n            sceneZoomData = this.transform.GetComponent<SceneZoomData>();\n        }\n        private void Init() {\n           \n        }\n\n        public void Destroy()\n        {\n            _instance = null;\n            transform = null;\n            sceneZoomData = null;\n        }\n        /*******************************************\n        \u4e0d\u540c\u573a\u666f\u4e0b\u955c\u5934\u72b6\u6001\u8bbe\u7f6e\n    *******************************************/\n        public void SetStadiumCamMode(bool isPush){\n            //Scene3DManager.Instance.HideAll();\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            Scene3DManager.Instance.SetSceneActive(true);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(72,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f),0);\n            // CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n            CameraAnimController.Instance.EnablePostProcess(true);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n        public void SetPvPMode(bool isPush){\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(72,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0.13f, 0.15f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta =  0.2f;\n        }\n\n        public void SetRankMatchMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetBlur(true);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n            CameraAnimController.Instance.EaseCurve = null;\n\n            if (isPush){\n                CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n                CameraAnimController.Instance.SetFOV(54, 0);\n                CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 54, 0);\n                CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 54, 0);\n                CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", Vector4.zero, 0);\n                CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraForTransparentObjects\", Vector4.zero, 0);\n            }\n            else{\n                float fov = HomeScene3DPlayers3DView.FeatureFOV_Wide;\n                if (!TAManager.IsWideScreen())\n                {\n                    //\u6bd4\u8f83\u7a84\u7684\u5c4f\u5e55\u8bbe\u7f6e\n                    fov = HomeScene3DPlayers3DView.FeatureFOV_Slim;\n                }\n                CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0.15f),0);\n                CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", fov, 0);\n                CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", fov, 0);\n                CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", new Vector4(0, 0,-1,0), 0);\n                CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraForTransparentObjects\", new Vector4(0, 0, -1, 0), 0);\n                CameraAnimController.Instance.SetFOV(70, 0);\n            }\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n         public void SetRankUpgradeMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n            CameraAnimController.Instance.EaseCurve = null;\n            CameraAnimController.Instance.SetLensShift(Vector2.zero,0);\n            CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 54, 0);\n            CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 54, 0);\n            CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", Vector4.zero, 0);\n            CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraForTransparentObjects\", Vector4.zero, 0);\n            CameraAnimController.Instance.SetFOV(54, 0);\n            \n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetTeamManageMode(bool isPush){\n            //Scene3DManager.Instance.HideAll();\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,.6f,0f);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetFOV( ((float)Screen.width / Screen.height < 1.5f? 80f : 67f),0);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            CameraAnimController.Instance.SetLensShift(new Vector2(-.075f, 0),0);\n            CameraAnimController.Instance.SetBlur(false);\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetTrainingRoomMode(bool isPush){\n            Scene3DManager.Instance.Set<fim_suffix>,.5f,0f,.0f,0f);\n\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(45,0);\n            CameraAnimController.Instance.SetLensShift(Vector2.zero,0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n        \n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _indoorSkymat;\n            _coverDepthDelta = 0.1f;\n        }\n    \n        public void SetBossRoomMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,.0f,0f);\n\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(45,0);\n        \n            CameraAnimController.Instance.SetLensShift(Vector2.zero,0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _indoorSkymat;\n            Platform.EventDispatcher.TriggerEvent(\"SetBossRoomReflectionProbe\",0);\n            _coverDepthDelta = 0.1f;\n        }\n\n        public void SetBossDesktopMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,0f,0f,.0f,0f);\n\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(70,0);\n            CameraAnimController.Instance.SetLensShift(new Vector3(-0.14f,0),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n        \n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _indoorSkymat;\n            Platform.EventDispatcher.TriggerEvent(\"SetBossRoomReflectionProbe\",1);\n            _coverDepthDelta = 0.1f;\n        }\n        public void SetLockRoomMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,.0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(45,0);\n            CameraAnimController.Instance.SetLensShift(Vector2.zero,0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n        \n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _indoorSkymat;\n            _coverDepthDelta = 0.1f;\n        }\n    \n        public void SetEliteMatchMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(70,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0.16f, 0.15f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n        \n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetLiveEventMatchMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,.3f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(40,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.EnablePostProcess(false);\n        \n            _cam.clearFlags = CameraClearFlags.Color;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetChallengeRoadMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,1f,0f,0f,.3f);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetFOV(40,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.EnablePostProcess(false);\n        \n            _cam.clearFlags = CameraClearFlags.Color;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetRoadOfGloryMode(bool isPush){\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,0f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n        \n            CameraAnimController.Instance.SetFOV(40,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n\n            _cam.clearFlags = CameraClearFlags.Color;\n            _cam.backgroundColor = new Color(63f/255,29f/255,118/255f,0);\n\n        }\n        public void SetPVPWaitMode(bool isPush){\n            //Scene3DManager.Instance.HideOthersExcept(Scene3DManager.Instance.PvpWaitPlayers3DView);\n            Scene3DManager.Instance.SetSceneActive(true);\n            LensMaskManager.Instance.SetMaskOpaques(0f,0f,0f,0f,.3f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(48,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetFullScreenUIMode(bool isPush){\n            //Scene3DManager.Instance.HideOthersExcept(Scene3DManager.Instance.FullScreenBgView);\n            Scene3DManager.Instance.SetSceneActive(false);\n            LensMaskManager.Instance.SetMaskOpaques(0f,0f,0f,0f,0f);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(40f,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0f),0);\n            CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            _cam.clearFlags = CameraClearFlags.Color;\n            _cam.backgroundColor = _backgroundColor;\n            _coverDepthDelta = 0.5f;\n        }\n         public void SetElevenGuyCamMode(bool isPush){\n            LensMaskManager.Instance.SetMaskOpaques(0f,.5f,0f,0f,0f);\n            Scene3DManager.Instance.SetSceneActive(true);\n            _cam.gateFit = Camera.GateFitMode.Horizontal;\n            CameraAnimController.Instance.SetFOV(72,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f),0);\n            // CameraAnimController.Instance.SetAddRotate(Vector3.zero,0);\n            CameraAnimController.Instance.SetBlur(false);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n            CameraAnimController.Instance.EnablePostProcess(true);\n            _cam.clearFlags = CameraClearFlags.Skybox;\n            //RenderSettings.skybox = _stadiumSkymat;\n            Platform.EventDispatcher.TriggerEvent(\"ShowElevenGuyWithAni\");\n            Scene3DManager.Instance.Remove3DView<LockRoom3DView>();\n            _coverDepthDelta = 0.5f;\n        }\n\n        public void SetDreamLineupCamMode(bool isPush)\n        {\n            Scene3DManager.Instance.SetSceneActive(true);\n            _cam.gateFit = Camera.GateFitMode.Vertical;\n            CameraAnimController.Instance.SetFOV(30,0);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0, -0.1f),0);\n            CameraAnimController.Instance.SetBlur(true,doFBlurStart:0.4f);\n            CameraAnimController.Instance.SetBloom(true, 0.8f);\n        }\n        /*******************************************\n        \u955c\u5934\u8fd0\u52a8\u51fd\u6570\u52a8\u753b\n    *******************************************/\n\n        public void MatchEntranceAnim(Action onComplete)\n        {\n            CameraAnimController.Instance.EaseCurve = null;\n            CameraAnimController.Instance.StopCurveEase();\n            CameraAnimController.Instance.SetAnchorToHome();\n            _cam.transform.position = GetCamPosAtDepth(0);\n            _cam.transform.rotation = GetCamRot();\n            Vector3 endPos = GetCamPosAtDepth(1);\n            CameraAnimController.Instance.MoveTo(endPos, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut,false,onComplete);\n        }\n        public void RankMatchEnterAnim(Action onComplete){\n            if(TAManager.IsWideScreen()) //\u5c4f\u5e55\u9002\u914d\n            {\n                CameraAnimController.Instance.EaseCurve = RankMatchCamCurve;\n            }else{\n                CameraAnimController.Instance.EaseCurve = RankMatchCamCurve_WS;\n            }\n            CameraAnimController.Instance.CurveEaseVal = 0f;\n            CameraAnimController.Instance.SetCurveEaseVal(1,StackViewManager.Instance.AnimSpeed*2);\n            Go.DelayCall(()=>{\n                CameraAnimController.Instance.EaseCurve = null;\n                CameraAnimController.Instance.MoveTo(new Vector3(31.3f, 1.6f, 0), StackViewManager.Instance.AnimPushSpeed, GoEaseType.ExpoIn, true, () => {\n                   RankMatchShowCupAnim(onComplete);\n                });\n            },1.4f);\n        }\n\n        public void RankMatchShowCupAnim(Action onComplete)\n        {\n            CameraAnimController.Instance.EaseCurve = null;\n            CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0.15f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.Cam.transform.position = new Vector3(31.5f, 1.4f, 0);\n            CameraAnimController.Instance.Cam.transform.eulerAngles = new Vector3(0, -90, 0);\n            CameraAnimController.Instance.MoveTo(new Vector3(30.5f, 1.4f, 0), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut, true, onComplete);\n            CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 42, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 42, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraObjects\", Vector4.zero, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetFeatureOffset(\"FOVCameraForTransparentObjects\", Vector4.zero, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetFOV(70, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        }\n\n        // public void RankUpgradeShowCupAnim(Action onComplete)\n        // {\n        //     CameraAnimController.Instance.EaseCurve = null;\n        //     CameraAnimController.Instance.SetLensShift(new Vector2(0f, 0.15f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        //     CameraAnimController.Instance.Cam.transform.position = new Vector3(-6f, 1.4f, 500);\n        //     CameraAnimController.Instance.Cam.transform.eulerAngles = new Vector3(0, 90, 0);\n        //     CameraAnimController.Instance.MoveTo(new Vector3(-11f, 1.4f, 500f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut, true, onComplete);\n        //     CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraObjects\", 42, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        //     CameraAnimController.Instance.SetFeatureFOV(\"FOVCameraForTransparentObjects\", 42, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        //     CameraAnimController.Instance.SetFOV(70, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        //     CameraAnimController.Instance.SetLensShift(new Vector2(0, 0.15f), StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n        // }\n\n        public void LiveEventMatchEnterAnim(Action onComplete){\n            CameraAnimController.Instance.EaseCurve = LiveEventMatchCamCurve;\n            CameraAnimController.Instance.CurveEaseVal = 0f;\n            CameraAnimController.Instance.SetCurveEaseVal(1f, StackViewManager.Instance.AnimSpeed,GoEaseType.ExpoOut);\n            Go.DelayCall(()=>{\n                CameraAnimController.Instance.EaseCurve = null;\n                CameraAnimController.Instance.MoveTo(new Vector3(200,0,7), StackViewManager.Instance.AnimSpeed*2,GoEaseType.ExpoInOut, true,onComplete);\n            },.5f);\n        }\n\n        public void ChallengeRoadEnterAnim(Action onComplete)\n        {\n            CameraAnimController.Instance.EaseCurve = LiveEventMatchCamCurve;\n            CameraAnimController.Instance.CurveEaseVal = 0f;\n            CameraAnimController.Instance.SetCurveEaseVal(1f, StackViewManager.Instance.AnimSpeed, GoEaseType.ExpoOut);\n            Go.DelayCall(() =>\n            {\n                CameraAnimController.Instance.EaseCurve = null;\n                CameraAnimController.Instance.MoveTo(new Vector3(200,0,10), StackViewManager.Instance.AnimSpeed*2,GoEaseType.ExpoInOut, true,onComplete);\n            },.5f);\n        }\n\n        Vector3 GetCamPosAtDepth(float depth){\n            if(StackViewManager.Instance.IsCovered){\n                depth+=_coverDepthDelta;\n            }\n            Vector3 pos = CameraAnimController.Instance.CamAnchorPos - depth*2*CameraAnimController.Instance.CamAnchorDir;\n            return  pos;\n        }\n        Quaternion GetCamRot(){\n            Quaternion rot =  CameraAnimController.Instance.CamAnchorRot;\n            rot = rot*Quaternion.Euler(CameraAnimController.Instance.AddRotation);\n            return rot;\n        }\n\n        public BezierCurve GetRandomUpgradeViewEnterExitCurve()\n        {\n            UpgradeCurveIndex = UnityEngine.Random.Range(0, TrainingRoomCamCurves.Length);\n            return TrainingRoomCamCurves[UpgradeCurveIndex];\n        }\n        public BezierCurve GetUpgradeViewEnterExitCurve()\n        {\n            return TrainingRoomCamCurves[UpgradeCurveIndex];\n        }\n\n#region  \u6682\u5b58\u6444\u50cf\u673a\u6570\u636e\n       \n        const int Render_Cout = 10; \n        public CameraCacheData StorageCameraProperty()\n        {\n            CameraCacheData _camerData = new CameraCacheData();\n            _camerData.position           = _cam.transform.position;\n            _camerData.eulerAngles        = _cam.transform.eulerAngles;\n            _camerData.localScale         = _cam.transform.localScale;\n            _camerData.fieldOfView        = _cam.fieldOfView;\n            _camerData.layerCullSpherical = _cam.layerCullSpherical;\n            _camerData.lensShift          = _cam.lensShift;\n            _camerData.gateFit            = _cam.gateFit;\n            _camerData.clearFlags         = _cam.clearFlags;\n            _camerData.renderIndex        = GetRenderIndex(_cam.GetComponent<UniversalAdditionalCameraData>().scriptableRenderer);\n            return _camerData;\n        }\n\n        public void RevertCameraProperty(CameraCacheData _camerData)\n        {\n            _cam.transform.position       = _camerData.position;\n            _cam.transform.eulerAngles    = _camerData.eulerAngles;\n            _cam.transform.localScale     = _camerData.localScale;\n            _cam.fieldOfView              = _camerData.fieldOfView;\n            _cam.layerCullSpherical       = _camerData.layerCullSpherical;\n            _cam.lensShift                = _camerData.lensShift;\n            _cam.gateFit                  = _camerData.gateFit;\n            _cam.clearFlags               = _camerData.clearFlags;\n            if(_camerData.renderIndex >=0)\n            {\n                _cam.GetComponent<UniversalAdditionalCameraData>().SetRenderer(_camerData.renderIndex);\n            }\n        }\n\n        private int GetRenderIndex(ScriptableRenderer scriptableRenderer)\n        {\n             for(int i = 0; i< Render_Cout;i++)\n            {\n                var render = UniversalRenderPipeline.asset.GetRenderer(i);\n                if(render == scriptableRenderer) \n                {\n                   return i;\n                }\n            }\n            return -1;\n        }\n#endregion\n    }\n}\n<fim_middle>"}
{"inputs": "\ufeffusing Framework.GalaSports.Service;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing GalaSports.FootballNG;\nusing UnityEngine.AddressableAssets;\n#if UNITY_IOS\nusing UnityEngine.iOS;\n#endif\n\npublic class HighPlayerController\n{\n    GameObject highPlayerTemplate;\n\n    public class HighPlayerInfo\n    {\n        public int index;\n        public string team_id;\n        public int player_id;\n        public int headModel_id;\n        public bool isKeeper;\n        public bool isHome;\n        public SkinColorForTexture skinColor;\n        public Vector3 skinColorCorrectionValue;\n        public int bodyHeight;\n        public Vector3 worldPosition;\n        public float worldEulerY;\n        public int bodyWeight = 0;\n        public int shoe_id;\n\n        public HighPlayerInfo(int index, string team_id, int player_id, int headModel_id, bool isKeeper, bool isHome, SkinColorForTexture skinColor, Vector3 skinColorCorrectionValue, int shoeId, int bodyHeight, Vector3 worldPosition, float worldEulerY, bool needReloadRes, int bodyWeight)\n        {\n            this.index = index;\n            this.team_id = team_id;\n            this.player_id = player_id;\n            this.headModel_id = headModel_id;\n            this.isKeeper = isKeeper;\n            this.isHome = isHome;\n            this.skinColor = skinColor;\n            this.skinColorCorrectionValue = skinColorCorrectionValue;\n            this.bodyHeight = bodyHeight;\n            this.worldPosition = worldPosition;\n            this.worldEulerY = worldEulerY;\n            this.bodyWeight = bodyWeight;\n            this.shoe_id = shoeId;\n        }\n    }\n\n    public GameObject gameObject;\n    public Transform transform;\n\n    List<HighPlayerInfo> playerInfos;\n\n    //\u573a\u4e0a22\u4e2a\u7403\u5458\u7684\u9ad8\u6a21\n    public List<Transform> HighPolyPlayers = new List<Transform>();\n\n    class HighPolyPlayersAsyncStatus\n    {\n        public int index;\n        public bool loaded;\n    }\n\n    public void Awake()\n    {\n        playerInfos = new List<HighPlayerInfo>();\n        Platform.EventDispatcher.AddEventListener(\"ClearEnterPlayerHighPlayers\", ClearHighPolyPlayers);\n        highPlayerTemplate = ResourceMgr.Instance.LoadAsset<GameObject>(\"3D/MatchEnterPlayer\");\n    }\n\n    public void InitOneHighPolyPlayerInfo(int index, string team_id, int player_id, int headModel_id, bool isKeeper, bool isHome, SkinColorForTexture skinColor, Vector3 skinColorCorrectionValue, int shoe_id, int bodyHeight, Vector3 worldPosition, float worldEulerY, int bodyWeight = 0)\n    {\n        HighPlayerInfo info = new HighPlayerInfo(index, team_id, player_id, headModel_id, isKeeper, isHome, skinColor, skinColorCorrectionValue, shoe_id, bodyHeight, worldPosition, worldEulerY, true, bodyWeight);\n        playerInfos.Add(info);\n    }\n\n    public HighPlayerInfo GetPlayerInfoFromPlayerIndex(int index)\n    {\n        HighPlayerInfo info = null;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            if (index == playerInfos[i].index)\n            {\n                info = playerInfos[i];\n            }\n        }\n        return info;\n    }\n\n    Transform PrepareOneHighPolyPlayerRes(int index, bool isAdjustStepSize = false)\n    {\n        HighPlayerInfo info = null;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            if (index == playerInfos[i].index)\n            {\n                info = playerInfos[i];\n            }\n        }\n\n        GameObject tempPlayerObj = GameObject.Instantiate(highPlayerTemplate);\n        tempPlayerObj.transform.parent = transform;\n        HighPolyPlayers.Add(tempPlayerObj.transform);\n\n        tempPlayerObj.transform.localPosition = new Vector3(info.worldPosition.x, 0, info.worldPosition.z);\n        tempPlayerObj.transform.localEulerAngles = new Vector3(0, info.worldEulerY, 0);\n\n        tempPlayerObj.name = \"TeamPlayer\" + index.ToString();\n\n        TeamConfigurationData teamdata = TeamDataManager.Instance.GetTeamDataByTeamId(info.team_id);\n        GameJerseyData jerseyData = TeamDataManager.Instance.GetJerseyData(info.team_id, info.player_id);\n        //DebugEX.LogError(index + \" \" + jerseyData.PlayerName + \" \" + jerseyData.PlayerNumber);\n        //DebugEX.LogError(jerseyData.JerseyId);\n        //PlayerJerseyGenerator.Instance.Initialize();\n        if (teamdata.teamLogo != null && teamdata.teamLogo.texture != null)\n        {\n            PlayerJerseyGenerator.Instance.TeamLogoTex = teamdata.teamLogo.texture;\n        }\n\n        HighPolyPlayerAppearanceController playerAppearanceController = tempPlayerObj.GetComponent<HighPolyPlayerAppearanceController>();\n        HighPolyPlayerAnimationController playerAnimationController = tempPlayerObj.GetComponent<HighPolyPlayerAnimationController>();\n\n        playerAppearanceController.index = index;\n        playerAppearanceController.SetPlayerAppearance(info.headModel_id, info.bodyHeight, info.bodyWeight, info.skinColor, info.skinColorCorrectionValue, jerseyData.JerseyId, info.shoe_id, info.player_id, info.isKeeper, jerseyData.PlayerName, jerseyData.PlayerNumber.ToString(), false, null, info.isHome);\n        playerAnimationController.Init(true, false);\n\n        tempPlayerObj.transform.localPosition = new Vector3(0, 0, 500);\n        tempPlayerObj.SetActive(false);\n        tempPlayerObj.transform.parent = transform;\n        HighPolyPlayers.Add(tempPlayerObj.transform);\n\n        return tempPlayerObj.transform;\n    }\n\n\n    //index:\u573a\u4e0a22\u4e2a\u4eba\u7684\u552f\u4e00\u6807\u8bb0id\uff0c\u53d6\u503c0~21\n    public Transform GetPlayerByIndex(int index, bool isAdjustStepSize = false)\n    {\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            if (index == playerInfos[i].index)\n            {\n                return PrepareOneHighPolyPlayerRes(index, isAdjustStepSize);\n            }\n        }\n        return null;\n    }\n\n    void ClearHighPolyPlayers()\n    {\n        for (int i = 0; i < HighPolyPlayers.Count; i++)\n        {\n            if (HighPolyPlayers[i] != null && HighPolyPlayers[i].gameObject != null)\n                GameObject.Destroy(HighPolyPlayers[i].gameObject);\n        }\n        playerInfos.Clear();\n        HighPolyPlayers.Clear();\n\n#if (UNITY_STANDALONE_OSX || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN) && (!UNITY_ANDROID) && (!UNITY_IOS)\n        //PC\u3001Mac\u5e73\u53f0\u5728\u6bd4\u8d5b\u5185\u4f7f\u7528\u9ad8\u6a21\uff0c\u56e0\u6b64\u4e0d\u80fd\u8c03\u7528UnloadAll\u65b9\u6cd5\n#else\n        PlayerJerseyDataLoader.UnloadAllPreLoadedJerseyDatas();\n        PlayerSockDataLoader.UnloadAllPreLoadedSockDatas();\n        PlayerHeadDataLoader.UnloadAllPreLoadedHeadDatas();       \n#endif\n    }\n\n\n    public void OnDestroy()\n    {\n        ClearHighPolyPlayers();\n        Platform.EventDispatcher.RemoveEventListener(\"ClearEnterPlayerHighPlayers\", ClearHighPolyPlayers);\n        ResourceMgr.Instance.UnloadAsset(highPlayerTemplate);\n    }\n}\n//#endif", "cropped_inputs": "\ufeffusing Framework.GalaSports.Service;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing GalaSports.FootballNG;\nusing UnityEngine.AddressableAssets;\n#if UNITY_IOS\nusing UnityEngine.iOS;\n#endif\n\npublic class HighPlayerController\n{\n    GameObject highPlayerTemplate;\n\n    public class HighPlayerInfo\n    {\n        public int index;\n        public string team_id;\n        public int player_id;\n        public int headModel_id;\n        public bool isKeeper;\n        public bool isHome;\n        public SkinColorForTexture skinColor;\n        public Vector3 skinColorCorrectionValue;\n        public int bodyHeight;\n        public Vector3 worldPosition;\n        public float worldEulerY;\n        public int bodyWeight = 0;\n        public int shoe_id;\n\n        public HighPlayerInfo(int index, string team_id, int player_id, int headModel_id, bool isKeeper, bool isHome, SkinColorForTexture skinColor, Vector3 skinColorCorrectionValue, int shoeId, int bodyHeight, Vector3 worldPosition, float worldEulerY, bool needReloadRes, int bodyWeight)\n        {\n            this.index = index;\n            this.team_id = team_id;\n            this.player_id = player_id;\n            this.headModel_id = headModel_id;\n            this.isKeeper = isKeeper;\n            this.isHome = isHome;\n            this.skinColor = skinColor;\n            this.skinColorCorrectionValue = skinColorCorrectionValue;\n            this.bodyHeight = bodyHeight;\n            this.worldPosition = worldPosition;\n            this.worldEulerY = worldEulerY;\n            this.bodyWeight = bodyWeight;\n            this.shoe_id = shoeId;\n        }\n    }\n\n    public GameObject gameObject;\n    public Transform transform;\n\n    List<HighPlayerInfo> playerInfos;\n\n    //\u573a\u4e0a22\u4e2a\u7403\u5458\u7684\u9ad8\u6a21\n    public List<Transform> HighPolyPlayers = new List<Transform>();\n\n    class HighPolyPlayersAsyncStatus\n    {\n        public int index;\n        public bool loaded;\n    }\n\n    public void Awake()\n    {\n        playerInfos = new List<HighPlayerInfo>();\n        Platform.EventDispatcher.AddEventListener(\"ClearEnterPlayerHighPlayers\", ClearHighPolyPlayers);\n        highPlayerTemplate = ResourceMgr.Instance.LoadAsset<GameObject>(\"3D/MatchEnterPlayer\");\n    }\n\n    public void InitOneHighPolyPlayerInfo(int index, string team_id, int player_id, int headModel_id, boolValue, int shoe_id, int bodyHeight, Vector3 worldPosition, float worldEulerY, int bodyWeight = 0)\n    {\n        HighPlayerInfo info = new HighPlayerInfo(index, team_id, player_id, headModel_id, isKeeper, isHome, skinColor, skinColorCorrectionValue, shoe_id, bodyHeight, worldPosition, worldEulerY, true, bodyWeight);\n        playerInfos.Add(info);\n    }\n\n    public HighPlayerInfo GetPlayerInfoFromPlayerIndex(int index)\n    {\n        HighPlayerInfo info = null;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            if (index == playerInfos[i].index)\n            {\n                info = playerInfos[i];\n            }\n        }\n        return info;\n    }\n\n    Transform PrepareOneHighPolyPlayerRes(int index, bool isAdjustStepSize = false)\n    {\n        HighPlayerInfo info = null;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            if (index == playerInfos[i].index)\n            {\n                info = playerInfos[i];\n            }\n        }\n\n        GameObject tempPlayerObj = GameObject.Instantiate(highPlayerTemplate);\n        tempPlayerObj.transform.parent = transform;\n        HighPolyPlayers.Add(tempPlayerObj.transform);\n\n        tempPlayerObj.transform.localPosition = new Vector3(info.worldPosition.x, 0, info.worldPosition.z);\n        tempPlayerObj.transform.localEulerAngles = new Vector3(0, info.worldEulerY, 0);\n\n        tempPlayerObj.name = \"TeamPlayer\" + index.ToString();\n\n        TeamConfigurationData teamdata = TeamDataManager.Instance.GetTeamDataByTeamId(info.team_id);\n        GameJerseyData jerseyData = TeamDataManager.Instance.GetJerseyData(info.team_id, info.player_id);\n        //DebugEX.LogError(index + \" \" + jerseyData.PlayerName + \" \" + jerseyData.PlayerNumber);\n        //DebugEX.LogError(jerseyData.JerseyId);\n        //PlayerJerseyGenerator.Instance.Initialize();\n        if (teamdata.teamLogo!= null && teamdata.teamLogo.texture!= null)\n        {\n            PlayerJerseyGenerator.Instance.TeamLogoTex = teamdata.teamLogo.texture;\n        }\n\n        HighPolyPlayerAppearanceController playerAppearanceController = tempPlayerObj.GetComponent<HighPolyPlayerAppearanceController>();\n        HighPolyPlayerAnimationController playerAnimationController = tempPlayerObj.GetComponent<HighPolyPlayerAnimationController>();\n\n        playerAppearanceController.index = index;\n        playerAppearanceController.SetPlayerAppearance(info.headModel_id, info.bodyHeight, info.bodyWeight, info.skinColor, info.skinColorCorrectionValue, jerseyData.JerseyId, info.shoe_id, info.player_id, info.isKeeper, jerseyData.PlayerName, jerseyData.PlayerNumber.ToString(), false, null, info.isHome);\n        playerAnimationController.Init(true, false);\n\n        tempPlayerObj.transform.localPosition = new Vector3(0, 0, 500);\n        tempPlayerObj.SetActive(false);\n        tempPlayerObj.transform.parent = transform;\n        HighPolyPlayers.Add(tempPlayerObj.transform);\n\n        return tempPlayerObj.transform;\n    }\n\n\n    //index:\u573a\u4e0a22\u4e2a\u4eba\u7684\u552f\u4e00\u6807\u8bb0id\uff0c\u53d6\u503c0~21\n    public Transform GetPlayerByIndex(int index, bool isAdjustStepSize = false)\n    {\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            if (index == playerInfos[i].index)\n            {\n                return PrepareOneHighPolyPlayerRes(index, isAdjustStepSize);\n            }\n        }\n        return null;\n    }\n\n    void ClearHighPolyPlayers()\n    {\n        for (int i = 0; i < HighPolyPlayers.Count; i++)\n        {\n            if (HighPolyPlayers[i]!= null && HighPolyPlayers[i].gameObject!= null)\n                GameObject.Destroy(HighPolyPlayers[i].gameObject);\n        }\n        playerInfos.Clear();\n        HighPolyPlayers.Clear();\n\n#if (UNITY_STANDALONE_OSX || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN) && (!UNITY_ANDROID) && (!UNITY_IOS)\n        //PC\u3001Mac\u5e73\u53f0\u5728\u6bd4\u8d5b\u5185\u4f7f\u7528\u9ad8\u6a21\uff0c\u56e0\u6b64\u4e0d\u80fd\u8c03\u7528UnloadAll\u65b9\u6cd5\n#else\n        PlayerJerseyDataLoader.UnloadAllPreLoadedJerseyDatas();\n        PlayerSockDataLoader.UnloadAllPreLoadedSockDatas();\n        PlayerHeadDataLoader.UnloadAllPreLoadedHeadDatas();       \n#endif\n    }\n\n\n    public void OnDestroy()\n    {\n        ClearHighPolyPlayers();\n        Platform.EventDispatcher.RemoveEventListener(\"ClearEnterPlayerHighPlayers\", ClearHighPolyPlayers);\n        ResourceMgr.Instance.UnloadAsset(highPlayerTemplate);\n    }\n}\n//#endif", "starcoder_inputs": "<fim_prefix>\ufeffusing Framework.GalaSports.Service;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing GalaSports.FootballNG;\nusing UnityEngine.AddressableAssets;\n#if UNITY_IOS\nusing UnityEngine.iOS;\n#endif\n\npublic class HighPlayerController\n{\n    GameObject highPlayerTemplate;\n\n    public class HighPlayerInfo\n    {\n        public int index;\n        public string team_id;\n        public int player_id;\n        public int headModel_id;\n        public bool isKeeper;\n        public bool isHome;\n        public SkinColorForTexture skinColor;\n        public Vector3 skinColorCorrectionValue;\n        public int bodyHeight;\n        public Vector3 worldPosition;\n        public float worldEulerY;\n        public int bodyWeight = 0;\n        public int shoe_id;\n\n        public HighPlayerInfo(int index, string team_id, int player_id, int headModel_id, bool isKeeper, bool isHome, SkinColorForTexture skinColor, Vector3 skinColorCorrectionValue, int shoeId, int bodyHeight, Vector3 worldPosition, float worldEulerY, bool needReloadRes, int bodyWeight)\n        {\n            this.index = index;\n            this.team_id = team_id;\n            this.player_id = player_id;\n            this.headModel_id = headModel_id;\n            this.isKeeper = isKeeper;\n            this.isHome = isHome;\n            this.skinColor = skinColor;\n            this.skinColorCorrectionValue = skinColorCorrectionValue;\n            this.bodyHeight = bodyHeight;\n            this.worldPosition = worldPosition;\n            this.worldEulerY = worldEulerY;\n            this.bodyWeight = bodyWeight;\n            this.shoe_id = shoeId;\n        }\n    }\n\n    public GameObject gameObject;\n    public Transform transform;\n\n    List<HighPlayerInfo> playerInfos;\n\n    //\u573a\u4e0a22\u4e2a\u7403\u5458\u7684\u9ad8\u6a21\n    public List<Transform> HighPolyPlayers = new List<Transform>();\n\n    class HighPolyPlayersAsyncStatus\n    {\n        public int index;\n        public bool loaded;\n    }\n\n    public void Awake()\n    {\n        playerInfos = new List<HighPlayerInfo>();\n        Platform.EventDispatcher.AddEventListener(\"ClearEnterPlayerHighPlayers\", ClearHighPolyPlayers);\n        highPlayerTemplate = ResourceMgr.Instance.LoadAsset<GameObject>(\"3D/MatchEnterPlayer\");\n    }\n\n    public void InitOneHighPolyPlayerInfo(int index, string team_id, int player_id, int headModel_id, bool<fim_suffix>Value, int shoe_id, int bodyHeight, Vector3 worldPosition, float worldEulerY, int bodyWeight = 0)\n    {\n        HighPlayerInfo info = new HighPlayerInfo(index, team_id, player_id, headModel_id, isKeeper, isHome, skinColor, skinColorCorrectionValue, shoe_id, bodyHeight, worldPosition, worldEulerY, true, bodyWeight);\n        playerInfos.Add(info);\n    }\n\n    public HighPlayerInfo GetPlayerInfoFromPlayerIndex(int index)\n    {\n        HighPlayerInfo info = null;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            if (index == playerInfos[i].index)\n            {\n                info = playerInfos[i];\n            }\n        }\n        return info;\n    }\n\n    Transform PrepareOneHighPolyPlayerRes(int index, bool isAdjustStepSize = false)\n    {\n        HighPlayerInfo info = null;\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            if (index == playerInfos[i].index)\n            {\n                info = playerInfos[i];\n            }\n        }\n\n        GameObject tempPlayerObj = GameObject.Instantiate(highPlayerTemplate);\n        tempPlayerObj.transform.parent = transform;\n        HighPolyPlayers.Add(tempPlayerObj.transform);\n\n        tempPlayerObj.transform.localPosition = new Vector3(info.worldPosition.x, 0, info.worldPosition.z);\n        tempPlayerObj.transform.localEulerAngles = new Vector3(0, info.worldEulerY, 0);\n\n        tempPlayerObj.name = \"TeamPlayer\" + index.ToString();\n\n        TeamConfigurationData teamdata = TeamDataManager.Instance.GetTeamDataByTeamId(info.team_id);\n        GameJerseyData jerseyData = TeamDataManager.Instance.GetJerseyData(info.team_id, info.player_id);\n        //DebugEX.LogError(index + \" \" + jerseyData.PlayerName + \" \" + jerseyData.PlayerNumber);\n        //DebugEX.LogError(jerseyData.JerseyId);\n        //PlayerJerseyGenerator.Instance.Initialize();\n        if (teamdata.teamLogo!= null && teamdata.teamLogo.texture!= null)\n        {\n            PlayerJerseyGenerator.Instance.TeamLogoTex = teamdata.teamLogo.texture;\n        }\n\n        HighPolyPlayerAppearanceController playerAppearanceController = tempPlayerObj.GetComponent<HighPolyPlayerAppearanceController>();\n        HighPolyPlayerAnimationController playerAnimationController = tempPlayerObj.GetComponent<HighPolyPlayerAnimationController>();\n\n        playerAppearanceController.index = index;\n        playerAppearanceController.SetPlayerAppearance(info.headModel_id, info.bodyHeight, info.bodyWeight, info.skinColor, info.skinColorCorrectionValue, jerseyData.JerseyId, info.shoe_id, info.player_id, info.isKeeper, jerseyData.PlayerName, jerseyData.PlayerNumber.ToString(), false, null, info.isHome);\n        playerAnimationController.Init(true, false);\n\n        tempPlayerObj.transform.localPosition = new Vector3(0, 0, 500);\n        tempPlayerObj.SetActive(false);\n        tempPlayerObj.transform.parent = transform;\n        HighPolyPlayers.Add(tempPlayerObj.transform);\n\n        return tempPlayerObj.transform;\n    }\n\n\n    //index:\u573a\u4e0a22\u4e2a\u4eba\u7684\u552f\u4e00\u6807\u8bb0id\uff0c\u53d6\u503c0~21\n    public Transform GetPlayerByIndex(int index, bool isAdjustStepSize = false)\n    {\n        for (int i = 0; i < playerInfos.Count; i++)\n        {\n            if (index == playerInfos[i].index)\n            {\n                return PrepareOneHighPolyPlayerRes(index, isAdjustStepSize);\n            }\n        }\n        return null;\n    }\n\n    void ClearHighPolyPlayers()\n    {\n        for (int i = 0; i < HighPolyPlayers.Count; i++)\n        {\n            if (HighPolyPlayers[i]!= null && HighPolyPlayers[i].gameObject!= null)\n                GameObject.Destroy(HighPolyPlayers[i].gameObject);\n        }\n        playerInfos.Clear();\n        HighPolyPlayers.Clear();\n\n#if (UNITY_STANDALONE_OSX || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN) && (!UNITY_ANDROID) && (!UNITY_IOS)\n        //PC\u3001Mac\u5e73\u53f0\u5728\u6bd4\u8d5b\u5185\u4f7f\u7528\u9ad8\u6a21\uff0c\u56e0\u6b64\u4e0d\u80fd\u8c03\u7528UnloadAll\u65b9\u6cd5\n#else\n        PlayerJerseyDataLoader.UnloadAllPreLoadedJerseyDatas();\n        PlayerSockDataLoader.UnloadAllPreLoadedSockDatas();\n        PlayerHeadDataLoader.UnloadAllPreLoadedHeadDatas();       \n#endif\n    }\n\n\n    public void OnDestroy()\n    {\n        ClearHighPolyPlayers();\n        Platform.EventDispatcher.RemoveEventListener(\"ClearEnterPlayerHighPlayers\", ClearHighPolyPlayers);\n        ResourceMgr.Instance.UnloadAsset(highPlayerTemplate);\n    }\n}\n//#endif<fim_middle>"}
{"inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\npublic class SeasonCupWinningAnimationConfig\n{\n    public static List<string[]> PreLoadClothName;\n    public static int[] TeamPlayerIndex;\n    public static int[] TeamPlayerCount;\n    public static int[] CameraFOV;\n    public static int[] FarShadowDistance;\n    public static int[] NearShadowDistance;\n    public static int[][] RandomCloth = {\n          new int[]{ 0,1,2 },\n          new int[]{ 0,2,1 },\n          new int[]{ 1,2,0 },\n          new int[]{ 1,0,2 },\n          new int[]{ 2,0,1 },\n          new int[]{ 2,1,0 }\n    };\n    public static void InitPreLoad(int cupIndex)\n    {\n        PreLoadClothName = new List<string[]>();\n        CameraFOV = new int[] {35,40,40,15 };\n        FarShadowDistance = new int[] {40,6,6,87 };\n        NearShadowDistance = new int[] {39,4,4,85 };\n        if (cupIndex == 0)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_1\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_1\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 1)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_2\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_2\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 2)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_3\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_3\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 3)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_4\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_4\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 4)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_5\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_5\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 5)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_6\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_6\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 6)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_7\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_7\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n    }\n\n  \n}\n", "cropped_inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\npublic class SeasonCupWinningAnimationConfig\n{\n    public static List<string[]> PreLoadClothName;\n    public static int[] TeamPlayerIndex;\n    public static int[] TeamPlayerCount;\n    public static int[] CameraFOV;\n    public static int[] FarShadowDistance;\n    public static int[] NearShadowDistance;\n    public static int[][] RandomCloth = {\n          new int[]{ 0,1,2 },\n          new int[]{ 0,2,1 },\n          new int[]{ 1,2,0 },\n          new int[]{ 1,0,2 },\n          new int[]{ 2,0,1 },\n          new int[]{ 2,1,0 }\n    };\n    public static void InitPreLoad(int cupIndex)\n    {\n        PreLoadClothName = new List<string[]>();\n        CameraFOV = new int[] {35,40,40,15 };\n        FarShadowDistance = new int[] {40,6,6,87 };\n        NearShadowDistance = new int[] {39,4,4,85 };\n        if (cupIndex == 0)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_1\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_1\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 1)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_2\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_2\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7,3, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 2)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_3\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_3\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 3)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_4\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_4\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 4)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_5\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_5\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 5)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_6\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_6\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 6)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_7\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_7\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n    }\n\n  \n}\n", "starcoder_inputs": "<fim_prefix>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\npublic class SeasonCupWinningAnimationConfig\n{\n    public static List<string[]> PreLoadClothName;\n    public static int[] TeamPlayerIndex;\n    public static int[] TeamPlayerCount;\n    public static int[] CameraFOV;\n    public static int[] FarShadowDistance;\n    public static int[] NearShadowDistance;\n    public static int[][] RandomCloth = {\n          new int[]{ 0,1,2 },\n          new int[]{ 0,2,1 },\n          new int[]{ 1,2,0 },\n          new int[]{ 1,0,2 },\n          new int[]{ 2,0,1 },\n          new int[]{ 2,1,0 }\n    };\n    public static void InitPreLoad(int cupIndex)\n    {\n        PreLoadClothName = new List<string[]>();\n        CameraFOV = new int[] {35,40,40,15 };\n        FarShadowDistance = new int[] {40,6,6,87 };\n        NearShadowDistance = new int[] {39,4,4,85 };\n        if (cupIndex == 0)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_1\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_1\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 1)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_2\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_2\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7,<fim_suffix>3, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 2)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_3\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_3\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 3)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_4\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_4\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 4)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_5\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_5\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 5)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_6\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_6\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n        else if (cupIndex == 6)\n        {\n            PreLoadClothName.Add(new string[] { \"prizePlayer4_2\", \"prizePlayer5_2\", \"prizePlayer6_2\", \"prizePlayer7_2\", \"prizePlayer8_2\", \"prizePlayer9_2_7\", \"prizePlayer10_2\", \"prizePlayer11_2\", \"prizePlayer12_2\", \"prizePlayer13_2\", \"prizePlayer14_2\", \"prizePlayer15_2\" });\n            PreLoadClothName.Add(new string[] { \"prizePlayer7_3\", \"prizePlayer8_3\", \"prizePlayer9_3_7\", \"prizePlayer10_3\", \"prizePlayer11_3\", \"prizePlayer12_3\", \"prizePlayer13_3\", \"prizePlayer14_3\", \"prizePlayer15_3\", \"prizePlayer16_3\", \"prizePlayer17_3\", \"prizePlayer18_3\" });\n            TeamPlayerIndex = new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n            TeamPlayerCount = new int[] { 0, 12, 3, 0 };\n        }\n    }\n\n  \n}\n<fim_middle>"}
{"inputs": "\ufeffusing UnityEngine;\n\npublic class Snow3DView : View3DBase\n{\n    #region Field\n\n    /// <summary>\n    /// \u964d\u96ea\u6570\u91cf\u3002\n    /// </summary>\n    private int SNOW_NUM = 1500;  //10000;\n\n    /// <summary>\n    /// \u96ea\u9802\u70b9\u3002\n    /// </summary>\n    private Vector3[] snowMeshVertices;\n\n    /// <summary>\n    /// \u96ea\u4e09\u89d2\u5f62\u3002\n    /// </summary>\n    private int[] snowMeshTriangleIndexes;\n\n    /// <summary>\n    /// \u96ea UV.\n    /// </summary>\n    private Vector2[] snowMeshUvs;\n\n    private float range;\n    private float rangeR;\n    private Vector3 move = Vector3.zero;\n\n    private MeshRenderer meshRenderer;\n    private MeshFilter meshFilter;\n\n    #endregion Field\n\n    public override async GTask Awake()\n    {\n        await base.Awake();\n\n        this.meshFilter = transform.GetComponent<MeshFilter>();\n        this.meshRenderer = transform.GetComponent<MeshRenderer>();\n\n        CreateSnowMesh();\n        \n        \n    }\n    public override void OnDestroy()\n    {\n        base.OnDestroy();\n        this.meshFilter = null;\n        this.meshRenderer = null;\n    }\n\n    public override void OnEnable()\n    {\n        base.OnEnable();\n        GalaRenderPipeline.GalaRenderManager.AddEventListener(\"QualityChanged\", OnQualityChanged);\n        OpenLateUpdate();\n    }\n\n    public override void OnDisable()\n    {\n        base.OnDisable();\n        GalaRenderPipeline.GalaRenderManager.RemoveEventListener(\"QualityChanged\", OnQualityChanged);\n        CloseLateUpdate();\n    }\n\n    private void OnQualityChanged()\n    {\n        CreateSnowMesh();\n    }\n\n    private void SetSnowNum()\n    {\n        int quality = SettingConfig.CurQualityLevel;\n        switch(quality)\n        {\n            case 1:\n            case 2:\n                SNOW_NUM = 300;\n                break;\n            case 3:\n                SNOW_NUM = 800;\n                break;\n            case 4:\n                SNOW_NUM = 1000;\n                break;\n            case 5:\n                SNOW_NUM = 1200;\n                break;\n            case 6:\n                SNOW_NUM = 1500;\n                break;\n        }\n    }\n    private void CreateSnowMesh()\n    {\n        if(this.meshFilter == null) return;\n        \n        SetSnowNum();\n        this.range    = 50f;\n        this.rangeR   = 1.0f / range;\n        this.snowMeshVertices = new Vector3[SNOW_NUM * 4];\n\n        #region Generate Vertices\n\n        for (var i = 0; i < SNOW_NUM; i++)\n        {\n            float x = Random.Range (-this.range, this.range);\n            float y = Random.Range (-this.range, this.range);\n            float z = Random.Range (-this.range, this.range);\n\n            Vector3 point = new Vector3(Random.Range(-this.range, this.range),\n                                        Random.Range(-this.range, this.range),\n                                        Random.Range(-this.range, this.range));\n\n            this.snowMeshVertices [i * 4 + 0] = point;\n            this.snowMeshVertices [i * 4 + 1] = point;\n            this.snowMeshVertices [i * 4 + 2] = point;\n            this.snowMeshVertices [i * 4 + 3] = point;\n        }\n\n        #endregion Generate Vertices\n\n        #region Generate Indexes\n\n        this.snowMeshTriangleIndexes = new int[SNOW_NUM * 6];\n\n        for (int i = 0; i < SNOW_NUM; i++)\n        {\n            this.snowMeshTriangleIndexes[i * 6 + 0] = i * 4 + 0;\n            this.snowMeshTriangleIndexes[i * 6 + 1] = i * 4 + 1;\n            this.snowMeshTriangleIndexes[i * 6 + 2] = i * 4 + 2;\n\n            this.snowMeshTriangleIndexes[i * 6 + 3] = i * 4 + 2;\n            this.snowMeshTriangleIndexes[i * 6 + 4] = i * 4 + 1;\n            this.snowMeshTriangleIndexes[i * 6 + 5] = i * 4 + 3;\n        }\n\n        #endregion Generate Indexes\n\n        #region Generate UVs\n\n        this.snowMeshUvs = new Vector2[SNOW_NUM * 4];\n\n        for (var i = 0; i < SNOW_NUM; i++)\n        {\n            snowMeshUvs [i * 4 + 0] = new Vector2 (0f, 0f);\n            snowMeshUvs [i * 4 + 1] = new Vector2 (1f, 0f);\n            snowMeshUvs [i * 4 + 2] = new Vector2 (0f, 1f);\n            snowMeshUvs [i * 4 + 3] = new Vector2 (1f, 1f);\n        }\n\n        #endregion Generate UVs\n\n        Mesh mesh      = new Mesh();\n        mesh.name      = \"SnowMeshes\";\n        mesh.vertices  = this.snowMeshVertices;\n        mesh.triangles = this.snowMeshTriangleIndexes;\n        mesh.uv        = this.snowMeshUvs;\n        mesh.bounds    = new Bounds(Vector3.zero, Vector3.one * 9999);  //99999999\n\n        meshFilter.sharedMesh = mesh;\n\n    }\n    \n\n    public override void LateUpdate()\n    {\n        Camera cam = Camera.main;\n        if(cam == null) return;\n        Vector3 target_position = cam.transform.TransformPoint(Vector3.forward * this.range);\n\n        this.meshRenderer.material.SetFloat(\"_Range\",  this.range);\n        this.meshRenderer.material.SetFloat(\"_RangeR\", this.rangeR);\n        this.meshRenderer.material.SetFloat(\"_Size\",   0.2f);\n\n        this.meshRenderer.material.SetVector(\"_MoveTotal\",      this.move);\n        this.meshRenderer.material.SetVector(\"_CamUp\",          cam.transform.up);\n        this.meshRenderer.material.SetVector(\"_TargetPosition\", target_position);\n\n        float x = (Mathf.PerlinNoise(0f, Time.time * 0.1f) - 0.5f) * 10f;\n        float y = -2f;\n        float z = (Mathf.PerlinNoise(Time.time * 0.1f, 0f) - 0.5f) * 10f;\n        \n        //if(cam.transform.localPosition.y > 180)\n        //{\n        //    y = -10f;\n        //}\n        move += new Vector3(x, y, z) * Time.deltaTime;\n        move.x = Mathf.Repeat(move.x, range * 2f);\n        move.y = Mathf.Repeat(move.y, range * 2f);\n        move.z = Mathf.Repeat(move.z, range * 2f);\n    }\n}", "cropped_inputs": "\ufeffusing UnityEngine;\n\npublic class Snow3DView : View3DBase\n{\n    #region Field\n\n    /// <summary>\n    /// \u964d\u96ea\u6570\u91cf\u3002\n    /// </summary>\n    private int SNOW_NUM = 1500;  //10000;\n\n    /// <summary>\n    /// \u96ea\u9802\u70b9\u3002\n    /// </summary>\n    private Vector3[] snowMeshVertices;\n\n    /// <summary>\n    /// \u96ea\u4e09\u89d2\u5f62\u3002\n    /// </summary>\n    private int[] snowMeshTriangleIndexes;\n\n    /// <summary>\n    /// \u96ea UV.\n    /// </summary>\n    private Vector2[] snowMeshUvs;\n\n    private float range;\n    private float rangeR;\n    private Vector3 move = Vector3.zero;\n\n    private MeshRenderer meshRenderer;\n    private MeshFilter meshFilter;\n\n    #endregion Field\n\n    public override async GTask Awake()\n    {\n        await base.Awake();\n\n        this.meshFilter = transform.GetComponent<MeshFilter>();\n        this.meshRenderer = transform.GetComponent<MeshRenderer>();\n\n        CreateSnowMesh();\n        \n        \n    }\n    public override void OnDestroy()\n    {\n        base.OnDestroy();\n        this.meshFilter = null;\n        this.meshRenderer = null;\n    }\n\n    public override void OnEnable()\n    {\n        base.OnEnable();\n        GalaRenderPipeline.GalaRenderManager.AddEventListener(\"QualityChanged\", OnQualityChanged);\n        OpenLateUpdate();\n    }\n\n    public override void OnDisable()\n    {\n        base.OnDisable();\n        GalaRenderPipeline.GalaRenderManager.RemoveEventListener(\"QualityChanged\", OnQualityChanged);\n        CloseLateUpdate();\n    }\n\n    private void OnQualityChanged()\n    {\n        CreateSnowMesh();\n    }\n\n    private void SetSnowNum()\n    {\n        int quality = SettingConfig.CurQualityLevel;\n        switch(quality)\n        {\n            case 1:\n            case 2:\n                SNOW_NUM = 300;\n                break;\n            case 3:\n                SNOW_NUM = 800;\n                break;\n            case 4:\n                SNOW_NUM = 1000;\n                break;\n            case 5:\n                SNOW_NUM = 1200;\n                break;\n            case 6:\n                SNOW_NUM = 1500;\n                break;\n        }\n    }\n    private void CreateSnowMesh()\n    {\n        if(this.meshFilter == null) return;\n        \n        SetSnowNum();.0f / range;\n        this.snowMeshVertices = new Vector3[SNOW_NUM * 4];\n\n        #region Generate Vertices\n\n        for (var i = 0; i < SNOW_NUM; i++)\n        {\n            float x = Random.Range (-this.range, this.range);\n            float y = Random.Range (-this.range, this.range);\n            float z = Random.Range (-this.range, this.range);\n\n            Vector3 point = new Vector3(Random.Range(-this.range, this.range),\n                                        Random.Range(-this.range, this.range),\n                                        Random.Range(-this.range, this.range));\n\n            this.snowMeshVertices [i * 4 + 0] = point;\n            this.snowMeshVertices [i * 4 + 1] = point;\n            this.snowMeshVertices [i * 4 + 2] = point;\n            this.snowMeshVertices [i * 4 + 3] = point;\n        }\n\n        #endregion Generate Vertices\n\n        #region Generate Indexes\n\n        this.snowMeshTriangleIndexes = new int[SNOW_NUM * 6];\n\n        for (int i = 0; i < SNOW_NUM; i++)\n        {\n            this.snowMeshTriangleIndexes[i * 6 + 0] = i * 4 + 0;\n            this.snowMeshTriangleIndexes[i * 6 + 1] = i * 4 + 1;\n            this.snowMeshTriangleIndexes[i * 6 + 2] = i * 4 + 2;\n\n            this.snowMeshTriangleIndexes[i * 6 + 3] = i * 4 + 2;\n            this.snowMeshTriangleIndexes[i * 6 + 4] = i * 4 + 1;\n            this.snowMeshTriangleIndexes[i * 6 + 5] = i * 4 + 3;\n        }\n\n        #endregion Generate Indexes\n\n        #region Generate UVs\n\n        this.snowMeshUvs = new Vector2[SNOW_NUM * 4];\n\n        for (var i = 0; i < SNOW_NUM; i++)\n        {\n            snowMeshUvs [i * 4 + 0] = new Vector2 (0f, 0f);\n            snowMeshUvs [i * 4 + 1] = new Vector2 (1f, 0f);\n            snowMeshUvs [i * 4 + 2] = new Vector2 (0f, 1f);\n            snowMeshUvs [i * 4 + 3] = new Vector2 (1f, 1f);\n        }\n\n        #endregion Generate UVs\n\n        Mesh mesh      = new Mesh();\n        mesh.name      = \"SnowMeshes\";\n        mesh.vertices  = this.snowMeshVertices;\n        mesh.triangles = this.snowMeshTriangleIndexes;\n        mesh.uv        = this.snowMeshUvs;\n        mesh.bounds    = new Bounds(Vector3.zero, Vector3.one * 9999);  //99999999\n\n        meshFilter.sharedMesh = mesh;\n\n    }\n    \n\n    public override void LateUpdate()\n    {\n        Camera cam = Camera.main;\n        if(cam == null) return;\n        Vector3 target_position = cam.transform.TransformPoint(Vector3.forward * this.range);\n\n        this.meshRenderer.material.SetFloat(\"_Range\",  this.range);\n        this.meshRenderer.material.SetFloat(\"_RangeR\", this.rangeR);\n        this.meshRenderer.material.SetFloat(\"_Size\",   0.2f);\n\n        this.meshRenderer.material.SetVector(\"_MoveTotal\",      this.move);\n        this.meshRenderer.material.SetVector(\"_CamUp\",          cam.transform.up);\n        this.meshRenderer.material.SetVector(\"_TargetPosition\", target_position);\n\n        float x = (Mathf.PerlinNoise(0f, Time.time * 0.1f) - 0.5f) * 10f;\n        float y = -2f;\n        float z = (Mathf.PerlinNoise(Time.time * 0.1f, 0f) - 0.5f) * 10f;\n        \n        //if(cam.transform.localPosition.y > 180)\n        //{\n        //    y = -10f;\n        //}\n        move += new Vector3(x, y, z) * Time.deltaTime;\n        move.x = Mathf.Repeat(move.x, range * 2f);\n        move.y = Mathf.Repeat(move.y, range * 2f);\n        move.z = Mathf.Repeat(move.z, range * 2f);\n    }\n}", "starcoder_inputs": "<fim_prefix>\ufeffusing UnityEngine;\n\npublic class Snow3DView : View3DBase\n{\n    #region Field\n\n    /// <summary>\n    /// \u964d\u96ea\u6570\u91cf\u3002\n    /// </summary>\n    private int SNOW_NUM = 1500;  //10000;\n\n    /// <summary>\n    /// \u96ea\u9802\u70b9\u3002\n    /// </summary>\n    private Vector3[] snowMeshVertices;\n\n    /// <summary>\n    /// \u96ea\u4e09\u89d2\u5f62\u3002\n    /// </summary>\n    private int[] snowMeshTriangleIndexes;\n\n    /// <summary>\n    /// \u96ea UV.\n    /// </summary>\n    private Vector2[] snowMeshUvs;\n\n    private float range;\n    private float rangeR;\n    private Vector3 move = Vector3.zero;\n\n    private MeshRenderer meshRenderer;\n    private MeshFilter meshFilter;\n\n    #endregion Field\n\n    public override async GTask Awake()\n    {\n        await base.Awake();\n\n        this.meshFilter = transform.GetComponent<MeshFilter>();\n        this.meshRenderer = transform.GetComponent<MeshRenderer>();\n\n        CreateSnowMesh();\n        \n        \n    }\n    public override void OnDestroy()\n    {\n        base.OnDestroy();\n        this.meshFilter = null;\n        this.meshRenderer = null;\n    }\n\n    public override void OnEnable()\n    {\n        base.OnEnable();\n        GalaRenderPipeline.GalaRenderManager.AddEventListener(\"QualityChanged\", OnQualityChanged);\n        OpenLateUpdate();\n    }\n\n    public override void OnDisable()\n    {\n        base.OnDisable();\n        GalaRenderPipeline.GalaRenderManager.RemoveEventListener(\"QualityChanged\", OnQualityChanged);\n        CloseLateUpdate();\n    }\n\n    private void OnQualityChanged()\n    {\n        CreateSnowMesh();\n    }\n\n    private void SetSnowNum()\n    {\n        int quality = SettingConfig.CurQualityLevel;\n        switch(quality)\n        {\n            case 1:\n            case 2:\n                SNOW_NUM = 300;\n                break;\n            case 3:\n                SNOW_NUM = 800;\n                break;\n            case 4:\n                SNOW_NUM = 1000;\n                break;\n            case 5:\n                SNOW_NUM = 1200;\n                break;\n            case 6:\n                SNOW_NUM = 1500;\n                break;\n        }\n    }\n    private void CreateSnowMesh()\n    {\n        if(this.meshFilter == null) return;\n        \n        SetSnowNum();<fim_suffix>.0f / range;\n        this.snowMeshVertices = new Vector3[SNOW_NUM * 4];\n\n        #region Generate Vertices\n\n        for (var i = 0; i < SNOW_NUM; i++)\n        {\n            float x = Random.Range (-this.range, this.range);\n            float y = Random.Range (-this.range, this.range);\n            float z = Random.Range (-this.range, this.range);\n\n            Vector3 point = new Vector3(Random.Range(-this.range, this.range),\n                                        Random.Range(-this.range, this.range),\n                                        Random.Range(-this.range, this.range));\n\n            this.snowMeshVertices [i * 4 + 0] = point;\n            this.snowMeshVertices [i * 4 + 1] = point;\n            this.snowMeshVertices [i * 4 + 2] = point;\n            this.snowMeshVertices [i * 4 + 3] = point;\n        }\n\n        #endregion Generate Vertices\n\n        #region Generate Indexes\n\n        this.snowMeshTriangleIndexes = new int[SNOW_NUM * 6];\n\n        for (int i = 0; i < SNOW_NUM; i++)\n        {\n            this.snowMeshTriangleIndexes[i * 6 + 0] = i * 4 + 0;\n            this.snowMeshTriangleIndexes[i * 6 + 1] = i * 4 + 1;\n            this.snowMeshTriangleIndexes[i * 6 + 2] = i * 4 + 2;\n\n            this.snowMeshTriangleIndexes[i * 6 + 3] = i * 4 + 2;\n            this.snowMeshTriangleIndexes[i * 6 + 4] = i * 4 + 1;\n            this.snowMeshTriangleIndexes[i * 6 + 5] = i * 4 + 3;\n        }\n\n        #endregion Generate Indexes\n\n        #region Generate UVs\n\n        this.snowMeshUvs = new Vector2[SNOW_NUM * 4];\n\n        for (var i = 0; i < SNOW_NUM; i++)\n        {\n            snowMeshUvs [i * 4 + 0] = new Vector2 (0f, 0f);\n            snowMeshUvs [i * 4 + 1] = new Vector2 (1f, 0f);\n            snowMeshUvs [i * 4 + 2] = new Vector2 (0f, 1f);\n            snowMeshUvs [i * 4 + 3] = new Vector2 (1f, 1f);\n        }\n\n        #endregion Generate UVs\n\n        Mesh mesh      = new Mesh();\n        mesh.name      = \"SnowMeshes\";\n        mesh.vertices  = this.snowMeshVertices;\n        mesh.triangles = this.snowMeshTriangleIndexes;\n        mesh.uv        = this.snowMeshUvs;\n        mesh.bounds    = new Bounds(Vector3.zero, Vector3.one * 9999);  //99999999\n\n        meshFilter.sharedMesh = mesh;\n\n    }\n    \n\n    public override void LateUpdate()\n    {\n        Camera cam = Camera.main;\n        if(cam == null) return;\n        Vector3 target_position = cam.transform.TransformPoint(Vector3.forward * this.range);\n\n        this.meshRenderer.material.SetFloat(\"_Range\",  this.range);\n        this.meshRenderer.material.SetFloat(\"_RangeR\", this.rangeR);\n        this.meshRenderer.material.SetFloat(\"_Size\",   0.2f);\n\n        this.meshRenderer.material.SetVector(\"_MoveTotal\",      this.move);\n        this.meshRenderer.material.SetVector(\"_CamUp\",          cam.transform.up);\n        this.meshRenderer.material.SetVector(\"_TargetPosition\", target_position);\n\n        float x = (Mathf.PerlinNoise(0f, Time.time * 0.1f) - 0.5f) * 10f;\n        float y = -2f;\n        float z = (Mathf.PerlinNoise(Time.time * 0.1f, 0f) - 0.5f) * 10f;\n        \n        //if(cam.transform.localPosition.y > 180)\n        //{\n        //    y = -10f;\n        //}\n        move += new Vector3(x, y, z) * Time.deltaTime;\n        move.x = Mathf.Repeat(move.x, range * 2f);\n        move.y = Mathf.Repeat(move.y, range * 2f);\n        move.z = Mathf.Repeat(move.z, range * 2f);\n    }\n}<fim_middle>"}
{"inputs": "using System.Diagnostics;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Framework.GalaSports.Service;\nusing UnityEngine;\nusing UnityEngine.AddressableAssets;\n//[ExecuteInEditMode]\npublic class FitnessRoom3DView : View3DBase\n{\n\n    public GameObject[] fitnessRoomFloors;\n    public Light CharacterLight;\n    const string FitnessRoomPlayer = \"FitnessRoomPlayer\";\n    const string FitnessRoomPlayerUpgrade = \"FitnessRoomPlayerUpgrade\";\n    bool isPlayerSetStarted = false;\n    bool isSetting = false;\n    FitnessRoomPlayer_Hotfix fitnessRoomPlayer;\n\n    Vector3[] localPos = new Vector3[] {\n        new Vector3(7.814f, -0.005f, -6.97f),\n        new Vector3(-8.457f, 0, 1.232f),\n        new Vector3(-12.6f, 0.055f, -0.816f)\n    };\n\n    Vector3[] localEulerAngles = new Vector3[] {\n        Vector3.zero,\n        new Vector3(0, 178f, 0),\n        new Vector3(0, 2.12f, 0)\n    };\n\n    Vector3[] characterLightLocalEuler = new Vector3[]\n    {\n        new Vector3(38f, -150f, 0),\n        new Vector3(38f, -175f, 0),\n        new Vector3(38f, -160f, 0),\n    };\n\n    float[] characterLightIntensity = new float[]\n    {\n       1.35f,1.7f, 0.9f,\n    };\n\n    Vector4[] characterSoftShadowDirection1 = new Vector4[]\n    {\n        new Vector4(-1.3f, 4f, 1f, 0f),\n        new Vector4(0.5f, 5f, 1f, 0f),\n        new Vector4(-1.1f, 3.5f, 1.125f, 0f),\n    };\n\n    Vector4[] characterSoftShadowDirection2 = new Vector4[]\n    {\n        new Vector4(1.75f, 1.5f, 0.75f, 0f),\n        new Vector4(-1.25f, 1.5f, 0.4f, 0f),\n        new Vector4(1.1f, 1.75f, 1.25f, 0f),\n    };\n    public GameObject[] ReflectionProbes;\n\n    int[] fitnessRoomFloorIndex = new int[]\n    {\n        0,0,1\n    };\n    float[] fitnessRoomFloorGroundY = new float[]\n    {\n        0,0,0.05f\n    };\n\n\n    public RenderTexture _jerseyTexture;\n    RenderTexture _socksTexture;\n    RenderTexture _keeperJerseyTexture;\n    RenderTexture _keeperSocksTexture;\n    private GameObject playerObj;\n    float oldBloom;\n\n    private LightmapDataView lightmapDataView;\n    public override async GTask Awake()\n    {\n        //await base.Awake();\n        fitnessRoomFloors = new GameObject[2];\n        fitnessRoomFloors[0] = this.transform.Find(\"StaticModel/FitnessRoom01/FitnessRoom_Floor\").gameObject;\n        fitnessRoomFloors[1] = this.transform.Find(\"StaticModel/FitnessRoom01/FitnessRoom_Grass\").gameObject;\n\n        CharacterLight = this.transform.Find(\"Lights_player/Directional Light\").GetComponent<Light>();\n\n        ReflectionProbes = new GameObject[3];\n        for (int i = 0; i < ReflectionProbes.Length; i++)\n        {\n            ReflectionProbes[i] = this.transform.Find(string.Format(\"ReflectionProbe0{0}\", i + 1)).gameObject;\n        }\n\n\n        lightmapDataView = this.transform.GetComponent<LightmapDataView>();\n\n        oldBloom = Camera.main.GetComponent<CameraRenderPassSetting>().BloomIntensity;\n        Camera.main.GetComponent<CameraRenderPassSetting>().BloomIntensity = 0.5f;\n\n        SceneCameraController.instance.EnterRoom(true);\n        isPlayerSetStarted = false;\n\n        await InitPlayer();\n\n        Platform.EventDispatcher.AddEventListener<PlayersInfoTransfer, bool, string>(FitnessRoomPlayer, SetFitnessRoomPlayer);\n        Platform.EventDispatcher.AddEventListener(FitnessRoomPlayerUpgrade, delegate\n        {\n            fitnessRoomPlayer.PlayerUpgrade();\n        });\n    }\n\n    public override async void OnEnable()\n    {\n        base.OnEnable();\n        await GAsync.WaitNextFrame();\n        lightmapDataView?.ReconstructLightProbeData();\n        lightmapDataView?.RestoreLightMapData();\n    }\n    public override void OnDisable()\n    {\n        base.OnDisable();\n        lightmapDataView?.ResetDefaultLightProbe();\n        lightmapDataView?.UnloadLightMapDatas();\n    }\n\n\n    private async void SetFitnessRoomPlayer(PlayersInfoTransfer player, bool isKeeper, string playerName)\n    {\n        //player_id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684player_id\uff0c\u53ef\u4ee5\u7528\u6765\u67e5\u914d\u7f6e\n        //headModel_id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684headmodel\u503c\uff0c\u7528\u6765\u8868\u793a\u5934\u90e83D\u6a21\u578b\u7684\u6587\u4ef6\u540d\n        //isKeeper:\u662f\u5b88\u95e8\u5458\u5417?\n        //skinColor:\u80a4\u8272\u679a\u4e3e\u503c\uff0c\u53d6\u503c\u89c4\u5219\u4e0ePlayerCfg\u76f8\u540c\n        //bodyHeight:\u8eab\u9ad8\n        if (fitnessRoomPlayer != null && !isSetting)\n        {\n            isSetting = true;\n            //fitnessRoomPlayer.gameObject.SetActive(false);\n            await PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(new string[] { player.HeadModel_id.ToString() });\n            await fitnessRoomPlayer.SetOneHighPolyPlayer(player.Player_id, int.Parse(player.HeadModel_id), isKeeper, (SkinColorForTexture)player.SkinColor, player.SkinColorCorrectionValue,(int)player.BodyHeight, player.Shoe_id, player.BodyWeight, playerName, player.PlayerNumber, null, true);\n     \n\n\n            fitnessRoomPlayer.gameObject.SetActive(true);\n            isSetting = false;\n        }\n\n\n    }\n\n    private async GTask InitPlayer()\n    {\n        if (fitnessRoomPlayer == null)\n        {\n            var req = await ResourceMgr.Instance.InstantiateAsync(\"3D/Upgrade/HighPolyPlayerRoot\");\n            //if (this == null)\n            //{ //\u9632\u6b62\u6765\u56de\u5207\u6362\u5065\u8eab\u623f\u521b\u5efa\u4e24\u4e2a\u7403\u5458\n            //    ResourceMgr.Instance.UnloadGameObject(req.result);\n            //    return;\n            //}\n            playerObj = req.result;\n            playerObj.transform.SetParent(this.transform);\n            int index = PlatformHotfix.SceneZoomManager.Instance.UpgradeCurveIndex;\n            SetReflectionProbe(index);\n            playerObj.transform.localPosition = localPos[index];\n            playerObj.transform.localEulerAngles = localEulerAngles[index];\n            playerObj.SetActive(false);\n            CharacterLight.transform.localEulerAngles = characterLightLocalEuler[index];\n            if (GalaShaderGlobalSetting.CurQualitySetting.ShaderQuality > 2)\n                CharacterLight.intensity = characterLightIntensity[index];\n            else\n                CharacterLight.intensity = 1.4f;\n\n            CharacterLight.intensity = characterLightIntensity[index];\n            fitnessRoomPlayer = RenderingHelper.Instance.GetComponent<FitnessRoomPlayer_Hotfix>(playerObj);\n            Vector4 shadowDir1 = characterSoftShadowDirection1[index];\n            Vector4 shadowDir2 = characterSoftShadowDirection2[index];\n            await fitnessRoomPlayer.Init_Hotfix(fitnessRoomFloors[fitnessRoomFloorIndex[index]], shadowDir1, shadowDir2, fitnessRoomFloorGroundY[index]);\n            \n        }\n        //await SetPlayerClothesTexture(DefaultPlayerNumber);\n    }\n\n    // private async GTask SetPlayerClothesTexture(string playerNum)\n    // {\n    //     //\u8bbe\u7f6e\u7403\u8863\u8d34\u56fe\n    //     if (string.IsNullOrEmpty(playerNum))\n    //     {\n    //         playerNum = DefaultPlayerNumber;\n    //     }\n    //     if (string.IsNullOrEmpty(PlayerNumber) || !PlayerNumber.Equals(playerNum))\n    //     {\n    //         PlayerNumber = playerNum;\n\n    //         System.Tuple<RenderTexture, RenderTexture> t = (await PlayerJerseyGenerator_Hotfix.GetJerserTexture(playerNum)).result;\n    //         TAGlobalData.Instance.ReleaseTexture(_jerseyTexture, _socksTexture);\n    //         _jerseyTexture = t.Item1;\n    //         _socksTexture = t.Item2;\n    //         _keeperJerseyTexture = _jerseyTexture;\n    //         _keeperSocksTexture = _socksTexture;\n    //         fitnessRoomPlayer.InitTeamClothesTexture(_jerseyTexture, _keeperJerseyTexture, _socksTexture, _keeperSocksTexture);\n    //     }\n    // }\n\n    const string DefaultPlayerNumber = \"10\";\n    string PlayerNumber;\n\n    void SetReflectionProbe(int index)\n    {\n        for (int i = 0; i < ReflectionProbes.Length; i++)\n            ReflectionProbes[i].SetActive(false);\n        ReflectionProbes[index].SetActive(true);\n    }\n\n    public override void OnDestroy()\n    {\n        if (SceneCameraController.instance != null)\n        {\n            SceneCameraController.instance.EnterRoom(false);\n        }\n\n        //if (fitnessRoomPlayer != null)\n        //{\n        //    fitnessRoomPlayer.gameObject.DestroySelf();\n        //}\n\n        TAGlobalData.Instance.ReleaseTexture(_jerseyTexture, _socksTexture);\n        _socksTexture = null;\n        _jerseyTexture = null;\n        _keeperSocksTexture = null;\n        _keeperJerseyTexture = null;\n        fitnessRoomPlayer = null;\n        if (playerObj != null)\n        {\n            //playerObj.DestroySelf();\n            ResourceMgr.Instance.UnloadGameObject(playerObj);\n            playerObj = null;\n        }\n        Platform.EventDispatcher.RemoveEvent(FitnessRoomPlayer);\n        Platform.EventDispatcher.RemoveEvent(FitnessRoomPlayerUpgrade);\n        if (Camera.main != null)\n        {\n            var cameraRenderPassSetting = Camera.main.GetComponent<CameraRenderPassSetting>();\n            if (cameraRenderPassSetting != null)\n                cameraRenderPassSetting.BloomIntensity = oldBloom;\n        }\n    }\n}\n", "cropped_inputs": "using System.Diagnostics;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Framework.GalaSports.Service;\nusing UnityEngine;\nusing UnityEngine.AddressableAssets;\n//[ExecuteInEditMode]\npublic class FitnessRoom3DView : View3DBase\n{\n\n    public GameObject[] fitnessRoomFloors;\n    public Light CharacterLight;\n    const string FitnessRoomPlayer = \"FitnessRoomPlayer\";\n    const string FitnessRoomPlayerUpgrade = \"FitnessRoomPlayerUpgrade\";\n    bool isPlayerSetStarted = false;\n    bool isSetting = false;\n    FitnessRoomPlayer_Hotfix fitnessRoomPlayer;\n\n    Vector3[] localPos = new Vector3[] {\n        new Vector3(7.814f, -0.005f, -6.97f),\n        new Vector3(-8.457f, 0, 1.232f),\n        new Vector3(-12.6f, 0.055f, -0.816f)\n    };\n\n    Vector3[] localEulerAngles = new Vector3[] {\n        Vector3.zero,\n        new Vector3(0, 178f, 0),\n        new Vector3(0, 2.12f, 0)\n    };\n\n    Vector3[] characterLightLocalEuler = new Vector3[]\n    {\n        new Vector3(38f, -150f, 0),\n        new Vector3(38f, -175f, 0),\n        new Vector3(38f, -160f, 0),\n    };\n\n    float[] characterLightIntensity = new float[]\n    {\n       1.35f,1.7f, 0.9f,\n    };\n\n    Vector4[] characterSoftShadowDirection1 = new Vector4[]\n    {\n        new Vector4(-1.3f, 4f, 1f, 0f),\n        new Vector4(0.5f, 5f, 1f, 0f),\n        new Vector4(-1.1f, 3.5f, 1.125f, 0f),\n    };\n\n    Vector4[] characterSoftShadowDirection2 = new Vector4[]\n    {\n        new Vector4(1.75f, 1.5f, 0.75f, 0f),\n        new Vector4(-1.25f, 1.5f, 0.4f, 0f),\n        new Vector4(1.1f, 1.75f, 1.25f, 0f),\n    };\n    public GameObject[] ReflectionProbes;\n\n    int[] fitnessRoomFloorIndex = new int[]\n    {\n        0,0,1\n    };\n    float[] fitnessRoomFloorGroundY = new float[]\n    {\n        0,0,0.05f\n    };\n\n\n    public RenderTexture _jerseyTexture;\n    RenderTexture _socksTexture;\n    RenderTexture _keeperJerseyTexture;\n    RenderTexture _keeperSocksTexture;\n    private GameObject playerObj;\n    float oldBloom;\n\n    private LightmapDataView lightmapDataView;\n    public override async GTask Awake()\n    {\n        //await base.Awake();\n        fitnessRoomFloors = new GameObject[2];\n        fitnessRoomFloors[0] = this.transform.Find(\"StaticModel/FitnessRoom01/FitnessRoom_Floor\").gameObject;01/FitnessRoom_Grass\").gameObject;\n\n        CharacterLight = this.transform.Find(\"Lights_player/Directional Light\").GetComponent<Light>();\n\n        ReflectionProbes = new GameObject[3];\n        for (int i = 0; i < ReflectionProbes.Length; i++)\n        {\n            ReflectionProbes[i] = this.transform.Find(string.Format(\"ReflectionProbe0{0}\", i + 1)).gameObject;\n        }\n\n\n        lightmapDataView = this.transform.GetComponent<LightmapDataView>();\n\n        oldBloom = Camera.main.GetComponent<CameraRenderPassSetting>().BloomIntensity;\n        Camera.main.GetComponent<CameraRenderPassSetting>().BloomIntensity = 0.5f;\n\n        SceneCameraController.instance.EnterRoom(true);\n        isPlayerSetStarted = false;\n\n        await InitPlayer();\n\n        Platform.EventDispatcher.AddEventListener<PlayersInfoTransfer, bool, string>(FitnessRoomPlayer, SetFitnessRoomPlayer);\n        Platform.EventDispatcher.AddEventListener(FitnessRoomPlayerUpgrade, delegate\n        {\n            fitnessRoomPlayer.PlayerUpgrade();\n        });\n    }\n\n    public override async void OnEnable()\n    {\n        base.OnEnable();\n        await GAsync.WaitNextFrame();\n        lightmapDataView?.ReconstructLightProbeData();\n        lightmapDataView?.RestoreLightMapData();\n    }\n    public override void OnDisable()\n    {\n        base.OnDisable();\n        lightmapDataView?.ResetDefaultLightProbe();\n        lightmapDataView?.UnloadLightMapDatas();\n    }\n\n\n    private async void SetFitnessRoomPlayer(PlayersInfoTransfer player, bool isKeeper, string playerName)\n    {\n        //player_id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684player_id\uff0c\u53ef\u4ee5\u7528\u6765\u67e5\u914d\u7f6e\n        //headModel_id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684headmodel\u503c\uff0c\u7528\u6765\u8868\u793a\u5934\u90e83D\u6a21\u578b\u7684\u6587\u4ef6\u540d\n        //isKeeper:\u662f\u5b88\u95e8\u5458\u5417?\n        //skinColor:\u80a4\u8272\u679a\u4e3e\u503c\uff0c\u53d6\u503c\u89c4\u5219\u4e0ePlayerCfg\u76f8\u540c\n        //bodyHeight:\u8eab\u9ad8\n        if (fitnessRoomPlayer!= null &&!isSetting)\n        {\n            isSetting = true;\n            //fitnessRoomPlayer.gameObject.SetActive(false);\n            await PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(new string[] { player.HeadModel_id.ToString() });\n            await fitnessRoomPlayer.SetOneHighPolyPlayer(player.Player_id, int.Parse(player.HeadModel_id), isKeeper, (SkinColorForTexture)player.SkinColor, player.SkinColorCorrectionValue,(int)player.BodyHeight, player.Shoe_id, player.BodyWeight, playerName, player.PlayerNumber, null, true);\n     \n\n\n            fitnessRoomPlayer.gameObject.SetActive(true);\n            isSetting = false;\n        }\n\n\n    }\n\n    private async GTask InitPlayer()\n    {\n        if (fitnessRoomPlayer == null)\n        {\n            var req = await ResourceMgr.Instance.InstantiateAsync(\"3D/Upgrade/HighPolyPlayerRoot\");\n            //if (this == null)\n            //{ //\u9632\u6b62\u6765\u56de\u5207\u6362\u5065\u8eab\u623f\u521b\u5efa\u4e24\u4e2a\u7403\u5458\n            //    ResourceMgr.Instance.UnloadGameObject(req.result);\n            //    return;\n            //}\n            playerObj = req.result;\n            playerObj.transform.SetParent(this.transform);\n            int index = PlatformHotfix.SceneZoomManager.Instance.UpgradeCurveIndex;\n            SetReflectionProbe(index);\n            playerObj.transform.localPosition = localPos[index];\n            playerObj.transform.localEulerAngles = localEulerAngles[index];\n            playerObj.SetActive(false);\n            CharacterLight.transform.localEulerAngles = characterLightLocalEuler[index];\n            if (GalaShaderGlobalSetting.CurQualitySetting.ShaderQuality > 2)\n                CharacterLight.intensity = characterLightIntensity[index];\n            else\n                CharacterLight.intensity = 1.4f;\n\n            CharacterLight.intensity = characterLightIntensity[index];\n            fitnessRoomPlayer = RenderingHelper.Instance.GetComponent<FitnessRoomPlayer_Hotfix>(playerObj);\n            Vector4 shadowDir1 = characterSoftShadowDirection1[index];\n            Vector4 shadowDir2 = characterSoftShadowDirection2[index];\n            await fitnessRoomPlayer.Init_Hotfix(fitnessRoomFloors[fitnessRoomFloorIndex[index]], shadowDir1, shadowDir2, fitnessRoomFloorGroundY[index]);\n            \n        }\n        //await SetPlayerClothesTexture(DefaultPlayerNumber);\n    }\n\n    // private async GTask SetPlayerClothesTexture(string playerNum)\n    // {\n    //     //\u8bbe\u7f6e\u7403\u8863\u8d34\u56fe\n    //     if (string.IsNullOrEmpty(playerNum))\n    //     {\n    //         playerNum = DefaultPlayerNumber;\n    //     }\n    //     if (string.IsNullOrEmpty(PlayerNumber) ||!PlayerNumber.Equals(playerNum))\n    //     {\n    //         PlayerNumber = playerNum;\n\n    //         System.Tuple<RenderTexture, RenderTexture> t = (await PlayerJerseyGenerator_Hotfix.GetJerserTexture(playerNum)).result;\n    //         TAGlobalData.Instance.ReleaseTexture(_jerseyTexture, _socksTexture);\n    //         _jerseyTexture = t.Item1;\n    //         _socksTexture = t.Item2;\n    //         _keeperJerseyTexture = _jerseyTexture;\n    //         _keeperSocksTexture = _socksTexture;\n    //         fitnessRoomPlayer.InitTeamClothesTexture(_jerseyTexture, _keeperJerseyTexture, _socksTexture, _keeperSocksTexture);\n    //     }\n    // }\n\n    const string DefaultPlayerNumber = \"10\";\n    string PlayerNumber;\n\n    void SetReflectionProbe(int index)\n    {\n        for (int i = 0; i < ReflectionProbes.Length; i++)\n            ReflectionProbes[i].SetActive(false);\n        ReflectionProbes[index].SetActive(true);\n    }\n\n    public override void OnDestroy()\n    {\n        if (SceneCameraController.instance!= null)\n        {\n            SceneCameraController.instance.EnterRoom(false);\n        }\n\n        //if (fitnessRoomPlayer!= null)\n        //{\n        //    fitnessRoomPlayer.gameObject.DestroySelf();\n        //}\n\n        TAGlobalData.Instance.ReleaseTexture(_jerseyTexture, _socksTexture);\n        _socksTexture = null;\n        _jerseyTexture = null;\n        _keeperSocksTexture = null;\n        _keeperJerseyTexture = null;\n        fitnessRoomPlayer = null;\n        if (playerObj!= null)\n        {\n            //playerObj.DestroySelf();\n            ResourceMgr.Instance.UnloadGameObject(playerObj);\n            playerObj = null;\n        }\n        Platform.EventDispatcher.RemoveEvent(FitnessRoomPlayer);\n        Platform.EventDispatcher.RemoveEvent(FitnessRoomPlayerUpgrade);\n        if (Camera.main!= null)\n        {\n            var cameraRenderPassSetting = Camera.main.GetComponent<CameraRenderPassSetting>();\n            if (cameraRenderPassSetting!= null)\n                cameraRenderPassSetting.BloomIntensity = oldBloom;\n        }\n    }\n}\n", "starcoder_inputs": "<fim_prefix>using System.Diagnostics;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Framework.GalaSports.Service;\nusing UnityEngine;\nusing UnityEngine.AddressableAssets;\n//[ExecuteInEditMode]\npublic class FitnessRoom3DView : View3DBase\n{\n\n    public GameObject[] fitnessRoomFloors;\n    public Light CharacterLight;\n    const string FitnessRoomPlayer = \"FitnessRoomPlayer\";\n    const string FitnessRoomPlayerUpgrade = \"FitnessRoomPlayerUpgrade\";\n    bool isPlayerSetStarted = false;\n    bool isSetting = false;\n    FitnessRoomPlayer_Hotfix fitnessRoomPlayer;\n\n    Vector3[] localPos = new Vector3[] {\n        new Vector3(7.814f, -0.005f, -6.97f),\n        new Vector3(-8.457f, 0, 1.232f),\n        new Vector3(-12.6f, 0.055f, -0.816f)\n    };\n\n    Vector3[] localEulerAngles = new Vector3[] {\n        Vector3.zero,\n        new Vector3(0, 178f, 0),\n        new Vector3(0, 2.12f, 0)\n    };\n\n    Vector3[] characterLightLocalEuler = new Vector3[]\n    {\n        new Vector3(38f, -150f, 0),\n        new Vector3(38f, -175f, 0),\n        new Vector3(38f, -160f, 0),\n    };\n\n    float[] characterLightIntensity = new float[]\n    {\n       1.35f,1.7f, 0.9f,\n    };\n\n    Vector4[] characterSoftShadowDirection1 = new Vector4[]\n    {\n        new Vector4(-1.3f, 4f, 1f, 0f),\n        new Vector4(0.5f, 5f, 1f, 0f),\n        new Vector4(-1.1f, 3.5f, 1.125f, 0f),\n    };\n\n    Vector4[] characterSoftShadowDirection2 = new Vector4[]\n    {\n        new Vector4(1.75f, 1.5f, 0.75f, 0f),\n        new Vector4(-1.25f, 1.5f, 0.4f, 0f),\n        new Vector4(1.1f, 1.75f, 1.25f, 0f),\n    };\n    public GameObject[] ReflectionProbes;\n\n    int[] fitnessRoomFloorIndex = new int[]\n    {\n        0,0,1\n    };\n    float[] fitnessRoomFloorGroundY = new float[]\n    {\n        0,0,0.05f\n    };\n\n\n    public RenderTexture _jerseyTexture;\n    RenderTexture _socksTexture;\n    RenderTexture _keeperJerseyTexture;\n    RenderTexture _keeperSocksTexture;\n    private GameObject playerObj;\n    float oldBloom;\n\n    private LightmapDataView lightmapDataView;\n    public override async GTask Awake()\n    {\n        //await base.Awake();\n        fitnessRoomFloors = new GameObject[2];\n        fitnessRoomFloors[0] = this.transform.Find(\"StaticModel/FitnessRoom01/FitnessRoom_Floor\").gameObject;<fim_suffix>01/FitnessRoom_Grass\").gameObject;\n\n        CharacterLight = this.transform.Find(\"Lights_player/Directional Light\").GetComponent<Light>();\n\n        ReflectionProbes = new GameObject[3];\n        for (int i = 0; i < ReflectionProbes.Length; i++)\n        {\n            ReflectionProbes[i] = this.transform.Find(string.Format(\"ReflectionProbe0{0}\", i + 1)).gameObject;\n        }\n\n\n        lightmapDataView = this.transform.GetComponent<LightmapDataView>();\n\n        oldBloom = Camera.main.GetComponent<CameraRenderPassSetting>().BloomIntensity;\n        Camera.main.GetComponent<CameraRenderPassSetting>().BloomIntensity = 0.5f;\n\n        SceneCameraController.instance.EnterRoom(true);\n        isPlayerSetStarted = false;\n\n        await InitPlayer();\n\n        Platform.EventDispatcher.AddEventListener<PlayersInfoTransfer, bool, string>(FitnessRoomPlayer, SetFitnessRoomPlayer);\n        Platform.EventDispatcher.AddEventListener(FitnessRoomPlayerUpgrade, delegate\n        {\n            fitnessRoomPlayer.PlayerUpgrade();\n        });\n    }\n\n    public override async void OnEnable()\n    {\n        base.OnEnable();\n        await GAsync.WaitNextFrame();\n        lightmapDataView?.ReconstructLightProbeData();\n        lightmapDataView?.RestoreLightMapData();\n    }\n    public override void OnDisable()\n    {\n        base.OnDisable();\n        lightmapDataView?.ResetDefaultLightProbe();\n        lightmapDataView?.UnloadLightMapDatas();\n    }\n\n\n    private async void SetFitnessRoomPlayer(PlayersInfoTransfer player, bool isKeeper, string playerName)\n    {\n        //player_id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684player_id\uff0c\u53ef\u4ee5\u7528\u6765\u67e5\u914d\u7f6e\n        //headModel_id:\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684headmodel\u503c\uff0c\u7528\u6765\u8868\u793a\u5934\u90e83D\u6a21\u578b\u7684\u6587\u4ef6\u540d\n        //isKeeper:\u662f\u5b88\u95e8\u5458\u5417?\n        //skinColor:\u80a4\u8272\u679a\u4e3e\u503c\uff0c\u53d6\u503c\u89c4\u5219\u4e0ePlayerCfg\u76f8\u540c\n        //bodyHeight:\u8eab\u9ad8\n        if (fitnessRoomPlayer!= null &&!isSetting)\n        {\n            isSetting = true;\n            //fitnessRoomPlayer.gameObject.SetActive(false);\n            await PlayerHeadDataLoader.AsyncPreLoadMultiHeadDataSet(new string[] { player.HeadModel_id.ToString() });\n            await fitnessRoomPlayer.SetOneHighPolyPlayer(player.Player_id, int.Parse(player.HeadModel_id), isKeeper, (SkinColorForTexture)player.SkinColor, player.SkinColorCorrectionValue,(int)player.BodyHeight, player.Shoe_id, player.BodyWeight, playerName, player.PlayerNumber, null, true);\n     \n\n\n            fitnessRoomPlayer.gameObject.SetActive(true);\n            isSetting = false;\n        }\n\n\n    }\n\n    private async GTask InitPlayer()\n    {\n        if (fitnessRoomPlayer == null)\n        {\n            var req = await ResourceMgr.Instance.InstantiateAsync(\"3D/Upgrade/HighPolyPlayerRoot\");\n            //if (this == null)\n            //{ //\u9632\u6b62\u6765\u56de\u5207\u6362\u5065\u8eab\u623f\u521b\u5efa\u4e24\u4e2a\u7403\u5458\n            //    ResourceMgr.Instance.UnloadGameObject(req.result);\n            //    return;\n            //}\n            playerObj = req.result;\n            playerObj.transform.SetParent(this.transform);\n            int index = PlatformHotfix.SceneZoomManager.Instance.UpgradeCurveIndex;\n            SetReflectionProbe(index);\n            playerObj.transform.localPosition = localPos[index];\n            playerObj.transform.localEulerAngles = localEulerAngles[index];\n            playerObj.SetActive(false);\n            CharacterLight.transform.localEulerAngles = characterLightLocalEuler[index];\n            if (GalaShaderGlobalSetting.CurQualitySetting.ShaderQuality > 2)\n                CharacterLight.intensity = characterLightIntensity[index];\n            else\n                CharacterLight.intensity = 1.4f;\n\n            CharacterLight.intensity = characterLightIntensity[index];\n            fitnessRoomPlayer = RenderingHelper.Instance.GetComponent<FitnessRoomPlayer_Hotfix>(playerObj);\n            Vector4 shadowDir1 = characterSoftShadowDirection1[index];\n            Vector4 shadowDir2 = characterSoftShadowDirection2[index];\n            await fitnessRoomPlayer.Init_Hotfix(fitnessRoomFloors[fitnessRoomFloorIndex[index]], shadowDir1, shadowDir2, fitnessRoomFloorGroundY[index]);\n            \n        }\n        //await SetPlayerClothesTexture(DefaultPlayerNumber);\n    }\n\n    // private async GTask SetPlayerClothesTexture(string playerNum)\n    // {\n    //     //\u8bbe\u7f6e\u7403\u8863\u8d34\u56fe\n    //     if (string.IsNullOrEmpty(playerNum))\n    //     {\n    //         playerNum = DefaultPlayerNumber;\n    //     }\n    //     if (string.IsNullOrEmpty(PlayerNumber) ||!PlayerNumber.Equals(playerNum))\n    //     {\n    //         PlayerNumber = playerNum;\n\n    //         System.Tuple<RenderTexture, RenderTexture> t = (await PlayerJerseyGenerator_Hotfix.GetJerserTexture(playerNum)).result;\n    //         TAGlobalData.Instance.ReleaseTexture(_jerseyTexture, _socksTexture);\n    //         _jerseyTexture = t.Item1;\n    //         _socksTexture = t.Item2;\n    //         _keeperJerseyTexture = _jerseyTexture;\n    //         _keeperSocksTexture = _socksTexture;\n    //         fitnessRoomPlayer.InitTeamClothesTexture(_jerseyTexture, _keeperJerseyTexture, _socksTexture, _keeperSocksTexture);\n    //     }\n    // }\n\n    const string DefaultPlayerNumber = \"10\";\n    string PlayerNumber;\n\n    void SetReflectionProbe(int index)\n    {\n        for (int i = 0; i < ReflectionProbes.Length; i++)\n            ReflectionProbes[i].SetActive(false);\n        ReflectionProbes[index].SetActive(true);\n    }\n\n    public override void OnDestroy()\n    {\n        if (SceneCameraController.instance!= null)\n        {\n            SceneCameraController.instance.EnterRoom(false);\n        }\n\n        //if (fitnessRoomPlayer!= null)\n        //{\n        //    fitnessRoomPlayer.gameObject.DestroySelf();\n        //}\n\n        TAGlobalData.Instance.ReleaseTexture(_jerseyTexture, _socksTexture);\n        _socksTexture = null;\n        _jerseyTexture = null;\n        _keeperSocksTexture = null;\n        _keeperJerseyTexture = null;\n        fitnessRoomPlayer = null;\n        if (playerObj!= null)\n        {\n            //playerObj.DestroySelf();\n            ResourceMgr.Instance.UnloadGameObject(playerObj);\n            playerObj = null;\n        }\n        Platform.EventDispatcher.RemoveEvent(FitnessRoomPlayer);\n        Platform.EventDispatcher.RemoveEvent(FitnessRoomPlayerUpgrade);\n        if (Camera.main!= null)\n        {\n            var cameraRenderPassSetting = Camera.main.GetComponent<CameraRenderPassSetting>();\n            if (cameraRenderPassSetting!= null)\n                cameraRenderPassSetting.BloomIntensity = oldBloom;\n        }\n    }\n}\n<fim_middle>"}
{"inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Platform;\n\npublic class PVPWaitPlayers3DView : View3DBase\n{\n    HighPolyPlayerAnimationController LeftController;\n    HighPolyPlayerAnimationController RightController;\n\n    HighPolyPlayerAppearanceController leftAppearance;\n    HighPolyPlayerAppearanceController rightAppearance;\n\n\n    string firstTimeLeftJerserCode = \"Empty\";\n\n    public const string MATCH_PLAYER_STAND_ANIMATION_COMPLETE = \"MatchPlayerStandAnimationComplete\";\n\n    private Vector3 LeftPos;\n    private Vector3 RightPos;\n\n    private PvpWaitPlayersData pvpWaitPlayersData;\n    public override async GTask Awake()\n    {\n        await base.Awake();\n\n        ClothDataLoader.AsyncPreLoadMultiClotDataSet(new string[] { \"Idle08\", \"ComeOut08\" });\n\n        pvpWaitPlayersData = this.transform.GetComponent<PvpWaitPlayersData>();\n\n        LeftController = this.transform.Find(\"LeftPlayer\").GetComponent<HighPolyPlayerAnimationController>();\n        RightController = this.transform.Find(\"RightPlayer\").GetComponent<HighPolyPlayerAnimationController>();\n\n        leftAppearance = LeftController.GetComponent<HighPolyPlayerAppearanceController>();\n        rightAppearance = RightController.GetComponent<HighPolyPlayerAppearanceController>();\n\n        LeftPos = LeftController.transform.localPosition;\n        RightPos = RightController.transform.localPosition;\n    }\n\n    bool isStandAnimationCompleted = false;\n    public override void OnDestroy()\n    {\n        TAManager.Instance.SetUI3DMode(false);\n\n        if (Camera.main != null)\n        {\n            if (Camera.main.GetComponent<CameraRenderPassSetting>() != null)\n            {\n                Camera.main.GetComponent<CameraRenderPassSetting>().SetWithTime(1f, 2.9f, 3f, 3f, false, 0, 0, 0, 0.0f);\n            }\n        }\n        ClothDataLoader.UnloadOnePreLoadedClothData(\"ComeOut08\");\n        if (isStandAnimationCompleted)\n        {\n            ClothDataLoader.UnloadOnePreLoadedClothData(\"Idle08\");\n        }\n    }\n\n\n    bool isLastFrameRightStateComeOut08 = false;\n    // Update is called once per frame\n    public override void Update()\n    {\n        if (isLastFrameRightStateComeOut08)\n        {\n            if (RightController.MyAnimator.GetCurrentAnimatorStateInfo(0).IsName(\"Idle08\"))\n            {\n                Platform.EventDispatcher.TriggerEvent(PVPWaitPlayers3DView.MATCH_PLAYER_STAND_ANIMATION_COMPLETE);\n                isStandAnimationCompleted = true;\n            }\n        }\n\n        if (RightController.MyAnimator.GetCurrentAnimatorStateInfo(0).IsName(\"ComeOut08\"))\n        {\n            isLastFrameRightStateComeOut08 = true;\n        }\n        else\n        {\n            isLastFrameRightStateComeOut08 = false;\n        }\n\n        if (_cameraRenderPassSetting != null)\n        {\n            _cameraRenderPassSetting.SetWithTime(1f, 4.25f, 3f, 3f, false, 0, 0, 0, 0.0f);\n        }\n\n    }\n\n    public void Reset()\n    {\n        LeftController.gameObject.SetActive(false);\n        RightController.gameObject.SetActive(false);\n\n    }\n\n    CameraRenderPassSetting _cameraRenderPassSetting;\n\n#if USE_RENDER_ASYNCLOAD\n    public async GTask ShowPlayer(int playerID, string ClothTextureID, int playerHeadModel, bool isKeeper, SkinColorForTexture skinColor, int playerHeight, int playerWeight, int playerShoes, bool isLeftPlayer, Texture2D teamLogoTex = null)\n    {\n        if (Camera.main != null)\n        {\n            if (Camera.main.GetComponent<CameraRenderPassSetting>() != null)\n            {\n                Camera.main.GetComponent<CameraRenderPassSetting>().SetWithTime(1f, 4.25f, 3f, 3f, false, 0, 0, 0, 0.0f);\n                _cameraRenderPassSetting = Camera.main.GetComponent<CameraRenderPassSetting>();\n            }\n        }\n\n        HighPolyPlayerAnimationController animation;\n        HighPolyPlayerAppearanceController appearance;\n        if (isLeftPlayer)\n        {\n            animation = LeftController;\n            appearance = leftAppearance;\n            if (ClothTextureID.Equals(firstTimeLeftJerserCode))\n            {\n                //\u95c2\u4f7d\u6cd5\u9360\u6130\u5f38\u6fe0\u6c2c\u7baf\u7039\u52ec\u6f98\u5a13\u6130\u68ba\u74ba\u3125\u6791\u95ba\u5b2a\ue7f7\u9a9e\u5fdb\u609c\u947a\u30e6\u6ae2\u95c1\u54c4\u5036\u934a\u682b\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u94cf\u7470\u5f44\u6fde\u6751\u540b\u941f\ufe3e\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u572d\u5158\u951f\u85c9\u6d77\u9369\u72bb\u68ba\u74ba\u3125\u6791\u95ba\u5b2a\ue7f7\u9a9e\u5fdb\u67e8\u7023\ue10a\u62f7\u93ba\u694b\u62f7\u93cd\u30e5\u20ac\u682b\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u7470\u5632\u9362\u67e5\u59b5\u5ba5\u590b\u7165\u95bb\u65bf\u61a1\u940f\ue1c0\u67df\u690b\u5ea1\u53b4\u95ba\u4f79\u6347\u5bee\ue104\u59b6\u9361\u694b\u62f7\u8930\u6393\u7165\u95bb\u66de\u5039\u701a\ufffd\n                return;\n            }\n            firstTimeLeftJerserCode = ClothTextureID;\n        }\n        else\n        {\n\n            animation = RightController;\n            appearance = rightAppearance;\n        }\n\n        animation.gameObject.SetActive(true);\n\n        Material BodyMat;\n        if (skinColor == SkinColorForTexture.WHITE)\n        {\n            BodyMat = pvpWaitPlayersData.SkinW;\n        }\n        else if (skinColor == SkinColorForTexture.BLACK)\n        {\n            BodyMat = pvpWaitPlayersData.SkinB;\n        }\n        else if (skinColor == SkinColorForTexture.LATIN)\n        {\n            BodyMat = pvpWaitPlayersData.SkinL;\n        }\n        else\n        {\n            BodyMat = pvpWaitPlayersData.SkinA;\n        }\n\n        //appearance.SetPlayerMaterialWithTemplate(pvpWaitPlayersData.ClothMat, BodyMat, pvpWaitPlayersData.SockMat, pvpWaitPlayersData.ShoeMat, ClothTextureID, playerShoes, playerID, isKeeper, \"GALA\", \"10\", false, teamLogoTex);\n        await HighPolyPlayerAppearance_Hotfix.SetPlayerMaterialWithTemplate(appearance, pvpWaitPlayersData.ClothMat, BodyMat, pvpWaitPlayersData.SockMat, pvpWaitPlayersData.ShoeMat, ClothTextureID, playerShoes, playerID, isKeeper, \"GALA\", \"10\", false, teamLogoTex);\n        appearance.PrecalculateBodyShape(playerHeight, playerWeight);\n        //appearance.SetPlayerHead(playerHeadModel.ToString(), skinColor);\n        await HighPolyPlayerAppearance_Hotfix.SetPlayerHeadAsync(appearance, playerHeadModel.ToString(), skinColor);\n        appearance.SetPlayerBodyShapeOnPelvis(playerHeight, playerWeight, 0);\n\n\n        animation.Init(true, false);\n        animation.SetDOFLayer();\n        animation.PlayAnimation(\"ComeOut08\", 1, 0, true, false);\n    }\n#else\n\n    public async void ShowPlayer(int playerID, string playerName, string playerNumber, string ClothTextureID, int playerHeadModel, bool isKeeper, SkinColorForTexture skinColor, Vector3 skinColorCorrectionValue, int playerHeight, int playerWeight, int playerShoes, bool isLeftPlayer, Texture2D teamLogoTex = null)\n    {\n        DebugEX.Log(\"_____________________PVPWaitPlayers ShowPlayer: \" +  skinColor);\n        ClothTextureID = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(ClothTextureID, playerNumber, playerName);\n        GTask task1 = PlayerHeadDataLoader.AsyncPreLoadOneHeadDataSet(playerHeadModel);\n        GTask task2 = PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(ClothTextureID, false, teamLogoTex);\n        GTask task3 = PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(ClothTextureID);\n\n        await GAsync.WaitUntil(() =>\n        {\n            bool isLoadCompleted = true;\n\n            if (task1 != null)\n            {\n                isLoadCompleted = isLoadCompleted && task1.IsCompleted;\n            }\n            if (task2 != null)\n            {\n                isLoadCompleted = isLoadCompleted && task2.IsCompleted;\n            }\n            if (task3 != null)\n            {\n                isLoadCompleted = isLoadCompleted && task3.IsCompleted;\n            }\n\n            return isLoadCompleted;\n        });\n\n        if (Camera.main != null)\n        {\n            if (Camera.main.GetComponent<CameraRenderPassSetting>() != null)\n            {\n                Camera.main.GetComponent<CameraRenderPassSetting>().SetWithTime(1f, 4.25f, 3f, 3f, false, 0, 0, 0, 0.0f);\n                _cameraRenderPassSetting = Camera.main.GetComponent<CameraRenderPassSetting>();\n            }\n        }\n\n        HighPolyPlayerAnimationController animation;\n        HighPolyPlayerAppearanceController appearance;\n        if (isLeftPlayer)\n        {\n            animation = LeftController;\n            appearance = leftAppearance;\n            if (ClothTextureID.Equals(firstTimeLeftJerserCode))\n            {\n                //\u95c2\u4f7d\u6cd5\u9360\u6130\u5f38\u6fe0\u6c2c\u7baf\u7039\u52ec\u6f98\u5a13\u6130\u68ba\u74ba\u3125\u6791\u95ba\u5b2a\ue7f7\u9a9e\u5fdb\u609c\u947a\u30e6\u6ae2\u95c1\u54c4\u5036\u934a\u682b\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u94cf\u7470\u5f44\u6fde\u6751\u540b\u941f\ufe3e\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u572d\u5158\u951f\u85c9\u6d77\u9369\u72bb\u68ba\u74ba\u3125\u6791\u95ba\u5b2a\ue7f7\u9a9e\u5fdb\u67e8\u7023\ue10a\u62f7\u93ba\u694b\u62f7\u93cd\u30e5\u20ac\u682b\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u7470\u5632\u9362\u67e5\u59b5\u5ba5\u590b\u7165\u95bb\u65bf\u61a1\u940f\ue1c0\u67df\u690b\u5ea1\u53b4\u95ba\u4f79\u6347\u5bee\ue104\u59b6\u9361\u694b\u62f7\u8930\u6393\u7165\u95bb\u66de\u5039\u701a\ufffd\n                return;\n            }\n            firstTimeLeftJerserCode = ClothTextureID;\n        }\n        else\n        {\n\n            animation = RightController;\n            appearance = rightAppearance;\n        }\n\n        animation.gameObject.SetActive(true);\n\n        /* Material BodyMat;\n         if (skinColor == SkinColorForTexture.WHITE)\n         {\n             BodyMat = pvpWaitPlayersData.SkinW;\n         }\n         else if (skinColor == SkinColorForTexture.BLACK)\n         {\n             BodyMat = pvpWaitPlayersData.SkinB;\n         }\n         else if (skinColor == SkinColorForTexture.LATIN)\n         {\n             BodyMat = pvpWaitPlayersData.SkinL;\n         }\n         else\n         {\n             BodyMat = pvpWaitPlayersData.SkinA;\n         }\n         appearance.SetPlayerMaterialWithTemplate(pvpWaitPlayersData.ClothMat, BodyMat, pvpWaitPlayersData.SockMat, pvpWaitPlayersData.ShoeMat, ClothTextureID, playerShoes, playerID, isKeeper,\"GALA\",\"10\",false,teamLogoTex);\n         appearance.PrecalculateBodyShape(playerHeight, playerWeight);\n         appearance.SetPlayerHead(playerHeadModel.ToString(), skinColor);\n         appearance.SetPlayerBodyShapeOnPelvis(playerHeight, playerWeight, 0);*/\n\n        appearance.SetPlayerAppearance(playerHeadModel, playerHeight, playerWeight, skinColor,skinColorCorrectionValue, ClothTextureID, 1, playerID, isKeeper, playerName, playerNumber, false, teamLogoTex, true, true);\n\n\n        animation.Init(true, false);\n        animation.SetDOFLayer();\n        animation.PlayAnimation(\"ComeOut08\", 1, 0, true, false);\n    }\n\n\n#endif\n\n    //\u95bb\u72b1\u7901\u6fa7\u4ecb\u60bf\u9361\u6d99\u5060\u95b8\u6129\u528d\u9360\u5474\u67db\u7023\ue046\u7bb3\u6d5c\ufffd\n    public void SetOffsetPosZ(float offsetz)\n    {\n        Vector3 _leftPos = Vector3.zero;\n        _leftPos.x = LeftPos.x;\n        _leftPos.y = LeftPos.y;\n        _leftPos.z = LeftPos.z - offsetz;\n        LeftController.transform.localPosition = _leftPos;\n\n        Vector3 _rightPos = Vector3.zero;\n        _rightPos.x = RightPos.x;\n        _rightPos.y = RightPos.y;\n        _rightPos.z = RightPos.z + offsetz;\n        RightController.transform.localPosition = _rightPos;\n    }\n\n    public override void OnEnable()\n    {\n        //LeftController.Init(true, false);\n        //RightController.Init(true, false);\n\n        TAManager.Instance.SetUI3DMode(true, 0.14f);\n\n        OpenUpdate();\n    }\n\n    public override void OnDisable()\n    {\n        TAManager.Instance.SetUI3DMode(false);\n        CloseUpdate();\n    }\n}\n//#endif", "cropped_inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Platform;\n\npublic class PVPWaitPlayers3DView : View3DBase\n{\n    HighPolyPlayerAnimationController LeftController;\n    HighPolyPlayerAnimationController RightController;\n\n    HighPolyPlayerAppearanceController leftAppearance;\n    HighPolyPlayerAppearanceController rightAppearance;\n\n\n    string firstTimeLeftJerserCode = \"Empty\";\n\n    public const string MATCH_PLAYER_STAND_ANIMATION_COMPLETE = \"MatchPlayerStandAnimationComplete\";\n\n    private Vector3 LeftPos;\n    private Vector3 RightPos;\n\n    private PvpWaitPlayersData pvpWaitPlayersData;\n    public override async GTask Awake()\n    {\n        await base.Awake();\n\n        ClothDataLoader.AsyncPreLoadMultiClotDataSet(new string[] { \"Idle08\", \"ComeOut08\" });\n\n        pvpWaitPlayersData = this.transform.GetComponent<PvpWaitPlayersData>();\n\n        LeftController = this.transform.Find(\"LeftPlayer\").GetComponent<HighPolyPlayerAnimationController>();\n        RightController = this.transform.Find(\"RightPlayer\").GetComponent<HighPolyPlayerAnimationController>();\n\n        leftAppearance = LeftController.GetComponent<HighPolyPlayerAppearanceController>();\n        rightAppearance = RightController.GetComponent<HighPolyPlayerAppearanceController>();\n\n        LeftPos = LeftController.transform.localPosition;\n        RightPos = RightController.transform.localPosition;\n    }\n\n    bool isStandAnimationCompleted = false;\n    public override void OnDestroy()\n    {\n        TAManager.Instance.SetUI3DMode(false);\n\n        if (Camera.main!= null)\n        {\n            if (Camera.main.GetComponent<CameraRenderPassSetting>()!= null)\n            {\n                Camera.main.GetComponent<CameraRenderPassSetting>().SetWithTime(1f, 2.9f, 3f, 3f, false, 0, 0, 0, 0.0f);\n            }\n        }\n        ClothDataLoader.UnloadOnePreLoadedClothData(\"ComeOut08\");\n        if (isStandAnimationCompleted)\n        {\n            ClothDataLoader.UnloadOnePreLoadedClothData(\"Idle08\");\n        }\n    }\n\n\n    bool isLastFrameRightStateComeOut08 = false;\n    // Update is called once per frame\n    public override void Update()\n    {\n        if (isLastFrameRightStateComeOut08)\n        {\n            if (RightController.MyAnimator.GetCurrentAnimatorStateInfo(0).IsName(\"Idle08\"))\n            {\n                Platform.EventDispatcher.TriggerEvent(PVPWaitPlayers3DView.MATCH_PLAYER_STAND_ANIMATION_COMPLETE);\n                isStandAnimationCompleted = true;\n            }\n        }\n\n        if (RightController.MyAnimator.GetCurrentAnimatorStateInfo(0).IsName(\"ComeOut08\"))\n        {\n            isLastFrameRightStateComeOut08 = true;\n        }\n        else\n        {\n            isLastFrameRightStateComeOut08 = false;\n        }\n\n        if (_cameraRenderPassSetting!= null)\n        {\n            _cameraRenderPassSetting.SetWithTime(1f, 4.25f, 3f, 3f, false, 0, 0, 0, 0.0f);\n        }\n\n    }\n\n    public void Reset()\n    {\n        LeftController.gameObject.SetActive(false);\n        RightController.gameObject.SetActive(false);\n\n    }\n\n    CameraRenderPassSetting _cameraRenderPassSetting;\n\n#if USE_RENDER_ASYNCLOAD\n    public async GTask ShowPlayer(int playerID, string ClothTextureID, int playerHeadModel, bool isKeeper, SkinColorForTexture skinColor, int playerHeight, int playerWeight, int playerShoes, bool isLeftPlayer, Texture2D teamLogoTex = null)\n    {\n        if (Camera.main!= null)\n        {\n            if (Camera.main.GetComponent<CameraRenderPassSetting>()!= null)\n            {\n                Camera.main.GetComponent<CameraRenderPassSetting>().SetWithTime(1f, 4.25f, 3f, 3f, false, 0, 0, 0, 0.0f);\n                _cameraRenderPassSetting = Camera.main.GetComponent<CameraRenderPassSetting>();\n            }\n        }\n\n        HighPolyPlayerAnimationController animation;\n        HighPolyPlayerAppearanceController appearance;\n        if (isLeftPlayer)\n        {\n            animation = LeftController;\n            appearance = leftAppearance;\n            if (ClothTextureID.Equals(firstTimeLeftJerserCode))\n            {\n                //\u95c2\u4f7d\u6cd5\u9360\u6130\u5f38\u6fe0\u6c2c\u7baf\u7039\u52ec\u6f98\u5a13\u6130\u68ba\u74ba\u3125\u6791\u95ba\u5b2a\ue7f7\u9a9e\u5fdb\u609c\u947a\u30e6\u6ae2\u95c1\u54c4\u5036\u934a\u682b\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u94cf\u7470\u5f44\u6fde\u6751\u540b\u941f\ufe3e\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u937e\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u572d\u5158\u951f\u85c9\u6d77\u9369\u72bb\u68ba\u74ba\u3125\u6791\u95ba\u5b2a\ue7f7\u9a9e\u5fdb\u67e8\u7023\ue10a\u62f7\u93ba\u694b\u62f7\u93cd\u30e5\u20ac\u682b\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u7470\u5632\u9362\u67e5\u59b5\u5ba5\u590b\u7165\u95bb\u65bf\u61a1\u940f\ue1c0\u67df\u690b\u5ea1\u53b4\u95ba\u4f79\u6347\u5bee\ue104\u59b6\u9361\u694b\u62f7\u8930\u6393\u7165\u95bb\u66de\u5039\u701a\ufffd\n                return;\n            }\n            firstTimeLeftJerserCode = ClothTextureID;\n        }\n        else\n        {\n\n            animation = RightController;\n            appearance = rightAppearance;\n        }\n\n        animation.gameObject.SetActive(true);\n\n        Material BodyMat;\n        if (skinColor == SkinColorForTexture.WHITE)\n        {\n            BodyMat = pvpWaitPlayersData.SkinW;\n        }\n        else if (skinColor == SkinColorForTexture.BLACK)\n        {\n            BodyMat = pvpWaitPlayersData.SkinB;\n        }\n        else if (skinColor == SkinColorForTexture.LATIN)\n        {\n            BodyMat = pvpWaitPlayersData.SkinL;\n        }\n        else\n        {\n            BodyMat = pvpWaitPlayersData.SkinA;\n        }\n\n        //appearance.SetPlayerMaterialWithTemplate(pvpWaitPlayersData.ClothMat, BodyMat, pvpWaitPlayersData.SockMat, pvpWaitPlayersData.ShoeMat, ClothTextureID, playerShoes, playerID, isKeeper, \"GALA\", \"10\", false, teamLogoTex);\n        await HighPolyPlayerAppearance_Hotfix.SetPlayerMaterialWithTemplate(appearance, pvpWaitPlayersData.ClothMat, BodyMat, pvpWaitPlayersData.SockMat, pvpWaitPlayersData.ShoeMat, ClothTextureID, playerShoes, playerID, isKeeper, \"GALA\", \"10\", false, teamLogoTex);\n        appearance.PrecalculateBodyShape(playerHeight, playerWeight);\n        //appearance.SetPlayerHead(playerHeadModel.ToString(), skinColor);\n        await HighPolyPlayerAppearance_Hotfix.SetPlayerHeadAsync(appearance, playerHeadModel.ToString(), skinColor);\n        appearance.SetPlayerBodyShapeOnPelvis(playerHeight, playerWeight, 0);\n\n\n        animation.Init(true, false);\n        animation.SetDOFLayer();\n        animation.PlayAnimation(\"ComeOut08\", 1, 0, true, false);\n    }\n#else\n\n    public async void ShowPlayer(int playerID, string playerName, string playerNumber, string ClothTextureID, int playerHeadModel, bool isKeeper, SkinColorForTexture skinColor, Vector3 skinColorCorrectionValue, int playerHeight, int playerWeight, int playerShoes, bool isLeftPlayer, Texture2D teamLogoTex = null)\n    {\n        DebugEX.Log(\"_____________________PVPWaitPlayers ShowPlayer: \" +  skinColor);\n        ClothTextureID = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(ClothTextureID, playerNumber, playerName);\n        GTask task1 = PlayerHeadDataLoader.AsyncPreLoadOneHeadDataSet(playerHeadModel);\n        GTask task2 = PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(ClothTextureID, false, teamLogoTex);\n        GTask task3 = PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(ClothTextureID);\n\n        await GAsync.WaitUntil(() =>\n        {\n            bool isLoadCompleted = true;\n\n            if (task1!= null)\n            {\n                isLoadCompleted = isLoadCompleted && task1.IsCompleted;\n            }\n            if (task2!= null)\n            {\n                isLoadCompleted = isLoadCompleted && task2.IsCompleted;\n            }\n            if (task3!= null)\n            {\n                isLoadCompleted = isLoadCompleted && task3.IsCompleted;\n            }\n\n            return isLoadCompleted;\n        });\n\n        if (Camera.main!= null)\n        {\n            if (Camera.main.GetComponent<CameraRenderPassSetting>()!= null)\n            {\n                Camera.main.GetComponent<CameraRenderPassSetting>().SetWithTime(1f, 4.25f, 3f, 3f, false, 0, 0, 0, 0.0f);\n                _cameraRenderPassSetting = Camera.main.GetComponent<CameraRenderPassSetting>();\n            }\n        }\n\n        HighPolyPlayerAnimationController animation;\n        HighPolyPlayerAppearanceController appearance;\n        if (isLeftPlayer)\n        {\n            animation = LeftController;\n            appearance = leftAppearance;\n            if (ClothTextureID.Equals(firstTimeLeftJerserCode))\n            {\n                //\u95c2\u4f7d\u6cd5\u9360\u6130\u5f38\u6fe0\u6c2c\u7baf\u7039\u52ec\u6f98\u5a13\u6130\u68ba\u74ba\u3125\u6791\u95ba\u5b2a\ue7f7\u9a9e\u5fdb\u609c\u947a\u30e6\u6ae2\u95c1\u54c4\u5036\u934a\u682b\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u94cf\u7470\u5f44\u6fde\u6751\u540b\u941f\ufe3e\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u572d\u5158\u951f\u85c9\u6d77\u9369\u72bb\u68ba\u74ba\u3125\u6791\u95ba\u5b2a\ue7f7\u9a9e\u5fdb\u67e8\u7023\ue10a\u62f7\u93ba\u694b\u62f7\u93cd\u30e5\u20ac\u682b\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u7470\u5632\u9362\u67e5\u59b5\u5ba5\u590b\u7165\u95bb\u65bf\u61a1\u940f\ue1c0\u67df\u690b\u5ea1\u53b4\u95ba\u4f79\u6347\u5bee\ue104\u59b6\u9361\u694b\u62f7\u8930\u6393\u7165\u95bb\u66de\u5039\u701a\ufffd\n                return;\n            }\n            firstTimeLeftJerserCode = ClothTextureID;\n        }\n        else\n        {\n\n            animation = RightController;\n            appearance = rightAppearance;\n        }\n\n        animation.gameObject.SetActive(true);\n\n        /* Material BodyMat;\n         if (skinColor == SkinColorForTexture.WHITE)\n         {\n             BodyMat = pvpWaitPlayersData.SkinW;\n         }\n         else if (skinColor == SkinColorForTexture.BLACK)\n         {\n             BodyMat = pvpWaitPlayersData.SkinB;\n         }\n         else if (skinColor == SkinColorForTexture.LATIN)\n         {\n             BodyMat = pvpWaitPlayersData.SkinL;\n         }\n         else\n         {\n             BodyMat = pvpWaitPlayersData.SkinA;\n         }\n         appearance.SetPlayerMaterialWithTemplate(pvpWaitPlayersData.ClothMat, BodyMat, pvpWaitPlayersData.SockMat, pvpWaitPlayersData.ShoeMat, ClothTextureID, playerShoes, playerID, isKeeper,\"GALA\",\"10\",false,teamLogoTex);\n         appearance.PrecalculateBodyShape(playerHeight, playerWeight);\n         appearance.SetPlayerHead(playerHeadModel.ToString(), skinColor);\n         appearance.SetPlayerBodyShapeOnPelvis(playerHeight, playerWeight, 0);*/\n\n        appearance.SetPlayerAppearance(playerHeadModel, playerHeight, playerWeight, skinColor,skinColorCorrectionValue, ClothTextureID, 1, playerID, isKeeper, playerName, playerNumber, false, teamLogoTex, true, true);\n\n\n        animation.Init(true, false);\n        animation.SetDOFLayer();\n        animation.PlayAnimation(\"ComeOut08\", 1, 0, true, false);\n    }\n\n\n#endif\n\n    //\u95bb\u72b1\u7901\u6fa7\u4ecb\u60bf\u9361\u6d99\u5060\u95b8\u6129\u528d\u9360\u5474\u67db\u7023\ue046\u7bb3\u6d5c\ufffd\n    public void SetOffsetPosZ(float offsetz)\n    {\n        Vector3 _leftPos = Vector3.zero;\n        _leftPos.x = LeftPos.x;\n        _leftPos.y = LeftPos.y;\n        _leftPos.z = LeftPos.z - offsetz;\n        LeftController.transform.localPosition = _leftPos;\n\n        Vector3 _rightPos = Vector3.zero;\n        _rightPos.x = RightPos.x;\n        _rightPos.y = RightPos.y;\n        _rightPos.z = RightPos.z + offsetz;\n        RightController.transform.localPosition = _rightPos;\n    }\n\n    public override void OnEnable()\n    {\n        //LeftController.Init(true, false);\n        //RightController.Init(true, false);\n\n        TAManager.Instance.SetUI3DMode(true, 0.14f);\n\n        OpenUpdate();\n    }\n\n    public override void OnDisable()\n    {\n        TAManager.Instance.SetUI3DMode(false);\n        CloseUpdate();\n    }\n}\n//#endif", "starcoder_inputs": "<fim_prefix>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Platform;\n\npublic class PVPWaitPlayers3DView : View3DBase\n{\n    HighPolyPlayerAnimationController LeftController;\n    HighPolyPlayerAnimationController RightController;\n\n    HighPolyPlayerAppearanceController leftAppearance;\n    HighPolyPlayerAppearanceController rightAppearance;\n\n\n    string firstTimeLeftJerserCode = \"Empty\";\n\n    public const string MATCH_PLAYER_STAND_ANIMATION_COMPLETE = \"MatchPlayerStandAnimationComplete\";\n\n    private Vector3 LeftPos;\n    private Vector3 RightPos;\n\n    private PvpWaitPlayersData pvpWaitPlayersData;\n    public override async GTask Awake()\n    {\n        await base.Awake();\n\n        ClothDataLoader.AsyncPreLoadMultiClotDataSet(new string[] { \"Idle08\", \"ComeOut08\" });\n\n        pvpWaitPlayersData = this.transform.GetComponent<PvpWaitPlayersData>();\n\n        LeftController = this.transform.Find(\"LeftPlayer\").GetComponent<HighPolyPlayerAnimationController>();\n        RightController = this.transform.Find(\"RightPlayer\").GetComponent<HighPolyPlayerAnimationController>();\n\n        leftAppearance = LeftController.GetComponent<HighPolyPlayerAppearanceController>();\n        rightAppearance = RightController.GetComponent<HighPolyPlayerAppearanceController>();\n\n        LeftPos = LeftController.transform.localPosition;\n        RightPos = RightController.transform.localPosition;\n    }\n\n    bool isStandAnimationCompleted = false;\n    public override void OnDestroy()\n    {\n        TAManager.Instance.SetUI3DMode(false);\n\n        if (Camera.main!= null)\n        {\n            if (Camera.main.GetComponent<CameraRenderPassSetting>()!= null)\n            {\n                Camera.main.GetComponent<CameraRenderPassSetting>().SetWithTime(1f, 2.9f, 3f, 3f, false, 0, 0, 0, 0.0f);\n            }\n        }\n        ClothDataLoader.UnloadOnePreLoadedClothData(\"ComeOut08\");\n        if (isStandAnimationCompleted)\n        {\n            ClothDataLoader.UnloadOnePreLoadedClothData(\"Idle08\");\n        }\n    }\n\n\n    bool isLastFrameRightStateComeOut08 = false;\n    // Update is called once per frame\n    public override void Update()\n    {\n        if (isLastFrameRightStateComeOut08)\n        {\n            if (RightController.MyAnimator.GetCurrentAnimatorStateInfo(0).IsName(\"Idle08\"))\n            {\n                Platform.EventDispatcher.TriggerEvent(PVPWaitPlayers3DView.MATCH_PLAYER_STAND_ANIMATION_COMPLETE);\n                isStandAnimationCompleted = true;\n            }\n        }\n\n        if (RightController.MyAnimator.GetCurrentAnimatorStateInfo(0).IsName(\"ComeOut08\"))\n        {\n            isLastFrameRightStateComeOut08 = true;\n        }\n        else\n        {\n            isLastFrameRightStateComeOut08 = false;\n        }\n\n        if (_cameraRenderPassSetting!= null)\n        {\n            _cameraRenderPassSetting.SetWithTime(1f, 4.25f, 3f, 3f, false, 0, 0, 0, 0.0f);\n        }\n\n    }\n\n    public void Reset()\n    {\n        LeftController.gameObject.SetActive(false);\n        RightController.gameObject.SetActive(false);\n\n    }\n\n    CameraRenderPassSetting _cameraRenderPassSetting;\n\n#if USE_RENDER_ASYNCLOAD\n    public async GTask ShowPlayer(int playerID, string ClothTextureID, int playerHeadModel, bool isKeeper, SkinColorForTexture skinColor, int playerHeight, int playerWeight, int playerShoes, bool isLeftPlayer, Texture2D teamLogoTex = null)\n    {\n        if (Camera.main!= null)\n        {\n            if (Camera.main.GetComponent<CameraRenderPassSetting>()!= null)\n            {\n                Camera.main.GetComponent<CameraRenderPassSetting>().SetWithTime(1f, 4.25f, 3f, 3f, false, 0, 0, 0, 0.0f);\n                _cameraRenderPassSetting = Camera.main.GetComponent<CameraRenderPassSetting>();\n            }\n        }\n\n        HighPolyPlayerAnimationController animation;\n        HighPolyPlayerAppearanceController appearance;\n        if (isLeftPlayer)\n        {\n            animation = LeftController;\n            appearance = leftAppearance;\n            if (ClothTextureID.Equals(firstTimeLeftJerserCode))\n            {\n                //\u95c2\u4f7d\u6cd5\u9360\u6130\u5f38\u6fe0\u6c2c\u7baf\u7039\u52ec\u6f98\u5a13\u6130\u68ba\u74ba\u3125\u6791\u95ba\u5b2a\ue7f7\u9a9e\u5fdb\u609c\u947a\u30e6\u6ae2\u95c1\u54c4\u5036\u934a\u682b\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u94cf\u7470\u5f44\u6fde\u6751\u540b\u941f\ufe3e\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\ufffd<fim_suffix>\ufffd\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u572d\u5158\u951f\u85c9\u6d77\u9369\u72bb\u68ba\u74ba\u3125\u6791\u95ba\u5b2a\ue7f7\u9a9e\u5fdb\u67e8\u7023\ue10a\u62f7\u93ba\u694b\u62f7\u93cd\u30e5\u20ac\u682b\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u7470\u5632\u9362\u67e5\u59b5\u5ba5\u590b\u7165\u95bb\u65bf\u61a1\u940f\ue1c0\u67df\u690b\u5ea1\u53b4\u95ba\u4f79\u6347\u5bee\ue104\u59b6\u9361\u694b\u62f7\u8930\u6393\u7165\u95bb\u66de\u5039\u701a\ufffd\n                return;\n            }\n            firstTimeLeftJerserCode = ClothTextureID;\n        }\n        else\n        {\n\n            animation = RightController;\n            appearance = rightAppearance;\n        }\n\n        animation.gameObject.SetActive(true);\n\n        Material BodyMat;\n        if (skinColor == SkinColorForTexture.WHITE)\n        {\n            BodyMat = pvpWaitPlayersData.SkinW;\n        }\n        else if (skinColor == SkinColorForTexture.BLACK)\n        {\n            BodyMat = pvpWaitPlayersData.SkinB;\n        }\n        else if (skinColor == SkinColorForTexture.LATIN)\n        {\n            BodyMat = pvpWaitPlayersData.SkinL;\n        }\n        else\n        {\n            BodyMat = pvpWaitPlayersData.SkinA;\n        }\n\n        //appearance.SetPlayerMaterialWithTemplate(pvpWaitPlayersData.ClothMat, BodyMat, pvpWaitPlayersData.SockMat, pvpWaitPlayersData.ShoeMat, ClothTextureID, playerShoes, playerID, isKeeper, \"GALA\", \"10\", false, teamLogoTex);\n        await HighPolyPlayerAppearance_Hotfix.SetPlayerMaterialWithTemplate(appearance, pvpWaitPlayersData.ClothMat, BodyMat, pvpWaitPlayersData.SockMat, pvpWaitPlayersData.ShoeMat, ClothTextureID, playerShoes, playerID, isKeeper, \"GALA\", \"10\", false, teamLogoTex);\n        appearance.PrecalculateBodyShape(playerHeight, playerWeight);\n        //appearance.SetPlayerHead(playerHeadModel.ToString(), skinColor);\n        await HighPolyPlayerAppearance_Hotfix.SetPlayerHeadAsync(appearance, playerHeadModel.ToString(), skinColor);\n        appearance.SetPlayerBodyShapeOnPelvis(playerHeight, playerWeight, 0);\n\n\n        animation.Init(true, false);\n        animation.SetDOFLayer();\n        animation.PlayAnimation(\"ComeOut08\", 1, 0, true, false);\n    }\n#else\n\n    public async void ShowPlayer(int playerID, string playerName, string playerNumber, string ClothTextureID, int playerHeadModel, bool isKeeper, SkinColorForTexture skinColor, Vector3 skinColorCorrectionValue, int playerHeight, int playerWeight, int playerShoes, bool isLeftPlayer, Texture2D teamLogoTex = null)\n    {\n        DebugEX.Log(\"_____________________PVPWaitPlayers ShowPlayer: \" +  skinColor);\n        ClothTextureID = PlayerJerseyGenerator.ApplyNameAndNumberToJerseyId(ClothTextureID, playerNumber, playerName);\n        GTask task1 = PlayerHeadDataLoader.AsyncPreLoadOneHeadDataSet(playerHeadModel);\n        GTask task2 = PlayerJerseyDataLoader.AsyncPreLoadOneJerseyDataSet(ClothTextureID, false, teamLogoTex);\n        GTask task3 = PlayerSockDataLoader.AsyncPreLoadOneSockDataSet(ClothTextureID);\n\n        await GAsync.WaitUntil(() =>\n        {\n            bool isLoadCompleted = true;\n\n            if (task1!= null)\n            {\n                isLoadCompleted = isLoadCompleted && task1.IsCompleted;\n            }\n            if (task2!= null)\n            {\n                isLoadCompleted = isLoadCompleted && task2.IsCompleted;\n            }\n            if (task3!= null)\n            {\n                isLoadCompleted = isLoadCompleted && task3.IsCompleted;\n            }\n\n            return isLoadCompleted;\n        });\n\n        if (Camera.main!= null)\n        {\n            if (Camera.main.GetComponent<CameraRenderPassSetting>()!= null)\n            {\n                Camera.main.GetComponent<CameraRenderPassSetting>().SetWithTime(1f, 4.25f, 3f, 3f, false, 0, 0, 0, 0.0f);\n                _cameraRenderPassSetting = Camera.main.GetComponent<CameraRenderPassSetting>();\n            }\n        }\n\n        HighPolyPlayerAnimationController animation;\n        HighPolyPlayerAppearanceController appearance;\n        if (isLeftPlayer)\n        {\n            animation = LeftController;\n            appearance = leftAppearance;\n            if (ClothTextureID.Equals(firstTimeLeftJerserCode))\n            {\n                //\u95c2\u4f7d\u6cd5\u9360\u6130\u5f38\u6fe0\u6c2c\u7baf\u7039\u52ec\u6f98\u5a13\u6130\u68ba\u74ba\u3125\u6791\u95ba\u5b2a\ue7f7\u9a9e\u5fdb\u609c\u947a\u30e6\u6ae2\u95c1\u54c4\u5036\u934a\u682b\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u94cf\u7470\u5f44\u6fde\u6751\u540b\u941f\ufe3e\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u572d\u5158\u951f\u85c9\u6d77\u9369\u72bb\u68ba\u74ba\u3125\u6791\u95ba\u5b2a\ue7f7\u9a9e\u5fdb\u67e8\u7023\ue10a\u62f7\u93ba\u694b\u62f7\u93cd\u30e5\u20ac\u682b\u20ac\u6c2c\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u5f52\ue5d3\u934f\u6a40\u5f2b\u93be\u8bf2\u68d8\u95b5\u581d\u68d7\u951f\u85c9\u7d8a\u93cc\u3129\u60a2\u935b\u5a44\u4f04\u95c1\u7470\u5632\u9362\u67e5\u59b5\u5ba5\u590b\u7165\u95bb\u65bf\u61a1\u940f\ue1c0\u67df\u690b\u5ea1\u53b4\u95ba\u4f79\u6347\u5bee\ue104\u59b6\u9361\u694b\u62f7\u8930\u6393\u7165\u95bb\u66de\u5039\u701a\ufffd\n                return;\n            }\n            firstTimeLeftJerserCode = ClothTextureID;\n        }\n        else\n        {\n\n            animation = RightController;\n            appearance = rightAppearance;\n        }\n\n        animation.gameObject.SetActive(true);\n\n        /* Material BodyMat;\n         if (skinColor == SkinColorForTexture.WHITE)\n         {\n             BodyMat = pvpWaitPlayersData.SkinW;\n         }\n         else if (skinColor == SkinColorForTexture.BLACK)\n         {\n             BodyMat = pvpWaitPlayersData.SkinB;\n         }\n         else if (skinColor == SkinColorForTexture.LATIN)\n         {\n             BodyMat = pvpWaitPlayersData.SkinL;\n         }\n         else\n         {\n             BodyMat = pvpWaitPlayersData.SkinA;\n         }\n         appearance.SetPlayerMaterialWithTemplate(pvpWaitPlayersData.ClothMat, BodyMat, pvpWaitPlayersData.SockMat, pvpWaitPlayersData.ShoeMat, ClothTextureID, playerShoes, playerID, isKeeper,\"GALA\",\"10\",false,teamLogoTex);\n         appearance.PrecalculateBodyShape(playerHeight, playerWeight);\n         appearance.SetPlayerHead(playerHeadModel.ToString(), skinColor);\n         appearance.SetPlayerBodyShapeOnPelvis(playerHeight, playerWeight, 0);*/\n\n        appearance.SetPlayerAppearance(playerHeadModel, playerHeight, playerWeight, skinColor,skinColorCorrectionValue, ClothTextureID, 1, playerID, isKeeper, playerName, playerNumber, false, teamLogoTex, true, true);\n\n\n        animation.Init(true, false);\n        animation.SetDOFLayer();\n        animation.PlayAnimation(\"ComeOut08\", 1, 0, true, false);\n    }\n\n\n#endif\n\n    //\u95bb\u72b1\u7901\u6fa7\u4ecb\u60bf\u9361\u6d99\u5060\u95b8\u6129\u528d\u9360\u5474\u67db\u7023\ue046\u7bb3\u6d5c\ufffd\n    public void SetOffsetPosZ(float offsetz)\n    {\n        Vector3 _leftPos = Vector3.zero;\n        _leftPos.x = LeftPos.x;\n        _leftPos.y = LeftPos.y;\n        _leftPos.z = LeftPos.z - offsetz;\n        LeftController.transform.localPosition = _leftPos;\n\n        Vector3 _rightPos = Vector3.zero;\n        _rightPos.x = RightPos.x;\n        _rightPos.y = RightPos.y;\n        _rightPos.z = RightPos.z + offsetz;\n        RightController.transform.localPosition = _rightPos;\n    }\n\n    public override void OnEnable()\n    {\n        //LeftController.Init(true, false);\n        //RightController.Init(true, false);\n\n        TAManager.Instance.SetUI3DMode(true, 0.14f);\n\n        OpenUpdate();\n    }\n\n    public override void OnDisable()\n    {\n        TAManager.Instance.SetUI3DMode(false);\n        CloseUpdate();\n    }\n}\n//#endif<fim_middle>"}
{"inputs": "using Framework.GalaSports.Service;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic enum ARPlayerAnimState\n{\n    None,\n    ShoulderHook,//\u52fe\u80a9\n    FingerSky,//\u624b\u6307\u5929\n    Juggle,//\u98a0\u7403\n    ShakeFist,//\u6325\u62f3\n    ThumbUp,//\u6bd4\u5927\u62c7\u6307\n    Akimbo,//\u53c9\u8170\n    DropHand,//\u53cc\u624b\u4e0b\u5782\n    CrossChest,//\u62b1\u80f8\n    BackHand,//\u624b\u80cc\u540e\n}\n\npublic class ARShare3DView : View3DBase\n{\n    GameObject _player;\n    Animator _playerAnimator;\n    RuntimeAnimatorController _runtimeAnimatorController;\n    HighPolyPlayerAppearanceController _playerAppearance;\n    HighPolyPlayerAnimationController _playerAnimation;\n    Animator _ballAnimator;\n\n    RenderTexture _jerseyTexture;\n    RenderTexture _socksTexture;\n\n    Material _TeamJerseyMat;\n    Material _TeamShoesMat;\n    Material _TeamSockMat;\n    Material _SkinMat;\n    Material _leftEyeMat;\n    Material _rightEyeMat;\n    Material _hairMat;\n    Material _headMat;\n    Material _footballMat;\n    Texture2D _ShoeTex;\n    Texture _GlowTexture;\n\n    int _headId;\n    SkinnedMeshRenderer _headMesh;\n    MeshRenderer _leftEyeMesh;\n    MeshRenderer _rightEyeMesh;\n    MeshRenderer _hairMesh;\n    MeshRenderer _clothMesh;\n    MeshRenderer _skinMesh;\n    SkinnedMeshRenderer _sockMesh;\n    MeshRenderer _footballMesh;\n\n   \n    ARPlayerAnimState _beforeAnimState;\n    ARPlayerAnimState _curAnimState;\n    bool _isInit = true;\n    bool _isChangePos = false;\n    GameObject _TipsObj;\n    bool _isOneAnimEnd=false;\n    bool _isChangeAnim=false;\n    int _hash = -1;\n    int _currentHash = -1;\n    List<string> _dynamicClothName;\n    ARPlayerData aRPlayerData;\n    public override async GTask Awake()\n    {\n        _player = this.transform.Find(\"ARPlayer\").gameObject;\n        aRPlayerData = this.gameObject.GetComponent<ARPlayerData>();\n        _GlowTexture = aRPlayerData._GlowTex;\n        _runtimeAnimatorController = (await ResourceMgr.Instance.LoadAssetAsync<RuntimeAnimatorController>(\"3D/Controller/ARShare/ARShareController\")).result;\n        _TipsObj = aRPlayerData._Tips;\n        _TipsObj.SetActive(false);\n        _dynamicClothName = new List<string>();\n      /*  HotFixHighPlayerInfo highPlayerInfo = new HotFixHighPlayerInfo();\n        highPlayerInfo.playerId = 1;\n        highPlayerInfo.headId = 1;\n        highPlayerInfo.playerName = \"MESSI\";\n        highPlayerInfo.playerNumber = \"30\";\n        highPlayerInfo.playerHeight = 180;\n        highPlayerInfo.playerWeight = 150;\n        highPlayerInfo.playerSkinColor = SkinColorForTexture.WHITE;\n        highPlayerInfo.jerseyCode = TAGlobalData.Instance.JereyId;\n        highPlayerInfo.isGK = false;\n        ShowARPlayer(highPlayerInfo);*/\n       \n    }\n    //\u663e\u793a\u7403\u5458\u63a5\u53e3\n    public async GTask ShowARPlayer(HotFixHighPlayerInfo highPlayerInfo)\n    {\n        _headId = highPlayerInfo.headId;\n        await PlayerHeadDataLoader.AsyncPreLoadOneHeadDataSet(_headId);\n        await InitPlayer(highPlayerInfo);\n        _playerAnimation.Show();\n        _playerAnimator = _player.GetComponent<Animator>();\n        _playerAnimator.runtimeAnimatorController = _runtimeAnimatorController;\n         HighPolyPlayerAnimation_Hotfix.PlayAnimation(_playerAnimation, \"Idle05\",0);\n         _beforeAnimState = ARPlayerAnimState.DropHand;\n        _curAnimState = ARPlayerAnimState.DropHand;\n        SwitchARPlayerAnimState(_curAnimState);\n        // _playerAnimation.StartLookAtCamera(Camera.main.transform, _playerAnimation.MyAnimator.GetCurrentAnimatorStateInfo(0).length - 1.5f);\n        OpenUpdate();\n    }\n   \n    async GTask LoadMaterial(HotFixHighPlayerInfo highPlayerInfo)\n    {\n\n        if (highPlayerInfo.playerSkinColor == SkinColorForTexture.BLACK)\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_B\")).result;\n        }\n        else if (highPlayerInfo.playerSkinColor == SkinColorForTexture.WHITE)\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_W\")).result;\n        }\n        else if (highPlayerInfo.playerSkinColor == SkinColorForTexture.LATIN)\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_L\")).result;\n        }\n        else if (highPlayerInfo.playerSkinColor == SkinColorForTexture.ASIAN)\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_A\")).result;\n        }\n        else\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_L\")).result;\n        }\n        _TeamJerseyMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Cloth\")).result;\n        _TeamShoesMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Shoe\")).result;\n        _TeamSockMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Sock\")).result;\n        _footballMat= (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/ARShareFootball\")).result;\n    }\n    async GTask InitPlayer(HotFixHighPlayerInfo highPlayerInfo)\n    {\n\n        //\u8bbe\u7f6e\u6750\u8d28\u7403\u53c2\u6570\n        await LoadMaterial(highPlayerInfo);\n        //\u7403\u8863\n        PlayerJerseyGenerator.Instance.Initialize();\n        await PlayerJerseyGenerator.Instance.SetJerseyInfoAsync(highPlayerInfo.jerseyCode, false);\n        PlayerJerseyGenerator.Instance.PlayerName = highPlayerInfo.playerName;\n        PlayerJerseyGenerator.Instance.PlayerNumber = highPlayerInfo.playerNumber;\n        PlayerJerseyGenerator.Instance.UpdateJerseyProperties();\n        _jerseyTexture = PlayerJerseyGenerator.Instance.GetDIYTex();\n        _socksTexture = PlayerJerseyGenerator.Instance.GetSockTex();\n        PlayerJerseyGenerator.Instance.SetCameraActive(false);\n        if (_TeamJerseyMat)\n            _TeamJerseyMat.SetTexture(\"_BaseMap\", _jerseyTexture);\n        if (_TeamSockMat)\n            _TeamSockMat.SetTexture(\"_BaseMap\", _socksTexture);\n\n        if (_TeamJerseyMat)\n            _TeamJerseyMat.SetTexture(\"_BaseMap\", _jerseyTexture);\n        if (_TeamSockMat)\n            _TeamSockMat.SetTexture(\"_BaseMap\", _socksTexture);\n        //\n        string path = \"3D/PlayerJersey/PlayerShoes/\";\n        _ShoeTex = (await ResourceMgr.Instance.LoadAssetAsync<Texture2D>(path + \"Shoes_\" + highPlayerInfo.shoesId.ToString() + \"_tex\")).result;\n        if (_ShoeTex)\n            _TeamShoesMat.SetTexture(\"_BaseMap\", _ShoeTex);\n\n        Vector3 skinColorCorrectionValue = highPlayerInfo.skinColorCorrectionValue;\n        _SkinMat.SetColor(\"_BaseColor\", new Color(skinColorCorrectionValue.x, skinColorCorrectionValue.y, skinColorCorrectionValue.z, 1));\n\n        //\u914d\u7f6e\u7403\u5458\u6570\u636e\n        string fileNameSuffix = highPlayerInfo.headId.ToString();\n        _playerAppearance = _player.GetComponent<HighPolyPlayerAppearanceController>();\n        _playerAppearance.PrecalculateBodyShape(highPlayerInfo.playerHeight, highPlayerInfo.playerWeight);\n        _playerAppearance.SetPlayerHead(highPlayerInfo.playerId, fileNameSuffix, highPlayerInfo.playerSkinColor);\n        _playerAppearance.SetPlayerMaterials(_TeamJerseyMat, _SkinMat, _TeamSockMat, _TeamShoesMat);\n        _playerAppearance.SetPlayerBodyShape(highPlayerInfo.playerHeight, highPlayerInfo.playerWeight);\n        _playerAppearance.SetShadowMask(false);\n\n        _playerAnimation = _player.GetComponent<HighPolyPlayerAnimationController>();\n#if UNITY_IOS && !UNITY_EDITOR\n        _playerAnimation.Init(true, false);\n#else\n        _playerAnimation.Show();\n        _playerAnimation.Init(true, false);\n#endif\n\n        SetPlayerHead();\n    }\n    void SetPlayerHead()\n    {\n\n        Transform head = _playerAnimation.Head;\n        _headMesh = _playerAppearance.HeadMR;\n        _headMat = _headMesh.material;\n        _leftEyeMesh = head.Find(\"LeftEye\").GetComponent<MeshRenderer>();\n        _leftEyeMat = _leftEyeMesh.material;\n        _rightEyeMesh = head.Find(\"RightEye\").GetComponent<MeshRenderer>();\n        _rightEyeMat = _rightEyeMesh.material;\n        _hairMesh = head.Find(\"Hair\").GetComponent<MeshRenderer>();\n        if (_hairMesh)\n            _hairMat = _hairMesh.material;\n\n        _headMat.renderQueue = 3000;\n        _headMat.EnableKeyword(\"_ARGLOW_ON\");\n        _headMat.SetFloat(\"_GlowWidth\", 0.5f);\n        _headMat.SetTexture(\"_GlowTex\", _GlowTexture);\n        if (_leftEyeMat)\n        {\n            _leftEyeMat.renderQueue = 3000;\n            _leftEyeMat.EnableKeyword(\"_ARGLOW_ON\");\n            _leftEyeMat.SetFloat(\"_GlowWidth\", 0.5f);\n            _leftEyeMat.SetTexture(\"_GlowTex\", _GlowTexture);\n        }\n        if (_rightEyeMat)\n        {\n            _rightEyeMat.renderQueue = 3000;\n            _rightEyeMat.EnableKeyword(\"_ARGLOW_ON\");\n            _rightEyeMat.SetFloat(\"_GlowWidth\", 0.5f);\n            _rightEyeMat.SetTexture(\"_GlowTex\", _GlowTexture);\n        }\n        if (_hairMat)\n        {\n            _hairMat.renderQueue = 3000;\n            _hairMat.EnableKeyword(\"_ARGLOW_ON\");\n            _hairMat.SetFloat(\"_GlowWidth\", 0.5f);\n            _hairMat.SetTexture(\"_GlowTex\", _GlowTexture);\n        }\n    }\n    //\u66f4\u6539\u7403\u5458\u52a8\u753b\u63a5\u53e3\n    public void SwitchARPlayerAnimState(ARPlayerAnimState playerAnim)\n    {\n        string stateName = \"DropHand\";\n        switch (playerAnim)\n        {\n            case ARPlayerAnimState.FingerSky:\n                stateName = \"FingerSky\";\n                break;\n            case ARPlayerAnimState.Juggle:\n                stateName = \"Juggle\";\n                break;\n            case ARPlayerAnimState.ShakeFist:\n                stateName = \"ShakeFist\";\n                break;\n            case ARPlayerAnimState.ShoulderHook:\n                stateName = \"ShoulderHook\";\n                break;\n            case ARPlayerAnimState.ThumbUp:\n                stateName = \"ThumbUp\";\n                break;\n            case ARPlayerAnimState.DropHand:\n                stateName = \"Idle05\";\n                break;\n            case ARPlayerAnimState.CrossChest:\n                stateName = \"Idle08\";\n                break;\n            case ARPlayerAnimState.BackHand:\n                stateName = \"Idle06\";\n                break;\n            case ARPlayerAnimState.Akimbo:\n                stateName = \"Idle07\";\n                break;\n        }\n        _curAnimState = playerAnim;\n        if (!_dynamicClothName.Contains(stateName))\n        {\n            ClothDataLoader.AsyncPreLoadOneClothDataSet(stateName);\n            _dynamicClothName.Add(stateName);\n        }\n        float nmTime = 0.2f / _playerAnimator.GetCurrentAnimatorStateInfo(0).length;\n        _playerAnimator.CrossFade(stateName, nmTime);\n        _playerAnimation.MyAnimator.Update(0);\n        _playerAnimation.OnStateNameOrMaterialChanged();\n        _playerAnimation.UpdateManually();\n        if (stateName == \"Juggle\")\n        {\n            _playerAnimation.ShowFootball();\n            if (_ballAnimator == null)\n            {\n                Transform ball = _playerAnimation.Football.Find(\"ball\");\n                _ballAnimator = ball.GetComponent<Animator>();\n                _footballMesh = ball.GetComponent<MeshRenderer>();\n                _footballMesh.material = _footballMat;\n                _ballAnimator.enabled = true;\n            }\n            _ballAnimator.Play(\"JuggleFootball\");\n        }\n        else\n            _playerAnimation.HideFootball();\n\n        if ((_beforeAnimState == ARPlayerAnimState.Juggle && _curAnimState != ARPlayerAnimState.Juggle) ||\n          (_beforeAnimState != ARPlayerAnimState.Juggle && _curAnimState == ARPlayerAnimState.Juggle) || _isInit||_isChangePos)\n        {\n            ShowPlayerGlow();\n            _isInit = false;\n            _isChangePos = false;\n        }\n        _beforeAnimState = _curAnimState;\n    }\n    void ShowPlayerGlow()\n    {\n         SetPlayerGlowPosY(_player.transform.position.y - 0.5f);\n         float time = 1f;\n         Go.to(this, time, new GoTweenConfig()\n                .onUpdate\n                ((AbstractGoTween t) =>\n                {\n                    float glowPosY = (t.totalElapsedTime / time) * 3f - 0.5f + _player.transform.position.y;\n                    SetPlayerGlowPosY(glowPosY);\n                }));\n    }\n    void SetPlayerGlowPosY(float glowPosY)\n    {\n        if (_skinMesh == null)\n            _skinMesh = _playerAppearance.LimbGPUSKM;\n        if (_clothMesh == null)\n            _clothMesh = _playerAppearance.ClothGPUSKM;\n        if (_sockMesh == null)\n            _sockMesh = _playerAppearance.LegMR;\n        _skinMesh.material.SetFloat(\"_GlowPosY\", glowPosY);\n        _clothMesh.material.SetFloat(\"_GlowPosY\", glowPosY);\n        _headMat.SetFloat(\"_GlowPosY\", glowPosY);\n        _leftEyeMat.SetFloat(\"_GlowPosY\", glowPosY);\n        _rightEyeMat.SetFloat(\"_GlowPosY\", glowPosY);\n        if (_hairMat)\n            _hairMat.SetFloat(\"_GlowPosY\", glowPosY);\n        for (int i = 0; i < _sockMesh.materials.Length; i++)\n            _sockMesh.materials[i].SetFloat(\"_GlowPosY\", glowPosY);\n        if (_playerAnimation.Football.gameObject.active)\n            _footballMesh.material.SetFloat(\"_GlowPosY\", glowPosY);\n    }\n\n    //\u66f4\u6539\u7403\u5458\u4f4d\u7f6e\u63a5\u53e3\n    public void ChangeARPlayerPos(Vector3 pos)\n    {\n        SetPlayerGlowPosY(_player.transform.position.y - 1 + 3);\n        float time = 1f;\n        Go.to(this, time, new GoTweenConfig()\n               .onUpdate\n               ((AbstractGoTween t) =>\n               {\n                   float glowPosY = _player.transform.position.y - 1 + 3 - (t.totalElapsedTime / time) * 3f;\n                   SetPlayerGlowPosY(glowPosY);\n               })\n                .onComplete((AbstractGoTween t) => {\n                    Debug.LogError(\"ARpos:\"+ pos);\n                    this.transform.localPosition = pos;\n                    _isChangePos = true;\n                    SwitchARPlayerAnimState(_curAnimState);\n                }));\n    }\n    //\u63d0\u793aObj\u63a5\u53e3\n    public void ShowARTips()\n    {\n        _TipsObj.SetActive(true);\n        Go.DelayCall(()=> { _TipsObj.SetActive(false); },4f);\n    }\n   \n    public override void Update()\n    {\n       /* if (Input.GetKeyDown(KeyCode.S))\n             SwitchARPlayerAnimState(ARPlayerAnimState.FingerSky);\n         else if (Input.GetKeyDown(KeyCode.W))\n             SwitchARPlayerAnimState(ARPlayerAnimState.ShoulderHook);\n         else if (Input.GetKeyDown(KeyCode.A))\n             SwitchARPlayerAnimState(ARPlayerAnimState.Juggle);\n         else if (Input.GetKeyDown(KeyCode.D))\n             SwitchARPlayerAnimState(ARPlayerAnimState.ShakeFist);\n         else if (Input.GetKeyDown(KeyCode.Z))\n             SwitchARPlayerAnimState(ARPlayerAnimState.ThumbUp);\n         else if (Input.GetKeyDown(KeyCode.Q))\n             SwitchARPlayerAnimState(ARPlayerAnimState.Akimbo);\n         else if (Input.GetKeyDown(KeyCode.E))\n             SwitchARPlayerAnimState(ARPlayerAnimState.BackHand);\n         else if (Input.GetKeyDown(KeyCode.R))\n             SwitchARPlayerAnimState(ARPlayerAnimState.CrossChest);\n         else if (Input.GetKeyDown(KeyCode.T))\n             SwitchARPlayerAnimState(ARPlayerAnimState.DropHand);\n         else if (Input.GetKeyDown(KeyCode.M))\n             ChangeARPlayerPos(new Vector3(27.9f, 0, 13f));\n        else if (Input.GetKeyDown(KeyCode.N))\n            ChangeARPlayerPos(new Vector3(27.9f, -3, 13f));*/\n         _currentHash = _playerAnimator.GetCurrentAnimatorStateInfo(0).shortNameHash;\n          if(_currentHash!= _hash)\n          {\n              _hash = _currentHash;\n              _isChangeAnim = true;\n              _isOneAnimEnd = false;\n          }\n          if (_isChangeAnim && _playerAnimator.GetCurrentAnimatorStateInfo(0).normalizedTime > 1f)\n          {\n              _isOneAnimEnd = true;\n              _isChangeAnim = false;\n          }\n\n    }\n    public override void OnDestroy()\n    {\n        if (_headMat)\n        {\n            _headMat.renderQueue = 2000;\n            _headMat.DisableKeyword(\"_ARGLOW_ON\");\n        }\n        if (_leftEyeMat)\n        {\n            _leftEyeMat.renderQueue = 2000;\n            _leftEyeMat.DisableKeyword(\"_ARGLOW_ON\");\n        }\n        if (_rightEyeMat)\n        {\n            _rightEyeMat.renderQueue = 2000;\n            _rightEyeMat.DisableKeyword(\"_ARGLOW_ON\");\n        }\n        if (_hairMat)\n        {\n            _hairMat.renderQueue = 2000;\n            _hairMat.DisableKeyword(\"_ARGLOW_ON\");\n        }\n         \n        _isChangeAnim = false;\n        _isOneAnimEnd = false;\n        //PlayerHeadDataLoader.UnloadUnreferencedHeadData();\n        //PlayerHeadDataLoader.UnloadOnePreLoadedHeadData(_headId);\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(_dynamicClothName.ToArray());\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(_jerseyTexture);\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(_socksTexture);\n        PlayerJerseyGenerator.Instance.ClearCache();\n        if (_runtimeAnimatorController)\n        {\n            ResourceMgr.Instance.UnloadAsset<RuntimeAnimatorController>(_runtimeAnimatorController);\n            _runtimeAnimatorController = null;\n        }\n        if (_SkinMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_SkinMat);\n            _SkinMat = null;\n        }\n        if (_TeamJerseyMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_TeamJerseyMat);\n            _TeamJerseyMat = null;\n        }\n        if (_TeamShoesMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_TeamShoesMat);\n            _TeamShoesMat = null;\n        }\n        if (_TeamSockMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_TeamSockMat);\n            _TeamSockMat = null;\n        }\n        if (_ShoeTex)\n        {\n            ResourceMgr.Instance.UnloadAsset<Texture>(_ShoeTex);\n            _ShoeTex = null;\n        }\n        if (_footballMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_footballMat);\n            _footballMat = null;\n        }\n        _isInit = true;\n        _isChangePos = false;\n        FitnessRoomPlayer_Hotfix.isResetShadow= true;\n        base.OnDestroy();\n    }\n\n}\n", "cropped_inputs": "using Framework.GalaSports.Service;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic enum ARPlayerAnimState\n{\n    None,\n    ShoulderHook,//\u52fe\u80a9\n    FingerSky,//\u624b\u6307\u5929\n    Juggle,//\u98a0\u7403\n    ShakeFist,//\u6325\u62f3\n    ThumbUp,//\u6bd4\u5927\u62c7\u6307\n    Akimbo,//\u53c9\u8170\n    DropHand,//\u53cc\u624b\u4e0b\u5782\n    CrossChest,//\u62b1\u80f8\n    BackHand,//\u624b\u80cc\u540e\n}\n\npublic class ARShare3DView : View3DBase\n{\n    GameObject _player;\n    Animator _playerAnimator;\n    RuntimeAnimatorController _runtimeAnimatorController;\n    HighPolyPlayerAppearanceController _playerAppearance;\n    HighPolyPlayerAnimationController _playerAnimation;\n    Animator _ballAnimator;\n\n    RenderTexture _jerseyTexture;\n    RenderTexture _socksTexture;\n\n    Material _TeamJerseyMat;\n    Material _TeamShoesMat;\n    Material _TeamSockMat;\n    Material _SkinMat;\n    Material _leftEyeMat;\n    Material _rightEyeMat;\n    Material _hairMat;\n    Material _headMat;\n    Material _footballMat;\n    Texture2D _ShoeTex;\n    Texture _GlowTexture;\n\n    int _headId;\n    SkinnedMeshRenderer _headMesh;\n    MeshRenderer _leftEyeMesh;\n    MeshRenderer _rightEyeMesh;\n    MeshRenderer _hairMesh;\n    MeshRenderer _clothMesh;\n    MeshRenderer _skinMesh;\n    SkinnedMeshRenderer _sockMesh;\n    MeshRenderer _footballMesh;\n\n   \n    ARPlayerAnimState _beforeAnimState;\n    ARPlayerAnimState _curAnimState;\n    bool _isInit = true;\n    bool _isChangePos = false;\n    GameObject _TipsObj;\n    bool _isOneAnimEnd=false;\n    bool _isChangeAnim=false;\n    int _hash = -1;\n    int _currentHash = -1;\n    List<string> _dynamicClothName;\n    ARPlayerData aRPlayerData;\n    public override async GTask Awake()\n    {\n        _player = this.transform.Find(\"ARPlayer\").gameObject;\n        aRPlayerData = this.gameObject.GetComponent<ARPlayerData>();\n        _GlowTexture = aRPlayerData._GlowTex;\n        _runtimeAnimatorController = (await ResourceMgr.Instance.LoadAssetAsync<RuntimeAnimatorController>(\"3D/Controller/ARShare/ARShareController\")).result;\n        _TipsObj = aRPlayerData._Tips;\n        _TipsObj.SetActive(false);\n        _dynamicClothName = new List<string>();\n      /*  HotFixHighPlayerInfo highPlayerInfo = new HotFixHighPlayerInfo();\n        highPlayerInfo.playerId = 1;\n        highPlayerInfo.headId = 1;\n        highPlayerInfo.playerName = \"MESSI\";\n        highPlayerInfo.playerNumber = \"30\";\n        highPlayerInfo.playerHeight = 180;\n        highPlayerInfo.playerWeight = 150;\n        highPlayerInfo.playerSkinColor = SkinColorForTexture.WHITE;\n        highPlayerInfo.jerseyCode = TAGlobalData.Instance.JereyId;\n        highPlayerInfo.isGK = false;\n        ShowARPlayer(highPlayerInfo);*/\n       \n    }\n    //\u663e\u793a\u7403\u5458\u63a5\u53e3\n    public async GTask ShowARPlayer(HotFixHighPlayerInfo highPlayerInfo)\n    {\n        _headId = highPlayerInfo.headId;\n        await PlayerHeadDataLoader.AsyncPreLoadOneHeadDataSet(_headId);\n        await InitPlayer(highPlayerInfo);\n        _playerAnimation.Show();\n        _playerAnimator = _player.GetComponent<Animator>();\n        _playerAnimator.runtimeAnimatorController = _runtimeAnimatorController;\n         HighPolyPlayerAnimation_Hotfix.PlayAnimation(_playerAnimation, \"Idle05\",0);\n         _beforeAnimState = ARPlayerAnimState.DropHand;\n        _curAnimState = ARPlayerAnimState.DropHand;\n        SwitchARPlayerAnimState(_curAnimState);\n        // _playerAnimation.StartLookAtCamera(Camera.main.transform, _playerAnimation.MyAnimator.GetCurrentAnimatorStateInfo(0).length - 1.5f);\n        OpenUpdate();\n    }\n   \n    async GTask LoadMaterial(HotFixHighPlayerInfo highPlayerInfo)\n    {\n\n        if (highPlayerInfo.playerSkinColor == SkinColorForTexture.BLACK)\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_B\")).result;\n        }\n        else if (highPlayerInfo.playerSkinColor == SkinColorForTexture.WHITE)\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_W\")).result;\n        }\n        else if (highPlayerInfo.playerSkinColor == SkinColorForTexture.LATIN)\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_L\")).result;\n        }\n        else if (highPlayerInfo.playerSkinColor == SkinColorForTexture.ASIAN)\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_A\")).result;\n        }\n        else\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_L\")).result;\n        }\n        _TeamJerseyMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Cloth\")).result;\n        _TeamShoesMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Shoe\")).result;\n        _TeamSockMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Sock\")).result;\n        _footballMat= (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/ARShareFootball\")).result;\n    }\n    async GTask InitPlayer(HotFixHighPlayerInfo highPlayerInfo)\n    {\n\n        //\u8bbe\u7f6e\u6750\u8d28\u7403\u53c2\u6570\n        await LoadMaterial(highPlayerInfo);\n        //\u7403\u8863\n        PlayerJerseyGenerator.Instance.Initialize();\n        await PlayerJerseyGenerator.Instance.SetJerseyInfoAsync(highPlayerInfo.jerseyCode, false);\n        PlayerJerseyGenerator.Instance.PlayerName = highPlayerInfo.playerName;\n        PlayerJerseyGenerator.Instance.PlayerNumber = highPlayerInfo.playerNumber;\n        PlayerJerseyGenerator.Instance.UpdateJerseyProperties();\n        _jerseyTexture = PlayerJerseyGenerator.Instance.GetDIYTex();\n        _socksTexture = PlayerJerseyGenerator.Instance.GetSockTex();\n        PlayerJerseyGenerator.Instance.SetCameraActive(false);\n        if (_TeamJerseyMat)\n            _TeamJerseyMat.SetTexture(\"_BaseSetTexture(\"_BaseMap\", _socksTexture);\n\n        if (_TeamJerseyMat)\n            _TeamJerseyMat.SetTexture(\"_BaseMap\", _jerseyTexture);\n        if (_TeamSockMat)\n            _TeamSockMat.SetTexture(\"_BaseMap\", _socksTexture);\n        //\n        string path = \"3D/PlayerJersey/PlayerShoes/\";\n        _ShoeTex = (await ResourceMgr.Instance.LoadAssetAsync<Texture2D>(path + \"Shoes_\" + highPlayerInfo.shoesId.ToString() + \"_tex\")).result;\n        if (_ShoeTex)\n            _TeamShoesMat.SetTexture(\"_BaseMap\", _ShoeTex);\n\n        Vector3 skinColorCorrectionValue = highPlayerInfo.skinColorCorrectionValue;\n        _SkinMat.SetColor(\"_BaseColor\", new Color(skinColorCorrectionValue.x, skinColorCorrectionValue.y, skinColorCorrectionValue.z, 1));\n\n        //\u914d\u7f6e\u7403\u5458\u6570\u636e\n        string fileNameSuffix = highPlayerInfo.headId.ToString();\n        _playerAppearance = _player.GetComponent<HighPolyPlayerAppearanceController>();\n        _playerAppearance.PrecalculateBodyShape(highPlayerInfo.playerHeight, highPlayerInfo.playerWeight);\n        _playerAppearance.SetPlayerHead(highPlayerInfo.playerId, fileNameSuffix, highPlayerInfo.playerSkinColor);\n        _playerAppearance.SetPlayerMaterials(_TeamJerseyMat, _SkinMat, _TeamSockMat, _TeamShoesMat);\n        _playerAppearance.SetPlayerBodyShape(highPlayerInfo.playerHeight, highPlayerInfo.playerWeight);\n        _playerAppearance.SetShadowMask(false);\n\n        _playerAnimation = _player.GetComponent<HighPolyPlayerAnimationController>();\n#if UNITY_IOS &&!UNITY_EDITOR\n        _playerAnimation.Init(true, false);\n#else\n        _playerAnimation.Show();\n        _playerAnimation.Init(true, false);\n#endif\n\n        SetPlayerHead();\n    }\n    void SetPlayerHead()\n    {\n\n        Transform head = _playerAnimation.Head;\n        _headMesh = _playerAppearance.HeadMR;\n        _headMat = _headMesh.material;\n        _leftEyeMesh = head.Find(\"LeftEye\").GetComponent<MeshRenderer>();\n        _leftEyeMat = _leftEyeMesh.material;\n        _rightEyeMesh = head.Find(\"RightEye\").GetComponent<MeshRenderer>();\n        _rightEyeMat = _rightEyeMesh.material;\n        _hairMesh = head.Find(\"Hair\").GetComponent<MeshRenderer>();\n        if (_hairMesh)\n            _hairMat = _hairMesh.material;\n\n        _headMat.renderQueue = 3000;\n        _headMat.EnableKeyword(\"_ARGLOW_ON\");\n        _headMat.SetFloat(\"_GlowWidth\", 0.5f);\n        _headMat.SetTexture(\"_GlowTex\", _GlowTexture);\n        if (_leftEyeMat)\n        {\n            _leftEyeMat.renderQueue = 3000;\n            _leftEyeMat.EnableKeyword(\"_ARGLOW_ON\");\n            _leftEyeMat.SetFloat(\"_GlowWidth\", 0.5f);\n            _leftEyeMat.SetTexture(\"_GlowTex\", _GlowTexture);\n        }\n        if (_rightEyeMat)\n        {\n            _rightEyeMat.renderQueue = 3000;\n            _rightEyeMat.EnableKeyword(\"_ARGLOW_ON\");\n            _rightEyeMat.SetFloat(\"_GlowWidth\", 0.5f);\n            _rightEyeMat.SetTexture(\"_GlowTex\", _GlowTexture);\n        }\n        if (_hairMat)\n        {\n            _hairMat.renderQueue = 3000;\n            _hairMat.EnableKeyword(\"_ARGLOW_ON\");\n            _hairMat.SetFloat(\"_GlowWidth\", 0.5f);\n            _hairMat.SetTexture(\"_GlowTex\", _GlowTexture);\n        }\n    }\n    //\u66f4\u6539\u7403\u5458\u52a8\u753b\u63a5\u53e3\n    public void SwitchARPlayerAnimState(ARPlayerAnimState playerAnim)\n    {\n        string stateName = \"DropHand\";\n        switch (playerAnim)\n        {\n            case ARPlayerAnimState.FingerSky:\n                stateName = \"FingerSky\";\n                break;\n            case ARPlayerAnimState.Juggle:\n                stateName = \"Juggle\";\n                break;\n            case ARPlayerAnimState.ShakeFist:\n                stateName = \"ShakeFist\";\n                break;\n            case ARPlayerAnimState.ShoulderHook:\n                stateName = \"ShoulderHook\";\n                break;\n            case ARPlayerAnimState.ThumbUp:\n                stateName = \"ThumbUp\";\n                break;\n            case ARPlayerAnimState.DropHand:\n                stateName = \"Idle05\";\n                break;\n            case ARPlayerAnimState.CrossChest:\n                stateName = \"Idle08\";\n                break;\n            case ARPlayerAnimState.BackHand:\n                stateName = \"Idle06\";\n                break;\n            case ARPlayerAnimState.Akimbo:\n                stateName = \"Idle07\";\n                break;\n        }\n        _curAnimState = playerAnim;\n        if (!_dynamicClothName.Contains(stateName))\n        {\n            ClothDataLoader.AsyncPreLoadOneClothDataSet(stateName);\n            _dynamicClothName.Add(stateName);\n        }\n        float nmTime = 0.2f / _playerAnimator.GetCurrentAnimatorStateInfo(0).length;\n        _playerAnimator.CrossFade(stateName, nmTime);\n        _playerAnimation.MyAnimator.Update(0);\n        _playerAnimation.OnStateNameOrMaterialChanged();\n        _playerAnimation.UpdateManually();\n        if (stateName == \"Juggle\")\n        {\n            _playerAnimation.ShowFootball();\n            if (_ballAnimator == null)\n            {\n                Transform ball = _playerAnimation.Football.Find(\"ball\");\n                _ballAnimator = ball.GetComponent<Animator>();\n                _footballMesh = ball.GetComponent<MeshRenderer>();\n                _footballMesh.material = _footballMat;\n                _ballAnimator.enabled = true;\n            }\n            _ballAnimator.Play(\"JuggleFootball\");\n        }\n        else\n            _playerAnimation.HideFootball();\n\n        if ((_beforeAnimState == ARPlayerAnimState.Juggle && _curAnimState!= ARPlayerAnimState.Juggle) ||\n          (_beforeAnimState!= ARPlayerAnimState.Juggle && _curAnimState == ARPlayerAnimState.Juggle) || _isInit||_isChangePos)\n        {\n            ShowPlayerGlow();\n            _isInit = false;\n            _isChangePos = false;\n        }\n        _beforeAnimState = _curAnimState;\n    }\n    void ShowPlayerGlow()\n    {\n         SetPlayerGlowPosY(_player.transform.position.y - 0.5f);\n         float time = 1f;\n         Go.to(this, time, new GoTweenConfig()\n               .onUpdate\n                ((AbstractGoTween t) =>\n                {\n                    float glowPosY = (t.totalElapsedTime / time) * 3f - 0.5f + _player.transform.position.y;\n                    SetPlayerGlowPosY(glowPosY);\n                }));\n    }\n    void SetPlayerGlowPosY(float glowPosY)\n    {\n        if (_skinMesh == null)\n            _skinMesh = _playerAppearance.LimbGPUSKM;\n        if (_clothMesh == null)\n            _clothMesh = _playerAppearance.ClothGPUSKM;\n        if (_sockMesh == null)\n            _sockMesh = _playerAppearance.LegMR;\n        _skinMesh.material.SetFloat(\"_GlowPosY\", glowPosY);\n        _clothMesh.material.SetFloat(\"_GlowPosY\", glowPosY);\n        _headMat.SetFloat(\"_GlowPosY\", glowPosY);\n        _leftEyeMat.SetFloat(\"_GlowPosY\", glowPosY);\n        _rightEyeMat.SetFloat(\"_GlowPosY\", glowPosY);\n        if (_hairMat)\n            _hairMat.SetFloat(\"_GlowPosY\", glowPosY);\n        for (int i = 0; i < _sockMesh.materials.Length; i++)\n            _sockMesh.materials[i].SetFloat(\"_GlowPosY\", glowPosY);\n        if (_playerAnimation.Football.gameObject.active)\n            _footballMesh.material.SetFloat(\"_GlowPosY\", glowPosY);\n    }\n\n    //\u66f4\u6539\u7403\u5458\u4f4d\u7f6e\u63a5\u53e3\n    public void ChangeARPlayerPos(Vector3 pos)\n    {\n        SetPlayerGlowPosY(_player.transform.position.y - 1 + 3);\n        float time = 1f;\n        Go.to(this, time, new GoTweenConfig()\n              .onUpdate\n               ((AbstractGoTween t) =>\n               {\n                   float glowPosY = _player.transform.position.y - 1 + 3 - (t.totalElapsedTime / time) * 3f;\n                   SetPlayerGlowPosY(glowPosY);\n               })\n               .onComplete((AbstractGoTween t) => {\n                    Debug.LogError(\"ARpos:\"+ pos);\n                    this.transform.localPosition = pos;\n                    _isChangePos = true;\n                    SwitchARPlayerAnimState(_curAnimState);\n                }));\n    }\n    //\u63d0\u793aObj\u63a5\u53e3\n    public void ShowARTips()\n    {\n        _TipsObj.SetActive(true);\n        Go.DelayCall(()=> { _TipsObj.SetActive(false); },4f);\n    }\n   \n    public override void Update()\n    {\n       /* if (Input.GetKeyDown(KeyCode.S))\n             SwitchARPlayerAnimState(ARPlayerAnimState.FingerSky);\n         else if (Input.GetKeyDown(KeyCode.W))\n             SwitchARPlayerAnimState(ARPlayerAnimState.ShoulderHook);\n         else if (Input.GetKeyDown(KeyCode.A))\n             SwitchARPlayerAnimState(ARPlayerAnimState.Juggle);\n         else if (Input.GetKeyDown(KeyCode.D))\n             SwitchARPlayerAnimState(ARPlayerAnimState.ShakeFist);\n         else if (Input.GetKeyDown(KeyCode.Z))\n             SwitchARPlayerAnimState(ARPlayerAnimState.ThumbUp);\n         else if (Input.GetKeyDown(KeyCode.Q))\n             SwitchARPlayerAnimState(ARPlayerAnimState.Akimbo);\n         else if (Input.GetKeyDown(KeyCode.E))\n             SwitchARPlayerAnimState(ARPlayerAnimState.BackHand);\n         else if (Input.GetKeyDown(KeyCode.R))\n             SwitchARPlayerAnimState(ARPlayerAnimState.CrossChest);\n         else if (Input.GetKeyDown(KeyCode.T))\n             SwitchARPlayerAnimState(ARPlayerAnimState.DropHand);\n         else if (Input.GetKeyDown(KeyCode.M))\n             ChangeARPlayerPos(new Vector3(27.9f, 0, 13f));\n        else if (Input.GetKeyDown(KeyCode.N))\n            ChangeARPlayerPos(new Vector3(27.9f, -3, 13f));*/\n         _currentHash = _playerAnimator.GetCurrentAnimatorStateInfo(0).shortNameHash;\n          if(_currentHash!= _hash)\n          {\n              _hash = _currentHash;\n              _isChangeAnim = true;\n              _isOneAnimEnd = false;\n          }\n          if (_isChangeAnim && _playerAnimator.GetCurrentAnimatorStateInfo(0).normalizedTime > 1f)\n          {\n              _isOneAnimEnd = true;\n              _isChangeAnim = false;\n          }\n\n    }\n    public override void OnDestroy()\n    {\n        if (_headMat)\n        {\n            _headMat.renderQueue = 2000;\n            _headMat.DisableKeyword(\"_ARGLOW_ON\");\n        }\n        if (_leftEyeMat)\n        {\n            _leftEyeMat.renderQueue = 2000;\n            _leftEyeMat.DisableKeyword(\"_ARGLOW_ON\");\n        }\n        if (_rightEyeMat)\n        {\n            _rightEyeMat.renderQueue = 2000;\n            _rightEyeMat.DisableKeyword(\"_ARGLOW_ON\");\n        }\n        if (_hairMat)\n        {\n            _hairMat.renderQueue = 2000;\n            _hairMat.DisableKeyword(\"_ARGLOW_ON\");\n        }\n         \n        _isChangeAnim = false;\n        _isOneAnimEnd = false;\n        //PlayerHeadDataLoader.UnloadUnreferencedHeadData();\n        //PlayerHeadDataLoader.UnloadOnePreLoadedHeadData(_headId);\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(_dynamicClothName.ToArray());\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(_jerseyTexture);\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(_socksTexture);\n        PlayerJerseyGenerator.Instance.ClearCache();\n        if (_runtimeAnimatorController)\n        {\n            ResourceMgr.Instance.UnloadAsset<RuntimeAnimatorController>(_runtimeAnimatorController);\n            _runtimeAnimatorController = null;\n        }\n        if (_SkinMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_SkinMat);\n            _SkinMat = null;\n        }\n        if (_TeamJerseyMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_TeamJerseyMat);\n            _TeamJerseyMat = null;\n        }\n        if (_TeamShoesMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_TeamShoesMat);\n            _TeamShoesMat = null;\n        }\n        if (_TeamSockMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_TeamSockMat);\n            _TeamSockMat = null;\n        }\n        if (_ShoeTex)\n        {\n            ResourceMgr.Instance.UnloadAsset<Texture>(_ShoeTex);\n            _ShoeTex = null;\n        }\n        if (_footballMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_footballMat);\n            _footballMat = null;\n        }\n        _isInit = true;\n        _isChangePos = false;\n        FitnessRoomPlayer_Hotfix.isResetShadow= true;\n        base.OnDestroy();\n    }\n\n}\n", "starcoder_inputs": "<fim_prefix>using Framework.GalaSports.Service;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic enum ARPlayerAnimState\n{\n    None,\n    ShoulderHook,//\u52fe\u80a9\n    FingerSky,//\u624b\u6307\u5929\n    Juggle,//\u98a0\u7403\n    ShakeFist,//\u6325\u62f3\n    ThumbUp,//\u6bd4\u5927\u62c7\u6307\n    Akimbo,//\u53c9\u8170\n    DropHand,//\u53cc\u624b\u4e0b\u5782\n    CrossChest,//\u62b1\u80f8\n    BackHand,//\u624b\u80cc\u540e\n}\n\npublic class ARShare3DView : View3DBase\n{\n    GameObject _player;\n    Animator _playerAnimator;\n    RuntimeAnimatorController _runtimeAnimatorController;\n    HighPolyPlayerAppearanceController _playerAppearance;\n    HighPolyPlayerAnimationController _playerAnimation;\n    Animator _ballAnimator;\n\n    RenderTexture _jerseyTexture;\n    RenderTexture _socksTexture;\n\n    Material _TeamJerseyMat;\n    Material _TeamShoesMat;\n    Material _TeamSockMat;\n    Material _SkinMat;\n    Material _leftEyeMat;\n    Material _rightEyeMat;\n    Material _hairMat;\n    Material _headMat;\n    Material _footballMat;\n    Texture2D _ShoeTex;\n    Texture _GlowTexture;\n\n    int _headId;\n    SkinnedMeshRenderer _headMesh;\n    MeshRenderer _leftEyeMesh;\n    MeshRenderer _rightEyeMesh;\n    MeshRenderer _hairMesh;\n    MeshRenderer _clothMesh;\n    MeshRenderer _skinMesh;\n    SkinnedMeshRenderer _sockMesh;\n    MeshRenderer _footballMesh;\n\n   \n    ARPlayerAnimState _beforeAnimState;\n    ARPlayerAnimState _curAnimState;\n    bool _isInit = true;\n    bool _isChangePos = false;\n    GameObject _TipsObj;\n    bool _isOneAnimEnd=false;\n    bool _isChangeAnim=false;\n    int _hash = -1;\n    int _currentHash = -1;\n    List<string> _dynamicClothName;\n    ARPlayerData aRPlayerData;\n    public override async GTask Awake()\n    {\n        _player = this.transform.Find(\"ARPlayer\").gameObject;\n        aRPlayerData = this.gameObject.GetComponent<ARPlayerData>();\n        _GlowTexture = aRPlayerData._GlowTex;\n        _runtimeAnimatorController = (await ResourceMgr.Instance.LoadAssetAsync<RuntimeAnimatorController>(\"3D/Controller/ARShare/ARShareController\")).result;\n        _TipsObj = aRPlayerData._Tips;\n        _TipsObj.SetActive(false);\n        _dynamicClothName = new List<string>();\n      /*  HotFixHighPlayerInfo highPlayerInfo = new HotFixHighPlayerInfo();\n        highPlayerInfo.playerId = 1;\n        highPlayerInfo.headId = 1;\n        highPlayerInfo.playerName = \"MESSI\";\n        highPlayerInfo.playerNumber = \"30\";\n        highPlayerInfo.playerHeight = 180;\n        highPlayerInfo.playerWeight = 150;\n        highPlayerInfo.playerSkinColor = SkinColorForTexture.WHITE;\n        highPlayerInfo.jerseyCode = TAGlobalData.Instance.JereyId;\n        highPlayerInfo.isGK = false;\n        ShowARPlayer(highPlayerInfo);*/\n       \n    }\n    //\u663e\u793a\u7403\u5458\u63a5\u53e3\n    public async GTask ShowARPlayer(HotFixHighPlayerInfo highPlayerInfo)\n    {\n        _headId = highPlayerInfo.headId;\n        await PlayerHeadDataLoader.AsyncPreLoadOneHeadDataSet(_headId);\n        await InitPlayer(highPlayerInfo);\n        _playerAnimation.Show();\n        _playerAnimator = _player.GetComponent<Animator>();\n        _playerAnimator.runtimeAnimatorController = _runtimeAnimatorController;\n         HighPolyPlayerAnimation_Hotfix.PlayAnimation(_playerAnimation, \"Idle05\",0);\n         _beforeAnimState = ARPlayerAnimState.DropHand;\n        _curAnimState = ARPlayerAnimState.DropHand;\n        SwitchARPlayerAnimState(_curAnimState);\n        // _playerAnimation.StartLookAtCamera(Camera.main.transform, _playerAnimation.MyAnimator.GetCurrentAnimatorStateInfo(0).length - 1.5f);\n        OpenUpdate();\n    }\n   \n    async GTask LoadMaterial(HotFixHighPlayerInfo highPlayerInfo)\n    {\n\n        if (highPlayerInfo.playerSkinColor == SkinColorForTexture.BLACK)\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_B\")).result;\n        }\n        else if (highPlayerInfo.playerSkinColor == SkinColorForTexture.WHITE)\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_W\")).result;\n        }\n        else if (highPlayerInfo.playerSkinColor == SkinColorForTexture.LATIN)\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_L\")).result;\n        }\n        else if (highPlayerInfo.playerSkinColor == SkinColorForTexture.ASIAN)\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_A\")).result;\n        }\n        else\n        {\n            _SkinMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Body_L\")).result;\n        }\n        _TeamJerseyMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Cloth\")).result;\n        _TeamShoesMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Shoe\")).result;\n        _TeamSockMat = (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/Mat_Sock\")).result;\n        _footballMat= (await ResourceMgr.Instance.LoadAssetAsync<Material>(\"3D/Material/ARPlayerMat/ARShareFootball\")).result;\n    }\n    async GTask InitPlayer(HotFixHighPlayerInfo highPlayerInfo)\n    {\n\n        //\u8bbe\u7f6e\u6750\u8d28\u7403\u53c2\u6570\n        await LoadMaterial(highPlayerInfo);\n        //\u7403\u8863\n        PlayerJerseyGenerator.Instance.Initialize();\n        await PlayerJerseyGenerator.Instance.SetJerseyInfoAsync(highPlayerInfo.jerseyCode, false);\n        PlayerJerseyGenerator.Instance.PlayerName = highPlayerInfo.playerName;\n        PlayerJerseyGenerator.Instance.PlayerNumber = highPlayerInfo.playerNumber;\n        PlayerJerseyGenerator.Instance.UpdateJerseyProperties();\n        _jerseyTexture = PlayerJerseyGenerator.Instance.GetDIYTex();\n        _socksTexture = PlayerJerseyGenerator.Instance.GetSockTex();\n        PlayerJerseyGenerator.Instance.SetCameraActive(false);\n        if (_TeamJerseyMat)\n            _TeamJerseyMat.SetTexture(\"_Base<fim_suffix>SetTexture(\"_BaseMap\", _socksTexture);\n\n        if (_TeamJerseyMat)\n            _TeamJerseyMat.SetTexture(\"_BaseMap\", _jerseyTexture);\n        if (_TeamSockMat)\n            _TeamSockMat.SetTexture(\"_BaseMap\", _socksTexture);\n        //\n        string path = \"3D/PlayerJersey/PlayerShoes/\";\n        _ShoeTex = (await ResourceMgr.Instance.LoadAssetAsync<Texture2D>(path + \"Shoes_\" + highPlayerInfo.shoesId.ToString() + \"_tex\")).result;\n        if (_ShoeTex)\n            _TeamShoesMat.SetTexture(\"_BaseMap\", _ShoeTex);\n\n        Vector3 skinColorCorrectionValue = highPlayerInfo.skinColorCorrectionValue;\n        _SkinMat.SetColor(\"_BaseColor\", new Color(skinColorCorrectionValue.x, skinColorCorrectionValue.y, skinColorCorrectionValue.z, 1));\n\n        //\u914d\u7f6e\u7403\u5458\u6570\u636e\n        string fileNameSuffix = highPlayerInfo.headId.ToString();\n        _playerAppearance = _player.GetComponent<HighPolyPlayerAppearanceController>();\n        _playerAppearance.PrecalculateBodyShape(highPlayerInfo.playerHeight, highPlayerInfo.playerWeight);\n        _playerAppearance.SetPlayerHead(highPlayerInfo.playerId, fileNameSuffix, highPlayerInfo.playerSkinColor);\n        _playerAppearance.SetPlayerMaterials(_TeamJerseyMat, _SkinMat, _TeamSockMat, _TeamShoesMat);\n        _playerAppearance.SetPlayerBodyShape(highPlayerInfo.playerHeight, highPlayerInfo.playerWeight);\n        _playerAppearance.SetShadowMask(false);\n\n        _playerAnimation = _player.GetComponent<HighPolyPlayerAnimationController>();\n#if UNITY_IOS &&!UNITY_EDITOR\n        _playerAnimation.Init(true, false);\n#else\n        _playerAnimation.Show();\n        _playerAnimation.Init(true, false);\n#endif\n\n        SetPlayerHead();\n    }\n    void SetPlayerHead()\n    {\n\n        Transform head = _playerAnimation.Head;\n        _headMesh = _playerAppearance.HeadMR;\n        _headMat = _headMesh.material;\n        _leftEyeMesh = head.Find(\"LeftEye\").GetComponent<MeshRenderer>();\n        _leftEyeMat = _leftEyeMesh.material;\n        _rightEyeMesh = head.Find(\"RightEye\").GetComponent<MeshRenderer>();\n        _rightEyeMat = _rightEyeMesh.material;\n        _hairMesh = head.Find(\"Hair\").GetComponent<MeshRenderer>();\n        if (_hairMesh)\n            _hairMat = _hairMesh.material;\n\n        _headMat.renderQueue = 3000;\n        _headMat.EnableKeyword(\"_ARGLOW_ON\");\n        _headMat.SetFloat(\"_GlowWidth\", 0.5f);\n        _headMat.SetTexture(\"_GlowTex\", _GlowTexture);\n        if (_leftEyeMat)\n        {\n            _leftEyeMat.renderQueue = 3000;\n            _leftEyeMat.EnableKeyword(\"_ARGLOW_ON\");\n            _leftEyeMat.SetFloat(\"_GlowWidth\", 0.5f);\n            _leftEyeMat.SetTexture(\"_GlowTex\", _GlowTexture);\n        }\n        if (_rightEyeMat)\n        {\n            _rightEyeMat.renderQueue = 3000;\n            _rightEyeMat.EnableKeyword(\"_ARGLOW_ON\");\n            _rightEyeMat.SetFloat(\"_GlowWidth\", 0.5f);\n            _rightEyeMat.SetTexture(\"_GlowTex\", _GlowTexture);\n        }\n        if (_hairMat)\n        {\n            _hairMat.renderQueue = 3000;\n            _hairMat.EnableKeyword(\"_ARGLOW_ON\");\n            _hairMat.SetFloat(\"_GlowWidth\", 0.5f);\n            _hairMat.SetTexture(\"_GlowTex\", _GlowTexture);\n        }\n    }\n    //\u66f4\u6539\u7403\u5458\u52a8\u753b\u63a5\u53e3\n    public void SwitchARPlayerAnimState(ARPlayerAnimState playerAnim)\n    {\n        string stateName = \"DropHand\";\n        switch (playerAnim)\n        {\n            case ARPlayerAnimState.FingerSky:\n                stateName = \"FingerSky\";\n                break;\n            case ARPlayerAnimState.Juggle:\n                stateName = \"Juggle\";\n                break;\n            case ARPlayerAnimState.ShakeFist:\n                stateName = \"ShakeFist\";\n                break;\n            case ARPlayerAnimState.ShoulderHook:\n                stateName = \"ShoulderHook\";\n                break;\n            case ARPlayerAnimState.ThumbUp:\n                stateName = \"ThumbUp\";\n                break;\n            case ARPlayerAnimState.DropHand:\n                stateName = \"Idle05\";\n                break;\n            case ARPlayerAnimState.CrossChest:\n                stateName = \"Idle08\";\n                break;\n            case ARPlayerAnimState.BackHand:\n                stateName = \"Idle06\";\n                break;\n            case ARPlayerAnimState.Akimbo:\n                stateName = \"Idle07\";\n                break;\n        }\n        _curAnimState = playerAnim;\n        if (!_dynamicClothName.Contains(stateName))\n        {\n            ClothDataLoader.AsyncPreLoadOneClothDataSet(stateName);\n            _dynamicClothName.Add(stateName);\n        }\n        float nmTime = 0.2f / _playerAnimator.GetCurrentAnimatorStateInfo(0).length;\n        _playerAnimator.CrossFade(stateName, nmTime);\n        _playerAnimation.MyAnimator.Update(0);\n        _playerAnimation.OnStateNameOrMaterialChanged();\n        _playerAnimation.UpdateManually();\n        if (stateName == \"Juggle\")\n        {\n            _playerAnimation.ShowFootball();\n            if (_ballAnimator == null)\n            {\n                Transform ball = _playerAnimation.Football.Find(\"ball\");\n                _ballAnimator = ball.GetComponent<Animator>();\n                _footballMesh = ball.GetComponent<MeshRenderer>();\n                _footballMesh.material = _footballMat;\n                _ballAnimator.enabled = true;\n            }\n            _ballAnimator.Play(\"JuggleFootball\");\n        }\n        else\n            _playerAnimation.HideFootball();\n\n        if ((_beforeAnimState == ARPlayerAnimState.Juggle && _curAnimState!= ARPlayerAnimState.Juggle) ||\n          (_beforeAnimState!= ARPlayerAnimState.Juggle && _curAnimState == ARPlayerAnimState.Juggle) || _isInit||_isChangePos)\n        {\n            ShowPlayerGlow();\n            _isInit = false;\n            _isChangePos = false;\n        }\n        _beforeAnimState = _curAnimState;\n    }\n    void ShowPlayerGlow()\n    {\n         SetPlayerGlowPosY(_player.transform.position.y - 0.5f);\n         float time = 1f;\n         Go.to(this, time, new GoTweenConfig()\n               .onUpdate\n                ((AbstractGoTween t) =>\n                {\n                    float glowPosY = (t.totalElapsedTime / time) * 3f - 0.5f + _player.transform.position.y;\n                    SetPlayerGlowPosY(glowPosY);\n                }));\n    }\n    void SetPlayerGlowPosY(float glowPosY)\n    {\n        if (_skinMesh == null)\n            _skinMesh = _playerAppearance.LimbGPUSKM;\n        if (_clothMesh == null)\n            _clothMesh = _playerAppearance.ClothGPUSKM;\n        if (_sockMesh == null)\n            _sockMesh = _playerAppearance.LegMR;\n        _skinMesh.material.SetFloat(\"_GlowPosY\", glowPosY);\n        _clothMesh.material.SetFloat(\"_GlowPosY\", glowPosY);\n        _headMat.SetFloat(\"_GlowPosY\", glowPosY);\n        _leftEyeMat.SetFloat(\"_GlowPosY\", glowPosY);\n        _rightEyeMat.SetFloat(\"_GlowPosY\", glowPosY);\n        if (_hairMat)\n            _hairMat.SetFloat(\"_GlowPosY\", glowPosY);\n        for (int i = 0; i < _sockMesh.materials.Length; i++)\n            _sockMesh.materials[i].SetFloat(\"_GlowPosY\", glowPosY);\n        if (_playerAnimation.Football.gameObject.active)\n            _footballMesh.material.SetFloat(\"_GlowPosY\", glowPosY);\n    }\n\n    //\u66f4\u6539\u7403\u5458\u4f4d\u7f6e\u63a5\u53e3\n    public void ChangeARPlayerPos(Vector3 pos)\n    {\n        SetPlayerGlowPosY(_player.transform.position.y - 1 + 3);\n        float time = 1f;\n        Go.to(this, time, new GoTweenConfig()\n              .onUpdate\n               ((AbstractGoTween t) =>\n               {\n                   float glowPosY = _player.transform.position.y - 1 + 3 - (t.totalElapsedTime / time) * 3f;\n                   SetPlayerGlowPosY(glowPosY);\n               })\n               .onComplete((AbstractGoTween t) => {\n                    Debug.LogError(\"ARpos:\"+ pos);\n                    this.transform.localPosition = pos;\n                    _isChangePos = true;\n                    SwitchARPlayerAnimState(_curAnimState);\n                }));\n    }\n    //\u63d0\u793aObj\u63a5\u53e3\n    public void ShowARTips()\n    {\n        _TipsObj.SetActive(true);\n        Go.DelayCall(()=> { _TipsObj.SetActive(false); },4f);\n    }\n   \n    public override void Update()\n    {\n       /* if (Input.GetKeyDown(KeyCode.S))\n             SwitchARPlayerAnimState(ARPlayerAnimState.FingerSky);\n         else if (Input.GetKeyDown(KeyCode.W))\n             SwitchARPlayerAnimState(ARPlayerAnimState.ShoulderHook);\n         else if (Input.GetKeyDown(KeyCode.A))\n             SwitchARPlayerAnimState(ARPlayerAnimState.Juggle);\n         else if (Input.GetKeyDown(KeyCode.D))\n             SwitchARPlayerAnimState(ARPlayerAnimState.ShakeFist);\n         else if (Input.GetKeyDown(KeyCode.Z))\n             SwitchARPlayerAnimState(ARPlayerAnimState.ThumbUp);\n         else if (Input.GetKeyDown(KeyCode.Q))\n             SwitchARPlayerAnimState(ARPlayerAnimState.Akimbo);\n         else if (Input.GetKeyDown(KeyCode.E))\n             SwitchARPlayerAnimState(ARPlayerAnimState.BackHand);\n         else if (Input.GetKeyDown(KeyCode.R))\n             SwitchARPlayerAnimState(ARPlayerAnimState.CrossChest);\n         else if (Input.GetKeyDown(KeyCode.T))\n             SwitchARPlayerAnimState(ARPlayerAnimState.DropHand);\n         else if (Input.GetKeyDown(KeyCode.M))\n             ChangeARPlayerPos(new Vector3(27.9f, 0, 13f));\n        else if (Input.GetKeyDown(KeyCode.N))\n            ChangeARPlayerPos(new Vector3(27.9f, -3, 13f));*/\n         _currentHash = _playerAnimator.GetCurrentAnimatorStateInfo(0).shortNameHash;\n          if(_currentHash!= _hash)\n          {\n              _hash = _currentHash;\n              _isChangeAnim = true;\n              _isOneAnimEnd = false;\n          }\n          if (_isChangeAnim && _playerAnimator.GetCurrentAnimatorStateInfo(0).normalizedTime > 1f)\n          {\n              _isOneAnimEnd = true;\n              _isChangeAnim = false;\n          }\n\n    }\n    public override void OnDestroy()\n    {\n        if (_headMat)\n        {\n            _headMat.renderQueue = 2000;\n            _headMat.DisableKeyword(\"_ARGLOW_ON\");\n        }\n        if (_leftEyeMat)\n        {\n            _leftEyeMat.renderQueue = 2000;\n            _leftEyeMat.DisableKeyword(\"_ARGLOW_ON\");\n        }\n        if (_rightEyeMat)\n        {\n            _rightEyeMat.renderQueue = 2000;\n            _rightEyeMat.DisableKeyword(\"_ARGLOW_ON\");\n        }\n        if (_hairMat)\n        {\n            _hairMat.renderQueue = 2000;\n            _hairMat.DisableKeyword(\"_ARGLOW_ON\");\n        }\n         \n        _isChangeAnim = false;\n        _isOneAnimEnd = false;\n        //PlayerHeadDataLoader.UnloadUnreferencedHeadData();\n        //PlayerHeadDataLoader.UnloadOnePreLoadedHeadData(_headId);\n        ClothDataLoader.UnloadMultiPreLoadedClothDatas(_dynamicClothName.ToArray());\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(_jerseyTexture);\n        GalaRenderPipeline.GalaRenderManager.ReleaseTemporaryRT(_socksTexture);\n        PlayerJerseyGenerator.Instance.ClearCache();\n        if (_runtimeAnimatorController)\n        {\n            ResourceMgr.Instance.UnloadAsset<RuntimeAnimatorController>(_runtimeAnimatorController);\n            _runtimeAnimatorController = null;\n        }\n        if (_SkinMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_SkinMat);\n            _SkinMat = null;\n        }\n        if (_TeamJerseyMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_TeamJerseyMat);\n            _TeamJerseyMat = null;\n        }\n        if (_TeamShoesMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_TeamShoesMat);\n            _TeamShoesMat = null;\n        }\n        if (_TeamSockMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_TeamSockMat);\n            _TeamSockMat = null;\n        }\n        if (_ShoeTex)\n        {\n            ResourceMgr.Instance.UnloadAsset<Texture>(_ShoeTex);\n            _ShoeTex = null;\n        }\n        if (_footballMat)\n        {\n            ResourceMgr.Instance.UnloadAsset<Material>(_footballMat);\n            _footballMat = null;\n        }\n        _isInit = true;\n        _isChangePos = false;\n        FitnessRoomPlayer_Hotfix.isResetShadow= true;\n        base.OnDestroy();\n    }\n\n}\n<fim_middle>"}
{"inputs": "using System;\nusing System.Threading;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing UnityEngine;\n\nnamespace TcpServer\n{\n    public interface ProtoFilter\n    {\n        void input(byte[] data);\n\n        List<string> swap_msgs();\n    }\n\n    public class SimpleProtocolFilter : ProtoFilter\n    {\n        /* \u7b80\u5355\u534f\u8bae\u8fc7\u6ee4\u5668\n\t\t\u534f\u8bae\u6309\u7167 [\u6709\u6548\u6570\u636e\u5b57\u8282\u6570][\u6709\u6548\u6570\u636e] \u8fd9\u79cd\u534f\u8bae\u5305\u7684\u683c\u5f0f\u8fdb\u884c\u6253\u5305\u548c\u89e3\u5305\n\t\t[\u6709\u6548\u6570\u636e\u5b57\u8282\u6570]\u957f\u5ea6HEADER_SIZE\u5b57\u8282\n\t\t[\u6709\u6548\u6570\u636e]\u957f\u5ea6\u6709\u6548\u6570\u636e\u5b57\u8282\u6570\u5b57\u8282\n\t\t\u672c\u7c7b\u6309\u7167\u8fd9\u79cd\u65b9\u5f0f\uff0c\u987a\u5e8f\u4ece\u6570\u636e\u6d41\u4e2d\u53d6\u51fa\u6570\u636e\u8fdb\u884c\u62fc\u63a5\uff0c\u4e00\u65e6\u63a5\u6536\u5b8c\u4e00\u4e2a\u5b8c\u6574\u7684\u534f\u8bae\u5305\uff0c\u5c31\u4f1a\u5c06\u534f\u8bae\u5305\u8fd4\u56de\n\t\t[\u6709\u6548\u6570\u636e]\u5b57\u6bb5\u63a5\u6536\u5230\u540e\u4f1a\u6309\u7167utf-8\u8fdb\u884c\u89e3\u7801\uff0c\u56e0\u4e3a\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u662f\u7528utf-8\u8fdb\u884c\u7f16\u7801\u7684\n\t\t\u6240\u6709\u7f16\u89e3\u7801\u7684\u64cd\u4f5c\u5728\u8be5\u7c7b\u4e2d\u5b8c\u6210\n\t\t*/\n\n        private byte[] buf = new byte[0];\n        private int HEADER_SIZE = 4;\n        private List<string> msgs = new List<string>();\n\n        public void input(byte[] data)\n        {\n            buf = Combine(buf, data);\n\n            while (buf.Length > HEADER_SIZE)\n            {\n                int data_size = BitConverter.ToInt32(buf, 0);\n                if (buf.Length >= data_size + HEADER_SIZE)\n                {\n                    byte[] data_body = Slice(buf, HEADER_SIZE, data_size + HEADER_SIZE);\n                    string content = System.Text.Encoding.Default.GetString(data_body);\n                    msgs.Add(content);\n                    buf = Slice(buf, data_size + HEADER_SIZE, buf.Length);\n                }\n                else\n                {\n                    break;\n                }\n            }\n        }\n\n        public List<string> swap_msgs()\n        {\n            List<string> ret = msgs;\n            msgs = new List<string>();\n            return ret;\n        }\n\n        public byte[] pack(String content)\n        {\n            int len = content.Length;\n            byte[] size = BitConverter.GetBytes(len);\n            if (!BitConverter.IsLittleEndian)\n            {\n                //reverse it so we get little endian.\n                Array.Reverse(size);\n            }\n            byte[] body = System.Text.Encoding.Default.GetBytes(content);\n            byte[] ret = Combine(size, body);\n            return ret;\n        }\n\n        private static byte[] Combine(byte[] first, byte[] second)\n        {\n            byte[] ret = new byte[first.Length + second.Length];\n            Buffer.BlockCopy(first, 0, ret, 0, first.Length);\n            Buffer.BlockCopy(second, 0, ret, first.Length, second.Length);\n            return ret;\n        }\n\n        public byte[] Slice(byte[] source, int start, int end)\n        {\n            int length = end - start;\n            byte[] ret = new byte[length];\n            Array.Copy(source, start, ret, 0, length);\n            return ret;\n        }\n    }\n\n\n    /// <summary>\n    /// \u5f02\u6b65TCP\u670d\u52a1\u5668\n    /// </summary>\n    public class AsyncTcpServer : IDisposable\n    {\n        #region Fields\n\n        private TcpListener _listener;\n        private ConcurrentDictionary<string, TcpClientState> _clients;\n        private bool _disposed = false;\n\n        #endregion\n\n        #region Ctors\n\n        /// <summary>\n        /// \u5f02\u6b65TCP\u670d\u52a1\u5668\n        /// </summary>\n        /// <param name=\"listenPort\">\u76d1\u542c\u7684\u7aef\u53e3</param>\n        public AsyncTcpServer(int listenPort)\n            : this(IPAddress.Any, listenPort)\n        {\n        }\n\n        /// <summary>\n        /// \u5f02\u6b65TCP\u670d\u52a1\u5668\n        /// </summary>\n        /// <param name=\"localEP\">\u76d1\u542c\u7684\u7ec8\u7ed3\u70b9</param>\n        public AsyncTcpServer(IPEndPoint localEP)\n            : this(localEP.Address, localEP.Port)\n        {\n        }\n\n        /// <summary>\n        /// \u5f02\u6b65TCP\u670d\u52a1\u5668\n        /// </summary>\n        /// <param name=\"localIPAddress\">\u76d1\u542c\u7684IP\u5730\u5740</param>\n        /// <param name=\"listenPort\">\u76d1\u542c\u7684\u7aef\u53e3</param>\n        public AsyncTcpServer(IPAddress localIPAddress, int listenPort)\n        {\n            this.Address = localIPAddress;\n            this.Port = listenPort;\n            this.Encoding = Encoding.Default;\n\n            _clients = new ConcurrentDictionary<string, TcpClientState>();\n\n            _listener = new TcpListener(Address, Port);\n            // _listener.AllowNatTraversal(true);\n        }\n\n        #endregion\n\n        #region Properties\n\n        /// <summary>\n        /// \u670d\u52a1\u5668\u662f\u5426\u6b63\u5728\u8fd0\u884c\n        /// </summary>\n        public bool IsRunning { get; private set; }\n\n        /// <summary>\n        /// \u76d1\u542c\u7684IP\u5730\u5740\n        /// </summary>\n        public IPAddress Address { get; private set; }\n\n        /// <summary>\n        /// \u76d1\u542c\u7684\u7aef\u53e3\n        /// </summary>\n        public int Port { get; private set; }\n\n        /// <summary>\n        /// \u901a\u4fe1\u4f7f\u7528\u7684\u7f16\u7801\n        /// </summary>\n        public Encoding Encoding { get; set; }\n\n        #endregion\n\n        #region Server\n\n        /// <summary>\n        /// \u542f\u52a8\u670d\u52a1\u5668\n        /// </summary>\n        /// <returns>\u5f02\u6b65TCP\u670d\u52a1\u5668</returns>\n        public AsyncTcpServer Start()\n        {\n#if OPEN_DEBUG_LOG\n            Debug.Log(\"start server\");\n#endif\n            return Start(10);\n        }\n\n        /// <summary>\n        /// \u542f\u52a8\u670d\u52a1\u5668\n        /// </summary>\n        /// <param name=\"backlog\">\u670d\u52a1\u5668\u6240\u5141\u8bb8\u7684\u6302\u8d77\u8fde\u63a5\u5e8f\u5217\u7684\u6700\u5927\u957f\u5ea6</param>\n        /// <returns>\u5f02\u6b65TCP\u670d\u52a1\u5668</returns>\n        public AsyncTcpServer Start(int backlog)\n        {\n            if (IsRunning)\n                return this;\n\n            IsRunning = true;\n\n            _listener.Start(backlog);\n            ContinueAcceptTcpClient(_listener);\n\n            return this;\n        }\n\n        /// <summary>\n        /// \u505c\u6b62\u670d\u52a1\u5668\n        /// </summary>\n        /// <returns>\u5f02\u6b65TCP\u670d\u52a1\u5668</returns>\n        public AsyncTcpServer Stop()\n        {\n            if (!IsRunning)\n                return this;\n\n            try\n            {\n                _listener.Stop();\n\n                foreach (var client in _clients.Values)\n                {\n                    client.TcpClient.Client.Disconnect(false);\n                }\n                _clients.Clear();\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n            catch (SocketException ex)\n            {\n                Debug.LogException(ex);\n            }\n\n            IsRunning = false;\n\n            return this;\n        }\n\n        private void ContinueAcceptTcpClient(TcpListener tcpListener)\n        {\n            try\n            {\n                tcpListener.BeginAcceptTcpClient(new AsyncCallback(HandleTcpClientAccepted), tcpListener);\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n            catch (SocketException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        #endregion\n\n        #region Receive\n\n        private void HandleTcpClientAccepted(IAsyncResult ar)\n        {\n            if (!IsRunning)\n                return;\n\n            TcpListener tcpListener = (TcpListener)ar.AsyncState;\n\n            TcpClient tcpClient = tcpListener.EndAcceptTcpClient(ar);\n            if (!tcpClient.Connected)\n                return;\n\n            byte[] buffer = new byte[tcpClient.ReceiveBufferSize];\n            SimpleProtocolFilter prot = new SimpleProtocolFilter();\n            TcpClientState internalClient = new TcpClientState(tcpClient, buffer, prot);\n\n            // add client connection to cache\n            string tcpClientKey = internalClient.TcpClient.Client.RemoteEndPoint.ToString();\n            _clients.AddOrUpdate(tcpClientKey, internalClient, (n, o) =>\n            {\n                return internalClient;\n            });\n            RaiseClientConnected(tcpClient);\n\n            // begin to read data\n            NetworkStream networkStream = internalClient.NetworkStream;\n            ContinueReadBuffer(internalClient, networkStream);\n\n            // keep listening to accept next connection\n            ContinueAcceptTcpClient(tcpListener);\n        }\n\n        private void HandleDatagramReceived(IAsyncResult ar)\n        {\n            if (!IsRunning)\n                return;\n\n            try\n            {\n                TcpClientState internalClient = (TcpClientState)ar.AsyncState;\n                if (!internalClient.TcpClient.Connected)\n                    return;\n\n                NetworkStream networkStream = internalClient.NetworkStream;\n\n                int numberOfReadBytes = 0;\n                try\n                {\n                    // if the remote host has shutdown its connection, \n                    // read will immediately return with zero bytes.\n                    numberOfReadBytes = networkStream.EndRead(ar);\n                }\n                catch (Exception ex)\n                {\n                    Debug.LogException(ex);\n                    numberOfReadBytes = 0;\n                }\n\n                if (numberOfReadBytes == 0)\n                {\n                    // connection has been closed\n                    TcpClientState internalClientToBeThrowAway;\n                    string tcpClientKey = internalClient.TcpClient.Client.RemoteEndPoint.ToString();\n                    _clients.TryRemove(tcpClientKey, out internalClientToBeThrowAway);\n                    RaiseClientDisconnected(internalClient.TcpClient);\n                    return;\n                }\n\n                // received byte and trigger event notification\n                var receivedBytes = new byte[numberOfReadBytes];\n                Array.Copy(internalClient.Buffer, 0, receivedBytes, 0, numberOfReadBytes);\n                // input bytes into protofilter\n                internalClient.Prot.input(receivedBytes);\n                RaiseDatagramReceived(internalClient, receivedBytes);\n                // RaisePlaintextReceived(internalClient.TcpClient, receivedBytes);\n\n                // continue listening for tcp datagram packets\n                ContinueReadBuffer(internalClient, networkStream);\n            }\n            catch (InvalidOperationException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        private void ContinueReadBuffer(TcpClientState internalClient, NetworkStream networkStream)\n        {\n            try\n            {\n                networkStream.BeginRead(internalClient.Buffer, 0, internalClient.Buffer.Length, HandleDatagramReceived, internalClient);\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        #endregion\n\n        #region Events\n\n        /// <summary>\n        /// \u63a5\u6536\u5230\u6570\u636e\u62a5\u6587\u4e8b\u4ef6\n        /// </summary>\n        public event EventHandler<TcpDatagramReceivedEventArgs<byte[]>> DatagramReceived;\n        /// <summary>\n        /// \u63a5\u6536\u5230\u6570\u636e\u62a5\u6587\u660e\u6587\u4e8b\u4ef6\n        /// </summary>\n        public event EventHandler<TcpDatagramReceivedEventArgs<string>> PlaintextReceived;\n\n        private void RaiseDatagramReceived(TcpClientState sender, byte[] datagram)\n        {\n            if (DatagramReceived != null)\n            {\n                DatagramReceived(this, new TcpDatagramReceivedEventArgs<byte[]>(sender, datagram));\n            }\n        }\n\n        private void RaisePlaintextReceived(TcpClientState sender, byte[] datagram)\n        {\n            if (PlaintextReceived != null)\n            {\n                PlaintextReceived(this, new TcpDatagramReceivedEventArgs<string>(sender, this.Encoding.GetString(datagram, 0, datagram.Length)));\n            }\n        }\n\n        /// <summary>\n        /// \u4e0e\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u5df2\u5efa\u7acb\u4e8b\u4ef6\n        /// </summary>\n        public event EventHandler<TcpClientConnectedEventArgs> ClientConnected;\n        /// <summary>\n        /// \u4e0e\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u5df2\u65ad\u5f00\u4e8b\u4ef6\n        /// </summary>\n        public event EventHandler<TcpClientDisconnectedEventArgs> ClientDisconnected;\n\n        private void RaiseClientConnected(TcpClient tcpClient)\n        {\n            if (ClientConnected != null)\n            {\n                ClientConnected(this, new TcpClientConnectedEventArgs(tcpClient));\n            }\n        }\n\n        private void RaiseClientDisconnected(TcpClient tcpClient)\n        {\n            if (ClientDisconnected != null)\n            {\n                ClientDisconnected(this, new TcpClientDisconnectedEventArgs(tcpClient));\n            }\n        }\n\n        #endregion\n\n        #region Send\n\n        private void GuardRunning()\n        {\n            if (!IsRunning)\n                throw new InvalidProgramException(\"This TCP server has not been started yet.\");\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"tcpClient\">\u5ba2\u6237\u7aef</param>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void Send(TcpClient tcpClient, byte[] datagram)\n        {\n            GuardRunning();\n\n            if (tcpClient == null)\n                throw new ArgumentNullException(\"tcpClient\");\n\n            if (datagram == null)\n                throw new ArgumentNullException(\"datagram\");\n\n            try\n            {\n                NetworkStream stream = tcpClient.GetStream();\n                if (stream.CanWrite)\n                {\n                    stream.BeginWrite(datagram, 0, datagram.Length, HandleDatagramWritten, tcpClient);\n                }\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"tcpClient\">\u5ba2\u6237\u7aef</param>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void Send(TcpClient tcpClient, string datagram)\n        {\n            Send(tcpClient, this.Encoding.GetBytes(datagram));\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6240\u6709\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SendToAll(byte[] datagram)\n        {\n            GuardRunning();\n\n            foreach (var client in _clients.Values)\n            {\n                Send(client.TcpClient, datagram);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6240\u6709\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SendToAll(string datagram)\n        {\n            GuardRunning();\n\n            SendToAll(this.Encoding.GetBytes(datagram));\n        }\n\n        private void HandleDatagramWritten(IAsyncResult ar)\n        {\n            try\n            {\n                ((TcpClient)ar.AsyncState).GetStream().EndWrite(ar);\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n            catch (InvalidOperationException ex)\n            {\n                Debug.LogException(ex);\n            }\n            catch (IOException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"tcpClient\">\u5ba2\u6237\u7aef</param>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SyncSend(TcpClient tcpClient, byte[] datagram)\n        {\n            GuardRunning();\n\n            if (tcpClient == null)\n                throw new ArgumentNullException(\"tcpClient\");\n\n            if (datagram == null)\n                throw new ArgumentNullException(\"datagram\");\n\n            try\n            {\n                NetworkStream stream = tcpClient.GetStream();\n                if (stream.CanWrite)\n                {\n                    stream.Write(datagram, 0, datagram.Length);\n                }\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"tcpClient\">\u5ba2\u6237\u7aef</param>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SyncSend(TcpClient tcpClient, string datagram)\n        {\n            SyncSend(tcpClient, this.Encoding.GetBytes(datagram));\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6240\u6709\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SyncSendToAll(byte[] datagram)\n        {\n            GuardRunning();\n\n            foreach (var client in _clients.Values)\n            {\n                SyncSend(client.TcpClient, datagram);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6240\u6709\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SyncSendToAll(string datagram)\n        {\n            GuardRunning();\n\n            SyncSendToAll(this.Encoding.GetBytes(datagram));\n        }\n\n        #endregion\n\n        #region IDisposable Members\n\n        /// <summary>\n        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n        /// </summary>\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n\n        /// <summary>\n        /// Releases unmanaged and - optionally - managed resources\n        /// </summary>\n        /// <param name=\"disposing\"><c>true</c> to release both managed and unmanaged resources; \n        /// <c>false</c> to release only unmanaged resources.</param>\n        protected virtual void Dispose(bool disposing)\n        {\n            if (!this._disposed)\n            {\n                if (disposing)\n                {\n                    try\n                    {\n                        Stop();\n\n                        if (_listener != null)\n                        {\n                            _listener = null;\n                        }\n                    }\n                    catch (SocketException ex)\n                    {\n                        Debug.LogException(ex);\n                    }\n                }\n\n                _disposed = true;\n            }\n        }\n\n        #endregion\n    }\n}", "cropped_inputs": "using System;\nusing System.Threading;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing UnityEngine;\n\nnamespace TcpServer\n{\n    public interface ProtoFilter\n    {\n        void input(byte[] data);\n\n        List<string> swap_msgs();\n    }\n\n    public class SimpleProtocolFilter : ProtoFilter\n    {\n        /* \u7b80\u5355\u534f\u8bae\u8fc7\u6ee4\u5668\n\t\t\u534f\u8bae\u6309\u7167 [\u6709\u6548\u6570\u636e\u5b57\u8282\u6570][\u6709\u6548\u6570\u636e] \u8fd9\u79cd\u534f\u8bae\u5305\u7684\u683c\u5f0f\u8fdb\u884c\u6253\u5305\u548c\u89e3\u5305\n\t\t[\u6709\u6548\u6570\u636e\u5b57\u8282\u6570]\u957f\u5ea6HEADER_SIZE\u5b57\u8282\n\t\t[\u6709\u6548\u6570\u636e]\u957f\u5ea6\u6709\u6548\u6570\u636e\u5b57\u8282\u6570\u5b57\u8282\n\t\t\u672c\u7c7b\u6309\u7167\u8fd9\u79cd\u65b9\u5f0f\uff0c\u987a\u5e8f\u4ece\u6570\u636e\u6d41\u4e2d\u53d6\u51fa\u6570\u636e\u8fdb\u884c\u62fc\u63a5\uff0c\u4e00\u65e6\u63a5\u6536\u5b8c\u4e00\u4e2a\u5b8c\u6574\u7684\u534f\u8bae\u5305\uff0c\u5c31\u4f1a\u5c06\u534f\u8bae\u5305\u8fd4\u56de\n\t\t[\u6709\u6548\u6570\u636e]\u5b57\u6bb5\u63a5\u6536\u5230\u540e\u4f1a\u6309\u7167utf-8\u8fdb\u884c\u89e3\u7801\uff0c\u56e0\u4e3a\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u662f\u7528utf-8\u8fdb\u884c\u7f16\u7801\u7684\n\t\t\u6240\u6709\u7f16\u89e3\u7801\u7684\u64cd\u4f5c\u5728\u8be5\u7c7b\u4e2d\u5b8c\u6210\n\t\t*/\n\n        private byte[] buf = new byte[0];\n        private int HEADER_SIZE = 4;\n        private List<string> msgs = new List<string>();\n\n        public void input(byte[] data)\n        {\n            buf = Combine(buf, data);\n\n            while (buf.Length > HEADER_SIZE)\n            {\n                int data_size = BitConverter.ToInt32(buf, 0);\n                if (buf.Length >= data_size + HEADER_SIZE)\n                {\n                    byte[] data_body = Slice(buf, HEADER_SIZE, data_size + HEADER_SIZE);\n                    string content = System.Text.Encoding.Default.GetString(data_body);\n                    msgs.Add(content);\n                    buf = Slice(buf, data_size + HEADER_SIZE, buf.Length);\n                }\n                else\n                {\n                    break;\n                }\n            }\n        }\n\n        public List<string> swap_msgs()\n        {\n            List<string> ret = msgs;\n            msgs = new List<string>();\n            return ret;\n        }\n\n        public byte[] pack(String content)\n        {\n            int len = content.Length;\n            byte[] size = BitConverter.GetBytes(len);\n            if (!BitConverter.IsLittleEndian)\n            {\n                //reverse it so we get little endian.\n                Array.Reverse(size);\n            }\n            byte[] body = System.Text.Encoding.Default.GetBytes(content);\n            byte[] ret = Combine(size, body);\n            return ret;\n        }\n\n        private static byte[] Combine(byte[] first, byte[] second)\n        {\n            byte[] ret = new byte[first.Length + second.Length];\n            Buffer.BlockCopy(first, 0, ret, 0, first.Length);\n            Buffer.BlockCopy(second, 0, ret, first.Length, second.Length);\n            return ret;\n        }\n\n        public byte[] Slice(byte[] source, int start, int end)\n        {\n            int length = end - start;\n            byte[] ret = new byte[length];\n            Array.Copy(source, start, ret, 0, length);\n            return ret;\n        }\n    }\n\n\n    /// <summary>\n    /// \u5f02\u6b65TCP\u670d\u52a1\u5668\n    /// </summary>\n    public class AsyncTcpServer : IDisposable\n    {\n        #region Fields\n\n        private TcpListener _listener;\n        private ConcurrentDictionary<string, TcpClientState> _clients;\n        private bool _disposed = false;\n\n        #endregion\n\n        #region Ctors\n\n        /// <summary>\n        /// \u5f02\u6b65TCP\u670d\u52a1\u5668\n        /// </summary>\n        /// <param name=\"listenPort\">\u76d1\u542c\u7684\u7aef\u53e3</param>\n        public AsyncTcpServer(int listenPort)\n            : this(IPAddress.Any, listenPort)\n        {\n        }\n\n        /// <summary>\n        /// \u5f02\u6b65TCP\u670d\u52a1\u5668\n        /// </summary>\n        /// <param name=\"localEP\">\u76d1\u542c\u7684\u7ec8\u7ed3\u70b9</param>\n        public AsyncTcpServer(IPEndPoint localEP)\n            : this(localEP.Address, localEP.Port)\n        {\n        }\n\n        /// <summary>\n        /// \u5f02\u6b65TCP\u670d\u52a1\u5668\n        /// </summary>\n        /// <param name=\"localIPAddress\">\u76d1\u542c\u7684IP\u5730\u5740</param>\n        /// <param name=\"listenPort\">\u76d1\u542c\u7684\u7aef\u53e3</param>\n        public AsyncTcpServer(IPAddress localIPAddress, int listenPort)\n        {\n            this.Address = localIPAddress;\n            this.Port = listenPort;\n            this.Encoding = Encoding.Default;\n\n            _clients = new ConcurrentDictionary<string, TcpClientState>();\n\n            _listener = new TcpListener(Address, Port);\n            // _listener.AllowNatTraversal(true);\n        }\n\n        #endregion\n\n        #region Properties\n\n        /// <summary>\n        /// \u670d\u52a1\u5668\u662f\u5426\u6b63\u5728\u8fd0\u884c\n        /// </summary>\n        public bool IsRunning { get; private set; }\n\n        /// <summary>\n        /// \u76d1\u542c\u7684IP\u5730\u5740\n        /// </summary>\n        public IPAddress Address { get; private set; }\n\n        /// <summary>\n        /// \u76d1\u542c\u7684\u7aef\u53e3\n        /// </summary>\n        public int Port { get; private set; }\n\n        /// <summary>\n        /// \u901a\u4fe1\u4f7f\u7528\u7684\u7f16\u7801\n        /// </summary>\n        public Encoding Encoding { get; set; }\n\n        #endregion\n\n        #region Server\n\n        /// <summary>\n        /// \u542f\u52a8\u670d\u52a1\u5668\n        /// </summary>\n        /// <returns>\u5f02\u6b65TCP\u670d\u52a1\u5668</returns>\n        public AsyncTcpServer Start()\n        {\n#if OPEN_DEBUG_LOG\n            Debug.Log(\"start server\");\n#endif\n            return Start(10);\n        }\n\n        /// <summary>\n        /// \u542f\u52a8\u670d\u52a1\u5668\n        /// </summary>\n        /// <param name=\"backlog\">\u670d\u52a1\u5668\u6240\u5141\u8bb8\u7684\u6302\u8d77\u8fde\u63a5\u5e8f\u5217\u7684\u6700\u5927\u957f\u5ea6(int backlog)\n        {\n            if (IsRunning)\n                return this;\n\n            IsRunning = true;\n\n            _listener.Start(backlog);\n            ContinueAcceptTcpClient(_listener);\n\n            return this;\n        }\n\n        /// <summary>\n        /// \u505c\u6b62\u670d\u52a1\u5668\n        /// </summary>\n        /// <returns>\u5f02\u6b65TCP\u670d\u52a1\u5668</returns>\n        public AsyncTcpServer Stop()\n        {\n            if (!IsRunning)\n                return this;\n\n            try\n            {\n                _listener.Stop();\n\n                foreach (var client in _clients.Values)\n                {\n                    client.TcpClient.Client.Disconnect(false);\n                }\n                _clients.Clear();\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n            catch (SocketException ex)\n            {\n                Debug.LogException(ex);\n            }\n\n            IsRunning = false;\n\n            return this;\n        }\n\n        private void ContinueAcceptTcpClient(TcpListener tcpListener)\n        {\n            try\n            {\n                tcpListener.BeginAcceptTcpClient(new AsyncCallback(HandleTcpClientAccepted), tcpListener);\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n            catch (SocketException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        #endregion\n\n        #region Receive\n\n        private void HandleTcpClientAccepted(IAsyncResult ar)\n        {\n            if (!IsRunning)\n                return;\n\n            TcpListener tcpListener = (TcpListener)ar.AsyncState;\n\n            TcpClient tcpClient = tcpListener.EndAcceptTcpClient(ar);\n            if (!tcpClient.Connected)\n                return;\n\n            byte[] buffer = new byte[tcpClient.ReceiveBufferSize];\n            SimpleProtocolFilter prot = new SimpleProtocolFilter();\n            TcpClientState internalClient = new TcpClientState(tcpClient, buffer, prot);\n\n            // add client connection to cache\n            string tcpClientKey = internalClient.TcpClient.Client.RemoteEndPoint.ToString();\n            _clients.AddOrUpdate(tcpClientKey, internalClient, (n, o) =>\n            {\n                return internalClient;\n            });\n            RaiseClientConnected(tcpClient);\n\n            // begin to read data\n            NetworkStream networkStream = internalClient.NetworkStream;\n            ContinueReadBuffer(internalClient, networkStream);\n\n            // keep listening to accept next connection\n            ContinueAcceptTcpClient(tcpListener);\n        }\n\n        private void HandleDatagramReceived(IAsyncResult ar)\n        {\n            if (!IsRunning)\n                return;\n\n            try\n            {\n                TcpClientState internalClient = (TcpClientState)ar.AsyncState;\n                if (!internalClient.TcpClient.Connected)\n                    return;\n\n                NetworkStream networkStream = internalClient.NetworkStream;\n\n                int numberOfReadBytes = 0;\n                try\n                {\n                    // if the remote host has shutdown its connection, \n                    // read will immediately return with zero bytes.\n                    numberOfReadBytes = networkStream.EndRead(ar);\n                }\n                catch (Exception ex)\n                {\n                    Debug.LogException(ex);\n                    numberOfReadBytes = 0;\n                }\n\n                if (numberOfReadBytes == 0)\n                {\n                    // connection has been closed\n                    TcpClientState internalClientToBeThrowAway;\n                    string tcpClientKey = internalClient.TcpClient.Client.RemoteEndPoint.ToString();\n                    _clients.TryRemove(tcpClientKey, out internalClientToBeThrowAway);\n                    RaiseClientDisconnected(internalClient.TcpClient);\n                    return;\n                }\n\n                // received byte and trigger event notification\n                var receivedBytes = new byte[numberOfReadBytes];\n                Array.Copy(internalClient.Buffer, 0, receivedBytes, 0, numberOfReadBytes);\n                // input bytes into protofilter\n                internalClient.Prot.input(receivedBytes);\n                RaiseDatagramReceived(internalClient, receivedBytes);\n                // RaisePlaintextReceived(internalClient.TcpClient, receivedBytes);\n\n                // continue listening for tcp datagram packets\n                ContinueReadBuffer(internalClient, networkStream);\n            }\n            catch (InvalidOperationException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        private void ContinueReadBuffer(TcpClientState internalClient, NetworkStream networkStream)\n        {\n            try\n            {\n                networkStream.BeginRead(internalClient.Buffer, 0, internalClient.Buffer.Length, HandleDatagramReceived, internalClient);\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        #endregion\n\n        #region Events\n\n        /// <summary>\n        /// \u63a5\u6536\u5230\u6570\u636e\u62a5\u6587\u4e8b\u4ef6\n        /// </summary>\n        public event EventHandler<TcpDatagramReceivedEventArgs<byte[]>> DatagramReceived;\n        /// <summary>\n        /// \u63a5\u6536\u5230\u6570\u636e\u62a5\u6587\u660e\u6587\u4e8b\u4ef6\n        /// </summary>\n        public event EventHandler<TcpDatagramReceivedEventArgs<string>> PlaintextReceived;\n\n        private void RaiseDatagramReceived(TcpClientState sender, byte[] datagram)\n        {\n            if (DatagramReceived!= null)\n            {\n                DatagramReceived(this, new TcpDatagramReceivedEventArgs<byte[]>(sender, datagram));\n            }\n        }\n\n        private void RaisePlaintextReceived(TcpClientState sender, byte[] datagram)\n        {\n            if (PlaintextReceived!= null)\n            {\n                PlaintextReceived(this, new TcpDatagramReceivedEventArgs<string>(sender, this.Encoding.GetString(datagram, 0, datagram.Length)));\n            }\n        }\n\n        /// <summary>\n        /// \u4e0e\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u5df2\u5efa\u7acb\u4e8b\u4ef6\n        /// </summary>\n        public event EventHandler<TcpClientConnectedEventArgs> ClientConnected;\n        /// <summary>\n        /// \u4e0e\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u5df2\u65ad\u5f00\u4e8b\u4ef6\n        /// </summary>\n        public event EventHandler<TcpClientDisconnectedEventArgs> ClientDisconnected;\n\n        private void RaiseClientConnected(TcpClient tcpClient)\n        {\n            if (ClientConnected!= null)\n            {\n                ClientConnected(this, new TcpClientConnectedEventArgs(tcpClient));\n            }\n        }\n\n        private void RaiseClientDisconnected(TcpClient tcpClient)\n        {\n            if (ClientDisconnected!= null)\n            {\n                ClientDisconnected(this, new TcpClientDisconnectedEventArgs(tcpClient));\n            }\n        }\n\n        #endregion\n\n        #region Send\n\n        private void GuardRunning()\n        {\n            if (!IsRunning)\n                throw new InvalidProgramException(\"This TCP server has not been started yet.\");\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"tcpClient\">\u5ba2\u6237\u7aef</param>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void Send(TcpClient tcpClient, byte[] datagram)\n        {\n            GuardRunning();\n\n            if (tcpClient == null)\n                throw new ArgumentNullException(\"tcpClient\");\n\n            if (datagram == null)\n                throw new ArgumentNullException(\"datagram\");\n\n            try\n            {\n                NetworkStream stream = tcpClient.GetStream();\n                if (stream.CanWrite)\n                {\n                    stream.BeginWrite(datagram, 0, datagram.Length, HandleDatagramWritten, tcpClient);\n                }\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"tcpClient\">\u5ba2\u6237\u7aef</param>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void Send(TcpClient tcpClient, string datagram)\n        {\n            Send(tcpClient, this.Encoding.GetBytes(datagram));\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6240\u6709\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SendToAll(byte[] datagram)\n        {\n            GuardRunning();\n\n            foreach (var client in _clients.Values)\n            {\n                Send(client.TcpClient, datagram);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6240\u6709\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SendToAll(string datagram)\n        {\n            GuardRunning();\n\n            SendToAll(this.Encoding.GetBytes(datagram));\n        }\n\n        private void HandleDatagramWritten(IAsyncResult ar)\n        {\n            try\n            {\n                ((TcpClient)ar.AsyncState).GetStream().EndWrite(ar);\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n            catch (InvalidOperationException ex)\n            {\n                Debug.LogException(ex);\n            }\n            catch (IOException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"tcpClient\">\u5ba2\u6237\u7aef</param>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SyncSend(TcpClient tcpClient, byte[] datagram)\n        {\n            GuardRunning();\n\n            if (tcpClient == null)\n                throw new ArgumentNullException(\"tcpClient\");\n\n            if (datagram == null)\n                throw new ArgumentNullException(\"datagram\");\n\n            try\n            {\n                NetworkStream stream = tcpClient.GetStream();\n                if (stream.CanWrite)\n                {\n                    stream.Write(datagram, 0, datagram.Length);\n                }\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"tcpClient\">\u5ba2\u6237\u7aef</param>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SyncSend(TcpClient tcpClient, string datagram)\n        {\n            SyncSend(tcpClient, this.Encoding.GetBytes(datagram));\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6240\u6709\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SyncSendToAll(byte[] datagram)\n        {\n            GuardRunning();\n\n            foreach (var client in _clients.Values)\n            {\n                SyncSend(client.TcpClient, datagram);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6240\u6709\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SyncSendToAll(string datagram)\n        {\n            GuardRunning();\n\n            SyncSendToAll(this.Encoding.GetBytes(datagram));\n        }\n\n        #endregion\n\n        #region IDisposable Members\n\n        /// <summary>\n        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n        /// </summary>\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n\n        /// <summary>\n        /// Releases unmanaged and - optionally - managed resources\n        /// </summary>\n        /// <param name=\"disposing\"><c>true</c> to release both managed and unmanaged resources; \n        /// <c>false</c> to release only unmanaged resources.</param>\n        protected virtual void Dispose(bool disposing)\n        {\n            if (!this._disposed)\n            {\n                if (disposing)\n                {\n                    try\n                    {\n                        Stop();\n\n                        if (_listener!= null)\n                        {\n                            _listener = null;\n                        }\n                    }\n                    catch (SocketException ex)\n                    {\n                        Debug.LogException(ex);\n                    }\n                }\n\n                _disposed = true;\n            }\n        }\n\n        #endregion\n    }\n}", "starcoder_inputs": "<fim_prefix>using System;\nusing System.Threading;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing UnityEngine;\n\nnamespace TcpServer\n{\n    public interface ProtoFilter\n    {\n        void input(byte[] data);\n\n        List<string> swap_msgs();\n    }\n\n    public class SimpleProtocolFilter : ProtoFilter\n    {\n        /* \u7b80\u5355\u534f\u8bae\u8fc7\u6ee4\u5668\n\t\t\u534f\u8bae\u6309\u7167 [\u6709\u6548\u6570\u636e\u5b57\u8282\u6570][\u6709\u6548\u6570\u636e] \u8fd9\u79cd\u534f\u8bae\u5305\u7684\u683c\u5f0f\u8fdb\u884c\u6253\u5305\u548c\u89e3\u5305\n\t\t[\u6709\u6548\u6570\u636e\u5b57\u8282\u6570]\u957f\u5ea6HEADER_SIZE\u5b57\u8282\n\t\t[\u6709\u6548\u6570\u636e]\u957f\u5ea6\u6709\u6548\u6570\u636e\u5b57\u8282\u6570\u5b57\u8282\n\t\t\u672c\u7c7b\u6309\u7167\u8fd9\u79cd\u65b9\u5f0f\uff0c\u987a\u5e8f\u4ece\u6570\u636e\u6d41\u4e2d\u53d6\u51fa\u6570\u636e\u8fdb\u884c\u62fc\u63a5\uff0c\u4e00\u65e6\u63a5\u6536\u5b8c\u4e00\u4e2a\u5b8c\u6574\u7684\u534f\u8bae\u5305\uff0c\u5c31\u4f1a\u5c06\u534f\u8bae\u5305\u8fd4\u56de\n\t\t[\u6709\u6548\u6570\u636e]\u5b57\u6bb5\u63a5\u6536\u5230\u540e\u4f1a\u6309\u7167utf-8\u8fdb\u884c\u89e3\u7801\uff0c\u56e0\u4e3a\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u662f\u7528utf-8\u8fdb\u884c\u7f16\u7801\u7684\n\t\t\u6240\u6709\u7f16\u89e3\u7801\u7684\u64cd\u4f5c\u5728\u8be5\u7c7b\u4e2d\u5b8c\u6210\n\t\t*/\n\n        private byte[] buf = new byte[0];\n        private int HEADER_SIZE = 4;\n        private List<string> msgs = new List<string>();\n\n        public void input(byte[] data)\n        {\n            buf = Combine(buf, data);\n\n            while (buf.Length > HEADER_SIZE)\n            {\n                int data_size = BitConverter.ToInt32(buf, 0);\n                if (buf.Length >= data_size + HEADER_SIZE)\n                {\n                    byte[] data_body = Slice(buf, HEADER_SIZE, data_size + HEADER_SIZE);\n                    string content = System.Text.Encoding.Default.GetString(data_body);\n                    msgs.Add(content);\n                    buf = Slice(buf, data_size + HEADER_SIZE, buf.Length);\n                }\n                else\n                {\n                    break;\n                }\n            }\n        }\n\n        public List<string> swap_msgs()\n        {\n            List<string> ret = msgs;\n            msgs = new List<string>();\n            return ret;\n        }\n\n        public byte[] pack(String content)\n        {\n            int len = content.Length;\n            byte[] size = BitConverter.GetBytes(len);\n            if (!BitConverter.IsLittleEndian)\n            {\n                //reverse it so we get little endian.\n                Array.Reverse(size);\n            }\n            byte[] body = System.Text.Encoding.Default.GetBytes(content);\n            byte[] ret = Combine(size, body);\n            return ret;\n        }\n\n        private static byte[] Combine(byte[] first, byte[] second)\n        {\n            byte[] ret = new byte[first.Length + second.Length];\n            Buffer.BlockCopy(first, 0, ret, 0, first.Length);\n            Buffer.BlockCopy(second, 0, ret, first.Length, second.Length);\n            return ret;\n        }\n\n        public byte[] Slice(byte[] source, int start, int end)\n        {\n            int length = end - start;\n            byte[] ret = new byte[length];\n            Array.Copy(source, start, ret, 0, length);\n            return ret;\n        }\n    }\n\n\n    /// <summary>\n    /// \u5f02\u6b65TCP\u670d\u52a1\u5668\n    /// </summary>\n    public class AsyncTcpServer : IDisposable\n    {\n        #region Fields\n\n        private TcpListener _listener;\n        private ConcurrentDictionary<string, TcpClientState> _clients;\n        private bool _disposed = false;\n\n        #endregion\n\n        #region Ctors\n\n        /// <summary>\n        /// \u5f02\u6b65TCP\u670d\u52a1\u5668\n        /// </summary>\n        /// <param name=\"listenPort\">\u76d1\u542c\u7684\u7aef\u53e3</param>\n        public AsyncTcpServer(int listenPort)\n            : this(IPAddress.Any, listenPort)\n        {\n        }\n\n        /// <summary>\n        /// \u5f02\u6b65TCP\u670d\u52a1\u5668\n        /// </summary>\n        /// <param name=\"localEP\">\u76d1\u542c\u7684\u7ec8\u7ed3\u70b9</param>\n        public AsyncTcpServer(IPEndPoint localEP)\n            : this(localEP.Address, localEP.Port)\n        {\n        }\n\n        /// <summary>\n        /// \u5f02\u6b65TCP\u670d\u52a1\u5668\n        /// </summary>\n        /// <param name=\"localIPAddress\">\u76d1\u542c\u7684IP\u5730\u5740</param>\n        /// <param name=\"listenPort\">\u76d1\u542c\u7684\u7aef\u53e3</param>\n        public AsyncTcpServer(IPAddress localIPAddress, int listenPort)\n        {\n            this.Address = localIPAddress;\n            this.Port = listenPort;\n            this.Encoding = Encoding.Default;\n\n            _clients = new ConcurrentDictionary<string, TcpClientState>();\n\n            _listener = new TcpListener(Address, Port);\n            // _listener.AllowNatTraversal(true);\n        }\n\n        #endregion\n\n        #region Properties\n\n        /// <summary>\n        /// \u670d\u52a1\u5668\u662f\u5426\u6b63\u5728\u8fd0\u884c\n        /// </summary>\n        public bool IsRunning { get; private set; }\n\n        /// <summary>\n        /// \u76d1\u542c\u7684IP\u5730\u5740\n        /// </summary>\n        public IPAddress Address { get; private set; }\n\n        /// <summary>\n        /// \u76d1\u542c\u7684\u7aef\u53e3\n        /// </summary>\n        public int Port { get; private set; }\n\n        /// <summary>\n        /// \u901a\u4fe1\u4f7f\u7528\u7684\u7f16\u7801\n        /// </summary>\n        public Encoding Encoding { get; set; }\n\n        #endregion\n\n        #region Server\n\n        /// <summary>\n        /// \u542f\u52a8\u670d\u52a1\u5668\n        /// </summary>\n        /// <returns>\u5f02\u6b65TCP\u670d\u52a1\u5668</returns>\n        public AsyncTcpServer Start()\n        {\n#if OPEN_DEBUG_LOG\n            Debug.Log(\"start server\");\n#endif\n            return Start(10);\n        }\n\n        /// <summary>\n        /// \u542f\u52a8\u670d\u52a1\u5668\n        /// </summary>\n        /// <param name=\"backlog\">\u670d\u52a1\u5668\u6240\u5141\u8bb8\u7684\u6302\u8d77\u8fde\u63a5\u5e8f\u5217\u7684\u6700\u5927\u957f\u5ea6<fim_suffix>(int backlog)\n        {\n            if (IsRunning)\n                return this;\n\n            IsRunning = true;\n\n            _listener.Start(backlog);\n            ContinueAcceptTcpClient(_listener);\n\n            return this;\n        }\n\n        /// <summary>\n        /// \u505c\u6b62\u670d\u52a1\u5668\n        /// </summary>\n        /// <returns>\u5f02\u6b65TCP\u670d\u52a1\u5668</returns>\n        public AsyncTcpServer Stop()\n        {\n            if (!IsRunning)\n                return this;\n\n            try\n            {\n                _listener.Stop();\n\n                foreach (var client in _clients.Values)\n                {\n                    client.TcpClient.Client.Disconnect(false);\n                }\n                _clients.Clear();\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n            catch (SocketException ex)\n            {\n                Debug.LogException(ex);\n            }\n\n            IsRunning = false;\n\n            return this;\n        }\n\n        private void ContinueAcceptTcpClient(TcpListener tcpListener)\n        {\n            try\n            {\n                tcpListener.BeginAcceptTcpClient(new AsyncCallback(HandleTcpClientAccepted), tcpListener);\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n            catch (SocketException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        #endregion\n\n        #region Receive\n\n        private void HandleTcpClientAccepted(IAsyncResult ar)\n        {\n            if (!IsRunning)\n                return;\n\n            TcpListener tcpListener = (TcpListener)ar.AsyncState;\n\n            TcpClient tcpClient = tcpListener.EndAcceptTcpClient(ar);\n            if (!tcpClient.Connected)\n                return;\n\n            byte[] buffer = new byte[tcpClient.ReceiveBufferSize];\n            SimpleProtocolFilter prot = new SimpleProtocolFilter();\n            TcpClientState internalClient = new TcpClientState(tcpClient, buffer, prot);\n\n            // add client connection to cache\n            string tcpClientKey = internalClient.TcpClient.Client.RemoteEndPoint.ToString();\n            _clients.AddOrUpdate(tcpClientKey, internalClient, (n, o) =>\n            {\n                return internalClient;\n            });\n            RaiseClientConnected(tcpClient);\n\n            // begin to read data\n            NetworkStream networkStream = internalClient.NetworkStream;\n            ContinueReadBuffer(internalClient, networkStream);\n\n            // keep listening to accept next connection\n            ContinueAcceptTcpClient(tcpListener);\n        }\n\n        private void HandleDatagramReceived(IAsyncResult ar)\n        {\n            if (!IsRunning)\n                return;\n\n            try\n            {\n                TcpClientState internalClient = (TcpClientState)ar.AsyncState;\n                if (!internalClient.TcpClient.Connected)\n                    return;\n\n                NetworkStream networkStream = internalClient.NetworkStream;\n\n                int numberOfReadBytes = 0;\n                try\n                {\n                    // if the remote host has shutdown its connection, \n                    // read will immediately return with zero bytes.\n                    numberOfReadBytes = networkStream.EndRead(ar);\n                }\n                catch (Exception ex)\n                {\n                    Debug.LogException(ex);\n                    numberOfReadBytes = 0;\n                }\n\n                if (numberOfReadBytes == 0)\n                {\n                    // connection has been closed\n                    TcpClientState internalClientToBeThrowAway;\n                    string tcpClientKey = internalClient.TcpClient.Client.RemoteEndPoint.ToString();\n                    _clients.TryRemove(tcpClientKey, out internalClientToBeThrowAway);\n                    RaiseClientDisconnected(internalClient.TcpClient);\n                    return;\n                }\n\n                // received byte and trigger event notification\n                var receivedBytes = new byte[numberOfReadBytes];\n                Array.Copy(internalClient.Buffer, 0, receivedBytes, 0, numberOfReadBytes);\n                // input bytes into protofilter\n                internalClient.Prot.input(receivedBytes);\n                RaiseDatagramReceived(internalClient, receivedBytes);\n                // RaisePlaintextReceived(internalClient.TcpClient, receivedBytes);\n\n                // continue listening for tcp datagram packets\n                ContinueReadBuffer(internalClient, networkStream);\n            }\n            catch (InvalidOperationException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        private void ContinueReadBuffer(TcpClientState internalClient, NetworkStream networkStream)\n        {\n            try\n            {\n                networkStream.BeginRead(internalClient.Buffer, 0, internalClient.Buffer.Length, HandleDatagramReceived, internalClient);\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        #endregion\n\n        #region Events\n\n        /// <summary>\n        /// \u63a5\u6536\u5230\u6570\u636e\u62a5\u6587\u4e8b\u4ef6\n        /// </summary>\n        public event EventHandler<TcpDatagramReceivedEventArgs<byte[]>> DatagramReceived;\n        /// <summary>\n        /// \u63a5\u6536\u5230\u6570\u636e\u62a5\u6587\u660e\u6587\u4e8b\u4ef6\n        /// </summary>\n        public event EventHandler<TcpDatagramReceivedEventArgs<string>> PlaintextReceived;\n\n        private void RaiseDatagramReceived(TcpClientState sender, byte[] datagram)\n        {\n            if (DatagramReceived!= null)\n            {\n                DatagramReceived(this, new TcpDatagramReceivedEventArgs<byte[]>(sender, datagram));\n            }\n        }\n\n        private void RaisePlaintextReceived(TcpClientState sender, byte[] datagram)\n        {\n            if (PlaintextReceived!= null)\n            {\n                PlaintextReceived(this, new TcpDatagramReceivedEventArgs<string>(sender, this.Encoding.GetString(datagram, 0, datagram.Length)));\n            }\n        }\n\n        /// <summary>\n        /// \u4e0e\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u5df2\u5efa\u7acb\u4e8b\u4ef6\n        /// </summary>\n        public event EventHandler<TcpClientConnectedEventArgs> ClientConnected;\n        /// <summary>\n        /// \u4e0e\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u5df2\u65ad\u5f00\u4e8b\u4ef6\n        /// </summary>\n        public event EventHandler<TcpClientDisconnectedEventArgs> ClientDisconnected;\n\n        private void RaiseClientConnected(TcpClient tcpClient)\n        {\n            if (ClientConnected!= null)\n            {\n                ClientConnected(this, new TcpClientConnectedEventArgs(tcpClient));\n            }\n        }\n\n        private void RaiseClientDisconnected(TcpClient tcpClient)\n        {\n            if (ClientDisconnected!= null)\n            {\n                ClientDisconnected(this, new TcpClientDisconnectedEventArgs(tcpClient));\n            }\n        }\n\n        #endregion\n\n        #region Send\n\n        private void GuardRunning()\n        {\n            if (!IsRunning)\n                throw new InvalidProgramException(\"This TCP server has not been started yet.\");\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"tcpClient\">\u5ba2\u6237\u7aef</param>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void Send(TcpClient tcpClient, byte[] datagram)\n        {\n            GuardRunning();\n\n            if (tcpClient == null)\n                throw new ArgumentNullException(\"tcpClient\");\n\n            if (datagram == null)\n                throw new ArgumentNullException(\"datagram\");\n\n            try\n            {\n                NetworkStream stream = tcpClient.GetStream();\n                if (stream.CanWrite)\n                {\n                    stream.BeginWrite(datagram, 0, datagram.Length, HandleDatagramWritten, tcpClient);\n                }\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"tcpClient\">\u5ba2\u6237\u7aef</param>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void Send(TcpClient tcpClient, string datagram)\n        {\n            Send(tcpClient, this.Encoding.GetBytes(datagram));\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6240\u6709\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SendToAll(byte[] datagram)\n        {\n            GuardRunning();\n\n            foreach (var client in _clients.Values)\n            {\n                Send(client.TcpClient, datagram);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6240\u6709\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SendToAll(string datagram)\n        {\n            GuardRunning();\n\n            SendToAll(this.Encoding.GetBytes(datagram));\n        }\n\n        private void HandleDatagramWritten(IAsyncResult ar)\n        {\n            try\n            {\n                ((TcpClient)ar.AsyncState).GetStream().EndWrite(ar);\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n            catch (InvalidOperationException ex)\n            {\n                Debug.LogException(ex);\n            }\n            catch (IOException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"tcpClient\">\u5ba2\u6237\u7aef</param>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SyncSend(TcpClient tcpClient, byte[] datagram)\n        {\n            GuardRunning();\n\n            if (tcpClient == null)\n                throw new ArgumentNullException(\"tcpClient\");\n\n            if (datagram == null)\n                throw new ArgumentNullException(\"datagram\");\n\n            try\n            {\n                NetworkStream stream = tcpClient.GetStream();\n                if (stream.CanWrite)\n                {\n                    stream.Write(datagram, 0, datagram.Length);\n                }\n            }\n            catch (ObjectDisposedException ex)\n            {\n                Debug.LogException(ex);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6307\u5b9a\u7684\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"tcpClient\">\u5ba2\u6237\u7aef</param>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SyncSend(TcpClient tcpClient, string datagram)\n        {\n            SyncSend(tcpClient, this.Encoding.GetBytes(datagram));\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6240\u6709\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SyncSendToAll(byte[] datagram)\n        {\n            GuardRunning();\n\n            foreach (var client in _clients.Values)\n            {\n                SyncSend(client.TcpClient, datagram);\n            }\n        }\n\n        /// <summary>\n        /// \u53d1\u9001\u62a5\u6587\u81f3\u6240\u6709\u5ba2\u6237\u7aef\n        /// </summary>\n        /// <param name=\"datagram\">\u62a5\u6587</param>\n        public void SyncSendToAll(string datagram)\n        {\n            GuardRunning();\n\n            SyncSendToAll(this.Encoding.GetBytes(datagram));\n        }\n\n        #endregion\n\n        #region IDisposable Members\n\n        /// <summary>\n        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n        /// </summary>\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n\n        /// <summary>\n        /// Releases unmanaged and - optionally - managed resources\n        /// </summary>\n        /// <param name=\"disposing\"><c>true</c> to release both managed and unmanaged resources; \n        /// <c>false</c> to release only unmanaged resources.</param>\n        protected virtual void Dispose(bool disposing)\n        {\n            if (!this._disposed)\n            {\n                if (disposing)\n                {\n                    try\n                    {\n                        Stop();\n\n                        if (_listener!= null)\n                        {\n                            _listener = null;\n                        }\n                    }\n                    catch (SocketException ex)\n                    {\n                        Debug.LogException(ex);\n                    }\n                }\n\n                _disposed = true;\n            }\n        }\n\n        #endregion\n    }\n}<fim_middle>"}
{"inputs": "using Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing Poco;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading;\nusing System.Net.Sockets;\nusing TcpServer;\nusing UnityEngine;\n\npublic class PocoManager : MonoBehaviour\n{\n    public const int versionCode = 6;\n    public int port = 5001;\n    private bool mRunning;\n    public AsyncTcpServer server = null;\n    private RPCParser rpc = null;\n    private SimpleProtocolFilter prot = null;\n    private UnityDumper dumper = new UnityDumper();\n    private ConcurrentDictionary<string, TcpClientState> inbox = new ConcurrentDictionary<string, TcpClientState>();\n    private VRSupport vr_support = new VRSupport();\n    private Dictionary<string, long> debugProfilingData = new Dictionary<string, long>() {\n        { \"dump\", 0 },\n        { \"screenshot\", 0 },\n        { \"handleRpcRequest\", 0 },\n        { \"packRpcResponse\", 0 },\n        { \"sendRpcResponse\", 0 },\n    };\n\n    class RPC : Attribute\n    {\n    }\n\n    void Awake()\n    {\n        Application.runInBackground = true;\n        DontDestroyOnLoad(this);\n        prot = new SimpleProtocolFilter();\n        rpc = new RPCParser();\n        rpc.addRpcMethod(\"isVRSupported\", vr_support.isVRSupported);\n        rpc.addRpcMethod(\"hasMovementFinished\", vr_support.IsQueueEmpty);\n        rpc.addRpcMethod(\"RotateObject\", vr_support.RotateObject);\n        rpc.addRpcMethod(\"ObjectLookAt\", vr_support.ObjectLookAt);\n        rpc.addRpcMethod(\"Screenshot\", Screenshot);\n        rpc.addRpcMethod(\"GetScreenSize\", GetScreenSize);\n        rpc.addRpcMethod(\"Dump\", Dump);\n        rpc.addRpcMethod(\"GetDebugProfilingData\", GetDebugProfilingData);\n        rpc.addRpcMethod(\"SetText\", SetText);\n\n        rpc.addRpcMethod(\"GetSDKVersion\", GetSDKVersion);\n\n        mRunning = true;\n\n        for (int i = 0; i < 5; i++)\n        {\n            this.server = new AsyncTcpServer(port + i);\n            this.server.Encoding = Encoding.UTF8;\n            this.server.ClientConnected +=\n                new EventHandler<TcpClientConnectedEventArgs>(server_ClientConnected);\n            this.server.ClientDisconnected +=\n                new EventHandler<TcpClientDisconnectedEventArgs>(server_ClientDisconnected);\n            this.server.DatagramReceived +=\n                new EventHandler<TcpDatagramReceivedEventArgs<byte[]>>(server_Received);\n            try\n            {\n                this.server.Start();\n                DebugEX.Log(string.Format(\"Tcp server started and listening at {0}\", server.Port));\n                break;\n            }\n            catch (SocketException e)\n            {\n                DebugEX.Log(string.Format(\"Tcp server bind to port {0} Failed!\", server.Port));\n                DebugEX.Log(\"--- Failed Trace Begin ---\");\n                DebugEX.LogError(e);\n                DebugEX.Log(\"--- Failed Trace End ---\");\n                // try next available port\n                this.server = null;\n            }\n        }\n        if (this.server == null)\n        {\n            DebugEX.LogError(string.Format(\"Unable to find an unused port from {0} to {1}\", port, port + 5));\n        }\n        vr_support.ClearCommands();\n    }\n\n    static void server_ClientConnected(object sender, TcpClientConnectedEventArgs e)\n    {\n        DebugEX.Log(string.Format(\"TCP client {0} has connected.\",\n            e.TcpClient.Client.RemoteEndPoint.ToString()));\n    }\n\n    static void server_ClientDisconnected(object sender, TcpClientDisconnectedEventArgs e)\n    {\n        DebugEX.Log(string.Format(\"TCP client {0} has disconnected.\",\n           e.TcpClient.Client.RemoteEndPoint.ToString()));\n    }\n\n    private void server_Received(object sender, TcpDatagramReceivedEventArgs<byte[]> e)\n    {\n        DebugEX.Log(string.Format(\"Client : {0} --> {1}\",\n            e.Client.TcpClient.Client.RemoteEndPoint.ToString(), e.Datagram.Length));\n        TcpClientState internalClient = e.Client;\n        string tcpClientKey = internalClient.TcpClient.Client.RemoteEndPoint.ToString();\n        inbox.AddOrUpdate(tcpClientKey, internalClient, (n, o) =>\n        {\n            return internalClient;\n        });\n    }\n\n    [RPC]\n    private object Dump(List<object> param)\n    {\n        var onlyVisibleNode = true;\n        if (param.Count > 0)\n        {\n            onlyVisibleNode = (bool)param[0];\n        }\n        var sw = new Stopwatch();\n        sw.Start();\n        var h = dumper.dumpHierarchy(onlyVisibleNode);\n        debugProfilingData[\"dump\"] = sw.ElapsedMilliseconds;\n\n        return h;\n    }\n\n    [RPC]\n    private object Screenshot(List<object> param)\n    {\n        var sw = new Stopwatch();\n        sw.Start();\n\n        var tex = new Texture2D(Screen.width, Screen.height, TextureFormat.RGB24, false);\n        tex.ReadPixels(new Rect(0, 0, Screen.width, Screen.height), 0, 0);\n        tex.Apply(false);\n        byte[] fileBytes = tex.EncodeToJPG(80);\n        var b64img = Convert.ToBase64String(fileBytes);\n        debugProfilingData[\"screenshot\"] = sw.ElapsedMilliseconds;\n        return new object[] { b64img, \"jpg\" };\n    }\n\n    [RPC]\n    private object GetScreenSize(List<object> param)\n    {\n        return new float[] { Screen.width, Screen.height };\n    }\n\n    public void stopListening()\n    {\n        mRunning = false;\n        server?.Stop();\n    }\n\n    [RPC]\n    private object GetDebugProfilingData(List<object> param)\n    {\n        return debugProfilingData;\n    }\n\n    [RPC]\n    private object SetText(List<object> param)\n    {\n        var instanceId = Convert.ToInt32(param[0]);\n        var textVal = param[1] as string;\n        foreach (var go in GameObject.FindObjectsOfType<GameObject>())\n        {\n            if (go.GetInstanceID() == instanceId)\n            {\n                return UnityNode.SetText(go, textVal);\n            }\n        }\n        return false;\n    }\n\n    [RPC]\n    private object GetSDKVersion(List<object> param)\n    {\n        return versionCode;\n    }\n\n    void Update()\n    {\n        if (inbox.Count > 0)\n        {\n            foreach (TcpClientState client in inbox.Values)\n            {\n                List<string> msgs = client.Prot.swap_msgs();\n                msgs.ForEach(delegate (string msg)\n                {\n                    var sw = new Stopwatch();\n                    sw.Start();\n                    var t0 = sw.ElapsedMilliseconds;\n                    string response = rpc.HandleMessage(msg);\n                    var t1 = sw.ElapsedMilliseconds;\n                    byte[] bytes = prot.pack(response);\n                    var t2 = sw.ElapsedMilliseconds;\n                    server.Send(client.TcpClient, bytes);\n                    var t3 = sw.ElapsedMilliseconds;\n                    debugProfilingData[\"handleRpcRequest\"] = t1 - t0;\n                    debugProfilingData[\"packRpcResponse\"] = t2 - t1;\n                    TcpClientState internalClientToBeThrowAway;\n                    string tcpClientKey = client.TcpClient.Client.RemoteEndPoint.ToString();\n                    inbox.TryRemove(tcpClientKey, out internalClientToBeThrowAway);\n                });\n            }\n        }\n\n        vr_support.PeekCommand();\n    }\n\n    void OnApplicationQuit()\n    {\n        // stop listening thread\n        stopListening();\n    }\n\n    void OnDestroy()\n    {\n        // stop listening thread\n        stopListening();\n    }\n\n}\n\n\npublic class RPCParser\n{\n    public delegate object RpcMethod(List<object> param);\n\n    protected Dictionary<string, RpcMethod> RPCHandler = new Dictionary<string, RpcMethod>();\n    private JsonSerializerSettings settings = new JsonSerializerSettings()\n    {\n        StringEscapeHandling = StringEscapeHandling.EscapeNonAscii\n    };\n\n    public string HandleMessage(string json)\n    {\n        Dictionary<string, object> data = JsonConvert.DeserializeObject<Dictionary<string, object>>(json, settings);\n        if (data.ContainsKey(\"method\"))\n        {\n            string method = data[\"method\"].ToString();\n            List<object> param = null;\n            if (data.ContainsKey(\"params\"))\n            {\n                param = ((JArray)(data[\"params\"])).ToObject<List<object>>();\n            }\n\n            object idAction = null;\n            if (data.ContainsKey(\"id\"))\n            {\n                // if it have id, it is a request\n                idAction = data[\"id\"];\n            }\n\n            string response = null;\n            object result = null;\n            try\n            {\n                result = RPCHandler[method](param);\n            }\n            catch (Exception e)\n            {\n                // return error response\n                DebugEX.Log(e);\n                response = formatResponseError(idAction, null, e);\n                return response;\n            }\n\n            // return result response\n            response = formatResponse(idAction, result);\n            return response;\n\n        }\n        else\n        {\n            // do not handle response\n            DebugEX.Log(\"ignore message without method\");\n            return null;\n        }\n    }\n\n    // Call a method in the server\n    public string formatRequest(string method, object idAction, List<object> param = null)\n    {\n        Dictionary<string, object> data = new Dictionary<string, object>();\n        data[\"jsonrpc\"] = \"2.0\";\n        data[\"method\"] = method;\n        if (param != null)\n        {\n            data[\"params\"] = JsonConvert.SerializeObject(param, settings);\n        }\n        // if idAction is null, it is a notification\n        if (idAction != null)\n        {\n            data[\"id\"] = idAction;\n        }\n        return JsonConvert.SerializeObject(data, settings);\n    }\n\n    // Send a response from a request the server made to this client\n    public string formatResponse(object idAction, object result)\n    {\n        Dictionary<string, object> rpc = new Dictionary<string, object>();\n        rpc[\"jsonrpc\"] = \"2.0\";\n        rpc[\"id\"] = idAction;\n        rpc[\"result\"] = result;\n        return JsonConvert.SerializeObject(rpc, settings);\n    }\n\n    // Send a error to the server from a request it made to this client\n    public string formatResponseError(object idAction, IDictionary<string, object> data, Exception e)\n    {\n        Dictionary<string, object> rpc = new Dictionary<string, object>();\n        rpc[\"jsonrpc\"] = \"2.0\";\n        rpc[\"id\"] = idAction;\n\n        Dictionary<string, object> errorDefinition = new Dictionary<string, object>();\n        errorDefinition[\"code\"] = 1;\n        errorDefinition[\"message\"] = e.ToString();\n\n        if (data != null)\n        {\n            errorDefinition[\"data\"] = data;\n        }\n\n        rpc[\"error\"] = errorDefinition;\n        return JsonConvert.SerializeObject(rpc, settings);\n    }\n\n    public void addRpcMethod(string name, RpcMethod method)\n    {\n        RPCHandler[name] = method;\n    }\n}\n", "cropped_inputs": "using Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing Poco;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading;\nusing System.Net.Sockets;\nusing TcpServer;\nusing UnityEngine;\n\npublic class PocoManager : MonoBehaviour\n{\n    public const int versionCode = 6;\n    public int port = 5001;\n    private bool mRunning;\n    public AsyncTcpServer server = null;\n    private RPCParser rpc = null;\n    private SimpleProtocolFilter prot = null;\n    private UnityDumper dumper = new UnityDumper();\n    private ConcurrentDictionary<string, TcpClientState> inbox = new ConcurrentDictionary<string, TcpClientState>();\n    private VRSupport vr_support = new VRSupport();\n    private Dictionary<string, long> debugProfilingData = new Dictionary<string, long>() {\n        { \"dump\", 0 },\n        { \"screenshot\", 0 },\n        { \"handleRpcRequest\", 0 },\n        { \"packRpcResponse\", 0 },\n        { \"sendRpcResponse\", 0 },\n    };\n\n    class RPC : Attribute\n    {\n    }\n\n    void Awake()\n    {\n        Application.runInBackground = true;\n        DontDestroyOnLoad(this);\n        prot = new SimpleProtocolFilter();\n        rpc = new RPCParser();\n        rpc.addRpcMethod(\"isVRSupported\", vr_support.isVRSupported);\n        rpc.addRpcMethod(\"hasMovementFinished\", vr_support.IsQueueEmpty);\n        rpc.addRpcMethod(\"RotateObject\", vr_support.RotateObject);\n        rpc.addRpcMethod(\"ObjectLookAt\", vr_support.ObjectLookAt);\n        rpc.addRpcMethod(\"Screenshot\", Screenshot);\n        rpc.addRpcMethod(\"GetScreenSize\", GetScreenSize);\n        rpc.addRpcMethod(\"Dump\", Dump);\n        rpc.addRpcMethod(\"GetDebugProfilingData\", GetDebugProfilingData);\n        rpc.addRpcMethod(\"SetText\", SetText);\n\n        rpc.addRpcMethod(\"GetSDKVersion\", GetSDKVersion);\n\n        mRunning = true;\n\n        for (int i = 0; i < 5; i++)\n        {\n            this.server = new AsyncTcpServer(port + i);\n            this.server.Encoding = Encoding.UTF8;\n            this.server.ClientConnected +=\n                new EventHandler<TcpClientConnectedEventArgs>(server_ClientConnected);\n            this.server.ClientDisconnected +=\n                new EventHandler<TcpClientDisconnectedEventArgs>(server_ClientDisconnected);\n            this.server.DatagramReceived +=\n                new EventHandler<TcpDatagramReceivedEventArgs<byte[]>>(server_Received);\n            try\n            {\n                this.server.Start();\n                DebugEX.Log(string.Format(\"Tcp server started and listening at {0}\", server.Port));\n                break;\n            }\n            catch (SocketException e)\n            {\n                DebugEX.Log(string.Format(\"Tcp server bind to port {0} Failed!\", server.Port));\n                DebugEX.Log(\"--- Failed Trace Begin ---\");\n                DebugEX.LogError(e);\n                DebugEX.Log(\"--- Failed Trace End ---\");\n                // try next available port\n                this.server = null;\n            }\n        }\n        if (this.server == null)\n        {\n            DebugEX.LogError(string.Format(\"Unable to find an unused port from {0} to {1}\", port, port + 5));\n        }\n        vr_support.ClearCommands();\n    }\n\n    static void server_ClientConnected(object sender, TcpClientConnectedEventArgs e)\n    {\n        DebugEX.Log(string.Format(\"TCP client {0} has connected.\",\n            e.TcpClient.Client.RemoteEndPoint.ToString()));\n    }\n\n    static void server_ClientDisconnected(object sender, Tcp0} has disconnected.\",\n           e.TcpClient.Client.RemoteEndPoint.ToString()));\n    }\n\n    private void server_Received(object sender, TcpDatagramReceivedEventArgs<byte[]> e)\n    {\n        DebugEX.Log(string.Format(\"Client : {0} --> {1}\",\n            e.Client.TcpClient.Client.RemoteEndPoint.ToString(), e.Datagram.Length));\n        TcpClientState internalClient = e.Client;\n        string tcpClientKey = internalClient.TcpClient.Client.RemoteEndPoint.ToString();\n        inbox.AddOrUpdate(tcpClientKey, internalClient, (n, o) =>\n        {\n            return internalClient;\n        });\n    }\n\n    [RPC]\n    private object Dump(List<object> param)\n    {\n        var onlyVisibleNode = true;\n        if (param.Count > 0)\n        {\n            onlyVisibleNode = (bool)param[0];\n        }\n        var sw = new Stopwatch();\n        sw.Start();\n        var h = dumper.dumpHierarchy(onlyVisibleNode);\n        debugProfilingData[\"dump\"] = sw.ElapsedMilliseconds;\n\n        return h;\n    }\n\n    [RPC]\n    private object Screenshot(List<object> param)\n    {\n        var sw = new Stopwatch();\n        sw.Start();\n\n        var tex = new Texture2D(Screen.width, Screen.height, TextureFormat.RGB24, false);\n        tex.ReadPixels(new Rect(0, 0, Screen.width, Screen.height), 0, 0);\n        tex.Apply(false);\n        byte[] fileBytes = tex.EncodeToJPG(80);\n        var b64img = Convert.ToBase64String(fileBytes);\n        debugProfilingData[\"screenshot\"] = sw.ElapsedMilliseconds;\n        return new object[] { b64img, \"jpg\" };\n    }\n\n    [RPC]\n    private object GetScreenSize(List<object> param)\n    {\n        return new float[] { Screen.width, Screen.height };\n    }\n\n    public void stopListening()\n    {\n        mRunning = false;\n        server?.Stop();\n    }\n\n    [RPC]\n    private object GetDebugProfilingData(List<object> param)\n    {\n        return debugProfilingData;\n    }\n\n    [RPC]\n    private object SetText(List<object> param)\n    {\n        var instanceId = Convert.ToInt32(param[0]);\n        var textVal = param[1] as string;\n        foreach (var go in GameObject.FindObjectsOfType<GameObject>())\n        {\n            if (go.GetInstanceID() == instanceId)\n            {\n                return UnityNode.SetText(go, textVal);\n            }\n        }\n        return false;\n    }\n\n    [RPC]\n    private object GetSDKVersion(List<object> param)\n    {\n        return versionCode;\n    }\n\n    void Update()\n    {\n        if (inbox.Count > 0)\n        {\n            foreach (TcpClientState client in inbox.Values)\n            {\n                List<string> msgs = client.Prot.swap_msgs();\n                msgs.ForEach(delegate (string msg)\n                {\n                    var sw = new Stopwatch();\n                    sw.Start();\n                    var t0 = sw.ElapsedMilliseconds;\n                    string response = rpc.HandleMessage(msg);\n                    var t1 = sw.ElapsedMilliseconds;\n                    byte[] bytes = prot.pack(response);\n                    var t2 = sw.ElapsedMilliseconds;\n                    server.Send(client.TcpClient, bytes);\n                    var t3 = sw.ElapsedMilliseconds;\n                    debugProfilingData[\"handleRpcRequest\"] = t1 - t0;\n                    debugProfilingData[\"packRpcResponse\"] = t2 - t1;\n                    TcpClientState internalClientToBeThrowAway;\n                    string tcpClientKey = client.TcpClient.Client.RemoteEndPoint.ToString();\n                    inbox.TryRemove(tcpClientKey, out internalClientToBeThrowAway);\n                });\n            }\n        }\n\n        vr_support.PeekCommand();\n    }\n\n    void OnApplicationQuit()\n    {\n        // stop listening thread\n        stopListening();\n    }\n\n    void OnDestroy()\n    {\n        // stop listening thread\n        stopListening();\n    }\n\n}\n\n\npublic class RPCParser\n{\n    public delegate object RpcMethod(List<object> param);\n\n    protected Dictionary<string, RpcMethod> RPCHandler = new Dictionary<string, RpcMethod>();\n    private JsonSerializerSettings settings = new JsonSerializerSettings()\n    {\n        StringEscapeHandling = StringEscapeHandling.EscapeNonAscii\n    };\n\n    public string HandleMessage(string json)\n    {\n        Dictionary<string, object> data = JsonConvert.DeserializeObject<Dictionary<string, object>>(json, settings);\n        if (data.ContainsKey(\"method\"))\n        {\n            string method = data[\"method\"].ToString();\n            List<object> param = null;\n            if (data.ContainsKey(\"params\"))\n            {\n                param = ((JArray)(data[\"params\"])).ToObject<List<object>>();\n            }\n\n            object idAction = null;\n            if (data.ContainsKey(\"id\"))\n            {\n                // if it have id, it is a request\n                idAction = data[\"id\"];\n            }\n\n            string response = null;\n            object result = null;\n            try\n            {\n                result = RPCHandler[method](param);\n            }\n            catch (Exception e)\n            {\n                // return error response\n                DebugEX.Log(e);\n                response = formatResponseError(idAction, null, e);\n                return response;\n            }\n\n            // return result response\n            response = formatResponse(idAction, result);\n            return response;\n\n        }\n        else\n        {\n            // do not handle response\n            DebugEX.Log(\"ignore message without method\");\n            return null;\n        }\n    }\n\n    // Call a method in the server\n    public string formatRequest(string method, object idAction, List<object> param = null)\n    {\n        Dictionary<string, object> data = new Dictionary<string, object>();\n        data[\"jsonrpc\"] = \"2.0\";\n        data[\"method\"] = method;\n        if (param!= null)\n        {\n            data[\"params\"] = JsonConvert.SerializeObject(param, settings);\n        }\n        // if idAction is null, it is a notification\n        if (idAction!= null)\n        {\n            data[\"id\"] = idAction;\n        }\n        return JsonConvert.SerializeObject(data, settings);\n    }\n\n    // Send a response from a request the server made to this client\n    public string formatResponse(object idAction, object result)\n    {\n        Dictionary<string, object> rpc = new Dictionary<string, object>();\n        rpc[\"jsonrpc\"] = \"2.0\";\n        rpc[\"id\"] = idAction;\n        rpc[\"result\"] = result;\n        return JsonConvert.SerializeObject(rpc, settings);\n    }\n\n    // Send a error to the server from a request it made to this client\n    public string formatResponseError(object idAction, IDictionary<string, object> data, Exception e)\n    {\n        Dictionary<string, object> rpc = new Dictionary<string, object>();\n        rpc[\"jsonrpc\"] = \"2.0\";\n        rpc[\"id\"] = idAction;\n\n        Dictionary<string, object> errorDefinition = new Dictionary<string, object>();\n        errorDefinition[\"code\"] = 1;\n        errorDefinition[\"message\"] = e.ToString();\n\n        if (data!= null)\n        {\n            errorDefinition[\"data\"] = data;\n        }\n\n        rpc[\"error\"] = errorDefinition;\n        return JsonConvert.SerializeObject(rpc, settings);\n    }\n\n    public void addRpcMethod(string name, RpcMethod method)\n    {\n        RPCHandler[name] = method;\n    }\n}\n", "starcoder_inputs": "<fim_prefix>using Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing Poco;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading;\nusing System.Net.Sockets;\nusing TcpServer;\nusing UnityEngine;\n\npublic class PocoManager : MonoBehaviour\n{\n    public const int versionCode = 6;\n    public int port = 5001;\n    private bool mRunning;\n    public AsyncTcpServer server = null;\n    private RPCParser rpc = null;\n    private SimpleProtocolFilter prot = null;\n    private UnityDumper dumper = new UnityDumper();\n    private ConcurrentDictionary<string, TcpClientState> inbox = new ConcurrentDictionary<string, TcpClientState>();\n    private VRSupport vr_support = new VRSupport();\n    private Dictionary<string, long> debugProfilingData = new Dictionary<string, long>() {\n        { \"dump\", 0 },\n        { \"screenshot\", 0 },\n        { \"handleRpcRequest\", 0 },\n        { \"packRpcResponse\", 0 },\n        { \"sendRpcResponse\", 0 },\n    };\n\n    class RPC : Attribute\n    {\n    }\n\n    void Awake()\n    {\n        Application.runInBackground = true;\n        DontDestroyOnLoad(this);\n        prot = new SimpleProtocolFilter();\n        rpc = new RPCParser();\n        rpc.addRpcMethod(\"isVRSupported\", vr_support.isVRSupported);\n        rpc.addRpcMethod(\"hasMovementFinished\", vr_support.IsQueueEmpty);\n        rpc.addRpcMethod(\"RotateObject\", vr_support.RotateObject);\n        rpc.addRpcMethod(\"ObjectLookAt\", vr_support.ObjectLookAt);\n        rpc.addRpcMethod(\"Screenshot\", Screenshot);\n        rpc.addRpcMethod(\"GetScreenSize\", GetScreenSize);\n        rpc.addRpcMethod(\"Dump\", Dump);\n        rpc.addRpcMethod(\"GetDebugProfilingData\", GetDebugProfilingData);\n        rpc.addRpcMethod(\"SetText\", SetText);\n\n        rpc.addRpcMethod(\"GetSDKVersion\", GetSDKVersion);\n\n        mRunning = true;\n\n        for (int i = 0; i < 5; i++)\n        {\n            this.server = new AsyncTcpServer(port + i);\n            this.server.Encoding = Encoding.UTF8;\n            this.server.ClientConnected +=\n                new EventHandler<TcpClientConnectedEventArgs>(server_ClientConnected);\n            this.server.ClientDisconnected +=\n                new EventHandler<TcpClientDisconnectedEventArgs>(server_ClientDisconnected);\n            this.server.DatagramReceived +=\n                new EventHandler<TcpDatagramReceivedEventArgs<byte[]>>(server_Received);\n            try\n            {\n                this.server.Start();\n                DebugEX.Log(string.Format(\"Tcp server started and listening at {0}\", server.Port));\n                break;\n            }\n            catch (SocketException e)\n            {\n                DebugEX.Log(string.Format(\"Tcp server bind to port {0} Failed!\", server.Port));\n                DebugEX.Log(\"--- Failed Trace Begin ---\");\n                DebugEX.LogError(e);\n                DebugEX.Log(\"--- Failed Trace End ---\");\n                // try next available port\n                this.server = null;\n            }\n        }\n        if (this.server == null)\n        {\n            DebugEX.LogError(string.Format(\"Unable to find an unused port from {0} to {1}\", port, port + 5));\n        }\n        vr_support.ClearCommands();\n    }\n\n    static void server_ClientConnected(object sender, TcpClientConnectedEventArgs e)\n    {\n        DebugEX.Log(string.Format(\"TCP client {0} has connected.\",\n            e.TcpClient.Client.RemoteEndPoint.ToString()));\n    }\n\n    static void server_ClientDisconnected(object sender, Tcp<fim_suffix>0} has disconnected.\",\n           e.TcpClient.Client.RemoteEndPoint.ToString()));\n    }\n\n    private void server_Received(object sender, TcpDatagramReceivedEventArgs<byte[]> e)\n    {\n        DebugEX.Log(string.Format(\"Client : {0} --> {1}\",\n            e.Client.TcpClient.Client.RemoteEndPoint.ToString(), e.Datagram.Length));\n        TcpClientState internalClient = e.Client;\n        string tcpClientKey = internalClient.TcpClient.Client.RemoteEndPoint.ToString();\n        inbox.AddOrUpdate(tcpClientKey, internalClient, (n, o) =>\n        {\n            return internalClient;\n        });\n    }\n\n    [RPC]\n    private object Dump(List<object> param)\n    {\n        var onlyVisibleNode = true;\n        if (param.Count > 0)\n        {\n            onlyVisibleNode = (bool)param[0];\n        }\n        var sw = new Stopwatch();\n        sw.Start();\n        var h = dumper.dumpHierarchy(onlyVisibleNode);\n        debugProfilingData[\"dump\"] = sw.ElapsedMilliseconds;\n\n        return h;\n    }\n\n    [RPC]\n    private object Screenshot(List<object> param)\n    {\n        var sw = new Stopwatch();\n        sw.Start();\n\n        var tex = new Texture2D(Screen.width, Screen.height, TextureFormat.RGB24, false);\n        tex.ReadPixels(new Rect(0, 0, Screen.width, Screen.height), 0, 0);\n        tex.Apply(false);\n        byte[] fileBytes = tex.EncodeToJPG(80);\n        var b64img = Convert.ToBase64String(fileBytes);\n        debugProfilingData[\"screenshot\"] = sw.ElapsedMilliseconds;\n        return new object[] { b64img, \"jpg\" };\n    }\n\n    [RPC]\n    private object GetScreenSize(List<object> param)\n    {\n        return new float[] { Screen.width, Screen.height };\n    }\n\n    public void stopListening()\n    {\n        mRunning = false;\n        server?.Stop();\n    }\n\n    [RPC]\n    private object GetDebugProfilingData(List<object> param)\n    {\n        return debugProfilingData;\n    }\n\n    [RPC]\n    private object SetText(List<object> param)\n    {\n        var instanceId = Convert.ToInt32(param[0]);\n        var textVal = param[1] as string;\n        foreach (var go in GameObject.FindObjectsOfType<GameObject>())\n        {\n            if (go.GetInstanceID() == instanceId)\n            {\n                return UnityNode.SetText(go, textVal);\n            }\n        }\n        return false;\n    }\n\n    [RPC]\n    private object GetSDKVersion(List<object> param)\n    {\n        return versionCode;\n    }\n\n    void Update()\n    {\n        if (inbox.Count > 0)\n        {\n            foreach (TcpClientState client in inbox.Values)\n            {\n                List<string> msgs = client.Prot.swap_msgs();\n                msgs.ForEach(delegate (string msg)\n                {\n                    var sw = new Stopwatch();\n                    sw.Start();\n                    var t0 = sw.ElapsedMilliseconds;\n                    string response = rpc.HandleMessage(msg);\n                    var t1 = sw.ElapsedMilliseconds;\n                    byte[] bytes = prot.pack(response);\n                    var t2 = sw.ElapsedMilliseconds;\n                    server.Send(client.TcpClient, bytes);\n                    var t3 = sw.ElapsedMilliseconds;\n                    debugProfilingData[\"handleRpcRequest\"] = t1 - t0;\n                    debugProfilingData[\"packRpcResponse\"] = t2 - t1;\n                    TcpClientState internalClientToBeThrowAway;\n                    string tcpClientKey = client.TcpClient.Client.RemoteEndPoint.ToString();\n                    inbox.TryRemove(tcpClientKey, out internalClientToBeThrowAway);\n                });\n            }\n        }\n\n        vr_support.PeekCommand();\n    }\n\n    void OnApplicationQuit()\n    {\n        // stop listening thread\n        stopListening();\n    }\n\n    void OnDestroy()\n    {\n        // stop listening thread\n        stopListening();\n    }\n\n}\n\n\npublic class RPCParser\n{\n    public delegate object RpcMethod(List<object> param);\n\n    protected Dictionary<string, RpcMethod> RPCHandler = new Dictionary<string, RpcMethod>();\n    private JsonSerializerSettings settings = new JsonSerializerSettings()\n    {\n        StringEscapeHandling = StringEscapeHandling.EscapeNonAscii\n    };\n\n    public string HandleMessage(string json)\n    {\n        Dictionary<string, object> data = JsonConvert.DeserializeObject<Dictionary<string, object>>(json, settings);\n        if (data.ContainsKey(\"method\"))\n        {\n            string method = data[\"method\"].ToString();\n            List<object> param = null;\n            if (data.ContainsKey(\"params\"))\n            {\n                param = ((JArray)(data[\"params\"])).ToObject<List<object>>();\n            }\n\n            object idAction = null;\n            if (data.ContainsKey(\"id\"))\n            {\n                // if it have id, it is a request\n                idAction = data[\"id\"];\n            }\n\n            string response = null;\n            object result = null;\n            try\n            {\n                result = RPCHandler[method](param);\n            }\n            catch (Exception e)\n            {\n                // return error response\n                DebugEX.Log(e);\n                response = formatResponseError(idAction, null, e);\n                return response;\n            }\n\n            // return result response\n            response = formatResponse(idAction, result);\n            return response;\n\n        }\n        else\n        {\n            // do not handle response\n            DebugEX.Log(\"ignore message without method\");\n            return null;\n        }\n    }\n\n    // Call a method in the server\n    public string formatRequest(string method, object idAction, List<object> param = null)\n    {\n        Dictionary<string, object> data = new Dictionary<string, object>();\n        data[\"jsonrpc\"] = \"2.0\";\n        data[\"method\"] = method;\n        if (param!= null)\n        {\n            data[\"params\"] = JsonConvert.SerializeObject(param, settings);\n        }\n        // if idAction is null, it is a notification\n        if (idAction!= null)\n        {\n            data[\"id\"] = idAction;\n        }\n        return JsonConvert.SerializeObject(data, settings);\n    }\n\n    // Send a response from a request the server made to this client\n    public string formatResponse(object idAction, object result)\n    {\n        Dictionary<string, object> rpc = new Dictionary<string, object>();\n        rpc[\"jsonrpc\"] = \"2.0\";\n        rpc[\"id\"] = idAction;\n        rpc[\"result\"] = result;\n        return JsonConvert.SerializeObject(rpc, settings);\n    }\n\n    // Send a error to the server from a request it made to this client\n    public string formatResponseError(object idAction, IDictionary<string, object> data, Exception e)\n    {\n        Dictionary<string, object> rpc = new Dictionary<string, object>();\n        rpc[\"jsonrpc\"] = \"2.0\";\n        rpc[\"id\"] = idAction;\n\n        Dictionary<string, object> errorDefinition = new Dictionary<string, object>();\n        errorDefinition[\"code\"] = 1;\n        errorDefinition[\"message\"] = e.ToString();\n\n        if (data!= null)\n        {\n            errorDefinition[\"data\"] = data;\n        }\n\n        rpc[\"error\"] = errorDefinition;\n        return JsonConvert.SerializeObject(rpc, settings);\n    }\n\n    public void addRpcMethod(string name, RpcMethod method)\n    {\n        RPCHandler[name] = method;\n    }\n}\n<fim_middle>"}
{"inputs": "using Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing Poco;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading;\nusing TcpServer;\nusing UnityEngine;\n\npublic class VRSupport\n{\n    private static Queue<Action> commands = new Queue<Action>();\n\n    public VRSupport()\n    {\n        commands = new Queue<Action>();\n    }\n\n    public void ClearCommands()\n    {\n        commands.Clear();\n    }\n\n    public void PeekCommand()\n    {\n        if (null != commands && commands.Count > 0)\n        {\n            DebugEX.Log(\"command executed \" + commands.Count);\n            commands.Peek()();\n        }\n    }\n\n    public object isVRSupported(List<object> param)\n    {\n#if UNITY_3 || UNITY_4\n\t\t\treturn false;\n#elif UNITY_5 || UNITY_2017_1\n\t\t\treturn UnityEngine.VR.VRSettings.loadedDeviceName.Equals(\"CARDBOARD\");\n#else\n        return false;\n#endif\n    }\n\n    public object IsQueueEmpty(List<object> param)\n    {\n#if OPEN_DEBUG_LOG\n        DebugEX.Log(\"Checking queue\");\n#endif\n        if (commands != null && commands.Count > 0)\n        {\n            return null;\n        }\n        else\n        {\n            Thread.Sleep(1000); // we wait a bit and check again just in case we run in between calls\n            if (commands != null && commands.Count > 0)\n            {\n                return null;\n            }\n        }\n\n        return commands.Count;\n    }\n\n    public object RotateObject(List<object> param)\n    {\n        var xRotation = Convert.ToSingle(param[0]);\n        var yRotation = Convert.ToSingle(param[1]);\n        var zRotation = Convert.ToSingle(param[2]);\n        float speed = 0f;\n        if (param.Count > 5)\n            speed = Convert.ToSingle(param[5]);\n        Vector3 mousePosition = new Vector3(xRotation, yRotation, zRotation);\n        foreach (GameObject cameraContainer in GameObject.FindObjectsOfType<GameObject>())\n        {\n            if (cameraContainer.name.Equals(param[3]))\n            {\n                foreach (GameObject cameraFollower in GameObject.FindObjectsOfType<GameObject>())\n                {\n                    if (cameraFollower.name.Equals(param[4]))\n                    {\n                        lock (commands)\n                        {\n                            commands.Enqueue(() => recoverOffset(cameraFollower, cameraContainer, speed));\n                        }\n\n                        lock (commands)\n                        {\n                            var currentRotation = cameraContainer.transform.rotation;\n                            commands.Enqueue(() => rotate(cameraContainer, currentRotation, mousePosition, speed));\n                        }\n                        return true;\n                    }\n                }\n\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public object ObjectLookAt(List<object> param)\n    {\n        float speed = 0f;\n        if (param.Count > 3)\n            speed = Convert.ToSingle(param[3]);\n        foreach (GameObject toLookAt in GameObject.FindObjectsOfType<GameObject>())\n        {\n            if (toLookAt.name.Equals(param[0]))\n            {\n                foreach (GameObject cameraContainer in GameObject.FindObjectsOfType<GameObject>())\n                {\n                    if (cameraContainer.name.Equals(param[1]))\n                    {\n                        foreach (GameObject cameraFollower in GameObject.FindObjectsOfType<GameObject>())\n                        {\n                            if (cameraFollower.name.Equals(param[2]))\n                            {\n                                lock (commands)\n                                {\n                                    commands.Enqueue(() => recoverOffset(cameraFollower, cameraContainer, speed));\n                                }\n\n                                lock (commands)\n                                {\n                                    commands.Enqueue(() => objectLookAt(cameraContainer, toLookAt, speed));\n                                }\n\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    protected void rotate(GameObject go, Quaternion originalRotation, Vector3 mousePosition, float speed)\n    {\n        #if OPEN_DEBUG_LOG\n        DebugEX.Log(\"rotating\");\n        #endif\n        if (!RotateObject(originalRotation, mousePosition, go, speed))\n        {\n            lock (commands)\n            {\n                commands.Dequeue();\n            }\n        }\n    }\n\n    protected void objectLookAt(GameObject go, GameObject toLookAt, float speed)\n    {\n        #if OPEN_DEBUG_LOG\n        DebugEX.Log(\"looking at \" + toLookAt.name);\n        DebugEX.Log(\"from \" + go.name);\n        #endif\n        if (!ObjectLookAtObject(toLookAt, go, speed))\n        {\n            lock (commands)\n            {\n                commands.Dequeue();\n            }\n        }\n    }\n\n    protected void recoverOffset(GameObject subcontainter, GameObject cameraContainer, float speed)\n    {\n        #if OPEN_DEBUG_LOG\n        DebugEX.Log(\"recovering \" + cameraContainer.name);\n        #endif\n        if (!ObjectRecoverOffset(subcontainter, cameraContainer, speed))\n        {\n            lock (commands)\n            {\n                commands.Dequeue();\n            }\n        }\n    }\n\n    protected bool RotateObject(Quaternion originalPosition, Vector3 mousePosition, GameObject cameraContainer, float rotationSpeed = 0.125f)\n    {\n        if (null == cameraContainer)\n        {\n            return false;\n        }\n\n        var expectedx = originalPosition.eulerAngles.x + mousePosition.x;\n        var expectedy = originalPosition.eulerAngles.y + mousePosition.y;\n        var expectedz = originalPosition.eulerAngles.z + mousePosition.z;\n\n        var toRotation = Quaternion.Euler(new Vector3(expectedx, expectedy, expectedz));\n        cameraContainer.transform.rotation = Quaternion.Lerp(cameraContainer.transform.rotation, toRotation, rotationSpeed * Time.deltaTime);\n        var angle = Quaternion.Angle(cameraContainer.transform.rotation, toRotation);\n\n        if (angle == 0)\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected bool ObjectLookAtObject(GameObject go, GameObject cameraContainer, float rotationSpeed = 0.125f)\n    {\n        if (null == go || null == cameraContainer)\n        {\n            #if OPEN_DEBUG_LOG\n            DebugEX.Log(\"exception - item null\");\n            #endif\n            return false;\n        }\n\n        var toRotation = Quaternion.LookRotation(go.transform.position - (cameraContainer.transform.localPosition));\n        cameraContainer.transform.rotation = Quaternion.Lerp(cameraContainer.transform.rotation, toRotation, rotationSpeed * Time.deltaTime);\n        // It should not be needed but sometimes the difference of eurlerAngles might be small and this would ensure it works fine\n        if (Quaternion.Angle(cameraContainer.transform.rotation, toRotation) == 0)\n        {\n\n            return false;\n        }\n\n        return true;\n    }\n\n    protected bool ObjectRecoverOffset(GameObject subcontainer, GameObject cameraContainer, float rotationSpeed = 0.125f)\n    {\n        if (null == cameraContainer)\n        {\n            #if OPEN_DEBUG_LOG\n            DebugEX.Log(\"exception - item null\");\n            #endif\n            return false;\n        }\n\n        // add offset with the camera\n        var cameraRotation = Camera.main.transform.localRotation;\n\n        var toRotate = new Quaternion(-cameraRotation.x, -cameraRotation.y, -cameraRotation.z, cameraRotation.w);\n        subcontainer.transform.localRotation = Quaternion.Lerp(subcontainer.transform.localRotation, toRotate, rotationSpeed * Time.deltaTime);\n\n        // It should not be needed but sometimes the difference of eurlerAngles might be small and this would ensure it works fine\n        if (Quaternion.Angle(subcontainer.transform.localRotation, toRotate) == 0)\n        {\n            return false;\n        }\n\n        return true;\n    }\n}", "cropped_inputs": "using Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing Poco;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading;\nusing TcpServer;\nusing UnityEngine;\n\npublic class VRSupport\n{\n    private static Queue<Action> commands = new Queue<Action>();\n\n    public VRSupport()\n    {\n        commands = new Queue<Action>();\n    }\n\n    public void ClearCommands()\n    {\n        commands.Clear();\n    }\n\n    public void PeekCommand()\n    {\n        if (null!= commands && commands.Count > 0)\n        {\n            DebugEX.Log(\"command executed \" + commands.Count);\n            commands.Peek()();\n        }\n    }\n\n    public object isVRSupported(List<object> param)\n    {\n#if UNITY_3 || UNITY_4\n\t\t\treturn false;\n#elif UNITY_5 || UNITY_2017_1\n\t\t\treturn UnityEngine.VR.VRSettings.loadedDeviceName.Equals(\"CARDBOARD\");\n#else\n        return false;\n#endif\n    }\n\n    public object IsQueueEmpty(List<object> param)\n    {\n#if OPEN_DEBUG_LOG\n        DebugEX.Log(\"Checking queue\");\n#endif\n        if (commands!= null && commands.Count > 0)\n        {\n            return null;\n        }\n        else\n        {\n            Thread.Sleep(1000); // we wait a bit and check again just in case we run in between calls\n            if (commands!= null && commands.Count > 0)\n            {\n                return null;\n            }\n        }\n\n        return commands.Count;\n    }\n\n    public object RotateObject(List<object> param)\n    {\n        var xRotation = Convert.ToSingle(param[0]);\n        var yRotation = Convert.ToSingle(param[1]);\n        var zRotation = Convert.ToSingle(param[2]);\n        float speed = 0f;\n        if (param.Count > 5)\n            speed = Convert.ToSingle(param[5]);\n        Vector3 mousePosition = new Vector3(xRotation, yRotation, zRotation);\n        foreach (GameObject cameraContainer in GameObject.FindObjectsOfType<GameObject>())\n        {\n            if (cameraContainer.name.Equals(param[3]))\n            {\n                foreach (GameObject cameraFollower in GameObject.FindObjectsOfType<GameObject>())\n                {\n                    if (cameraFollower.name.Equals(param[4]))\n                    {\n                        lock (commands)\n                        {\n                            commands.Enqueue(() => recoverOffset(cameraFollower, cameraContainer, speed));\n                        }\n\n                        lock (commands => rotate(cameraContainer, currentRotation, mousePosition, speed));\n                        }\n                        return true;\n                    }\n                }\n\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public object ObjectLookAt(List<object> param)\n    {\n        float speed = 0f;\n        if (param.Count > 3)\n            speed = Convert.ToSingle(param[3]);\n        foreach (GameObject toLookAt in GameObject.FindObjectsOfType<GameObject>())\n        {\n            if (toLookAt.name.Equals(param[0]))\n            {\n                foreach (GameObject cameraContainer in GameObject.FindObjectsOfType<GameObject>())\n                {\n                    if (cameraContainer.name.Equals(param[1]))\n                    {\n                        foreach (GameObject cameraFollower in GameObject.FindObjectsOfType<GameObject>())\n                        {\n                            if (cameraFollower.name.Equals(param[2]))\n                            {\n                                lock (commands)\n                                {\n                                    commands.Enqueue(() => recoverOffset(cameraFollower, cameraContainer, speed));\n                                }\n\n                                lock (commands)\n                                {\n                                    commands.Enqueue(() => objectLookAt(cameraContainer, toLookAt, speed));\n                                }\n\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    protected void rotate(GameObject go, Quaternion originalRotation, Vector3 mousePosition, float speed)\n    {\n        #if OPEN_DEBUG_LOG\n        DebugEX.Log(\"rotating\");\n        #endif\n        if (!RotateObject(originalRotation, mousePosition, go, speed))\n        {\n            lock (commands)\n            {\n                commands.Dequeue();\n            }\n        }\n    }\n\n    protected void objectLookAt(GameObject go, GameObject toLookAt, float speed)\n    {\n        #if OPEN_DEBUG_LOG\n        DebugEX.Log(\"looking at \" + toLookAt.name);\n        DebugEX.Log(\"from \" + go.name);\n        #endif\n        if (!ObjectLookAtObject(toLookAt, go, speed))\n        {\n            lock (commands)\n            {\n                commands.Dequeue();\n            }\n        }\n    }\n\n    protected void recoverOffset(GameObject subcontainter, GameObject cameraContainer, float speed)\n    {\n        #if OPEN_DEBUG_LOG\n        DebugEX.Log(\"recovering \" + cameraContainer.name);\n        #endif\n        if (!ObjectRecoverOffset(subcontainter, cameraContainer, speed))\n        {\n            lock (commands)\n            {\n                commands.Dequeue();\n            }\n        }\n    }\n\n    protected bool RotateObject(Quaternion originalPosition, Vector3 mousePosition, GameObject cameraContainer, float rotationSpeed = 0.125f)\n    {\n        if (null == cameraContainer)\n        {\n            return false;\n        }\n\n        var expectedx = originalPosition.eulerAngles.x + mousePosition.x;\n        var expectedy = originalPosition.eulerAngles.y + mousePosition.y;\n        var expectedz = originalPosition.eulerAngles.z + mousePosition.z;\n\n        var toRotation = Quaternion.Euler(new Vector3(expectedx, expectedy, expectedz));\n        cameraContainer.transform.rotation = Quaternion.Lerp(cameraContainer.transform.rotation, toRotation, rotationSpeed * Time.deltaTime);\n        var angle = Quaternion.Angle(cameraContainer.transform.rotation, toRotation);\n\n        if (angle == 0)\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected bool ObjectLookAtObject(GameObject go, GameObject cameraContainer, float rotationSpeed = 0.125f)\n    {\n        if (null == go || null == cameraContainer)\n        {\n            #if OPEN_DEBUG_LOG\n            DebugEX.Log(\"exception - item null\");\n            #endif\n            return false;\n        }\n\n        var toRotation = Quaternion.LookRotation(go.transform.position - (cameraContainer.transform.localPosition));\n        cameraContainer.transform.rotation = Quaternion.Lerp(cameraContainer.transform.rotation, toRotation, rotationSpeed * Time.deltaTime);\n        // It should not be needed but sometimes the difference of eurlerAngles might be small and this would ensure it works fine\n        if (Quaternion.Angle(cameraContainer.transform.rotation, toRotation) == 0)\n        {\n\n            return false;\n        }\n\n        return true;\n    }\n\n    protected bool ObjectRecoverOffset(GameObject subcontainer, GameObject cameraContainer, float rotationSpeed = 0.125f)\n    {\n        if (null == cameraContainer)\n        {\n            #if OPEN_DEBUG_LOG\n            DebugEX.Log(\"exception - item null\");\n            #endif\n            return false;\n        }\n\n        // add offset with the camera\n        var cameraRotation = Camera.main.transform.localRotation;\n\n        var toRotate = new Quaternion(-cameraRotation.x, -cameraRotation.y, -cameraRotation.z, cameraRotation.w);\n        subcontainer.transform.localRotation = Quaternion.Lerp(subcontainer.transform.localRotation, toRotate, rotationSpeed * Time.deltaTime);\n\n        // It should not be needed but sometimes the difference of eurlerAngles might be small and this would ensure it works fine\n        if (Quaternion.Angle(subcontainer.transform.localRotation, toRotate) == 0)\n        {\n            return false;\n        }\n\n        return true;\n    }\n}", "starcoder_inputs": "<fim_prefix>using Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing Poco;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading;\nusing TcpServer;\nusing UnityEngine;\n\npublic class VRSupport\n{\n    private static Queue<Action> commands = new Queue<Action>();\n\n    public VRSupport()\n    {\n        commands = new Queue<Action>();\n    }\n\n    public void ClearCommands()\n    {\n        commands.Clear();\n    }\n\n    public void PeekCommand()\n    {\n        if (null!= commands && commands.Count > 0)\n        {\n            DebugEX.Log(\"command executed \" + commands.Count);\n            commands.Peek()();\n        }\n    }\n\n    public object isVRSupported(List<object> param)\n    {\n#if UNITY_3 || UNITY_4\n\t\t\treturn false;\n#elif UNITY_5 || UNITY_2017_1\n\t\t\treturn UnityEngine.VR.VRSettings.loadedDeviceName.Equals(\"CARDBOARD\");\n#else\n        return false;\n#endif\n    }\n\n    public object IsQueueEmpty(List<object> param)\n    {\n#if OPEN_DEBUG_LOG\n        DebugEX.Log(\"Checking queue\");\n#endif\n        if (commands!= null && commands.Count > 0)\n        {\n            return null;\n        }\n        else\n        {\n            Thread.Sleep(1000); // we wait a bit and check again just in case we run in between calls\n            if (commands!= null && commands.Count > 0)\n            {\n                return null;\n            }\n        }\n\n        return commands.Count;\n    }\n\n    public object RotateObject(List<object> param)\n    {\n        var xRotation = Convert.ToSingle(param[0]);\n        var yRotation = Convert.ToSingle(param[1]);\n        var zRotation = Convert.ToSingle(param[2]);\n        float speed = 0f;\n        if (param.Count > 5)\n            speed = Convert.ToSingle(param[5]);\n        Vector3 mousePosition = new Vector3(xRotation, yRotation, zRotation);\n        foreach (GameObject cameraContainer in GameObject.FindObjectsOfType<GameObject>())\n        {\n            if (cameraContainer.name.Equals(param[3]))\n            {\n                foreach (GameObject cameraFollower in GameObject.FindObjectsOfType<GameObject>())\n                {\n                    if (cameraFollower.name.Equals(param[4]))\n                    {\n                        lock (commands)\n                        {\n                            commands.Enqueue(() => recoverOffset(cameraFollower, cameraContainer, speed));\n                        }\n\n                        lock (commands<fim_suffix> => rotate(cameraContainer, currentRotation, mousePosition, speed));\n                        }\n                        return true;\n                    }\n                }\n\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public object ObjectLookAt(List<object> param)\n    {\n        float speed = 0f;\n        if (param.Count > 3)\n            speed = Convert.ToSingle(param[3]);\n        foreach (GameObject toLookAt in GameObject.FindObjectsOfType<GameObject>())\n        {\n            if (toLookAt.name.Equals(param[0]))\n            {\n                foreach (GameObject cameraContainer in GameObject.FindObjectsOfType<GameObject>())\n                {\n                    if (cameraContainer.name.Equals(param[1]))\n                    {\n                        foreach (GameObject cameraFollower in GameObject.FindObjectsOfType<GameObject>())\n                        {\n                            if (cameraFollower.name.Equals(param[2]))\n                            {\n                                lock (commands)\n                                {\n                                    commands.Enqueue(() => recoverOffset(cameraFollower, cameraContainer, speed));\n                                }\n\n                                lock (commands)\n                                {\n                                    commands.Enqueue(() => objectLookAt(cameraContainer, toLookAt, speed));\n                                }\n\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    protected void rotate(GameObject go, Quaternion originalRotation, Vector3 mousePosition, float speed)\n    {\n        #if OPEN_DEBUG_LOG\n        DebugEX.Log(\"rotating\");\n        #endif\n        if (!RotateObject(originalRotation, mousePosition, go, speed))\n        {\n            lock (commands)\n            {\n                commands.Dequeue();\n            }\n        }\n    }\n\n    protected void objectLookAt(GameObject go, GameObject toLookAt, float speed)\n    {\n        #if OPEN_DEBUG_LOG\n        DebugEX.Log(\"looking at \" + toLookAt.name);\n        DebugEX.Log(\"from \" + go.name);\n        #endif\n        if (!ObjectLookAtObject(toLookAt, go, speed))\n        {\n            lock (commands)\n            {\n                commands.Dequeue();\n            }\n        }\n    }\n\n    protected void recoverOffset(GameObject subcontainter, GameObject cameraContainer, float speed)\n    {\n        #if OPEN_DEBUG_LOG\n        DebugEX.Log(\"recovering \" + cameraContainer.name);\n        #endif\n        if (!ObjectRecoverOffset(subcontainter, cameraContainer, speed))\n        {\n            lock (commands)\n            {\n                commands.Dequeue();\n            }\n        }\n    }\n\n    protected bool RotateObject(Quaternion originalPosition, Vector3 mousePosition, GameObject cameraContainer, float rotationSpeed = 0.125f)\n    {\n        if (null == cameraContainer)\n        {\n            return false;\n        }\n\n        var expectedx = originalPosition.eulerAngles.x + mousePosition.x;\n        var expectedy = originalPosition.eulerAngles.y + mousePosition.y;\n        var expectedz = originalPosition.eulerAngles.z + mousePosition.z;\n\n        var toRotation = Quaternion.Euler(new Vector3(expectedx, expectedy, expectedz));\n        cameraContainer.transform.rotation = Quaternion.Lerp(cameraContainer.transform.rotation, toRotation, rotationSpeed * Time.deltaTime);\n        var angle = Quaternion.Angle(cameraContainer.transform.rotation, toRotation);\n\n        if (angle == 0)\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected bool ObjectLookAtObject(GameObject go, GameObject cameraContainer, float rotationSpeed = 0.125f)\n    {\n        if (null == go || null == cameraContainer)\n        {\n            #if OPEN_DEBUG_LOG\n            DebugEX.Log(\"exception - item null\");\n            #endif\n            return false;\n        }\n\n        var toRotation = Quaternion.LookRotation(go.transform.position - (cameraContainer.transform.localPosition));\n        cameraContainer.transform.rotation = Quaternion.Lerp(cameraContainer.transform.rotation, toRotation, rotationSpeed * Time.deltaTime);\n        // It should not be needed but sometimes the difference of eurlerAngles might be small and this would ensure it works fine\n        if (Quaternion.Angle(cameraContainer.transform.rotation, toRotation) == 0)\n        {\n\n            return false;\n        }\n\n        return true;\n    }\n\n    protected bool ObjectRecoverOffset(GameObject subcontainer, GameObject cameraContainer, float rotationSpeed = 0.125f)\n    {\n        if (null == cameraContainer)\n        {\n            #if OPEN_DEBUG_LOG\n            DebugEX.Log(\"exception - item null\");\n            #endif\n            return false;\n        }\n\n        // add offset with the camera\n        var cameraRotation = Camera.main.transform.localRotation;\n\n        var toRotate = new Quaternion(-cameraRotation.x, -cameraRotation.y, -cameraRotation.z, cameraRotation.w);\n        subcontainer.transform.localRotation = Quaternion.Lerp(subcontainer.transform.localRotation, toRotate, rotationSpeed * Time.deltaTime);\n\n        // It should not be needed but sometimes the difference of eurlerAngles might be small and this would ensure it works fine\n        if (Quaternion.Angle(subcontainer.transform.localRotation, toRotate) == 0)\n        {\n            return false;\n        }\n\n        return true;\n    }\n}<fim_middle>"}
{"inputs": "using System;\nusing System.Collections.Generic;\nusing UnityEngine.UI;\nusing UnityEngine;\n\n\nnamespace Poco\n{\n    public class UnityNode : AbstractNode\n    {\n        public static Dictionary<string, string> TypeNames = new Dictionary<string, string>() {\n            { \"Text\", \"Text\" },\n            { \"Gradient Text\", \"Gradient.Text\" },\n            { \"Image\", \"Image\" },\n            { \"RawImage\", \"Raw.Image\" },\n            { \"Mask\", \"Mask\" },\n            { \"2DRectMask\", \"2D-Rect.Mask\" },\n            { \"Button\", \"Button\" },\n            { \"InputField\", \"InputField\" },\n            { \"Toggle\", \"Toggle\" },\n            { \"Toggle Group\", \"ToggleGroup\" },\n            { \"Slider\", \"Slider\" },\n            { \"ScrollBar\", \"ScrollBar\" },\n            { \"DropDown\", \"DropDown\" },\n            { \"ScrollRect\", \"ScrollRect\" },\n            { \"Selectable\", \"Selectable\" },\n            { \"Camera\", \"Camera\" },\n            { \"RectTransform\", \"Node\" },\n        };\n        public static string DefaultTypeName = \"GameObject\";\n        private GameObject gameObject;\n        private Renderer renderer;\n        private RectTransform rectTransform;\n        private Rect rect;\n        private Vector2 objectPos;\n        private List<string> components;\n        private Camera camera;\n\n\n        public UnityNode(GameObject obj)\n        {\n            gameObject = obj;\n            camera = Camera.main;\n            foreach (var cam in Camera.allCameras)\n            {\n                // skip the main camera\n                // we want to use specified camera first then fallback to main camera if no other cameras\n                // for further advanced cases, we could test whether the game object is visible within the camera\n                if (cam == Camera.main)\n                {\n                    continue;\n                }\n                if ((cam.cullingMask & (1 << gameObject.layer)) != 0)\n                {\n                    camera = cam;\n                }\n            }\n\n            renderer = gameObject.GetComponent<Renderer>();\n            rectTransform = gameObject.GetComponent<RectTransform>();\n            rect = GameObjectRect(renderer, rectTransform);\n            objectPos = renderer ? WorldToGUIPoint(camera, renderer.bounds.center) : Vector2.zero;\n            components = GameObjectAllComponents();\n        }\n\n        public override AbstractNode getParent()\n        {\n            GameObject parentObj = gameObject.transform.parent.gameObject;\n            return new UnityNode(parentObj);\n        }\n\n        public override List<AbstractNode> getChildren()\n        {\n            List<AbstractNode> children = new List<AbstractNode>();\n            foreach (Transform child in gameObject.transform)\n            {\n                children.Add(new UnityNode(child.gameObject));\n            }\n            return children;\n        }\n\n        public override object getAttr(string attrName)\n        {\n            switch (attrName)\n            {\n                case \"name\":\n                    return gameObject.name;\n                case \"type\":\n                    return GuessObjectTypeFromComponentNames(components);\n                case \"visible\":\n                    return GameObjectVisible(renderer, components);\n                case \"pos\":\n                    return GameObjectPosInScreen(objectPos, renderer, rectTransform, rect);\n                case \"size\":\n                    return GameObjectSizeInScreen(rect, rectTransform);\n                case \"scale\":\n                    return new List<float>() { 1.0f, 1.0f };\n                case \"anchorPoint\":\n                    return GameObjectAnchorInScreen(renderer, rect, objectPos);\n                case \"zOrders\":\n                    return GameObjectzOrders();\n                case \"clickable\":\n                    return GameObjectClickable(components);\n                case \"text\":\n                    return GameObjectText();\n                case \"components\":\n                    return components;\n                case \"texture\":\n                    return GetImageSourceTexture();\n                case \"tag\":\n                    return GameObjectTag();\n                case \"layer\":\n                    return GameObjectLayerName();\n                case \"_ilayer\":\n                    return GameObjectLayer();\n                case \"_instanceId\":\n                    return gameObject.GetInstanceID();\n                default:\n                    return null;\n            }\n        }\n\n\n        public override Dictionary<string, object> enumerateAttrs()\n        {\n            Dictionary<string, object> payload = GetPayload();\n            Dictionary<string, object> ret = new Dictionary<string, object>();\n            foreach (KeyValuePair<string, object> p in payload)\n            {\n                if (p.Value != null)\n                {\n                    ret.Add(p.Key, p.Value);\n                }\n            }\n            return ret;\n        }\n\n\n        private Dictionary<string, object> GetPayload()\n        {\n            Dictionary<string, object> payload = new Dictionary<string, object>() {\n                { \"name\", gameObject.name },\n                { \"type\", GuessObjectTypeFromComponentNames (components) },\n                { \"visible\", GameObjectVisible (renderer, components) },\n                { \"pos\", GameObjectPosInScreen (objectPos, renderer, rectTransform, rect) },\n                { \"size\", GameObjectSizeInScreen (rect, rectTransform) },\n                { \"scale\", new List<float> (){ 1.0f, 1.0f } },\n                { \"anchorPoint\", GameObjectAnchorInScreen (renderer, rect, objectPos) },\n                { \"zOrders\", GameObjectzOrders () },\n                { \"clickable\", GameObjectClickable (components) },\n                { \"text\", GameObjectText () },\n                { \"components\", components },\n                { \"texture\", GetImageSourceTexture () },\n                { \"tag\", GameObjectTag () },\n                { \"_ilayer\", GameObjectLayer() },\n                { \"layer\", GameObjectLayerName() },\n                { \"_instanceId\", gameObject.GetInstanceID () },\n            };\n            return payload;\n        }\n\n        private string GuessObjectTypeFromComponentNames(List<string> components)\n        {\n            List<string> cns = new List<string>(components);\n            cns.Reverse();\n            foreach (string name in cns)\n            {\n                if (TypeNames.ContainsKey(name))\n                {\n                    return TypeNames[name];\n                }\n            }\n            return DefaultTypeName;\n        }\n\n        private bool GameObjectVisible(Renderer renderer, List<string> components)\n        {\n            if (gameObject.activeInHierarchy)\n            {\n                bool light = components.Contains(\"Light\");\n                // bool mesh = components.Contains (\"MeshRenderer\") && components.Contains (\"MeshFilter\");\n                bool particle = components.Contains(\"ParticleSystem\") && components.Contains(\"ParticleSystemRenderer\");\n                if (light || particle)\n                {\n                    return false;\n                }\n                else\n                {\n                    return renderer ? renderer.isVisible : true;\n                }\n            }\n            else\n            {\n                return false;\n            }\n        }\n\n        private int GameObjectLayer()\n        {\n            return gameObject.layer;\n        }\n        private string GameObjectLayerName()\n        {\n            return LayerMask.LayerToName(gameObject.layer);\n        }\n\n        private bool GameObjectClickable(List<string> components)\n        {\n            Button button = gameObject.GetComponent<Button>();\n            return button ? button.isActiveAndEnabled : false;\n        }\n\n        private string GameObjectText()\n        {\n            Text text = gameObject.GetComponent<Text>();\n            return text ? text.text : null;\n        }\n\n        private string GameObjectTag()\n        {\n            string tag;\n            try\n            {\n                tag = !gameObject.CompareTag(\"Untagged\") ? gameObject.tag : null;\n            }\n            catch (UnityException)\n            {\n                tag = null;\n            }\n            return tag;\n        }\n\n        private List<string> GameObjectAllComponents()\n        {\n            List<string> components = new List<string>();\n            Component[] allComponents = gameObject.GetComponents<Component>();\n            if (allComponents != null)\n            {\n                foreach (Component ac in allComponents)\n                {\n                    if (ac != null)\n                    {\n                        components.Add(ac.GetType().Name);\n                    }\n                }\n            }\n            return components;\n        }\n\n        private Dictionary<string, float> GameObjectzOrders()\n        {\n            float CameraViewportPoint = 0;\n            if (camera != null)\n            {\n                CameraViewportPoint = Math.Abs(camera.WorldToViewportPoint(gameObject.transform.position).z);\n            }\n            Dictionary<string, float> zOrders = new Dictionary<string, float>() {\n                { \"global\", 0f },\n                { \"local\", -1 * CameraViewportPoint }\n            };\n            return zOrders;\n        }\n\n        private Rect GameObjectRect(Renderer renderer, RectTransform rectTransform)\n        {\n            Rect rect = new Rect(0, 0, 0, 0);\n            if (renderer)\n            {\n                rect = RendererToScreenSpace(camera, renderer);\n            }\n            else if (rectTransform)\n            {\n                rect = RectTransformToScreenSpace(rectTransform);\n            }\n            return rect;\n        }\n\n        private float[] GameObjectPosInScreen(Vector3 objectPos, Renderer renderer, RectTransform rectTransform, Rect rect)\n        {\n            float[] pos = { 0f, 0f };\n\n            if (renderer)\n            {\n                // 3d object\n                pos[0] = objectPos.x / (float)Screen.width;\n                pos[1] = objectPos.y / (float)Screen.height;\n            }\n            else if (rectTransform)\n            {\n                // ui object (rendered on screen space, other render modes may be different)\n                // use center pos for now\n                Canvas rootCanvas = GetRootCanvas(gameObject);\n                RenderMode renderMode = rootCanvas != null ? rootCanvas.renderMode : new RenderMode();\n                switch (renderMode)\n                {\n                    case RenderMode.ScreenSpaceCamera:\n                        //\u4e0a\u4e00\u4e2a\u65b9\u6848\u7ecf\u8fc7\u5b9e\u9645\u6d4b\u8bd5\u53d1\u73b0\u8fd8\u6709\u4e24\u4e2a\u95ee\u9898\u5b58\u5728\n                        //1.\u5728\u6709Canvas Scaler\u4fee\u6539\u4e86RootCanvas\u7684Scale\u7684\u60c5\u51b5\u4e0b\u5750\u6807\u7684\u6293\u53d6\u4ecd\u7136\u4e0d\u5bf9\uff0c\u5f71\u54cd\u5230\u4e86ScreenSpaceCameram\u6a21\u5f0f\u5728\u4e0d\u540c\u5206\u8fa8\u7387\u548c\u5c4f\u5e55\u6bd4\u4f8b\u4e0b\u8bc6\u522b\u7684\u517c\u5bb9\u6027\u3002\n                        //2.RectTransformUtility\u8f6c\u7684 rectTransform.transform.position\u672c\u8d28\u4e0a\u5f97\u5230\u7684\u662fRectTransform.pivot\u4e2d\u5fc3\u8f74\u5728\u5c4f\u5e55\u4e0a\u7684\u5750\u6807\uff0c\u5982\u679cpivot\u4e0d\u7b49\u4e8e(0.5,0.5)\uff0c\n                        //\u90a3\u4e48\u83b7\u53d6\u5230\u7684position\u5c31\u4e0d\u7b49\u4e8e\u56fe\u5f62\u7684\u4e2d\u5fc3\u70b9\u3002\n                        //\u8bd5\u4e86\u4e00\u665a\u4e0a\uff0c\u627e\u5230\u4e86\u89e3\u51b3\u529e\u6cd5\u3002\n\n                        //\u7528MainCanvas\u8f6c\u4e00\u6b21\u5c4f\u5e55\u5750\u6807\n                        Vector2 position = RectTransformUtility.WorldToScreenPoint(rootCanvas.worldCamera, rectTransform.transform.position);\n                        //\u6ce8\u610f: \u8fd9\u91cc\u7684position\u5176\u5b9e\u662fPivot\u70b9\u5728Screen\u4e0a\u7684\u5750\u6807\uff0c\u5e76\u4e0d\u662f\u56fe\u5f62\u610f\u4e49\u4e0a\u7684\u4e2d\u5fc3\u70b9,\u5728\u7ecf\u8fc7\u4e0b\u5217\u7384\u5b66\u516c\u5f0f\u6362\u7b97\u624d\u662f\u771f\u7684\u56fe\u5f62\u4e2d\u5fc3\u5728\u5c4f\u5e55\u7684\u4f4d\u7f6e\u3002\n                        //\u516c\u5f0f\u5185\u7b97\u4e0a\u4e86rootCanvas.scaleFactor \u7f29\u653e\u56e0\u5b50\uff0c\u7ecf\u6d4b\u8bd5\u81f3\u5c11\u5728Canvas Scaler.Expand\u6a21\u5f0f\u4e0b\uff0c\u4ec0\u4e48\u5206\u8fa8\u7387\u548c\u5c4f\u5e55\u6bd4\u90fd\u6293\u7684\u5f88\u51c6\uff0c\u517c\u5bb9\u6027\u5f88\u5f3a\uff0c\u5176\u4ed6\u7684\u6709\u5f85\u6d4b\u8bd5\u3002\n                        //\u7531\u4e8e\u5f97\u51fa\u6765\u7684\u5750\u6807\u662f\u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9\uff0c\u89e6\u63a7\u8f93\u5165\u662f\u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9\uff0c\u6240\u4ee5\u8981\u4e0a\u4e0b\u53cd\u8f6c\u4e00\u4e0bPoco\u624d\u80fd\u7528,\u6240\u4ee5y\u5750\u6807\u7528Screen.height\u51cf\u53bb\u3002\n                        position.Set(\n                            position.x - rectTransform.rect.width * rootCanvas.scaleFactor * (rectTransform.pivot.x - 0.5f),\n                            Screen.height - (position.y - rectTransform.rect.height * rootCanvas.scaleFactor * (rectTransform.pivot.y - 0.5f))\n                            );\n                        pos[0] = position.x / Screen.width;\n                        pos[1] = position.y / Screen.height;\n                        break;\n                    case RenderMode.WorldSpace:\n                        Vector2 _pos = RectTransformUtility.WorldToScreenPoint(rootCanvas.worldCamera, rectTransform.transform.position);\n                        pos[0] = _pos.x / Screen.width;\n                        pos[1] = (Screen.height - _pos.y) / Screen.height;\n                        break;\n                    default:\n                        pos[0] = rect.center.x / (float)Screen.width;\n                        pos[1] = rect.center.y / (float)Screen.height;\n                        break;\n                }\n            }\n            return pos;\n        }\n\n        private Canvas GetRootCanvas(GameObject gameObject)\n        {\n            Canvas canvas = gameObject.GetComponentInParent<Canvas>();\n            // \u5982\u679cunity\u7248\u672c\u5c0f\u4e8eunity5.5\uff0c\u5c31\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u53d6\u5427\uff0c\u6ca1\u6cd5\u76f4\u63a5\u53d6rootCanvas\n            // \u5982\u679c\u6709\u7528\u52304.6\u4ee5\u4e0b\u7248\u672c\u7684\u8bdd\u5c31\u81ea\u5df1\u624b\u52a8\u5728\u8fd9\u91cc\u6dfb\u52a0\u6761\u4ef6\u5427\n#if UNITY_4_6 || UNITY_4_7 || UNITY_4_8 || UNITY_4_9 || UNITY_5_0 || UNITY_5_1 || UNITY_5_2 || UNITY_5_3 || UNITY_5_4\n\t\t\tif (canvas && canvas.isRootCanvas) {\n\t\t\t\treturn canvas;\n\t\t\t} else {\n\t\t\t\tif (gameObject.transform.parent.gameObject != null) {\n\t\t\t\t\treturn GetRootCanvas(gameObject.transform.parent.gameObject);\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n#else\n            if (canvas && canvas.isRootCanvas)\n            {\n                return canvas;\n            }\n            else if (canvas)\n            {\n                return canvas.rootCanvas;\n            }\n            else\n            {\n                return null;\n            }\n#endif\n        }\n\n        private float[] GameObjectSizeInScreen(Rect rect, RectTransform rectTransform)\n        {\n            float[] size = { 0f, 0f };\n            if (rectTransform)\n            {\n                Canvas rootCanvas = GetRootCanvas(gameObject);\n                RenderMode renderMode = rootCanvas != null ? rootCanvas.renderMode : new RenderMode();\n                switch (renderMode)\n                {\n                    case RenderMode.ScreenSpaceCamera:\n                        Rect _rect = RectTransformUtility.PixelAdjustRect(rectTransform, rootCanvas);\n                        size = new float[] {\n                            _rect.width * rootCanvas.scaleFactor / (float)Screen.width,\n                            _rect.height * rootCanvas.scaleFactor / (float)Screen.height\n                        };\n                        break;\n                    case RenderMode.WorldSpace:\n                        Rect rect_ = rectTransform.rect;\n                        RectTransform canvasTransform = rootCanvas.GetComponent<RectTransform>();\n                        size = new float[] { rect_.width / canvasTransform.rect.width, rect_.height / canvasTransform.rect.height };\n                        break;\n                    default:\n                        size = new float[] { rect.width / (float)Screen.width, rect.height / (float)Screen.height };\n                        break;\n                }\n            }\n            else\n            {\n                size = new float[] { rect.width / (float)Screen.width, rect.height / (float)Screen.height };\n            }\n            return size;\n        }\n\n        private float[] GameObjectAnchorInScreen(Renderer renderer, Rect rect, Vector3 objectPos)\n        {\n            float[] defaultValue = { 0.5f, 0.5f };\n            if (rectTransform)\n            {\n                Vector2 data = rectTransform.pivot;\n                defaultValue[0] = data[0];\n                defaultValue[1] = 1 - data[1];\n                return defaultValue;\n            }\n            if (!renderer)\n            {\n                //<Modified> some object do not have renderer\n                return defaultValue;\n            }\n            float[] anchor = { (objectPos.x - rect.xMin) / rect.width, (objectPos.y - rect.yMin) / rect.height };\n            if (Double.IsNaN(anchor[0]) || Double.IsNaN(anchor[1]))\n            {\n                return defaultValue;\n            }\n            else if (Double.IsPositiveInfinity(anchor[0]) || Double.IsPositiveInfinity(anchor[1]))\n            {\n                return defaultValue;\n            }\n            else if (Double.IsNegativeInfinity(anchor[0]) || Double.IsNegativeInfinity(anchor[1]))\n            {\n                return defaultValue;\n            }\n            else\n            {\n                return anchor;\n            }\n        }\n\n        private string GetImageSourceTexture()\n        {\n            Image image = gameObject.GetComponent<Image>();\n            if (image != null && image.sprite != null)\n            {\n                return image.sprite.name;\n            }\n\n            RawImage rawImage = gameObject.GetComponent<RawImage>();\n            if (rawImage != null && rawImage.texture != null)\n            {\n                return rawImage.texture.name;\n            }\n\n            SpriteRenderer spriteRenderer = gameObject.GetComponent<SpriteRenderer>();\n            if (spriteRenderer != null && spriteRenderer.sprite != null)\n            {\n                return spriteRenderer.sprite.name;\n            }\n\n            Renderer render = gameObject.GetComponent<Renderer>();\n            if (renderer != null && renderer.material != null)\n            {\n                return renderer.material.color.ToString();\n            }\n\n            return null;\n        }\n\n        protected static Vector2 WorldToGUIPoint(Camera camera, Vector3 world)\n        {\n            Vector2 screenPoint = Vector2.zero;\n            if (camera != null)\n            {\n                screenPoint = camera.WorldToScreenPoint(world);\n                screenPoint.y = (float)Screen.height - screenPoint.y;\n            }\n            return screenPoint;\n        }\n\n        protected static Rect RendererToScreenSpace(Camera camera, Renderer renderer)\n        {\n            Vector3 cen = renderer.bounds.center;\n            Vector3 ext = renderer.bounds.extents;\n            Vector2[] extentPoints = new Vector2[8] {\n                WorldToGUIPoint (camera, new Vector3 (cen.x - ext.x, cen.y - ext.y, cen.z - ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x + ext.x, cen.y - ext.y, cen.z - ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x - ext.x, cen.y - ext.y, cen.z + ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x + ext.x, cen.y - ext.y, cen.z + ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x - ext.x, cen.y + ext.y, cen.z - ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x + ext.x, cen.y + ext.y, cen.z - ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x - ext.x, cen.y + ext.y, cen.z + ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x + ext.x, cen.y + ext.y, cen.z + ext.z))\n            };\n            Vector2 min = extentPoints[0];\n            Vector2 max = extentPoints[0];\n            foreach (Vector2 v in extentPoints)\n            {\n                min = Vector2.Min(min, v);\n                max = Vector2.Max(max, v);\n            }\n            return new Rect(min.x, min.y, max.x - min.x, max.y - min.y);\n        }\n\n        protected static Rect RectTransformToScreenSpace(RectTransform rectTransform)\n        {\n            Vector2 size = Vector2.Scale(rectTransform.rect.size, rectTransform.lossyScale);\n            Rect rect = new Rect(rectTransform.position.x, Screen.height - rectTransform.position.y, size.x, size.y);\n            rect.x -= (rectTransform.pivot.x * size.x);\n            rect.y -= ((1.0f - rectTransform.pivot.y) * size.y);\n            return rect;\n        }\n\n        public static bool SetText(GameObject go, string textVal)\n        {\n            if (go != null)\n            {\n                var inputField = go.GetComponent<InputField>();\n                if (inputField != null)\n                {\n                    inputField.text = textVal;\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n}\n", "cropped_inputs": "using System;\nusing System.Collections.Generic;\nusing UnityEngine.UI;\nusing UnityEngine;\n\n\nnamespace Poco\n{\n    public class UnityNode : AbstractNode\n    {\n        public static Dictionary<string, string> TypeNames = new Dictionary<string, string>() {\n            { \"Text\", \"Text\" },\n            { \"Gradient Text\", \"Gradient.Text\" },\n            { \"Image\", \"Image\" },\n            { \"RawImage\", \"Raw.Image\" },\n            { \"Mask\", \"Mask\" },\n            { \"2DRectMask\", \"2D-Rect.Mask\" },\n            { \"Button\", \"Button\" },\n            { \"InputField\", \"InputField\" },\n            { \"Toggle\", \"Toggle\" },\n            { \"Toggle Group\", \"ToggleGroup\" },\n            { \"Slider\", \"Slider\" },\n            { \"ScrollBar\", \"ScrollBar\" },\n            { \"DropDown\", \"DropDown\" },\n            { \"ScrollRect\", \"ScrollRect\" },\n            { \"Selectable\", \"Selectable\" },\n            { \"Camera\", \"Camera\" },\n            { \"RectTransform\", \"Node\" },\n        };\n        public static string DefaultTypeName = \"GameObject\";\n        private GameObject gameObject;\n        private Renderer renderer;\n        private RectTransform rectTransform;\n        private Rect rect;\n        private Vector2 objectPos;\n        private List<string> components;\n        private Camera camera;\n\n\n        public UnityNode(GameObject obj)\n        {\n            gameObject = obj;\n            camera = Camera.main;\n            foreach (var cam in Camera.allCameras)\n            {\n                // skip the main camera\n                // we want to use specified camera first then fallback to main camera if no other cameras\n                // for further advanced cases, we could test whether the game object is visible within the camera\n                if (cam == Camera.main)\n                {\n                    continue;\n                }\n                if ((cam.cullingMask & (1 << gameObject.layer))!= 0)\n                {\n                    camera = cam;\n                }\n            }\n\n            renderer = gameObject.GetComponent<Renderer>();\n            rectTransform = gameObject.GetComponent<RectTransform>();\n            rect = GameObjectRect(renderer, rectTransform);\n            objectPos = renderer? WorldToGUIPoint(camera, renderer.bounds.center) : Vector2.zero;\n            components = GameObjectAllComponents();\n        }\n\n        public override AbstractNode getParent()\n        {\n            GameObject parentObj = gameObject.transform.parent.gameObject;\n            return new UnityNode(parentObj);\n        }\n\n        public override List<AbstractNode> getChildren()\n        {\n            List<AbstractNode> children = new List<AbstractNode>();\n            foreach (Transform child in gameObject.transform)\n            {\n                children.Add(new UnityNode(child.gameObject));\n            }\n            return children;\n        }\n\n        public override object getAttr(string attrName)\n        {\n            switch (attrName)\n            {\n                case \"name\":\n                    return gameObject.name;\n                case \"type\":\n                    return GuessObjectTypeFromComponentNames(components);\n                case \"visible\":\n                    return GameObjectVisible(renderer, components);\n                case \"pos\":\n                    return GameObjectPosInScreen(objectPos, renderer, rectTransform, rect);\n                case \"size\":\n                    return GameObjectSizeInScreen(rect, rectTransform);\n                case \"scale\":\n                    return new List<float>() { 1.0f, 1.0f };\n                case \"anchorPoint\":\n                    return GameObjectAnchorInScreen(renderer, rect, objectPos);\n                case \"zOrders\":\n                    return GameObjectzOrders();\n                case \"clickable\":\n                    return GameObjectClickable(components);\n                case \"text\":\n                    return GameObjectText();\n                case \"components\":\n                    return components;\n                case \"texture\":\n                    return GetImageSourceTexture();\n                case \"tag\":\n                    return GameObjectTag();\n                case \"layer\":\n                    return GameObjectLayerName();\n                case \"_ilayer\":\n                    return GameObjectLayer();\n                case \"_instanceId\":\n                    return gameObject.GetInstanceID();\n                default:\n                    return null;\n            }\n        }\n\n\n        public override Dictionary<string, object> enumerateAttrs()\n        {\n            Dictionary<string, object> payload = GetPayload();\n            Dictionary<string, object> ret = new Dictionary<string, object>();\n            foreach (KeyValuePair<string, object> p in payload)\n            {\n                if (p.Value!= null)\n                {\n                    ret.Add(p.Key, p.Value);\n                }\n            }\n            return ret;\n        }\n\n\n        private Dictionary<string, object> GetPayload()\n        {\n            Dictionary<string, object> payload = new Dictionary<string, object>() {\n                { \"name\", gameObject.name },\n                { \"type\", GuessObjectTypeFromComponentNames (components) },\n                { \"visible\", GameObjectVisible (renderer, components) },\n                { \"pos\", GameObjectPosInScreen (objectPos, renderer, rectTransform, rect) },\n                { \"size\", GameObjectSizeInScreen (rect, rectTransform) },\n                { \"scale\", new List<float> (){ 1.0f, 1.0f } },\n                { \"anchorPoint\", GameObjectAnchorInScreen (renderer, rect, objectPos) },\n                { \"zOrders\", GameObjectzOrders () },\n                { \"clickable\", GameObjectClickable (components) },\n                { \"text\", GameObjectText () },\n                { \"components\", components },\n                { \"texture\", GetImageSourceTexture () },\n                { \"tag\", GameObjectTag () },\n                { \"_ilayer\", GameObjectLayer() },\n                { \"layer\", GameObjectLayerName() },\n                { \"_instanceId\", gameObject.GetInstanceID () },\n            };\n            return payload;\n        }\n\n        private string GuessObjectTypeFromComponentNames(List<string> components)\n        {\n            List<string> cns = new List<string>(components);\n            cns.Reverse();\n            foreach (string name in cns)\n            {\n                if (TypeNames.ContainsKey(name))\n                {\n                    return TypeNames[name];\n                }\n            }\n            return DefaultTypeName;\n        }\n\n        private bool GameObjectVisible(Renderer renderer, List<string> components)\n        {\n            if (gameObject.activeInHierarchy)\n            {\n                bool light = components.Contains(\"Light\");\n                // bool mesh = components.Contains (\"MeshRenderer\") && components.Contains (\"MeshFilter\");\n                bool particle = components.Contains(\"ParticleSystem\") && components.Contains(\"ParticleSystemRenderer\");\n                if (light || particle)\n                {\n                    return false;\n                }\n                else\n                {\n                    return renderer? renderer.isVisible : true;\n                }\n            }\n            else\n            {\n                return false;\n            }\n        }\n\n        private int GameObjectLayer()\n        {\n            return gameObject.layer;\n        }\n        private string GameObjectLayerName()\n        {\n            return LayerMask.LayerToName(gameObject.layer);\n        }\n\n        private bool GameObjectClickable(List<string> components)\n        {\n            Button\n        }\n\n        private string GameObjectText()\n        {\n            Text text = gameObject.GetComponent<Text>();\n            return text? text.text : null;\n        }\n\n        private string GameObjectTag()\n        {\n            string tag;\n            try\n            {\n                tag =!gameObject.CompareTag(\"Untagged\")? gameObject.tag : null;\n            }\n            catch (UnityException)\n            {\n                tag = null;\n            }\n            return tag;\n        }\n\n        private List<string> GameObjectAllComponents()\n        {\n            List<string> components = new List<string>();\n            Component[] allComponents = gameObject.GetComponents<Component>();\n            if (allComponents!= null)\n            {\n                foreach (Component ac in allComponents)\n                {\n                    if (ac!= null)\n                    {\n                        components.Add(ac.GetType().Name);\n                    }\n                }\n            }\n            return components;\n        }\n\n        private Dictionary<string, float> GameObjectzOrders()\n        {\n            float CameraViewportPoint = 0;\n            if (camera!= null)\n            {\n                CameraViewportPoint = Math.Abs(camera.WorldToViewportPoint(gameObject.transform.position).z);\n            }\n            Dictionary<string, float> zOrders = new Dictionary<string, float>() {\n                { \"global\", 0f },\n                { \"local\", -1 * CameraViewportPoint }\n            };\n            return zOrders;\n        }\n\n        private Rect GameObjectRect(Renderer renderer, RectTransform rectTransform)\n        {\n            Rect rect = new Rect(0, 0, 0, 0);\n            if (renderer)\n            {\n                rect = RendererToScreenSpace(camera, renderer);\n            }\n            else if (rectTransform)\n            {\n                rect = RectTransformToScreenSpace(rectTransform);\n            }\n            return rect;\n        }\n\n        private float[] GameObjectPosInScreen(Vector3 objectPos, Renderer renderer, RectTransform rectTransform, Rect rect)\n        {\n            float[] pos = { 0f, 0f };\n\n            if (renderer)\n            {\n                // 3d object\n                pos[0] = objectPos.x / (float)Screen.width;\n                pos[1] = objectPos.y / (float)Screen.height;\n            }\n            else if (rectTransform)\n            {\n                // ui object (rendered on screen space, other render modes may be different)\n                // use center pos for now\n                Canvas rootCanvas = GetRootCanvas(gameObject);\n                RenderMode renderMode = rootCanvas!= null? rootCanvas.renderMode : new RenderMode();\n                switch (renderMode)\n                {\n                    case RenderMode.ScreenSpaceCamera:\n                        //\u4e0a\u4e00\u4e2a\u65b9\u6848\u7ecf\u8fc7\u5b9e\u9645\u6d4b\u8bd5\u53d1\u73b0\u8fd8\u6709\u4e24\u4e2a\u95ee\u9898\u5b58\u5728\n                        //1.\u5728\u6709Canvas Scaler\u4fee\u6539\u4e86RootCanvas\u7684Scale\u7684\u60c5\u51b5\u4e0b\u5750\u6807\u7684\u6293\u53d6\u4ecd\u7136\u4e0d\u5bf9\uff0c\u5f71\u54cd\u5230\u4e86ScreenSpaceCameram\u6a21\u5f0f\u5728\u4e0d\u540c\u5206\u8fa8\u7387\u548c\u5c4f\u5e55\u6bd4\u4f8b\u4e0b\u8bc6\u522b\u7684\u517c\u5bb9\u6027\u3002\n                        //2.RectTransformUtility\u8f6c\u7684 rectTransform.transform.position\u672c\u8d28\u4e0a\u5f97\u5230\u7684\u662fRectTransform.pivot\u4e2d\u5fc3\u8f74\u5728\u5c4f\u5e55\u4e0a\u7684\u5750\u6807\uff0c\u5982\u679cpivot\u4e0d\u7b49\u4e8e(0.5,0.5)\uff0c\n                        //\u90a3\u4e48\u83b7\u53d6\u5230\u7684position\u5c31\u4e0d\u7b49\u4e8e\u56fe\u5f62\u7684\u4e2d\u5fc3\u70b9\u3002\n                        //\u8bd5\u4e86\u4e00\u665a\u4e0a\uff0c\u627e\u5230\u4e86\u89e3\u51b3\u529e\u6cd5\u3002\n\n                        //\u7528MainCanvas\u8f6c\u4e00\u6b21\u5c4f\u5e55\u5750\u6807\n                        Vector2 position = RectTransformUtility.WorldToScreenPoint(rootCanvas.worldCamera, rectTransform.transform.position);\n                        //\u6ce8\u610f: \u8fd9\u91cc\u7684position\u5176\u5b9e\u662fPivot\u70b9\u5728Screen\u4e0a\u7684\u5750\u6807\uff0c\u5e76\u4e0d\u662f\u56fe\u5f62\u610f\u4e49\u4e0a\u7684\u4e2d\u5fc3\u70b9,\u5728\u7ecf\u8fc7\u4e0b\u5217\u7384\u5b66\u516c\u5f0f\u6362\u7b97\u624d\u662f\u771f\u7684\u56fe\u5f62\u4e2d\u5fc3\u5728\u5c4f\u5e55\u7684\u4f4d\u7f6e\u3002\n                        //\u516c\u5f0f\u5185\u7b97\u4e0a\u4e86rootCanvas.scaleFactor \u7f29\u653e\u56e0\u5b50\uff0c\u7ecf\u6d4b\u8bd5\u81f3\u5c11\u5728Canvas Scaler.Expand\u6a21\u5f0f\u4e0b\uff0c\u4ec0\u4e48\u5206\u8fa8\u7387\u548c\u5c4f\u5e55\u6bd4\u90fd\u6293\u7684\u5f88\u51c6\uff0c\u517c\u5bb9\u6027\u5f88\u5f3a\uff0c\u5176\u4ed6\u7684\u6709\u5f85\u6d4b\u8bd5\u3002\n                        //\u7531\u4e8e\u5f97\u51fa\u6765\u7684\u5750\u6807\u662f\u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9\uff0c\u89e6\u63a7\u8f93\u5165\u662f\u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9\uff0c\u6240\u4ee5\u8981\u4e0a\u4e0b\u53cd\u8f6c\u4e00\u4e0bPoco\u624d\u80fd\u7528,\u6240\u4ee5y\u5750\u6807\u7528Screen.height\u51cf\u53bb\u3002\n                        position.Set(\n                            position.x - rectTransform.rect.width * rootCanvas.scaleFactor * (rectTransform.pivot.x - 0.5f),\n                            Screen.height - (position.y - rectTransform.rect.height * rootCanvas.scaleFactor * (rectTransform.pivot.y - 0.5f))\n                            );\n                        pos[0] = position.x / Screen.width;\n                        pos[1] = position.y / Screen.height;\n                        break;\n                    case RenderMode.WorldSpace:\n                        Vector2 _pos = RectTransformUtility.WorldToScreenPoint(rootCanvas.worldCamera, rectTransform.transform.position);\n                        pos[0] = _pos.x / Screen.width;\n                        pos[1] = (Screen.height - _pos.y) / Screen.height;\n                        break;\n                    default:\n                        pos[0] = rect.center.x / (float)Screen.width;\n                        pos[1] = rect.center.y / (float)Screen.height;\n                        break;\n                }\n            }\n            return pos;\n        }\n\n        private Canvas GetRootCanvas(GameObject gameObject)\n        {\n            Canvas canvas = gameObject.GetComponentInParent<Canvas>();\n            // \u5982\u679cunity\u7248\u672c\u5c0f\u4e8eunity5.5\uff0c\u5c31\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u53d6\u5427\uff0c\u6ca1\u6cd5\u76f4\u63a5\u53d6rootCanvas\n            // \u5982\u679c\u6709\u7528\u52304.6\u4ee5\u4e0b\u7248\u672c\u7684\u8bdd\u5c31\u81ea\u5df1\u624b\u52a8\u5728\u8fd9\u91cc\u6dfb\u52a0\u6761\u4ef6\u5427\n#if UNITY_4_6 || UNITY_4_7 || UNITY_4_8 || UNITY_4_9 || UNITY_5_0 || UNITY_5_1 || UNITY_5_2 || UNITY_5_3 || UNITY_5_4\n\t\t\tif (canvas && canvas.isRootCanvas) {\n\t\t\t\treturn canvas;\n\t\t\t} else {\n\t\t\t\tif (gameObject.transform.parent.gameObject!= null) {\n\t\t\t\t\treturn GetRootCanvas(gameObject.transform.parent.gameObject);\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n#else\n            if (canvas && canvas.isRootCanvas)\n            {\n                return canvas;\n            }\n            else if (canvas)\n            {\n                return canvas.rootCanvas;\n            }\n            else\n            {\n                return null;\n            }\n#endif\n        }\n\n        private float[] GameObjectSizeInScreen(Rect rect, RectTransform rectTransform)\n        {\n            float[] size = { 0f, 0f };\n            if (rectTransform)\n            {\n                Canvas rootCanvas = GetRootCanvas(gameObject);\n                RenderMode renderMode = rootCanvas!= null? rootCanvas.renderMode : new RenderMode();\n                switch (renderMode)\n                {\n                    case RenderMode.ScreenSpaceCamera:\n                        Rect _rect = RectTransformUtility.PixelAdjustRect(rectTransform, rootCanvas);\n                        size = new float[] {\n                            _rect.width * rootCanvas.scaleFactor / (float)Screen.width,\n                            _rect.height * rootCanvas.scaleFactor / (float)Screen.height\n                        };\n                        break;\n                    case RenderMode.WorldSpace:\n                        Rect rect_ = rectTransform.rect;\n                        RectTransform canvasTransform = rootCanvas.GetComponent<RectTransform>();\n                        size = new float[] { rect_.width / canvasTransform.rect.width, rect_.height / canvasTransform.rect.height };\n                        break;\n                    default:\n                        size = new float[] { rect.width / (float)Screen.width, rect.height / (float)Screen.height };\n                        break;\n                }\n            }\n            else\n            {\n                size = new float[] { rect.width / (float)Screen.width, rect.height / (float)Screen.height };\n            }\n            return size;\n        }\n\n        private float[] GameObjectAnchorInScreen(Renderer renderer, Rect rect, Vector3 objectPos)\n        {\n            float[] defaultValue = { 0.5f, 0.5f };\n            if (rectTransform)\n            {\n                Vector2 data = rectTransform.pivot;\n                defaultValue[0] = data[0];\n                defaultValue[1] = 1 - data[1];\n                return defaultValue;\n            }\n            if (!renderer)\n            {\n                //<Modified> some object do not have renderer\n                return defaultValue;\n            }\n            float[] anchor = { (objectPos.x - rect.xMin) / rect.width, (objectPos.y - rect.yMin) / rect.height };\n            if (Double.IsNaN(anchor[0]) || Double.IsNaN(anchor[1]))\n            {\n                return defaultValue;\n            }\n            else if (Double.IsPositiveInfinity(anchor[0]) || Double.IsPositiveInfinity(anchor[1]))\n            {\n                return defaultValue;\n            }\n            else if (Double.IsNegativeInfinity(anchor[0]) || Double.IsNegativeInfinity(anchor[1]))\n            {\n                return defaultValue;\n            }\n            else\n            {\n                return anchor;\n            }\n        }\n\n        private string GetImageSourceTexture()\n        {\n            Image image = gameObject.GetComponent<Image>();\n            if (image!= null && image.sprite!= null)\n            {\n                return image.sprite.name;\n            }\n\n            RawImage rawImage = gameObject.GetComponent<RawImage>();\n            if (rawImage!= null && rawImage.texture!= null)\n            {\n                return rawImage.texture.name;\n            }\n\n            SpriteRenderer spriteRenderer = gameObject.GetComponent<SpriteRenderer>();\n            if (spriteRenderer!= null && spriteRenderer.sprite!= null)\n            {\n                return spriteRenderer.sprite.name;\n            }\n\n            Renderer render = gameObject.GetComponent<Renderer>();\n            if (renderer!= null && renderer.material!= null)\n            {\n                return renderer.material.color.ToString();\n            }\n\n            return null;\n        }\n\n        protected static Vector2 WorldToGUIPoint(Camera camera, Vector3 world)\n        {\n            Vector2 screenPoint = Vector2.zero;\n            if (camera!= null)\n            {\n                screenPoint = camera.WorldToScreenPoint(world);\n                screenPoint.y = (float)Screen.height - screenPoint.y;\n            }\n            return screenPoint;\n        }\n\n        protected static Rect RendererToScreenSpace(Camera camera, Renderer renderer)\n        {\n            Vector3 cen = renderer.bounds.center;\n            Vector3 ext = renderer.bounds.extents;\n            Vector2[] extentPoints = new Vector2[8] {\n                WorldToGUIPoint (camera, new Vector3 (cen.x - ext.x, cen.y - ext.y, cen.z - ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x + ext.x, cen.y - ext.y, cen.z - ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x - ext.x, cen.y - ext.y, cen.z + ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x + ext.x, cen.y - ext.y, cen.z + ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x - ext.x, cen.y + ext.y, cen.z - ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x + ext.x, cen.y + ext.y, cen.z - ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x - ext.x, cen.y + ext.y, cen.z + ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x + ext.x, cen.y + ext.y, cen.z + ext.z))\n            };\n            Vector2 min = extentPoints[0];\n            Vector2 max = extentPoints[0];\n            foreach (Vector2 v in extentPoints)\n            {\n                min = Vector2.Min(min, v);\n                max = Vector2.Max(max, v);\n            }\n            return new Rect(min.x, min.y, max.x - min.x, max.y - min.y);\n        }\n\n        protected static Rect RectTransformToScreenSpace(RectTransform rectTransform)\n        {\n            Vector2 size = Vector2.Scale(rectTransform.rect.size, rectTransform.lossyScale);\n            Rect rect = new Rect(rectTransform.position.x, Screen.height - rectTransform.position.y, size.x, size.y);\n            rect.x -= (rectTransform.pivot.x * size.x);\n            rect.y -= ((1.0f - rectTransform.pivot.y) * size.y);\n            return rect;\n        }\n\n        public static bool SetText(GameObject go, string textVal)\n        {\n            if (go!= null)\n            {\n                var inputField = go.GetComponent<InputField>();\n                if (inputField!= null)\n                {\n                    inputField.text = textVal;\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n}\n", "starcoder_inputs": "<fim_prefix>using System;\nusing System.Collections.Generic;\nusing UnityEngine.UI;\nusing UnityEngine;\n\n\nnamespace Poco\n{\n    public class UnityNode : AbstractNode\n    {\n        public static Dictionary<string, string> TypeNames = new Dictionary<string, string>() {\n            { \"Text\", \"Text\" },\n            { \"Gradient Text\", \"Gradient.Text\" },\n            { \"Image\", \"Image\" },\n            { \"RawImage\", \"Raw.Image\" },\n            { \"Mask\", \"Mask\" },\n            { \"2DRectMask\", \"2D-Rect.Mask\" },\n            { \"Button\", \"Button\" },\n            { \"InputField\", \"InputField\" },\n            { \"Toggle\", \"Toggle\" },\n            { \"Toggle Group\", \"ToggleGroup\" },\n            { \"Slider\", \"Slider\" },\n            { \"ScrollBar\", \"ScrollBar\" },\n            { \"DropDown\", \"DropDown\" },\n            { \"ScrollRect\", \"ScrollRect\" },\n            { \"Selectable\", \"Selectable\" },\n            { \"Camera\", \"Camera\" },\n            { \"RectTransform\", \"Node\" },\n        };\n        public static string DefaultTypeName = \"GameObject\";\n        private GameObject gameObject;\n        private Renderer renderer;\n        private RectTransform rectTransform;\n        private Rect rect;\n        private Vector2 objectPos;\n        private List<string> components;\n        private Camera camera;\n\n\n        public UnityNode(GameObject obj)\n        {\n            gameObject = obj;\n            camera = Camera.main;\n            foreach (var cam in Camera.allCameras)\n            {\n                // skip the main camera\n                // we want to use specified camera first then fallback to main camera if no other cameras\n                // for further advanced cases, we could test whether the game object is visible within the camera\n                if (cam == Camera.main)\n                {\n                    continue;\n                }\n                if ((cam.cullingMask & (1 << gameObject.layer))!= 0)\n                {\n                    camera = cam;\n                }\n            }\n\n            renderer = gameObject.GetComponent<Renderer>();\n            rectTransform = gameObject.GetComponent<RectTransform>();\n            rect = GameObjectRect(renderer, rectTransform);\n            objectPos = renderer? WorldToGUIPoint(camera, renderer.bounds.center) : Vector2.zero;\n            components = GameObjectAllComponents();\n        }\n\n        public override AbstractNode getParent()\n        {\n            GameObject parentObj = gameObject.transform.parent.gameObject;\n            return new UnityNode(parentObj);\n        }\n\n        public override List<AbstractNode> getChildren()\n        {\n            List<AbstractNode> children = new List<AbstractNode>();\n            foreach (Transform child in gameObject.transform)\n            {\n                children.Add(new UnityNode(child.gameObject));\n            }\n            return children;\n        }\n\n        public override object getAttr(string attrName)\n        {\n            switch (attrName)\n            {\n                case \"name\":\n                    return gameObject.name;\n                case \"type\":\n                    return GuessObjectTypeFromComponentNames(components);\n                case \"visible\":\n                    return GameObjectVisible(renderer, components);\n                case \"pos\":\n                    return GameObjectPosInScreen(objectPos, renderer, rectTransform, rect);\n                case \"size\":\n                    return GameObjectSizeInScreen(rect, rectTransform);\n                case \"scale\":\n                    return new List<float>() { 1.0f, 1.0f };\n                case \"anchorPoint\":\n                    return GameObjectAnchorInScreen(renderer, rect, objectPos);\n                case \"zOrders\":\n                    return GameObjectzOrders();\n                case \"clickable\":\n                    return GameObjectClickable(components);\n                case \"text\":\n                    return GameObjectText();\n                case \"components\":\n                    return components;\n                case \"texture\":\n                    return GetImageSourceTexture();\n                case \"tag\":\n                    return GameObjectTag();\n                case \"layer\":\n                    return GameObjectLayerName();\n                case \"_ilayer\":\n                    return GameObjectLayer();\n                case \"_instanceId\":\n                    return gameObject.GetInstanceID();\n                default:\n                    return null;\n            }\n        }\n\n\n        public override Dictionary<string, object> enumerateAttrs()\n        {\n            Dictionary<string, object> payload = GetPayload();\n            Dictionary<string, object> ret = new Dictionary<string, object>();\n            foreach (KeyValuePair<string, object> p in payload)\n            {\n                if (p.Value!= null)\n                {\n                    ret.Add(p.Key, p.Value);\n                }\n            }\n            return ret;\n        }\n\n\n        private Dictionary<string, object> GetPayload()\n        {\n            Dictionary<string, object> payload = new Dictionary<string, object>() {\n                { \"name\", gameObject.name },\n                { \"type\", GuessObjectTypeFromComponentNames (components) },\n                { \"visible\", GameObjectVisible (renderer, components) },\n                { \"pos\", GameObjectPosInScreen (objectPos, renderer, rectTransform, rect) },\n                { \"size\", GameObjectSizeInScreen (rect, rectTransform) },\n                { \"scale\", new List<float> (){ 1.0f, 1.0f } },\n                { \"anchorPoint\", GameObjectAnchorInScreen (renderer, rect, objectPos) },\n                { \"zOrders\", GameObjectzOrders () },\n                { \"clickable\", GameObjectClickable (components) },\n                { \"text\", GameObjectText () },\n                { \"components\", components },\n                { \"texture\", GetImageSourceTexture () },\n                { \"tag\", GameObjectTag () },\n                { \"_ilayer\", GameObjectLayer() },\n                { \"layer\", GameObjectLayerName() },\n                { \"_instanceId\", gameObject.GetInstanceID () },\n            };\n            return payload;\n        }\n\n        private string GuessObjectTypeFromComponentNames(List<string> components)\n        {\n            List<string> cns = new List<string>(components);\n            cns.Reverse();\n            foreach (string name in cns)\n            {\n                if (TypeNames.ContainsKey(name))\n                {\n                    return TypeNames[name];\n                }\n            }\n            return DefaultTypeName;\n        }\n\n        private bool GameObjectVisible(Renderer renderer, List<string> components)\n        {\n            if (gameObject.activeInHierarchy)\n            {\n                bool light = components.Contains(\"Light\");\n                // bool mesh = components.Contains (\"MeshRenderer\") && components.Contains (\"MeshFilter\");\n                bool particle = components.Contains(\"ParticleSystem\") && components.Contains(\"ParticleSystemRenderer\");\n                if (light || particle)\n                {\n                    return false;\n                }\n                else\n                {\n                    return renderer? renderer.isVisible : true;\n                }\n            }\n            else\n            {\n                return false;\n            }\n        }\n\n        private int GameObjectLayer()\n        {\n            return gameObject.layer;\n        }\n        private string GameObjectLayerName()\n        {\n            return LayerMask.LayerToName(gameObject.layer);\n        }\n\n        private bool GameObjectClickable(List<string> components)\n        {\n            Button<fim_suffix>\n        }\n\n        private string GameObjectText()\n        {\n            Text text = gameObject.GetComponent<Text>();\n            return text? text.text : null;\n        }\n\n        private string GameObjectTag()\n        {\n            string tag;\n            try\n            {\n                tag =!gameObject.CompareTag(\"Untagged\")? gameObject.tag : null;\n            }\n            catch (UnityException)\n            {\n                tag = null;\n            }\n            return tag;\n        }\n\n        private List<string> GameObjectAllComponents()\n        {\n            List<string> components = new List<string>();\n            Component[] allComponents = gameObject.GetComponents<Component>();\n            if (allComponents!= null)\n            {\n                foreach (Component ac in allComponents)\n                {\n                    if (ac!= null)\n                    {\n                        components.Add(ac.GetType().Name);\n                    }\n                }\n            }\n            return components;\n        }\n\n        private Dictionary<string, float> GameObjectzOrders()\n        {\n            float CameraViewportPoint = 0;\n            if (camera!= null)\n            {\n                CameraViewportPoint = Math.Abs(camera.WorldToViewportPoint(gameObject.transform.position).z);\n            }\n            Dictionary<string, float> zOrders = new Dictionary<string, float>() {\n                { \"global\", 0f },\n                { \"local\", -1 * CameraViewportPoint }\n            };\n            return zOrders;\n        }\n\n        private Rect GameObjectRect(Renderer renderer, RectTransform rectTransform)\n        {\n            Rect rect = new Rect(0, 0, 0, 0);\n            if (renderer)\n            {\n                rect = RendererToScreenSpace(camera, renderer);\n            }\n            else if (rectTransform)\n            {\n                rect = RectTransformToScreenSpace(rectTransform);\n            }\n            return rect;\n        }\n\n        private float[] GameObjectPosInScreen(Vector3 objectPos, Renderer renderer, RectTransform rectTransform, Rect rect)\n        {\n            float[] pos = { 0f, 0f };\n\n            if (renderer)\n            {\n                // 3d object\n                pos[0] = objectPos.x / (float)Screen.width;\n                pos[1] = objectPos.y / (float)Screen.height;\n            }\n            else if (rectTransform)\n            {\n                // ui object (rendered on screen space, other render modes may be different)\n                // use center pos for now\n                Canvas rootCanvas = GetRootCanvas(gameObject);\n                RenderMode renderMode = rootCanvas!= null? rootCanvas.renderMode : new RenderMode();\n                switch (renderMode)\n                {\n                    case RenderMode.ScreenSpaceCamera:\n                        //\u4e0a\u4e00\u4e2a\u65b9\u6848\u7ecf\u8fc7\u5b9e\u9645\u6d4b\u8bd5\u53d1\u73b0\u8fd8\u6709\u4e24\u4e2a\u95ee\u9898\u5b58\u5728\n                        //1.\u5728\u6709Canvas Scaler\u4fee\u6539\u4e86RootCanvas\u7684Scale\u7684\u60c5\u51b5\u4e0b\u5750\u6807\u7684\u6293\u53d6\u4ecd\u7136\u4e0d\u5bf9\uff0c\u5f71\u54cd\u5230\u4e86ScreenSpaceCameram\u6a21\u5f0f\u5728\u4e0d\u540c\u5206\u8fa8\u7387\u548c\u5c4f\u5e55\u6bd4\u4f8b\u4e0b\u8bc6\u522b\u7684\u517c\u5bb9\u6027\u3002\n                        //2.RectTransformUtility\u8f6c\u7684 rectTransform.transform.position\u672c\u8d28\u4e0a\u5f97\u5230\u7684\u662fRectTransform.pivot\u4e2d\u5fc3\u8f74\u5728\u5c4f\u5e55\u4e0a\u7684\u5750\u6807\uff0c\u5982\u679cpivot\u4e0d\u7b49\u4e8e(0.5,0.5)\uff0c\n                        //\u90a3\u4e48\u83b7\u53d6\u5230\u7684position\u5c31\u4e0d\u7b49\u4e8e\u56fe\u5f62\u7684\u4e2d\u5fc3\u70b9\u3002\n                        //\u8bd5\u4e86\u4e00\u665a\u4e0a\uff0c\u627e\u5230\u4e86\u89e3\u51b3\u529e\u6cd5\u3002\n\n                        //\u7528MainCanvas\u8f6c\u4e00\u6b21\u5c4f\u5e55\u5750\u6807\n                        Vector2 position = RectTransformUtility.WorldToScreenPoint(rootCanvas.worldCamera, rectTransform.transform.position);\n                        //\u6ce8\u610f: \u8fd9\u91cc\u7684position\u5176\u5b9e\u662fPivot\u70b9\u5728Screen\u4e0a\u7684\u5750\u6807\uff0c\u5e76\u4e0d\u662f\u56fe\u5f62\u610f\u4e49\u4e0a\u7684\u4e2d\u5fc3\u70b9,\u5728\u7ecf\u8fc7\u4e0b\u5217\u7384\u5b66\u516c\u5f0f\u6362\u7b97\u624d\u662f\u771f\u7684\u56fe\u5f62\u4e2d\u5fc3\u5728\u5c4f\u5e55\u7684\u4f4d\u7f6e\u3002\n                        //\u516c\u5f0f\u5185\u7b97\u4e0a\u4e86rootCanvas.scaleFactor \u7f29\u653e\u56e0\u5b50\uff0c\u7ecf\u6d4b\u8bd5\u81f3\u5c11\u5728Canvas Scaler.Expand\u6a21\u5f0f\u4e0b\uff0c\u4ec0\u4e48\u5206\u8fa8\u7387\u548c\u5c4f\u5e55\u6bd4\u90fd\u6293\u7684\u5f88\u51c6\uff0c\u517c\u5bb9\u6027\u5f88\u5f3a\uff0c\u5176\u4ed6\u7684\u6709\u5f85\u6d4b\u8bd5\u3002\n                        //\u7531\u4e8e\u5f97\u51fa\u6765\u7684\u5750\u6807\u662f\u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9\uff0c\u89e6\u63a7\u8f93\u5165\u662f\u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9\uff0c\u6240\u4ee5\u8981\u4e0a\u4e0b\u53cd\u8f6c\u4e00\u4e0bPoco\u624d\u80fd\u7528,\u6240\u4ee5y\u5750\u6807\u7528Screen.height\u51cf\u53bb\u3002\n                        position.Set(\n                            position.x - rectTransform.rect.width * rootCanvas.scaleFactor * (rectTransform.pivot.x - 0.5f),\n                            Screen.height - (position.y - rectTransform.rect.height * rootCanvas.scaleFactor * (rectTransform.pivot.y - 0.5f))\n                            );\n                        pos[0] = position.x / Screen.width;\n                        pos[1] = position.y / Screen.height;\n                        break;\n                    case RenderMode.WorldSpace:\n                        Vector2 _pos = RectTransformUtility.WorldToScreenPoint(rootCanvas.worldCamera, rectTransform.transform.position);\n                        pos[0] = _pos.x / Screen.width;\n                        pos[1] = (Screen.height - _pos.y) / Screen.height;\n                        break;\n                    default:\n                        pos[0] = rect.center.x / (float)Screen.width;\n                        pos[1] = rect.center.y / (float)Screen.height;\n                        break;\n                }\n            }\n            return pos;\n        }\n\n        private Canvas GetRootCanvas(GameObject gameObject)\n        {\n            Canvas canvas = gameObject.GetComponentInParent<Canvas>();\n            // \u5982\u679cunity\u7248\u672c\u5c0f\u4e8eunity5.5\uff0c\u5c31\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u53d6\u5427\uff0c\u6ca1\u6cd5\u76f4\u63a5\u53d6rootCanvas\n            // \u5982\u679c\u6709\u7528\u52304.6\u4ee5\u4e0b\u7248\u672c\u7684\u8bdd\u5c31\u81ea\u5df1\u624b\u52a8\u5728\u8fd9\u91cc\u6dfb\u52a0\u6761\u4ef6\u5427\n#if UNITY_4_6 || UNITY_4_7 || UNITY_4_8 || UNITY_4_9 || UNITY_5_0 || UNITY_5_1 || UNITY_5_2 || UNITY_5_3 || UNITY_5_4\n\t\t\tif (canvas && canvas.isRootCanvas) {\n\t\t\t\treturn canvas;\n\t\t\t} else {\n\t\t\t\tif (gameObject.transform.parent.gameObject!= null) {\n\t\t\t\t\treturn GetRootCanvas(gameObject.transform.parent.gameObject);\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n#else\n            if (canvas && canvas.isRootCanvas)\n            {\n                return canvas;\n            }\n            else if (canvas)\n            {\n                return canvas.rootCanvas;\n            }\n            else\n            {\n                return null;\n            }\n#endif\n        }\n\n        private float[] GameObjectSizeInScreen(Rect rect, RectTransform rectTransform)\n        {\n            float[] size = { 0f, 0f };\n            if (rectTransform)\n            {\n                Canvas rootCanvas = GetRootCanvas(gameObject);\n                RenderMode renderMode = rootCanvas!= null? rootCanvas.renderMode : new RenderMode();\n                switch (renderMode)\n                {\n                    case RenderMode.ScreenSpaceCamera:\n                        Rect _rect = RectTransformUtility.PixelAdjustRect(rectTransform, rootCanvas);\n                        size = new float[] {\n                            _rect.width * rootCanvas.scaleFactor / (float)Screen.width,\n                            _rect.height * rootCanvas.scaleFactor / (float)Screen.height\n                        };\n                        break;\n                    case RenderMode.WorldSpace:\n                        Rect rect_ = rectTransform.rect;\n                        RectTransform canvasTransform = rootCanvas.GetComponent<RectTransform>();\n                        size = new float[] { rect_.width / canvasTransform.rect.width, rect_.height / canvasTransform.rect.height };\n                        break;\n                    default:\n                        size = new float[] { rect.width / (float)Screen.width, rect.height / (float)Screen.height };\n                        break;\n                }\n            }\n            else\n            {\n                size = new float[] { rect.width / (float)Screen.width, rect.height / (float)Screen.height };\n            }\n            return size;\n        }\n\n        private float[] GameObjectAnchorInScreen(Renderer renderer, Rect rect, Vector3 objectPos)\n        {\n            float[] defaultValue = { 0.5f, 0.5f };\n            if (rectTransform)\n            {\n                Vector2 data = rectTransform.pivot;\n                defaultValue[0] = data[0];\n                defaultValue[1] = 1 - data[1];\n                return defaultValue;\n            }\n            if (!renderer)\n            {\n                //<Modified> some object do not have renderer\n                return defaultValue;\n            }\n            float[] anchor = { (objectPos.x - rect.xMin) / rect.width, (objectPos.y - rect.yMin) / rect.height };\n            if (Double.IsNaN(anchor[0]) || Double.IsNaN(anchor[1]))\n            {\n                return defaultValue;\n            }\n            else if (Double.IsPositiveInfinity(anchor[0]) || Double.IsPositiveInfinity(anchor[1]))\n            {\n                return defaultValue;\n            }\n            else if (Double.IsNegativeInfinity(anchor[0]) || Double.IsNegativeInfinity(anchor[1]))\n            {\n                return defaultValue;\n            }\n            else\n            {\n                return anchor;\n            }\n        }\n\n        private string GetImageSourceTexture()\n        {\n            Image image = gameObject.GetComponent<Image>();\n            if (image!= null && image.sprite!= null)\n            {\n                return image.sprite.name;\n            }\n\n            RawImage rawImage = gameObject.GetComponent<RawImage>();\n            if (rawImage!= null && rawImage.texture!= null)\n            {\n                return rawImage.texture.name;\n            }\n\n            SpriteRenderer spriteRenderer = gameObject.GetComponent<SpriteRenderer>();\n            if (spriteRenderer!= null && spriteRenderer.sprite!= null)\n            {\n                return spriteRenderer.sprite.name;\n            }\n\n            Renderer render = gameObject.GetComponent<Renderer>();\n            if (renderer!= null && renderer.material!= null)\n            {\n                return renderer.material.color.ToString();\n            }\n\n            return null;\n        }\n\n        protected static Vector2 WorldToGUIPoint(Camera camera, Vector3 world)\n        {\n            Vector2 screenPoint = Vector2.zero;\n            if (camera!= null)\n            {\n                screenPoint = camera.WorldToScreenPoint(world);\n                screenPoint.y = (float)Screen.height - screenPoint.y;\n            }\n            return screenPoint;\n        }\n\n        protected static Rect RendererToScreenSpace(Camera camera, Renderer renderer)\n        {\n            Vector3 cen = renderer.bounds.center;\n            Vector3 ext = renderer.bounds.extents;\n            Vector2[] extentPoints = new Vector2[8] {\n                WorldToGUIPoint (camera, new Vector3 (cen.x - ext.x, cen.y - ext.y, cen.z - ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x + ext.x, cen.y - ext.y, cen.z - ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x - ext.x, cen.y - ext.y, cen.z + ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x + ext.x, cen.y - ext.y, cen.z + ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x - ext.x, cen.y + ext.y, cen.z - ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x + ext.x, cen.y + ext.y, cen.z - ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x - ext.x, cen.y + ext.y, cen.z + ext.z)),\n                WorldToGUIPoint (camera, new Vector3 (cen.x + ext.x, cen.y + ext.y, cen.z + ext.z))\n            };\n            Vector2 min = extentPoints[0];\n            Vector2 max = extentPoints[0];\n            foreach (Vector2 v in extentPoints)\n            {\n                min = Vector2.Min(min, v);\n                max = Vector2.Max(max, v);\n            }\n            return new Rect(min.x, min.y, max.x - min.x, max.y - min.y);\n        }\n\n        protected static Rect RectTransformToScreenSpace(RectTransform rectTransform)\n        {\n            Vector2 size = Vector2.Scale(rectTransform.rect.size, rectTransform.lossyScale);\n            Rect rect = new Rect(rectTransform.position.x, Screen.height - rectTransform.position.y, size.x, size.y);\n            rect.x -= (rectTransform.pivot.x * size.x);\n            rect.y -= ((1.0f - rectTransform.pivot.y) * size.y);\n            return rect;\n        }\n\n        public static bool SetText(GameObject go, string textVal)\n        {\n            if (go!= null)\n            {\n                var inputField = go.GetComponent<InputField>();\n                if (inputField!= null)\n                {\n                    inputField.text = textVal;\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n}\n<fim_middle>"}
{"inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class MatchData\n{\n    public bool IsPlayerSkinned;\n    public List<Vector3> mTeam1 = new List<Vector3>();\n    public List<Vector3> mTeam2 = new List<Vector3>();\n    float orthographicSize = 5.0f;\n    float orthographicHeightSize = 3.0f;\n\n    public int PlayerCount = 11;\n    readonly float StadiumWidth = 54.47f;\n    readonly float StadiumHeight = 34.26f;\n    Dictionary<int, GameObject> playersDic = new Dictionary<int, GameObject>();\n    public void SetOrthographicSize(float size)\n    {\n        orthographicSize = size;\n        orthographicHeightSize = size * (StadiumHeight / StadiumWidth);\n    }\n\n    Vector3 world2Camera(Vector3 wPos)\n    {\n        Vector3 cPos = Vector3.zero;\n\n        cPos.x = wPos.x / StadiumWidth * orthographicSize;\n        cPos.y = wPos.z / StadiumHeight * orthographicHeightSize;\n        cPos.z = 1;\n\n        return cPos;\n    }\n\n    public void SetPlayerData(Dictionary<int, GameObject> players)\n    {\n        playersDic = players;\n    }\n\n    public void GetPlayerPos()\n    {\n        mTeam1.Clear();\n        mTeam2.Clear();\n\n        foreach(var item in playersDic)\n        {\n            Vector3 pos;\n            if (IsPlayerSkinned)\n            {\n                pos = item.Value.transform.Find(\"Dummy001/pelvis\").position;\n            }\n            else\n            {\n                pos = item.Value.transform.position;\n            }\n            var cPos = world2Camera(pos);\n            if (item.Key < 11)\n            {\n                mTeam1.Add(cPos);\n            }\n            else\n            {\n                mTeam2.Add(cPos);\n            }\n        }        \n    }\n}\n\npublic class MatchHeatMapControl : MonoBehaviour\n{\n    public bool IsPlayerSkinned;\n    List<GameObject> mTeam1 = new List<GameObject>();\n    List<GameObject> mTeam2 = new List<GameObject>();\n\n    public MatchData md = new MatchData();\n    \n\n    List<GameObject> pool = new List<GameObject>();\n    int objCount = 0;\n\n    Color TagColor1 = new Color(1.0f, 0.0f, 0.0f);\n    Color TagColor2 = new Color(0.0f, 1.0f, 0.0f);\n\n    Material mat1;\n    Material mat2;\n    GameObject GetObject()\n    {\n        int index = objCount;\n        GameObject go = null;\n        if (index < pool.Count)\n        {\n            objCount++;\n            go = pool[index];\n            go.SetActive(true);\n        }\n        else\n        {\n            var childTran = gameObject.transform.GetChild(0);\n            if (childTran != null)\n            {\n                GameObject newObj = GameObject.Instantiate(childTran.gameObject);\n                newObj.name = \"HeatQuad\";\n                newObj.transform.SetParent(gameObject.transform);\n                pool.Add(newObj);\n                objCount = pool.Count;\n                go = newObj;\n                go.SetActive(true);\n            }\n        }\n\n        return go;\n    }\n\n    Material GetMat(bool bRed)\n    {\n        if (mat1 == null || mat2 == null)\n        {\n            var childTran = gameObject.transform.GetChild(0);\n            if (childTran != null)\n            {\n                var mr = childTran.gameObject.GetComponent<MeshRenderer>();\n                if(mr != null)\n                {\n                    mat1 = new Material(mr.sharedMaterial);\n                    mat1.name = \"BlendMaterial1\";\n                    mat2 = new Material(mr.sharedMaterial);\n                    mat2.name = \"BlendMaterial2\";\n\n                    mat1.SetColor(\"_TagCol\", TagColor1);\n                    mat2.SetColor(\"_TagCol\", TagColor2);\n                }\n            }\n        }\n\n        if (bRed)\n            return mat1;\n\n        return mat2;\n    }\n\n    public bool inVisualizeView = false;\n\n    void Update()\n    {\n        if (!inVisualizeView) return;\n        md.GetPlayerPos();\n        var camera = GetComponent<Camera>();\n        if(camera != null)\n        {\n            md.SetOrthographicSize(camera.orthographicSize);\n        }\n\n        objCount = 0;\n        foreach (var pos in md.mTeam1)\n        {\n            var go = GetObject();\n            go.GetComponent<MeshRenderer>().sharedMaterial = GetMat(true);\n            go.transform.localPosition = pos;\n        }\n\n        foreach (var pos in md.mTeam2)\n        {\n            var go = GetObject();\n            go.GetComponent<MeshRenderer>().sharedMaterial = GetMat(false);\n            go.transform.localPosition = pos;\n        }\n    }\n}\n", "cropped_inputs": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class MatchData\n{\n    public bool IsPlayerSkinned;\n    public List<Vector3> mTeam1 = new List<Vector3>();\n    public List<Vector3> mTeam2 = new List<Vector3>();\n    float orthographicSize = 5.0f;\n    float orthographicHeightSize = 3.0f;\n\n    public int PlayerCount = 11;\n    readonly float StadiumWidth = 54.47f;\n    readonly float StadiumHeight = 34.26f;\n    Dictionary<int, GameObject> playersDic = new Dictionary<int, GameObject>();\n    public void SetOrthographicSize(float size)\n    {\n        orthographicSize = size;\n        orthographicHeightSize = size * (StadiumHeight / StadiumWidth);\n    }\n\n    Vector3 world2Camera(Vector3 wPos)\n    {\n        Vector3 cPos = Vector3.zero;\n\n        cPos.x = wPos.x / StadiumWidth * orthographicSize;\n        cPos.y = wPos.z / StadiumHeight * orthographicHeightSize;\n        cPos.z = 1;\n\n        return cPos;\n    }\n\n    public void SetPlayerData(Dictionary<int, GameObject> players)\n    {\n        playersDic = players;\n    }\n\n    public void GetPlayerPos()\n    {\n        mTeam1.Clear();\n        mTeam2.Clear();\n\n        foreach(var item in playersDic)\n        {\n            Vector3 pos;\n            if (IsPlayerSkinned)\n            {\n                pos = item.Value.transform.Find(\"DummyValue.transform.position;\n            }\n            var cPos = world2Camera(pos);\n            if (item.Key < 11)\n            {\n                mTeam1.Add(cPos);\n            }\n            else\n            {\n                mTeam2.Add(cPos);\n            }\n        }        \n    }\n}\n\npublic class MatchHeatMapControl : MonoBehaviour\n{\n    public bool IsPlayerSkinned;\n    List<GameObject> mTeam1 = new List<GameObject>();\n    List<GameObject> mTeam2 = new List<GameObject>();\n\n    public MatchData md = new MatchData();\n    \n\n    List<GameObject> pool = new List<GameObject>();\n    int objCount = 0;\n\n    Color TagColor1 = new Color(1.0f, 0.0f, 0.0f);\n    Color TagColor2 = new Color(0.0f, 1.0f, 0.0f);\n\n    Material mat1;\n    Material mat2;\n    GameObject GetObject()\n    {\n        int index = objCount;\n        GameObject go = null;\n        if (index < pool.Count)\n        {\n            objCount++;\n            go = pool[index];\n            go.SetActive(true);\n        }\n        else\n        {\n            var childTran = gameObject.transform.GetChild(0);\n            if (childTran!= null)\n            {\n                GameObject newObj = GameObject.Instantiate(childTran.gameObject);\n                newObj.name = \"HeatQuad\";\n                newObj.transform.SetParent(gameObject.transform);\n                pool.Add(newObj);\n                objCount = pool.Count;\n                go = newObj;\n                go.SetActive(true);\n            }\n        }\n\n        return go;\n    }\n\n    Material GetMat(bool bRed)\n    {\n        if (mat1 == null || mat2 == null)\n        {\n            var childTran = gameObject.transform.GetChild(0);\n            if (childTran!= null)\n            {\n                var mr = childTran.gameObject.GetComponent<MeshRenderer>();\n                if(mr!= null)\n                {\n                    mat1 = new Material(mr.sharedMaterial);\n                    mat1.name = \"BlendMaterial1\";\n                    mat2 = new Material(mr.sharedMaterial);\n                    mat2.name = \"BlendMaterial2\";\n\n                    mat1.SetColor(\"_TagCol\", TagColor1);\n                    mat2.SetColor(\"_TagCol\", TagColor2);\n                }\n            }\n        }\n\n        if (bRed)\n            return mat1;\n\n        return mat2;\n    }\n\n    public bool inVisualizeView = false;\n\n    void Update()\n    {\n        if (!inVisualizeView) return;\n        md.GetPlayerPos();\n        var camera = GetComponent<Camera>();\n        if(camera!= null)\n        {\n            md.SetOrthographicSize(camera.orthographicSize);\n        }\n\n        objCount = 0;\n        foreach (var pos in md.mTeam1)\n        {\n            var go = GetObject();\n            go.GetComponent<MeshRenderer>().sharedMaterial = GetMat(true);\n            go.transform.localPosition = pos;\n        }\n\n        foreach (var pos in md.mTeam2)\n        {\n            var go = GetObject();\n            go.GetComponent<MeshRenderer>().sharedMaterial = GetMat(false);\n            go.transform.localPosition = pos;\n        }\n    }\n}\n", "starcoder_inputs": "<fim_prefix>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class MatchData\n{\n    public bool IsPlayerSkinned;\n    public List<Vector3> mTeam1 = new List<Vector3>();\n    public List<Vector3> mTeam2 = new List<Vector3>();\n    float orthographicSize = 5.0f;\n    float orthographicHeightSize = 3.0f;\n\n    public int PlayerCount = 11;\n    readonly float StadiumWidth = 54.47f;\n    readonly float StadiumHeight = 34.26f;\n    Dictionary<int, GameObject> playersDic = new Dictionary<int, GameObject>();\n    public void SetOrthographicSize(float size)\n    {\n        orthographicSize = size;\n        orthographicHeightSize = size * (StadiumHeight / StadiumWidth);\n    }\n\n    Vector3 world2Camera(Vector3 wPos)\n    {\n        Vector3 cPos = Vector3.zero;\n\n        cPos.x = wPos.x / StadiumWidth * orthographicSize;\n        cPos.y = wPos.z / StadiumHeight * orthographicHeightSize;\n        cPos.z = 1;\n\n        return cPos;\n    }\n\n    public void SetPlayerData(Dictionary<int, GameObject> players)\n    {\n        playersDic = players;\n    }\n\n    public void GetPlayerPos()\n    {\n        mTeam1.Clear();\n        mTeam2.Clear();\n\n        foreach(var item in playersDic)\n        {\n            Vector3 pos;\n            if (IsPlayerSkinned)\n            {\n                pos = item.Value.transform.Find(\"Dummy<fim_suffix>Value.transform.position;\n            }\n            var cPos = world2Camera(pos);\n            if (item.Key < 11)\n            {\n                mTeam1.Add(cPos);\n            }\n            else\n            {\n                mTeam2.Add(cPos);\n            }\n        }        \n    }\n}\n\npublic class MatchHeatMapControl : MonoBehaviour\n{\n    public bool IsPlayerSkinned;\n    List<GameObject> mTeam1 = new List<GameObject>();\n    List<GameObject> mTeam2 = new List<GameObject>();\n\n    public MatchData md = new MatchData();\n    \n\n    List<GameObject> pool = new List<GameObject>();\n    int objCount = 0;\n\n    Color TagColor1 = new Color(1.0f, 0.0f, 0.0f);\n    Color TagColor2 = new Color(0.0f, 1.0f, 0.0f);\n\n    Material mat1;\n    Material mat2;\n    GameObject GetObject()\n    {\n        int index = objCount;\n        GameObject go = null;\n        if (index < pool.Count)\n        {\n            objCount++;\n            go = pool[index];\n            go.SetActive(true);\n        }\n        else\n        {\n            var childTran = gameObject.transform.GetChild(0);\n            if (childTran!= null)\n            {\n                GameObject newObj = GameObject.Instantiate(childTran.gameObject);\n                newObj.name = \"HeatQuad\";\n                newObj.transform.SetParent(gameObject.transform);\n                pool.Add(newObj);\n                objCount = pool.Count;\n                go = newObj;\n                go.SetActive(true);\n            }\n        }\n\n        return go;\n    }\n\n    Material GetMat(bool bRed)\n    {\n        if (mat1 == null || mat2 == null)\n        {\n            var childTran = gameObject.transform.GetChild(0);\n            if (childTran!= null)\n            {\n                var mr = childTran.gameObject.GetComponent<MeshRenderer>();\n                if(mr!= null)\n                {\n                    mat1 = new Material(mr.sharedMaterial);\n                    mat1.name = \"BlendMaterial1\";\n                    mat2 = new Material(mr.sharedMaterial);\n                    mat2.name = \"BlendMaterial2\";\n\n                    mat1.SetColor(\"_TagCol\", TagColor1);\n                    mat2.SetColor(\"_TagCol\", TagColor2);\n                }\n            }\n        }\n\n        if (bRed)\n            return mat1;\n\n        return mat2;\n    }\n\n    public bool inVisualizeView = false;\n\n    void Update()\n    {\n        if (!inVisualizeView) return;\n        md.GetPlayerPos();\n        var camera = GetComponent<Camera>();\n        if(camera!= null)\n        {\n            md.SetOrthographicSize(camera.orthographicSize);\n        }\n\n        objCount = 0;\n        foreach (var pos in md.mTeam1)\n        {\n            var go = GetObject();\n            go.GetComponent<MeshRenderer>().sharedMaterial = GetMat(true);\n            go.transform.localPosition = pos;\n        }\n\n        foreach (var pos in md.mTeam2)\n        {\n            var go = GetObject();\n            go.GetComponent<MeshRenderer>().sharedMaterial = GetMat(false);\n            go.transform.localPosition = pos;\n        }\n    }\n}\n<fim_middle>"}
{"inputs": "\ufeffusing Framework.GalaSports.GameScene;\nusing Framework.GalaSports.MVC.Core;\nusing Framework.GalaSports.MVC.Core.Events;\nusing GalaSports;\nusing GalaSports.FootballNG;\nusing Platform;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Main;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\nusing UnityEngine.UI;\n\nnamespace Assets.Scripts\n{\n    partial class BattleTeamInfoTip : MonoBehaviour\n    {\n        Dictionary<int, float> ShowTimeDic = new Dictionary<int, float>() { { 1, 2 }, { 2, 2 }, { 3, 1 }, { 4, 0.5f }, { 5, 0.1f } };\n        public void ShowTip(ISoccerStatisticManager ssm, int type, TeamConfigurationData teamA, TeamConfigurationData teamB, string matchTime)\n        {\n            gameObject.SetActive(true);\n\n            BattleTipConfig.TeamInfoSmallTipStayTimeL = GetShowTime(ssm.teamAStatistic.sgsList.Count);\n            BattleTipConfig.TeamInfoSmallTipStayTimeR = GetShowTime(ssm.teamBStatistic.sgsList.Count);\n\n            SetData(ssm, teamA, teamB, matchTime, type);\n            if (type != 2)\n            {\n                StartCoroutine(ShowTipItemAIEnumerator(ssm.teamAStatistic.sgsList,BattleTipConfig.TeamInfoSmallTipStayTimeL));\n                StartCoroutine(ShowTipItemBIEnumerator(ssm.teamBStatistic.sgsList,BattleTipConfig.TeamInfoSmallTipStayTimeR));\n            }\n            int maxItemNum = Mathf.Max(ssm.teamAStatistic.sgsList.Count, ssm.teamBStatistic.sgsList.Count);\n            float maxItemTime = Mathf.Max(BattleTipConfig.TeamInfoSmallTipStayTimeL, BattleTipConfig.TeamInfoSmallTipStayTimeR);\n            float itemWaitTime = Mathf.FloorToInt(maxItemNum / 3f) * (maxItemTime + BattleTipConfig.ShowTipTime + BattleTipConfig.HideTipTime);\n            StartCoroutine(ShowTipIEnumerator(ssm, itemWaitTime, type, teamA, teamB));\n            float time = 0f;\n            if (type == 2)\n            {\n                time = BattleTipConfig.TeamInfoTipGoalStayTime;\n            }\n            else\n            {\n                time = itemWaitTime;\n                time += Mathf.Max(itemWaitTime + BattleTipConfig.TeamInfoTipLeftStayTime) < 4 ? 4 - (itemWaitTime) : BattleTipConfig.TeamInfoTipLeftStayTime;\n                time += BattleTipConfig.HideTipTime;\n            }\n            Go.DelayCall(delegate {\n                if (type != 1 && type != 2 && type != 6)\n                {\n                    if (transform != null)\n                    {\n                        transform.GetComponent<CanvasGroup>().alpha = 0f;\n                        EventDispatcher.TriggerEvent(\"SetOffsetState\", true, true);\n                    }\n                }\n            }, time);\n        }\n        private float GetShowTime(int ballCount)\n        {\n            int groupNum = Mathf.CeilToInt(ballCount / 3f);\n            if(ShowTimeDic.ContainsKey(groupNum))\n                return ShowTimeDic[groupNum];\n            else\n                return 0.1f;\n        }\n\n        private void SetData(ISoccerStatisticManager ssm, TeamConfigurationData teamA, TeamConfigurationData teamB, string matchTime, int type)\n        {\n            Text_TeamAName.text = ssm.teamAStatistic.teamName;\n            Text_TeamBName.text = ssm.teamBStatistic.teamName;\n            Text_TeamAUnionShortName.text = teamA.union_shortname;\n            Text_TeamBUnionShortName.text = teamB.union_shortname;\n            if (type != 6)\n            {\n                Text_TeamAScore.text = ssm.teamAStatistic.score.ToString();\n                Text_TeamBScore.text = ssm.teamBStatistic.score.ToString();\n                if(GameDataHelper.PveCupMatchType == 4)\n                {\n                    Text_TeamATotalScore.text = (ssm.teamAStatistic.score + GameDataHelper.TeamALastScore).ToString();\n                    Text_TeamBTotalScore.text = (ssm.teamBStatistic.score + GameDataHelper.TeamBLastScore).ToString();\n                }\n            }\n            else\n            {\n                Text_TeamAScore.text = ssm.teamAStatistic.penaltyScore.ToString();\n                Text_TeamBScore.text = ssm.teamBStatistic.penaltyScore.ToString();\n            }\n            Text_MatchTime.text = matchTime;\n            SetSprite(Image_TeamALogo, Image_TeamABg, true, ssm, teamA.teamLogo);\n            SetSprite(Image_TeamBLogo, Image_TeamBBg, false, ssm, teamB.teamLogo);\n        }\n\n        private void SetSprite(Image imageLogo, Image imageBg, bool teamA, ISoccerStatisticManager ssm, Sprite logo)\n        {\n            int logoId = teamA ? 1 : 0;\n            //if (imageBg != null && !GuideConfig.isGuideMatch()) imageBg.color = BattleTipConfig.GetColor(logoId);\n            imageLogo.sprite = logo;\n            if (imageLogo.sprite == null || imageLogo.sprite.texture == null)\n                return;\n            if (imageLogo.sprite.texture.name == \"NationFlag\")\n            {\n                imageLogo.GetComponent<RectTransform>().localScale = new Vector2(0.8f, 0.8f);\n            }\n        }\n\n        IEnumerator ShowTipIEnumerator(ISoccerStatisticManager ssm, float itemWaitTime, int type, TeamConfigurationData teamA, TeamConfigurationData teamB)\n        {\n            // transform.GetComponent<CanvasGroup>().alpha = 0;\n            transform.GetComponent<CanvasGroup>().alpha = 1;\n            if (type == 2)\n            {\n                yield return new WaitForSeconds(BattleTipConfig.TeamInfoTipGoalStayTime);\n            }\n            else\n            {\n                yield return new WaitForSeconds(itemWaitTime);\n                yield return new WaitForSeconds(Mathf.Max(itemWaitTime + BattleTipConfig.TeamInfoTipLeftStayTime) < 4 ? 4 - (itemWaitTime) : BattleTipConfig.TeamInfoTipLeftStayTime);\n            }\n\n            if (transform != null)\n            {\n                Go.to(transform.GetComponent<CanvasGroup>(), BattleTipConfig.HideTipTime, new GoTweenConfig().floatProp(\"alpha\", 0));\n            }\n        }\n\n        IEnumerator ShowTipItemAIEnumerator(List<SoccerGoalStatistic> sgsList,float showTime)\n        {\n            int itemMo = 0;\n            for (int i = 0; i < List_ItemTeamA.Count; i++)\n            {\n                List_ItemTeamA[i].gameObject.SetActive(false);\n            }\n            for (int i = 0, num = sgsList.Count; i < num; i++)\n            {\n                itemMo = (i + 1) % 3;\n                List_ItemTeamA[i % 3].ShowTip(sgsList[i],showTime);\n                if (itemMo == 0)\n                {\n                    yield return new WaitForSeconds(showTime + BattleTipConfig.ShowTipTime + BattleTipConfig.HideTipTime);\n                }\n            }\n        }\n\n        IEnumerator ShowTipItemBIEnumerator(List<SoccerGoalStatistic> sgsList, float showTime)\n        {\n            int itemMo = 0;\n            for (int i = 0; i < List_ItemTeamB.Count; i++)\n            {\n                List_ItemTeamB[i].gameObject.SetActive(false);\n            }\n            for (int i = 0, num = sgsList.Count; i < num; i++)\n            {\n                itemMo = (i + 1) % 3;\n                List_ItemTeamB[i % 3].ShowTip(sgsList[i], showTime);\n                if (itemMo == 0)\n                {\n                    yield return new WaitForSeconds(showTime + BattleTipConfig.ShowTipTime + BattleTipConfig.HideTipTime);\n                }\n            }\n        }\n    }\n}\n", "cropped_inputs": "\ufeffusing Framework.GalaSports.GameScene;\nusing Framework.GalaSports.MVC.Core;\nusing Framework.GalaSports.MVC.Core.Events;\nusing GalaSports;\nusing GalaSports.FootballNG;\nusing Platform;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Main;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\nusing UnityEngine.UI;\n\nnamespace Assets.Scripts\n{\n    partial class BattleTeamInfoTip : MonoBehaviour\n    {\n        Dictionary<int, float> ShowTimeDic = new Dictionary<int, float>() { { 1, 2 }, { 2, 2 }, { 3, 1 }, { 4, 0.5f }, { 5, 0.1f } };\n        public void ShowTip(ISoccerStatisticManager ssm, int type, TeamConfigurationData teamA, TeamConfigurationData teamB, string matchTime)\n        {\n            gameObject.SetActive(true);\n\n            BattleTipConfig.TeamInfoSmallTipStayTimeL = GetShowTime(ssm.teamAStatistic.sgsList.Count);\n            BattleTipConfig.TeamInfoSmallTipStayTimeR = GetShowTime(ssm.teamBStatistic.sgsList.Count);\n\n            SetData(ssm, teamA, teamB, matchTime, type);\n            if (type!= 2)\n            {\n                StartCoroutine(ShowTipItemAIEnumerator(ssm.teamAStatistic.sgsList,BattleTipConfig.TeamInfoSmallTipStayTimeL));\n                StartCoroutine(ShowTipItemBIEnumerator(ssm.teamBStatistic.sgsList,BattleTipConfig.TeamInfoSmallTipStayTimeR));\n            }\n            int maxItemNum = Mathf.Max(ssm.teamAStatistic.sgsList.Count, ssm.teamBStatistic.sgsList.Count);\n            float maxItemTime = Mathf.Max(BattleTipConfig.TeamInfoSmallTipStayTimeL, BattleTipConfig.TeamInfoSmallTipStayTimeR);\n            float itemWaitTime = Mathf.FloorToInt(maxItemNum / 3f) * (maxItemTime + BattleTipConfig.ShowTipTime + BattleTipConfig.HideTipTime);\n            StartCoroutine(ShowTipIEnumerator(ssm, itemWaitTime, type, teamA, teamB));\n            float time = 0f;\n            if (type == 2)\n            {\n                time = BattleTipConfig.TeamInfoTipGoalStayTime;\n            }\n            else\n            {\n                time = itemWaitTime;\n                time += Mathf.Max(itemWaitTime + BattleTipConfig.TeamInfoTipLeftStayTime) < 4? 4 - (itemWaitTime) : BattleTipConfig.TeamInfoTipLeftStayTime;\n                time += BattleTipConfig.Hide && type!= 2 && type!= 6)\n                {\n                    if (transform!= null)\n                    {\n                        transform.GetComponent<CanvasGroup>().alpha = 0f;\n                        EventDispatcher.TriggerEvent(\"SetOffsetState\", true, true);\n                    }\n                }\n            }, time);\n        }\n        private float GetShowTime(int ballCount)\n        {\n            int groupNum = Mathf.CeilToInt(ballCount / 3f);\n            if(ShowTimeDic.ContainsKey(groupNum))\n                return ShowTimeDic[groupNum];\n            else\n                return 0.1f;\n        }\n\n        private void SetData(ISoccerStatisticManager ssm, TeamConfigurationData teamA, TeamConfigurationData teamB, string matchTime, int type)\n        {\n            Text_TeamAName.text = ssm.teamAStatistic.teamName;\n            Text_TeamBName.text = ssm.teamBStatistic.teamName;\n            Text_TeamAUnionShortName.text = teamA.union_shortname;\n            Text_TeamBUnionShortName.text = teamB.union_shortname;\n            if (type!= 6)\n            {\n                Text_TeamAScore.text = ssm.teamAStatistic.score.ToString();\n                Text_TeamBScore.text = ssm.teamBStatistic.score.ToString();\n                if(GameDataHelper.PveCupMatchType == 4)\n                {\n                    Text_TeamATotalScore.text = (ssm.teamAStatistic.score + GameDataHelper.TeamALastScore).ToString();\n                    Text_TeamBTotalScore.text = (ssm.teamBStatistic.score + GameDataHelper.TeamBLastScore).ToString();\n                }\n            }\n            else\n            {\n                Text_TeamAScore.text = ssm.teamAStatistic.penaltyScore.ToString();\n                Text_TeamBScore.text = ssm.teamBStatistic.penaltyScore.ToString();\n            }\n            Text_MatchTime.text = matchTime;\n            SetSprite(Image_TeamALogo, Image_TeamABg, true, ssm, teamA.teamLogo);\n            SetSprite(Image_TeamBLogo, Image_TeamBBg, false, ssm, teamB.teamLogo);\n        }\n\n        private void SetSprite(Image imageLogo, Image imageBg, bool teamA, ISoccerStatisticManager ssm, Sprite logo)\n        {\n            int logoId = teamA? 1 : 0;\n            //if (imageBg!= null &&!GuideConfig.isGuideMatch()) imageBg.color = BattleTipConfig.GetColor(logoId);\n            imageLogo.sprite = logo;\n            if (imageLogo.sprite == null || imageLogo.sprite.texture == null)\n                return;\n            if (imageLogo.sprite.texture.name == \"NationFlag\")\n            {\n                imageLogo.GetComponent<RectTransform>().localScale = new Vector2(0.8f, 0.8f);\n            }\n        }\n\n        IEnumerator ShowTipIEnumerator(ISoccerStatisticManager ssm, float itemWaitTime, int type, TeamConfigurationData teamA, TeamConfigurationData teamB)\n        {\n            // transform.GetComponent<CanvasGroup>().alpha = 0;\n            transform.GetComponent<CanvasGroup>().alpha = 1;\n            if (type == 2)\n            {\n                yield return new WaitForSeconds(BattleTipConfig.TeamInfoTipGoalStayTime);\n            }\n            else\n            {\n                yield return new WaitForSeconds(itemWaitTime);\n                yield return new WaitForSeconds(Mathf.Max(itemWaitTime + BattleTipConfig.TeamInfoTipLeftStayTime) < 4? 4 - (itemWaitTime) : BattleTipConfig.TeamInfoTipLeftStayTime);\n            }\n\n            if (transform!= null)\n            {\n                Go.to(transform.GetComponent<CanvasGroup>(), BattleTipConfig.HideTipTime, new GoTweenConfig().floatProp(\"alpha\", 0));\n            }\n        }\n\n        IEnumerator ShowTipItemAIEnumerator(List<SoccerGoalStatistic> sgsList,float showTime)\n        {\n            int itemMo = 0;\n            for (int i = 0; i < List_ItemTeamA.Count; i++)\n            {\n                List_ItemTeamA[i].gameObject.SetActive(false);\n            }\n            for (int i = 0, num = sgsList.Count; i < num; i++)\n            {\n                itemMo = (i + 1) % 3;\n                List_ItemTeamA[i % 3].ShowTip(sgsList[i],showTime);\n                if (itemMo == 0)\n                {\n                    yield return new WaitForSeconds(showTime + BattleTipConfig.ShowTipTime + BattleTipConfig.HideTipTime);\n                }\n            }\n        }\n\n        IEnumerator ShowTipItemBIEnumerator(List<SoccerGoalStatistic> sgsList, float showTime)\n        {\n            int itemMo = 0;\n            for (int i = 0; i < List_ItemTeamB.Count; i++)\n            {\n                List_ItemTeamB[i].gameObject.SetActive(false);\n            }\n            for (int i = 0, num = sgsList.Count; i < num; i++)\n            {\n                itemMo = (i + 1) % 3;\n                List_ItemTeamB[i % 3].ShowTip(sgsList[i], showTime);\n                if (itemMo == 0)\n                {\n                    yield return new WaitForSeconds(showTime + BattleTipConfig.ShowTipTime + BattleTipConfig.HideTipTime);\n                }\n            }\n        }\n    }\n}\n", "starcoder_inputs": "<fim_prefix>\ufeffusing Framework.GalaSports.GameScene;\nusing Framework.GalaSports.MVC.Core;\nusing Framework.GalaSports.MVC.Core.Events;\nusing GalaSports;\nusing GalaSports.FootballNG;\nusing Platform;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Main;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\nusing UnityEngine.UI;\n\nnamespace Assets.Scripts\n{\n    partial class BattleTeamInfoTip : MonoBehaviour\n    {\n        Dictionary<int, float> ShowTimeDic = new Dictionary<int, float>() { { 1, 2 }, { 2, 2 }, { 3, 1 }, { 4, 0.5f }, { 5, 0.1f } };\n        public void ShowTip(ISoccerStatisticManager ssm, int type, TeamConfigurationData teamA, TeamConfigurationData teamB, string matchTime)\n        {\n            gameObject.SetActive(true);\n\n            BattleTipConfig.TeamInfoSmallTipStayTimeL = GetShowTime(ssm.teamAStatistic.sgsList.Count);\n            BattleTipConfig.TeamInfoSmallTipStayTimeR = GetShowTime(ssm.teamBStatistic.sgsList.Count);\n\n            SetData(ssm, teamA, teamB, matchTime, type);\n            if (type!= 2)\n            {\n                StartCoroutine(ShowTipItemAIEnumerator(ssm.teamAStatistic.sgsList,BattleTipConfig.TeamInfoSmallTipStayTimeL));\n                StartCoroutine(ShowTipItemBIEnumerator(ssm.teamBStatistic.sgsList,BattleTipConfig.TeamInfoSmallTipStayTimeR));\n            }\n            int maxItemNum = Mathf.Max(ssm.teamAStatistic.sgsList.Count, ssm.teamBStatistic.sgsList.Count);\n            float maxItemTime = Mathf.Max(BattleTipConfig.TeamInfoSmallTipStayTimeL, BattleTipConfig.TeamInfoSmallTipStayTimeR);\n            float itemWaitTime = Mathf.FloorToInt(maxItemNum / 3f) * (maxItemTime + BattleTipConfig.ShowTipTime + BattleTipConfig.HideTipTime);\n            StartCoroutine(ShowTipIEnumerator(ssm, itemWaitTime, type, teamA, teamB));\n            float time = 0f;\n            if (type == 2)\n            {\n                time = BattleTipConfig.TeamInfoTipGoalStayTime;\n            }\n            else\n            {\n                time = itemWaitTime;\n                time += Mathf.Max(itemWaitTime + BattleTipConfig.TeamInfoTipLeftStayTime) < 4? 4 - (itemWaitTime) : BattleTipConfig.TeamInfoTipLeftStayTime;\n                time += BattleTipConfig.Hide<fim_suffix> && type!= 2 && type!= 6)\n                {\n                    if (transform!= null)\n                    {\n                        transform.GetComponent<CanvasGroup>().alpha = 0f;\n                        EventDispatcher.TriggerEvent(\"SetOffsetState\", true, true);\n                    }\n                }\n            }, time);\n        }\n        private float GetShowTime(int ballCount)\n        {\n            int groupNum = Mathf.CeilToInt(ballCount / 3f);\n            if(ShowTimeDic.ContainsKey(groupNum))\n                return ShowTimeDic[groupNum];\n            else\n                return 0.1f;\n        }\n\n        private void SetData(ISoccerStatisticManager ssm, TeamConfigurationData teamA, TeamConfigurationData teamB, string matchTime, int type)\n        {\n            Text_TeamAName.text = ssm.teamAStatistic.teamName;\n            Text_TeamBName.text = ssm.teamBStatistic.teamName;\n            Text_TeamAUnionShortName.text = teamA.union_shortname;\n            Text_TeamBUnionShortName.text = teamB.union_shortname;\n            if (type!= 6)\n            {\n                Text_TeamAScore.text = ssm.teamAStatistic.score.ToString();\n                Text_TeamBScore.text = ssm.teamBStatistic.score.ToString();\n                if(GameDataHelper.PveCupMatchType == 4)\n                {\n                    Text_TeamATotalScore.text = (ssm.teamAStatistic.score + GameDataHelper.TeamALastScore).ToString();\n                    Text_TeamBTotalScore.text = (ssm.teamBStatistic.score + GameDataHelper.TeamBLastScore).ToString();\n                }\n            }\n            else\n            {\n                Text_TeamAScore.text = ssm.teamAStatistic.penaltyScore.ToString();\n                Text_TeamBScore.text = ssm.teamBStatistic.penaltyScore.ToString();\n            }\n            Text_MatchTime.text = matchTime;\n            SetSprite(Image_TeamALogo, Image_TeamABg, true, ssm, teamA.teamLogo);\n            SetSprite(Image_TeamBLogo, Image_TeamBBg, false, ssm, teamB.teamLogo);\n        }\n\n        private void SetSprite(Image imageLogo, Image imageBg, bool teamA, ISoccerStatisticManager ssm, Sprite logo)\n        {\n            int logoId = teamA? 1 : 0;\n            //if (imageBg!= null &&!GuideConfig.isGuideMatch()) imageBg.color = BattleTipConfig.GetColor(logoId);\n            imageLogo.sprite = logo;\n            if (imageLogo.sprite == null || imageLogo.sprite.texture == null)\n                return;\n            if (imageLogo.sprite.texture.name == \"NationFlag\")\n            {\n                imageLogo.GetComponent<RectTransform>().localScale = new Vector2(0.8f, 0.8f);\n            }\n        }\n\n        IEnumerator ShowTipIEnumerator(ISoccerStatisticManager ssm, float itemWaitTime, int type, TeamConfigurationData teamA, TeamConfigurationData teamB)\n        {\n            // transform.GetComponent<CanvasGroup>().alpha = 0;\n            transform.GetComponent<CanvasGroup>().alpha = 1;\n            if (type == 2)\n            {\n                yield return new WaitForSeconds(BattleTipConfig.TeamInfoTipGoalStayTime);\n            }\n            else\n            {\n                yield return new WaitForSeconds(itemWaitTime);\n                yield return new WaitForSeconds(Mathf.Max(itemWaitTime + BattleTipConfig.TeamInfoTipLeftStayTime) < 4? 4 - (itemWaitTime) : BattleTipConfig.TeamInfoTipLeftStayTime);\n            }\n\n            if (transform!= null)\n            {\n                Go.to(transform.GetComponent<CanvasGroup>(), BattleTipConfig.HideTipTime, new GoTweenConfig().floatProp(\"alpha\", 0));\n            }\n        }\n\n        IEnumerator ShowTipItemAIEnumerator(List<SoccerGoalStatistic> sgsList,float showTime)\n        {\n            int itemMo = 0;\n            for (int i = 0; i < List_ItemTeamA.Count; i++)\n            {\n                List_ItemTeamA[i].gameObject.SetActive(false);\n            }\n            for (int i = 0, num = sgsList.Count; i < num; i++)\n            {\n                itemMo = (i + 1) % 3;\n                List_ItemTeamA[i % 3].ShowTip(sgsList[i],showTime);\n                if (itemMo == 0)\n                {\n                    yield return new WaitForSeconds(showTime + BattleTipConfig.ShowTipTime + BattleTipConfig.HideTipTime);\n                }\n            }\n        }\n\n        IEnumerator ShowTipItemBIEnumerator(List<SoccerGoalStatistic> sgsList, float showTime)\n        {\n            int itemMo = 0;\n            for (int i = 0; i < List_ItemTeamB.Count; i++)\n            {\n                List_ItemTeamB[i].gameObject.SetActive(false);\n            }\n            for (int i = 0, num = sgsList.Count; i < num; i++)\n            {\n                itemMo = (i + 1) % 3;\n                List_ItemTeamB[i % 3].ShowTip(sgsList[i], showTime);\n                if (itemMo == 0)\n                {\n                    yield return new WaitForSeconds(showTime + BattleTipConfig.ShowTipTime + BattleTipConfig.HideTipTime);\n                }\n            }\n        }\n    }\n}\n<fim_middle>"}
{"inputs": "\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Framework.GalaSports.MVC.Core;\nusing Framework.GalaSports.MVC.Core.Events;\nusing Framework.GalaSports.Service;\nusing GalaSports.FootballNG;\nusing Platform;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing static GalaSDKBase.GalaSDKBaseFunction;\n\nnamespace Assets.Scripts\n{\n    [Module(\"BattleTip\")]\n    public partial class BattleTipView : FootballBaseView\n    {\n        // GameGrassScoreEffectController grassController;\n        private ISoccerStatisticManager _statisticManager;\n        private TeamConfigurationData _teamAConfigurationData;\n        private TeamConfigurationData _teamBConfigurationData;\n        int quarter = 1;\n        int lastState = -1;\n        // bool isShowGrassContent = false;\n        // GoTween tween;\n        // int _gameType;\n        bool guideMatchKickOffLog = true;\n        Dictionary<int, string> halfTimeTextDict;\n        private void Awake()\n        {\n            Platform.EventDispatcher.AddEventListener<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"ONInitStaticManager\", InitStaticManager);\n        }\n\n        public void InitStaticManager(ISoccerStatisticManager manager, TeamConfigurationData teamA, TeamConfigurationData teamB)\n        {\n            _statisticManager = manager;\n            _teamAConfigurationData = teamA;\n            _teamBConfigurationData = teamB;\n            if (GamePlayConfig.GamePlayType != GameType.Normal)\n            {\n                return;\n            }\n            SoccerGameEvents.Instance.onGameTipFoul.AddListener(OnFoulHandler);\n            SoccerGameEvents.Instance.onGoalEvent.AddListener(OnScoreHandler);\n            SoccerGameEvents.Instance.onShowGameStateTip.AddListener(ShowGameStateTip);\n\n            SoccerGameEvents.Instance.onUpdateSubstitutePlayersEvent.AddListener(OnUpdateSubstitutePlayersEvent);\n            SoccerGameEvents.Instance.onMatchQuarterStartKickOffEvent.AddListener(OnTriggerQuarterStartKickOffTipView);\n            SoccerGameEvents.Instance.onUpdateMatchStateEvent.AddListener(onUpdateMatchStateEvent);\n            // Platform.EventDispatcher.AddEventListener(\"GameEndStatus\", HideGrassContent);\n            // Platform.EventDispatcher.AddEventListener(\"HideGrassContent\", HideGrassContent);\n            SpiecalScreen();\n            halfTimeTextDict = new Dictionary<int, string>();\n            halfTimeTextDict.Add(1, LanguageKit.Get(\"GamePlayUIPanel/HalfTime/SecondHalf/Text\"));//\u4e2d\u573a\u4f11\u606f\n            halfTimeTextDict.Add(2, LanguageKit.Get(\"GamePlayUIPanel/SecondHalf/SecondHalf/Text_light\"));//\u4e0b\u534a\u573a\n            halfTimeTextDict.Add(3, LanguageKit.Get(\"Label_1660727720395\"));//\u5e38\u89c4\u52a0\u65f6\n            halfTimeTextDict.Add(4, LanguageKit.Get(\"Label_1660727933049\"));//\u70b9\u7403\u5927\u6218\n            halfTimeTextDict.Add(5, LanguageKit.Get(\"Label_1661483427069\"));//\u52a0\u65f6\u8d5b\u4e0a\u534a\u573a\n            halfTimeTextDict.Add(6, LanguageKit.Get(\"Label_1661483435197\"));//\u52a0\u65f6\u8d5b\u4e0b\u534a\u573a\n            halfTimeTextDict.Add(7, LanguageKit.Get(\"Label_1661916314138\"));//\u5e38\u89c4\u6bd4\u8d5b\u7ed3\u675f\n            halfTimeTextDict.Add(8, LanguageKit.Get(\"Label_1661916314139\"));//\u52a0\u65f6\u8d5b\u4e2d\u573a\n        }\n        private void SpiecalScreen()\n        {\n            if (AppConfig.Instance.IsSpecialScreen)\n            {\n                var exchangeParent = transform.Find(\"ExchangeParent\");\n                float offset = AppConfig.Instance.BandHeight;\n                Vector2 offsetLeft = new Vector2(offset, 0);\n                exchangeParent.GetComponent<RectTransform>().anchoredPosition = offsetLeft;\n            }\n        }\n\n        private void OnUpdateSubstitutePlayersEvent(string teamId, List<SoccerPlayerAttributes> playerAttributes, Dictionary<int, int> dic)\n        {\n            // if (GlobalConfigManager.matchGamePlayConfig.IsHomeTeam&&_teamBConfigurationData.teamId== teamId||!GlobalConfigManager.matchGamePlayConfig.IsHomeTeam&&_teamAConfigurationData.teamId== teamId)\n            // {\n            //     return;\n            // }\n            if (dic == null)\n            {\n                return;\n            }\n            var IsTeamA = _teamAConfigurationData.teamId == teamId;\n            var config = IsTeamA ? _teamAConfigurationData : _teamBConfigurationData;\n            List<ball_player> players = new List<ball_player>();\n            players.AddRange(config.teamStartPlayers);\n            players.AddRange(config.teamBenchPlayers);\n            foreach (var item in dic)\n            {\n                var downPlayer = item.Key;\n\n                var player1 = players.Find((player) => { return player.case_id == downPlayer; });\n\n                var upPlayer = item.Value;\n                var player2 = players.Find((player) => { return player.case_id == upPlayer; });\n#if OPEN_DEBUG_LOG\n                DebugEX.Log(\"UpdateSubstitutePlayer:   \" + teamId + \"   \" + player1.shirt_number + \"  \" + PlayerNameCfg.GetItem(player1.tm_id).name + \"   \" + player2.shirt_number + \"  \" + PlayerNameCfg.GetItem(player2.tm_id).name);\n#endif\n                if (player1 != null && player2 != null)\n                {\n                    if (IsTeamA)\n                        SC_BattleExchangePlayerTip_Left.ShowTip(player1, player2, config.teamLogo);\n                    else\n                        SC_BattleExchangePlayerTip_Right.ShowTip(player1, player2, config.teamLogo);\n                }\n            }\n        }\n\n        private void OnScoreHandler(SoccerGoalStatistic sgs)\n        {\n            SC_BattleScoreTip.ShowTip(sgs, sgs.isTeamA ? _teamAConfigurationData : _teamBConfigurationData);\n            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n        }\n\n        private void OnFoulHandler(SoccerFoulStatistic foul)\n        {\n\n            SoccerPlayerStatistic playerStatistic = _statisticManager.GetOnPitchPlayerStatisticByName(foul.playerName);\n            EnumShowTipType enumType;\n            switch (foul.foulType)\n            {\n                case EnumFoulStatisticType.YellowGoodForAttack:\n                case EnumFoulStatisticType.YellowCardDirectedFreeKick:\n                case EnumFoulStatisticType.YelloCardPenaltyKick:\n                    enumType = EnumShowTipType.Yellow;\n                    break;\n                case EnumFoulStatisticType.RedCardDirectedFreeKick:\n                case EnumFoulStatisticType.RedCardGoodForAttack:\n                case EnumFoulStatisticType.RedCardPenaltyKick:\n                    enumType = EnumShowTipType.Red;\n                    break;\n                default:\n                    enumType = EnumShowTipType.TeamInfo;\n                    return;\n            }\n\n            var teamCfg = \"TeamA\" == playerStatistic.teamUid ? _teamAConfigurationData : _teamBConfigurationData;\n            SC_BattleWarningTip.ShowTip(enumType, playerStatistic, teamCfg);\n            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n        }\n\n        // \u5c55\u793a\u8f6c\u573aUI\u52a8\u753b\u548c\u754c\u9762\n        private void ShowGameStateTip(int type)\n        {\n            // Platform.EventDispatcher.TriggerEvent<System.Action<int>>(\"GetGamePlayType\", (value) =>\n            // {\n            //     _gameType = value;\n            // });\n            GlobalConfigManager.matchGamePlayConfig.IsHalfTime = false;\n            GlobalConfigManager.matchGamePlayConfig.IsExtraHalfTime = false;\n            GlobalConfigManager.matchGamePlayConfig.IsPenaltyHalfTime = false;\n            switch (type)\n            {\n                case -2: //\u7279\u6b8a\u6bd4\u8d5b\u4e0b\u534a\u5f00\u573a\n                    if (footballController.IsKickOff())\n                    {\n                        lastState = 8;\n                        // ShowGrassContent();\n                        Platform.EventDispatcher.TriggerEvent<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"OnInitSceneLogoData\", _statisticManager, _teamAConfigurationData, _teamBConfigurationData);\n                    }\n                    if (GameDataHelper.IsPvPOnLine)\n                    {\n                        UpdateUtils.Instance.DelayCall(60, () => Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true));\n                    }\n                    else\n                    {\n                        Go.DelayCall(() => Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true), 2f);\n                    }\n                    SC_BattleTeamInfoTip.ShowTip(_statisticManager, type, _teamAConfigurationData, _teamBConfigurationData, halfTimeTextDict[2]);\n                    break;\n                case -1://\u6b63\u5e38\u5f00\u573a\n                    lastState = 8;\n                    // ShowGrassContent();\n                    Platform.EventDispatcher.TriggerEvent<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"OnInitSceneLogoData\", _statisticManager, _teamAConfigurationData, _teamBConfigurationData);\n                    if (GameDataHelper.IsPvPOnLine)\n                    {\n                        UpdateUtils.Instance.DelayCall(75, () => Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true));\n                    }\n                    else\n                    {\n                        Go.DelayCall(() => Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true), 2.5f);\n                    }\n\n                    // if (GameDataHelper.IsPvPOnLine)//pvp\u6ca1\u6709\u81ea\u52a8\u9690\u85cf\u6c34\u5370\n                    // {\n                    //     HideGrassContentGradually(8f);\n                    // }\n                    break;\n                case 0://\u4e2d\u573a\u4f11\u606f\n                    GlobalConfigManager.matchGamePlayConfig.IsHalfTime = true;\n                    GlobalConfigManager.matchGamePlayConfig.IsPvpHalfTime = GameDataHelper.IsPvPOnLine;\n                    ShowHalfTimeAni(halfTimeTextDict[1]);\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n                    break;\n                case 1://\u5e38\u89c4\u6bd4\u8d5b\u7684\u7ec8\u573a\u7ed3\u675f\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n                    SC_BattleTeamInfoTip.ShowTip(_statisticManager, type, _teamAConfigurationData, _teamBConfigurationData, halfTimeTextDict[2]);\n                    break;\n                case 2:\n                    if (GameDataHelper.IsPvPOnLine)\n                    {\n                        UpdateUtils.Instance.DelayCall(75, () =>\n                        {\n                            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                        });\n                    }\n                    else\n                    {\n                        Go.DelayCall(() =>\n                        {\n                            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                        }, 2.5f);\n                    }\n                    break;\n                case 3://\u5e38\u89c4\u6bd4\u8d5b\u4f11\u606f\u5230\u52a0\u65f6\u8d5b\n                    GlobalConfigManager.matchGamePlayConfig.IsExtraHalfTime = true;\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                    ShowHalfTimeAni(halfTimeTextDict[7]);\n                    break;\n                case 4://\u52a0\u65f6\u8d5b\u4e2d\u573a\u4f11\u606f\n                    GlobalConfigManager.matchGamePlayConfig.IsExtraHalfTime = true;\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                    ShowHalfTimeAni(halfTimeTextDict[8]);\n                    break;\n                case 5://\u70b9\u7403\u5927\u6218\u5f00\u59cb\n                    //GamePlayConfig.IsPenaltyShootOut = true;\n                    GlobalConfigManager.matchGamePlayConfig.IsPenaltyHalfTime = true;\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                    ShowHalfTimeAni(halfTimeTextDict[4]);\n                    break;\n                case 6://\u70b9\u7403\u5927\u6218\u7ed3\u675f\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n                    SC_BattleTeamInfoTip.ShowTip(_statisticManager, type, _teamAConfigurationData, _teamBConfigurationData, halfTimeTextDict[4]);\n                    break;\n            }\n        }\n\n        private void onUpdateMatchStateEvent(MatchStateData obj)\n        {\n            int curState = (int)obj.matchState;\n            if (curState == (int)MatchStateData.MatchState.KickOff && lastState != -1)\n            {\n                if (GameDataHelper.IsPvPOnLine)\n                {\n                    UpdateUtils.Instance.DelayCall(90, ShowMainUIAfterKickOff);\n                }\n                else\n                {\n                    Go.DelayCall(ShowMainUIAfterKickOff, 3f);\n                }\n                // ShowGrassContent();\n                Platform.EventDispatcher.TriggerEvent<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"OnInitSceneLogoData\", _statisticManager, _teamAConfigurationData, _teamBConfigurationData);\n            }\n            if (lastState == (int)MatchStateData.MatchState.KickOff && curState == (int)MatchStateData.MatchState.Playing)\n            {\n                if (GuideConfig.isGuideMatch() && guideMatchKickOffLog)\n                {\n                    guideMatchKickOffLog = false;\n                    TGALog.Instance.Log(GuideStepType.CLICK_PASS_KICK_OFF);\n                }\n                // HideGrassContentGradually(2f);\n            }\n            lastState = curState;\n        }\n\n        private void ShowMainUIAfterKickOff()\n        {\n            if (footballController.IsExitPitch() || footballController.frameId == 0 || FootballManager.IsInRecord || FootballManager.IsInCelebrate)\n                return;\n            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n        }\n\n        private void OnTriggerQuarterStartKickOffTipView(MatchStateData obj)\n        {\n            string kickOffStartTxt = halfTimeTextDict[2];\n            bool MayKickOff = false;\n            quarter = obj.quarter;\n            if (obj.quarter == 2)\n            {\n                kickOffStartTxt = halfTimeTextDict[2];\n                MayKickOff = true;\n            }\n            else if (obj.quarter == 3)\n            {\n                kickOffStartTxt = halfTimeTextDict[5];\n                MayKickOff = true;\n            }\n            else if (obj.quarter == 4)\n            {\n                kickOffStartTxt = halfTimeTextDict[6];\n                MayKickOff = true;\n            }\n            if (MayKickOff)\n            {\n                ShowHalfTimeAni(kickOffStartTxt);\n            }\n        }\n\n        void ShowHalfTimeAni(string text)\n        {\n            Go.CancelDelayCall(HideHalfTimeAni);\n            Go.DelayCall(() =>\n            {\n                HalfTimeAniText.text = text;\n                HalfTimeAni.SetActive(true);\n                Go.DelayCall(HideHalfTimeAni, 2f);\n            }, 1f);\n        }\n\n        void HideHalfTimeAni()\n        {\n            HalfTimeAni.SetActive(false);\n        }\n\n        // private async void ShowGrassContent()\n        // {\n        //     if (_gameType == 16 || isShowGrassContent)\n        //     {\n        //         return;\n        //     }\n        //     if (grassController == null)\n        //     {\n        //         GameObject go = ResourceMgr.Instance.Instantiate(\"3D/GameGrassScore/GameGrassScoreEffect\");\n        //         grassController = go.GetComponent<GameGrassScoreEffectController>();\n        //     }\n        //     if (grassController == null)\n        //     {\n        //         DebugEX.LogError(\"GameGrassScoreEffectController Empty\");\n        //         await GAsync.WaitNextFrame();\n        //         return;\n        //     }\n\n        //     if (quarter == 2 || quarter == 4)\n        //         grassController.SetGameScoreData(_teamBConfigurationData.teamLogo.texture, _teamAConfigurationData.teamLogo.texture, _statisticManager.teamBStatistic.score, _statisticManager.teamAStatistic.score);\n        //     else\n        //         grassController.SetGameScoreData(_teamAConfigurationData.teamLogo.texture, _teamBConfigurationData.teamLogo.texture, _statisticManager.teamAStatistic.score, _statisticManager.teamBStatistic.score);\n\n        //     grassController.SetGameScoreAlpha(GameGrassScoreEffectController.DEFAULT_ALPHA_VALUE);\n        //     isShowGrassContent = true;\n        //     await GAsync.WaitNextFrame();\n        // }\n\n        // void HideGrassContent()\n        // {\n        //     if (tween != null)\n        //         Go.removeTween(tween);\n        //     isShowGrassContent = false;\n        //     grassController?.SetGameScoreAlpha(0);\n        // }\n\n        // void HideGrassContentGradually(float delay)\n        // {\n        //     if (isShowGrassContent)\n        //     {\n        //         isShowGrassContent = false;\n        //         float time = 2f;\n        //         tween = Go.to(this.transform, time, new GoTweenConfig()\n        //             .setDelay(delay)\n        //             .onUpdate((obj) =>\n        //             {\n        //                 float curalpha = (1 - obj.totalElapsedTime / time) * GameGrassScoreEffectController.DEFAULT_ALPHA_VALUE;\n        //                 grassController?.SetGameScoreAlpha(curalpha);\n        //             }));\n        //     }\n        // }\n\n        private void LogGuideStep(string step)\n        {\n            if (GuideConfig.isGuideMatch())\n            {\n                TGALog.Instance.Log(step);\n            }\n        }\n\n        private void OnDestroy()\n        {\n            _teamAConfigurationData = null;\n            _teamBConfigurationData = null;\n            _statisticManager = null;\n            // Platform.EventDispatcher.RemoveEventListener(\"GameEndStatus\", HideGrassContent);\n            // Platform.EventDispatcher.RemoveEventListener(\"HideGrassContent\", HideGrassContent);\n            Platform.EventDispatcher.RemoveEventListener<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"ONInitStaticManager\", InitStaticManager);\n        }\n\n        protected override void OnBaseViewInit()\n        {\n\n        }\n    }\n}", "cropped_inputs": "\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Framework.GalaSports.MVC.Core;\nusing Framework.GalaSports.MVC.Core.Events;\nusing Framework.GalaSports.Service;\nusing GalaSports.FootballNG;\nusing Platform;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing static GalaSDKBase.GalaSDKBaseFunction;\n\nnamespace Assets.Scripts\n{\n    [Module(\"BattleTip\")]\n    public partial class BattleTipView : FootballBaseView\n    {\n        // GameGrassScoreEffectController grassController;\n        private ISoccerStatisticManager _statisticManager;\n        private TeamConfigurationData _teamAConfigurationData;\n        private TeamConfigurationData _teamBConfigurationData;\n        int quarter = 1;\n        int lastState = -1;\n        // bool isShowGrassContent = false;\n        // GoTween tween;\n        // int _gameType;\n        bool guideMatchKickOffLog = true;\n        Dictionary<int, string> halfTimeTextDict;\n        private void Awake()\n        {\n            Platform.EventDispatcher.AddEventListener<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"ONInitStaticManager\", InitStaticManager);\n        }\n\n        public void InitStaticManager(ISoccerStatisticManager manager, TeamConfigurationData teamA, TeamConfigurationData teamB)\n        {\n            _statisticManager = manager;\n            _teamAConfigurationData = teamA;\n            _teamBConfigurationData = teamB;\n            if (GamePlayConfig.GamePlayType!= GameType.Normal)\n            {\n                return;\n            }\n            SoccerGameEvents.Instance.onGameTipFoul.AddListener(OnFoulHandler);\n            SoccerGameEvents.Instance.onGoalEvent.AddListener(OnScoreHandler);\n            SoccerGameEvents.Instance.onShowGameStateTip.AddListener(ShowGameStateTip);\n\n            SoccerGameEvents.Instance.onUpdateSubstitutePlayersEvent.AddListener(OnUpdateSubstitutePlayersEvent);\n            SoccerGameEvents.Instance.onMatchQuarterStartKickOffEvent.AddListener(OnTriggerQuarterStartKickOffTipView);\n            SoccerGameEvents.Instance.onUpdateMatchStateEvent.AddListener(onUpdateMatchStateEvent);\n            // Platform.EventDispatcher.AddEventListener(\"GameEndStatus\", HideGrassContent);\n            // Platform.EventDispatcher.AddEventListener(\"HideGrassContent\", HideGrassContent);\n            SpiecalScreen();\n            halfTimeTextDict = new Dictionary<int, string>();\n            halfTimeTextDict.Add(1, LanguageKit.Get(\"GamePlayUIPanel/HalfTime/SecondHalf/Text\"));//\u4e2d\u573a\u4f11\u606f\n            halfTimeTextDict.Add(2, LanguageKit.Get(\"GamePlayUIPanel/SecondHalf/SecondHalf/Text_light\"));//\u4e0b\u534a\u573a\n            halfTimeTextDict.Add(3, LanguageKit.Get(\"Label_1660727720395\"));//\u5e38\u89c4\u52a0\u65f6\n            halfTimeTextDict.Add(4, LanguageKit.Get(\"Label_1660727933049\"));//\u70b9\u7403\u5927\u6218\n            halfTimeTextDict.Add(5, LanguageKit.Get(\"Label_1661483427069\"));//\u52a0\u65f6\u8d5b\u4e0a\u534a\u573a\n            halfTimeTextDict.Add(6, LanguageKit.Get(\"Label_1661483435197\"));//\u52a0\u65f6\u8d5b\u4e0b\u534a\u573a\n            halfTimeTextDict.Add(7, LanguageKit.Get(\"Label_1661916314138\"));//\u5e38\u89c4\u6bd4\u8d5b\u7ed3\u675f\n            halfTimeTextDict.Add(8, LanguageKit.Get(\"Label_1661916314139\"));//\u52a0\u65f6\u8d5b\u4e2d\u573a\n        }\n        private void SpiecalScreen()\n        {\n            if (AppConfig.Instance.IsSpecialScreen)\n            {\n                var exchangeParent = transform.Find(\"ExchangeParent\");\n                float offset = AppConfig.Instance.BandHeight;\n                Vector2 offsetLeft = new Vector2(offset, 0);\n                exchangeParent.GetComponent<RectTransform>().anchoredPosition = offsetLeft;\n            }\n        }\n\n        private void OnUpdateSubstitutePlayersEvent(string teamId, List<SoccerPlayerAttributes> playerAttributes, Dictionary<int, int> dic)\n        {\n            // if (GlobalConfigManager.matchGamePlayConfig.IsHomeTeam&&_teamBConfigurationData.teamId== teamId||!GlobalConfigManager.matchGamePlayConfig.IsHomeTeam&&_teamAConfigurationData.teamId== teamId)\n            // {\n            //     return;\n            // }\n            if (dic == null)\n            {\n                return;\n            }\n            var IsTeamA = _teamAConfigurationData.teamId == teamId;\n            var config = IsTeamA? _teamAConfigurationData : _teamBConfigurationData;\n            List<ball_player> players = new List<ball_player>();\n            players.AddRange(config.teamStartPlayers);\n            players.AddRange(config.teamBenchPlayers);\n            foreach (var item in dic)\n            {\n                var downPlayer = item.Key;\n\n                var player1 = players.Find((player) => { return player.case_id == downPlayer; });\n\n                var upPlayer = item.Value;\n                var player2 = players.Find((player) => { return player.case_id == upPlayer; });\n#if OPEN_DEBUG_LOG\n                DebugEX.Log(\"UpdateSubstitutePlayer:   \" + teamId + \"   \" + player1.shirt_number + \"  \" + PlayerNameCfg.GetItem(player1.tm_id).name + \"   \" + player2.shirt_number + \"  \" + PlayerNameCfg.GetItem(player2.tm_id).name);\n#endif\n                if (player1!= null && player2!= null)\n                {\n                    if (IsTeamA)\n                        SC_BattleExchangePlayerTip_Left.ShowTip(player1, player2, config.teamLogo);\n                    else\n                        SC_BattleExchangePlayerTip_Right.ShowTip(player1, player2, config.teamLogo);\n                }\n            }\n        }ScoreTip.ShowTip(sgs, sgs.isTeamA? _teamAConfigurationData : _teamBConfigurationData);\n            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n        }\n\n        private void OnFoulHandler(SoccerFoulStatistic foul)\n        {\n\n            SoccerPlayerStatistic playerStatistic = _statisticManager.GetOnPitchPlayerStatisticByName(foul.playerName);\n            EnumShowTipType enumType;\n            switch (foul.foulType)\n            {\n                case EnumFoulStatisticType.YellowGoodForAttack:\n                case EnumFoulStatisticType.YellowCardDirectedFreeKick:\n                case EnumFoulStatisticType.YelloCardPenaltyKick:\n                    enumType = EnumShowTipType.Yellow;\n                    break;\n                case EnumFoulStatisticType.RedCardDirectedFreeKick:\n                case EnumFoulStatisticType.RedCardGoodForAttack:\n                case EnumFoulStatisticType.RedCardPenaltyKick:\n                    enumType = EnumShowTipType.Red;\n                    break;\n                default:\n                    enumType = EnumShowTipType.TeamInfo;\n                    return;\n            }\n\n            var teamCfg = \"TeamA\" == playerStatistic.teamUid? _teamAConfigurationData : _teamBConfigurationData;\n            SC_BattleWarningTip.ShowTip(enumType, playerStatistic, teamCfg);\n            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n        }\n\n        // \u5c55\u793a\u8f6c\u573aUI\u52a8\u753b\u548c\u754c\u9762\n        private void ShowGameStateTip(int type)\n        {\n            // Platform.EventDispatcher.TriggerEvent<System.Action<int>>(\"GetGamePlayType\", (value) =>\n            // {\n            //     _gameType = value;\n            // });\n            GlobalConfigManager.matchGamePlayConfig.IsHalfTime = false;\n            GlobalConfigManager.matchGamePlayConfig.IsExtraHalfTime = false;\n            GlobalConfigManager.matchGamePlayConfig.IsPenaltyHalfTime = false;\n            switch (type)\n            {\n                case -2: //\u7279\u6b8a\u6bd4\u8d5b\u4e0b\u534a\u5f00\u573a\n                    if (footballController.IsKickOff())\n                    {\n                        lastState = 8;\n                        // ShowGrassContent();\n                        Platform.EventDispatcher.TriggerEvent<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"OnInitSceneLogoData\", _statisticManager, _teamAConfigurationData, _teamBConfigurationData);\n                    }\n                    if (GameDataHelper.IsPvPOnLine)\n                    {\n                        UpdateUtils.Instance.DelayCall(60, () => Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true));\n                    }\n                    else\n                    {\n                        Go.DelayCall(() => Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true), 2f);\n                    }\n                    SC_BattleTeamInfoTip.ShowTip(_statisticManager, type, _teamAConfigurationData, _teamBConfigurationData, halfTimeTextDict[2]);\n                    break;\n                case -1://\u6b63\u5e38\u5f00\u573a\n                    lastState = 8;\n                    // ShowGrassContent();\n                    Platform.EventDispatcher.TriggerEvent<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"OnInitSceneLogoData\", _statisticManager, _teamAConfigurationData, _teamBConfigurationData);\n                    if (GameDataHelper.IsPvPOnLine)\n                    {\n                        UpdateUtils.Instance.DelayCall(75, () => Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true));\n                    }\n                    else\n                    {\n                        Go.DelayCall(() => Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true), 2.5f);\n                    }\n\n                    // if (GameDataHelper.IsPvPOnLine)//pvp\u6ca1\u6709\u81ea\u52a8\u9690\u85cf\u6c34\u5370\n                    // {\n                    //     HideGrassContentGradually(8f);\n                    // }\n                    break;\n                case 0://\u4e2d\u573a\u4f11\u606f\n                    GlobalConfigManager.matchGamePlayConfig.IsHalfTime = true;\n                    GlobalConfigManager.matchGamePlayConfig.IsPvpHalfTime = GameDataHelper.IsPvPOnLine;\n                    ShowHalfTimeAni(halfTimeTextDict[1]);\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n                    break;\n                case 1://\u5e38\u89c4\u6bd4\u8d5b\u7684\u7ec8\u573a\u7ed3\u675f\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n                    SC_BattleTeamInfoTip.ShowTip(_statisticManager, type, _teamAConfigurationData, _teamBConfigurationData, halfTimeTextDict[2]);\n                    break;\n                case 2:\n                    if (GameDataHelper.IsPvPOnLine)\n                    {\n                        UpdateUtils.Instance.DelayCall(75, () =>\n                        {\n                            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                        });\n                    }\n                    else\n                    {\n                        Go.DelayCall(() =>\n                        {\n                            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                        }, 2.5f);\n                    }\n                    break;\n                case 3://\u5e38\u89c4\u6bd4\u8d5b\u4f11\u606f\u5230\u52a0\u65f6\u8d5b\n                    GlobalConfigManager.matchGamePlayConfig.IsExtraHalfTime = true;\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                    ShowHalfTimeAni(halfTimeTextDict[7]);\n                    break;\n                case 4://\u52a0\u65f6\u8d5b\u4e2d\u573a\u4f11\u606f\n                    GlobalConfigManager.matchGamePlayConfig.IsExtraHalfTime = true;\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                    ShowHalfTimeAni(halfTimeTextDict[8]);\n                    break;\n                case 5://\u70b9\u7403\u5927\u6218\u5f00\u59cb\n                    //GamePlayConfig.IsPenaltyShootOut = true;\n                    GlobalConfigManager.matchGamePlayConfig.IsPenaltyHalfTime = true;\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                    ShowHalfTimeAni(halfTimeTextDict[4]);\n                    break;\n                case 6://\u70b9\u7403\u5927\u6218\u7ed3\u675f\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n                    SC_BattleTeamInfoTip.ShowTip(_statisticManager, type, _teamAConfigurationData, _teamBConfigurationData, halfTimeTextDict[4]);\n                    break;\n            }\n        }\n\n        private void onUpdateMatchStateEvent(MatchStateData obj)\n        {\n            int curState = (int)obj.matchState;\n            if (curState == (int)MatchStateData.MatchState.KickOff && lastState!= -1)\n            {\n                if (GameDataHelper.IsPvPOnLine)\n                {\n                    UpdateUtils.Instance.DelayCall(90, ShowMainUIAfterKickOff);\n                }\n                else\n                {\n                    Go.DelayCall(ShowMainUIAfterKickOff, 3f);\n                }\n                // ShowGrassContent();\n                Platform.EventDispatcher.TriggerEvent<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"OnInitSceneLogoData\", _statisticManager, _teamAConfigurationData, _teamBConfigurationData);\n            }\n            if (lastState == (int)MatchStateData.MatchState.KickOff && curState == (int)MatchStateData.MatchState.Playing)\n            {\n                if (GuideConfig.isGuideMatch() && guideMatchKickOffLog)\n                {\n                    guideMatchKickOffLog = false;\n                    TGALog.Instance.Log(GuideStepType.CLICK_PASS_KICK_OFF);\n                }\n                // HideGrassContentGradually(2f);\n            }\n            lastState = curState;\n        }\n\n        private void ShowMainUIAfterKickOff()\n        {\n            if (footballController.IsExitPitch() || footballController.frameId == 0 || FootballManager.IsInRecord || FootballManager.IsInCelebrate)\n                return;\n            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n        }\n\n        private void OnTriggerQuarterStartKickOffTipView(MatchStateData obj)\n        {\n            string kickOffStartTxt = halfTimeTextDict[2];\n            bool MayKickOff = false;\n            quarter = obj.quarter;\n            if (obj.quarter == 2)\n            {\n                kickOffStartTxt = halfTimeTextDict[2];\n                MayKickOff = true;\n            }\n            else if (obj.quarter == 3)\n            {\n                kickOffStartTxt = halfTimeTextDict[5];\n                MayKickOff = true;\n            }\n            else if (obj.quarter == 4)\n            {\n                kickOffStartTxt = halfTimeTextDict[6];\n                MayKickOff = true;\n            }\n            if (MayKickOff)\n            {\n                ShowHalfTimeAni(kickOffStartTxt);\n            }\n        }\n\n        void ShowHalfTimeAni(string text)\n        {\n            Go.CancelDelayCall(HideHalfTimeAni);\n            Go.DelayCall(() =>\n            {\n                HalfTimeAniText.text = text;\n                HalfTimeAni.SetActive(true);\n                Go.DelayCall(HideHalfTimeAni, 2f);\n            }, 1f);\n        }\n\n        void HideHalfTimeAni()\n        {\n            HalfTimeAni.SetActive(false);\n        }\n\n        // private async void ShowGrassContent()\n        // {\n        //     if (_gameType == 16 || isShowGrassContent)\n        //     {\n        //         return;\n        //     }\n        //     if (grassController == null)\n        //     {\n        //         GameObject go = ResourceMgr.Instance.Instantiate(\"3D/GameGrassScore/GameGrassScoreEffect\");\n        //         grassController = go.GetComponent<GameGrassScoreEffectController>();\n        //     }\n        //     if (grassController == null)\n        //     {\n        //         DebugEX.LogError(\"GameGrassScoreEffectController Empty\");\n        //         await GAsync.WaitNextFrame();\n        //         return;\n        //     }\n\n        //     if (quarter == 2 || quarter == 4)\n        //         grassController.SetGameScoreData(_teamBConfigurationData.teamLogo.texture, _teamAConfigurationData.teamLogo.texture, _statisticManager.teamBStatistic.score, _statisticManager.teamAStatistic.score);\n        //     else\n        //         grassController.SetGameScoreData(_teamAConfigurationData.teamLogo.texture, _teamBConfigurationData.teamLogo.texture, _statisticManager.teamAStatistic.score, _statisticManager.teamBStatistic.score);\n\n        //     grassController.SetGameScoreAlpha(GameGrassScoreEffectController.DEFAULT_ALPHA_VALUE);\n        //     isShowGrassContent = true;\n        //     await GAsync.WaitNextFrame();\n        // }\n\n        // void HideGrassContent()\n        // {\n        //     if (tween!= null)\n        //         Go.removeTween(tween);\n        //     isShowGrassContent = false;\n        //     grassController?.SetGameScoreAlpha(0);\n        // }\n\n        // void HideGrassContentGradually(float delay)\n        // {\n        //     if (isShowGrassContent)\n        //     {\n        //         isShowGrassContent = false;\n        //         float time = 2f;\n        //         tween = Go.to(this.transform, time, new GoTweenConfig()\n        //            .setDelay(delay)\n        //            .onUpdate((obj) =>\n        //             {\n        //                 float curalpha = (1 - obj.totalElapsedTime / time) * GameGrassScoreEffectController.DEFAULT_ALPHA_VALUE;\n        //                 grassController?.SetGameScoreAlpha(curalpha);\n        //             }));\n        //     }\n        // }\n\n        private void LogGuideStep(string step)\n        {\n            if (GuideConfig.isGuideMatch())\n            {\n                TGALog.Instance.Log(step);\n            }\n        }\n\n        private void OnDestroy()\n        {\n            _teamAConfigurationData = null;\n            _teamBConfigurationData = null;\n            _statisticManager = null;\n            // Platform.EventDispatcher.RemoveEventListener(\"GameEndStatus\", HideGrassContent);\n            // Platform.EventDispatcher.RemoveEventListener(\"HideGrassContent\", HideGrassContent);\n            Platform.EventDispatcher.RemoveEventListener<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"ONInitStaticManager\", InitStaticManager);\n        }\n\n        protected override void OnBaseViewInit()\n        {\n\n        }\n    }\n}", "starcoder_inputs": "<fim_prefix>\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Framework.GalaSports.MVC.Core;\nusing Framework.GalaSports.MVC.Core.Events;\nusing Framework.GalaSports.Service;\nusing GalaSports.FootballNG;\nusing Platform;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing static GalaSDKBase.GalaSDKBaseFunction;\n\nnamespace Assets.Scripts\n{\n    [Module(\"BattleTip\")]\n    public partial class BattleTipView : FootballBaseView\n    {\n        // GameGrassScoreEffectController grassController;\n        private ISoccerStatisticManager _statisticManager;\n        private TeamConfigurationData _teamAConfigurationData;\n        private TeamConfigurationData _teamBConfigurationData;\n        int quarter = 1;\n        int lastState = -1;\n        // bool isShowGrassContent = false;\n        // GoTween tween;\n        // int _gameType;\n        bool guideMatchKickOffLog = true;\n        Dictionary<int, string> halfTimeTextDict;\n        private void Awake()\n        {\n            Platform.EventDispatcher.AddEventListener<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"ONInitStaticManager\", InitStaticManager);\n        }\n\n        public void InitStaticManager(ISoccerStatisticManager manager, TeamConfigurationData teamA, TeamConfigurationData teamB)\n        {\n            _statisticManager = manager;\n            _teamAConfigurationData = teamA;\n            _teamBConfigurationData = teamB;\n            if (GamePlayConfig.GamePlayType!= GameType.Normal)\n            {\n                return;\n            }\n            SoccerGameEvents.Instance.onGameTipFoul.AddListener(OnFoulHandler);\n            SoccerGameEvents.Instance.onGoalEvent.AddListener(OnScoreHandler);\n            SoccerGameEvents.Instance.onShowGameStateTip.AddListener(ShowGameStateTip);\n\n            SoccerGameEvents.Instance.onUpdateSubstitutePlayersEvent.AddListener(OnUpdateSubstitutePlayersEvent);\n            SoccerGameEvents.Instance.onMatchQuarterStartKickOffEvent.AddListener(OnTriggerQuarterStartKickOffTipView);\n            SoccerGameEvents.Instance.onUpdateMatchStateEvent.AddListener(onUpdateMatchStateEvent);\n            // Platform.EventDispatcher.AddEventListener(\"GameEndStatus\", HideGrassContent);\n            // Platform.EventDispatcher.AddEventListener(\"HideGrassContent\", HideGrassContent);\n            SpiecalScreen();\n            halfTimeTextDict = new Dictionary<int, string>();\n            halfTimeTextDict.Add(1, LanguageKit.Get(\"GamePlayUIPanel/HalfTime/SecondHalf/Text\"));//\u4e2d\u573a\u4f11\u606f\n            halfTimeTextDict.Add(2, LanguageKit.Get(\"GamePlayUIPanel/SecondHalf/SecondHalf/Text_light\"));//\u4e0b\u534a\u573a\n            halfTimeTextDict.Add(3, LanguageKit.Get(\"Label_1660727720395\"));//\u5e38\u89c4\u52a0\u65f6\n            halfTimeTextDict.Add(4, LanguageKit.Get(\"Label_1660727933049\"));//\u70b9\u7403\u5927\u6218\n            halfTimeTextDict.Add(5, LanguageKit.Get(\"Label_1661483427069\"));//\u52a0\u65f6\u8d5b\u4e0a\u534a\u573a\n            halfTimeTextDict.Add(6, LanguageKit.Get(\"Label_1661483435197\"));//\u52a0\u65f6\u8d5b\u4e0b\u534a\u573a\n            halfTimeTextDict.Add(7, LanguageKit.Get(\"Label_1661916314138\"));//\u5e38\u89c4\u6bd4\u8d5b\u7ed3\u675f\n            halfTimeTextDict.Add(8, LanguageKit.Get(\"Label_1661916314139\"));//\u52a0\u65f6\u8d5b\u4e2d\u573a\n        }\n        private void SpiecalScreen()\n        {\n            if (AppConfig.Instance.IsSpecialScreen)\n            {\n                var exchangeParent = transform.Find(\"ExchangeParent\");\n                float offset = AppConfig.Instance.BandHeight;\n                Vector2 offsetLeft = new Vector2(offset, 0);\n                exchangeParent.GetComponent<RectTransform>().anchoredPosition = offsetLeft;\n            }\n        }\n\n        private void OnUpdateSubstitutePlayersEvent(string teamId, List<SoccerPlayerAttributes> playerAttributes, Dictionary<int, int> dic)\n        {\n            // if (GlobalConfigManager.matchGamePlayConfig.IsHomeTeam&&_teamBConfigurationData.teamId== teamId||!GlobalConfigManager.matchGamePlayConfig.IsHomeTeam&&_teamAConfigurationData.teamId== teamId)\n            // {\n            //     return;\n            // }\n            if (dic == null)\n            {\n                return;\n            }\n            var IsTeamA = _teamAConfigurationData.teamId == teamId;\n            var config = IsTeamA? _teamAConfigurationData : _teamBConfigurationData;\n            List<ball_player> players = new List<ball_player>();\n            players.AddRange(config.teamStartPlayers);\n            players.AddRange(config.teamBenchPlayers);\n            foreach (var item in dic)\n            {\n                var downPlayer = item.Key;\n\n                var player1 = players.Find((player) => { return player.case_id == downPlayer; });\n\n                var upPlayer = item.Value;\n                var player2 = players.Find((player) => { return player.case_id == upPlayer; });\n#if OPEN_DEBUG_LOG\n                DebugEX.Log(\"UpdateSubstitutePlayer:   \" + teamId + \"   \" + player1.shirt_number + \"  \" + PlayerNameCfg.GetItem(player1.tm_id).name + \"   \" + player2.shirt_number + \"  \" + PlayerNameCfg.GetItem(player2.tm_id).name);\n#endif\n                if (player1!= null && player2!= null)\n                {\n                    if (IsTeamA)\n                        SC_BattleExchangePlayerTip_Left.ShowTip(player1, player2, config.teamLogo);\n                    else\n                        SC_BattleExchangePlayerTip_Right.ShowTip(player1, player2, config.teamLogo);\n                }\n            }\n        }<fim_suffix>ScoreTip.ShowTip(sgs, sgs.isTeamA? _teamAConfigurationData : _teamBConfigurationData);\n            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n        }\n\n        private void OnFoulHandler(SoccerFoulStatistic foul)\n        {\n\n            SoccerPlayerStatistic playerStatistic = _statisticManager.GetOnPitchPlayerStatisticByName(foul.playerName);\n            EnumShowTipType enumType;\n            switch (foul.foulType)\n            {\n                case EnumFoulStatisticType.YellowGoodForAttack:\n                case EnumFoulStatisticType.YellowCardDirectedFreeKick:\n                case EnumFoulStatisticType.YelloCardPenaltyKick:\n                    enumType = EnumShowTipType.Yellow;\n                    break;\n                case EnumFoulStatisticType.RedCardDirectedFreeKick:\n                case EnumFoulStatisticType.RedCardGoodForAttack:\n                case EnumFoulStatisticType.RedCardPenaltyKick:\n                    enumType = EnumShowTipType.Red;\n                    break;\n                default:\n                    enumType = EnumShowTipType.TeamInfo;\n                    return;\n            }\n\n            var teamCfg = \"TeamA\" == playerStatistic.teamUid? _teamAConfigurationData : _teamBConfigurationData;\n            SC_BattleWarningTip.ShowTip(enumType, playerStatistic, teamCfg);\n            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n        }\n\n        // \u5c55\u793a\u8f6c\u573aUI\u52a8\u753b\u548c\u754c\u9762\n        private void ShowGameStateTip(int type)\n        {\n            // Platform.EventDispatcher.TriggerEvent<System.Action<int>>(\"GetGamePlayType\", (value) =>\n            // {\n            //     _gameType = value;\n            // });\n            GlobalConfigManager.matchGamePlayConfig.IsHalfTime = false;\n            GlobalConfigManager.matchGamePlayConfig.IsExtraHalfTime = false;\n            GlobalConfigManager.matchGamePlayConfig.IsPenaltyHalfTime = false;\n            switch (type)\n            {\n                case -2: //\u7279\u6b8a\u6bd4\u8d5b\u4e0b\u534a\u5f00\u573a\n                    if (footballController.IsKickOff())\n                    {\n                        lastState = 8;\n                        // ShowGrassContent();\n                        Platform.EventDispatcher.TriggerEvent<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"OnInitSceneLogoData\", _statisticManager, _teamAConfigurationData, _teamBConfigurationData);\n                    }\n                    if (GameDataHelper.IsPvPOnLine)\n                    {\n                        UpdateUtils.Instance.DelayCall(60, () => Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true));\n                    }\n                    else\n                    {\n                        Go.DelayCall(() => Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true), 2f);\n                    }\n                    SC_BattleTeamInfoTip.ShowTip(_statisticManager, type, _teamAConfigurationData, _teamBConfigurationData, halfTimeTextDict[2]);\n                    break;\n                case -1://\u6b63\u5e38\u5f00\u573a\n                    lastState = 8;\n                    // ShowGrassContent();\n                    Platform.EventDispatcher.TriggerEvent<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"OnInitSceneLogoData\", _statisticManager, _teamAConfigurationData, _teamBConfigurationData);\n                    if (GameDataHelper.IsPvPOnLine)\n                    {\n                        UpdateUtils.Instance.DelayCall(75, () => Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true));\n                    }\n                    else\n                    {\n                        Go.DelayCall(() => Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true), 2.5f);\n                    }\n\n                    // if (GameDataHelper.IsPvPOnLine)//pvp\u6ca1\u6709\u81ea\u52a8\u9690\u85cf\u6c34\u5370\n                    // {\n                    //     HideGrassContentGradually(8f);\n                    // }\n                    break;\n                case 0://\u4e2d\u573a\u4f11\u606f\n                    GlobalConfigManager.matchGamePlayConfig.IsHalfTime = true;\n                    GlobalConfigManager.matchGamePlayConfig.IsPvpHalfTime = GameDataHelper.IsPvPOnLine;\n                    ShowHalfTimeAni(halfTimeTextDict[1]);\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n                    break;\n                case 1://\u5e38\u89c4\u6bd4\u8d5b\u7684\u7ec8\u573a\u7ed3\u675f\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n                    SC_BattleTeamInfoTip.ShowTip(_statisticManager, type, _teamAConfigurationData, _teamBConfigurationData, halfTimeTextDict[2]);\n                    break;\n                case 2:\n                    if (GameDataHelper.IsPvPOnLine)\n                    {\n                        UpdateUtils.Instance.DelayCall(75, () =>\n                        {\n                            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                        });\n                    }\n                    else\n                    {\n                        Go.DelayCall(() =>\n                        {\n                            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                        }, 2.5f);\n                    }\n                    break;\n                case 3://\u5e38\u89c4\u6bd4\u8d5b\u4f11\u606f\u5230\u52a0\u65f6\u8d5b\n                    GlobalConfigManager.matchGamePlayConfig.IsExtraHalfTime = true;\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                    ShowHalfTimeAni(halfTimeTextDict[7]);\n                    break;\n                case 4://\u52a0\u65f6\u8d5b\u4e2d\u573a\u4f11\u606f\n                    GlobalConfigManager.matchGamePlayConfig.IsExtraHalfTime = true;\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                    ShowHalfTimeAni(halfTimeTextDict[8]);\n                    break;\n                case 5://\u70b9\u7403\u5927\u6218\u5f00\u59cb\n                    //GamePlayConfig.IsPenaltyShootOut = true;\n                    GlobalConfigManager.matchGamePlayConfig.IsPenaltyHalfTime = true;\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n                    ShowHalfTimeAni(halfTimeTextDict[4]);\n                    break;\n                case 6://\u70b9\u7403\u5927\u6218\u7ed3\u675f\n                    Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, false, false);\n                    SC_BattleTeamInfoTip.ShowTip(_statisticManager, type, _teamAConfigurationData, _teamBConfigurationData, halfTimeTextDict[4]);\n                    break;\n            }\n        }\n\n        private void onUpdateMatchStateEvent(MatchStateData obj)\n        {\n            int curState = (int)obj.matchState;\n            if (curState == (int)MatchStateData.MatchState.KickOff && lastState!= -1)\n            {\n                if (GameDataHelper.IsPvPOnLine)\n                {\n                    UpdateUtils.Instance.DelayCall(90, ShowMainUIAfterKickOff);\n                }\n                else\n                {\n                    Go.DelayCall(ShowMainUIAfterKickOff, 3f);\n                }\n                // ShowGrassContent();\n                Platform.EventDispatcher.TriggerEvent<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"OnInitSceneLogoData\", _statisticManager, _teamAConfigurationData, _teamBConfigurationData);\n            }\n            if (lastState == (int)MatchStateData.MatchState.KickOff && curState == (int)MatchStateData.MatchState.Playing)\n            {\n                if (GuideConfig.isGuideMatch() && guideMatchKickOffLog)\n                {\n                    guideMatchKickOffLog = false;\n                    TGALog.Instance.Log(GuideStepType.CLICK_PASS_KICK_OFF);\n                }\n                // HideGrassContentGradually(2f);\n            }\n            lastState = curState;\n        }\n\n        private void ShowMainUIAfterKickOff()\n        {\n            if (footballController.IsExitPitch() || footballController.frameId == 0 || FootballManager.IsInRecord || FootballManager.IsInCelebrate)\n                return;\n            Platform.EventDispatcher.TriggerEvent(Events.SetPlayingMainUIState, true, true);\n        }\n\n        private void OnTriggerQuarterStartKickOffTipView(MatchStateData obj)\n        {\n            string kickOffStartTxt = halfTimeTextDict[2];\n            bool MayKickOff = false;\n            quarter = obj.quarter;\n            if (obj.quarter == 2)\n            {\n                kickOffStartTxt = halfTimeTextDict[2];\n                MayKickOff = true;\n            }\n            else if (obj.quarter == 3)\n            {\n                kickOffStartTxt = halfTimeTextDict[5];\n                MayKickOff = true;\n            }\n            else if (obj.quarter == 4)\n            {\n                kickOffStartTxt = halfTimeTextDict[6];\n                MayKickOff = true;\n            }\n            if (MayKickOff)\n            {\n                ShowHalfTimeAni(kickOffStartTxt);\n            }\n        }\n\n        void ShowHalfTimeAni(string text)\n        {\n            Go.CancelDelayCall(HideHalfTimeAni);\n            Go.DelayCall(() =>\n            {\n                HalfTimeAniText.text = text;\n                HalfTimeAni.SetActive(true);\n                Go.DelayCall(HideHalfTimeAni, 2f);\n            }, 1f);\n        }\n\n        void HideHalfTimeAni()\n        {\n            HalfTimeAni.SetActive(false);\n        }\n\n        // private async void ShowGrassContent()\n        // {\n        //     if (_gameType == 16 || isShowGrassContent)\n        //     {\n        //         return;\n        //     }\n        //     if (grassController == null)\n        //     {\n        //         GameObject go = ResourceMgr.Instance.Instantiate(\"3D/GameGrassScore/GameGrassScoreEffect\");\n        //         grassController = go.GetComponent<GameGrassScoreEffectController>();\n        //     }\n        //     if (grassController == null)\n        //     {\n        //         DebugEX.LogError(\"GameGrassScoreEffectController Empty\");\n        //         await GAsync.WaitNextFrame();\n        //         return;\n        //     }\n\n        //     if (quarter == 2 || quarter == 4)\n        //         grassController.SetGameScoreData(_teamBConfigurationData.teamLogo.texture, _teamAConfigurationData.teamLogo.texture, _statisticManager.teamBStatistic.score, _statisticManager.teamAStatistic.score);\n        //     else\n        //         grassController.SetGameScoreData(_teamAConfigurationData.teamLogo.texture, _teamBConfigurationData.teamLogo.texture, _statisticManager.teamAStatistic.score, _statisticManager.teamBStatistic.score);\n\n        //     grassController.SetGameScoreAlpha(GameGrassScoreEffectController.DEFAULT_ALPHA_VALUE);\n        //     isShowGrassContent = true;\n        //     await GAsync.WaitNextFrame();\n        // }\n\n        // void HideGrassContent()\n        // {\n        //     if (tween!= null)\n        //         Go.removeTween(tween);\n        //     isShowGrassContent = false;\n        //     grassController?.SetGameScoreAlpha(0);\n        // }\n\n        // void HideGrassContentGradually(float delay)\n        // {\n        //     if (isShowGrassContent)\n        //     {\n        //         isShowGrassContent = false;\n        //         float time = 2f;\n        //         tween = Go.to(this.transform, time, new GoTweenConfig()\n        //            .setDelay(delay)\n        //            .onUpdate((obj) =>\n        //             {\n        //                 float curalpha = (1 - obj.totalElapsedTime / time) * GameGrassScoreEffectController.DEFAULT_ALPHA_VALUE;\n        //                 grassController?.SetGameScoreAlpha(curalpha);\n        //             }));\n        //     }\n        // }\n\n        private void LogGuideStep(string step)\n        {\n            if (GuideConfig.isGuideMatch())\n            {\n                TGALog.Instance.Log(step);\n            }\n        }\n\n        private void OnDestroy()\n        {\n            _teamAConfigurationData = null;\n            _teamBConfigurationData = null;\n            _statisticManager = null;\n            // Platform.EventDispatcher.RemoveEventListener(\"GameEndStatus\", HideGrassContent);\n            // Platform.EventDispatcher.RemoveEventListener(\"HideGrassContent\", HideGrassContent);\n            Platform.EventDispatcher.RemoveEventListener<ISoccerStatisticManager, TeamConfigurationData, TeamConfigurationData>(\"ONInitStaticManager\", InitStaticManager);\n        }\n\n        protected override void OnBaseViewInit()\n        {\n\n        }\n    }\n}<fim_middle>"}
{"inputs": "using System;\nusing UnityEngine;\n\n\nnamespace NodeGraphProcessor\n{\n    public class Timer : MonoBehaviour\n    {\n        private readonly BinaryHeap<TimeItem> m_UnScaleTimeHeap = new BinaryHeap<TimeItem>(128, BinaryHeapSortMode.kMin);\n        private readonly BinaryHeap<TimeItem> m_ScaleTimeHeap = new BinaryHeap<TimeItem>(128, BinaryHeapSortMode.kMin);\n        private float m_CurrentUnScaleTime = -1;\n        private float m_CurrentScaleTime = -1;\n\n        private static Timer _instance;\n        public static Timer Instance\n        {\n            get\n            {\n                if (_instance == null)\n                {\n                    var obj = new GameObject(\"[Utils]/[Timer]\");\n                    _instance = obj.AddComponent<Timer>();\n                    _instance.OnSingletonInit();\n                    DontDestroyOnLoad(obj);\n                }\n\n                return _instance;\n            }\n        }\n\n\n        public float currentScaleTime\n        {\n            get { return m_CurrentScaleTime; }\n        }\n\n        public float currentUnScaleTime\n        {\n            get { return m_CurrentUnScaleTime; }\n        }\n\n        void OnSingletonInit()\n        {\n            m_UnScaleTimeHeap.Clear();\n            m_ScaleTimeHeap.Clear();\n\n            m_CurrentUnScaleTime = Time.unscaledTime;\n            m_CurrentScaleTime = Time.time;\n        }\n\n        public void ResetMgr()\n        {\n            m_UnScaleTimeHeap.Clear();\n            m_ScaleTimeHeap.Clear();\n        }\n\n        public void StartMgr()\n        {\n            m_CurrentUnScaleTime = Time.unscaledTime;\n            m_CurrentScaleTime = Time.time;\n        }\n\n        #region \u6295\u9012\u53d7\u7f29\u653e\u5f71\u54cd\u5b9a\u65f6\u5668\n\n        public TimeItem Post2Scale(Action<int> callback, float delay, int repeat)\n        {\n            TimeItem item = TimeItem.Allocate(callback, delay, repeat);\n            Post2Scale(item);\n            return item;\n        }\n\n        public TimeItem Post2Scale(Action<int> callback, float delay)\n        {\n            TimeItem item = TimeItem.Allocate(callback, delay);\n            Post2Scale(item);\n            return item;\n        }\n\n        public void Post2Scale(TimeItem item)\n        {\n            item.SortScore = m_CurrentScaleTime + item.DelayTime();\n            m_ScaleTimeHeap.Insert(item);\n        }\n\n        #endregion\n\n        #region \u6295\u9012\u771f\u5b9e\u65f6\u95f4\u5b9a\u65f6\u5668\n\n        //\u6295\u9012\u6307\u5b9a\u65f6\u95f4\u8ba1\u65f6\u5668\uff1a\u53ea\u652f\u6301\u6807\u51c6\u65f6\u95f4\n        public TimeItem Post2Really(Action<int> callback, DateTime toTime)\n        {\n            float passTick = (toTime.Ticks - DateTime.Now.Ticks) / 10000000;\n            if (passTick < 0)\n            {\n                passTick = 0;\n            }\n            return Post2Really(callback, passTick);\n        }\n\n        public TimeItem Post2Really(Action<int> callback, float delay, int repeat)\n        {\n            TimeItem item = TimeItem.Allocate(callback, delay, repeat);\n            Post2Really(item);\n            return item;\n        }\n\n        public TimeItem Post2Really(Action<int> callback, float delay)\n        {\n            TimeItem item = TimeItem.Allocate(callback, delay);\n            Post2Really(item);\n            return item;\n        }\n\n        public void Post2Really(TimeItem item)\n        {\n            item.SortScore = m_CurrentUnScaleTime + item.DelayTime();\n            m_UnScaleTimeHeap.Insert(item);\n        }\n\n        #endregion\n\n        void Update()\n        {\n            UpdateMgr();\n        }\n\n        public void UpdateMgr()\n        {\n            TimeItem item = null;\n            m_CurrentUnScaleTime = Time.unscaledTime;\n            m_CurrentScaleTime = Time.time;\n\n            #region \u4e0d\u53d7\u7f29\u653e\u5f71\u54cd\u5b9a\u65f6\u5668\u66f4\u65b0\n\n            while ((item = m_UnScaleTimeHeap.Top()) != null)\n            {\n                if (!item.isEnable)\n                {\n                    m_UnScaleTimeHeap.Pop();\n                    item.Recycle2Cache();\n                    continue;\n                }\n\n                if (item.SortScore < m_CurrentUnScaleTime)\n                {\n                    m_UnScaleTimeHeap.Pop();\n\n                    item.OnTimeTick();\n\n                    if (item.isEnable && item.NeedRepeat())\n                    {\n                        Post2Really(item);\n                    }\n                    else\n                    {\n                        item.Recycle2Cache();\n                    }\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            #endregion\n\n            #region \u53d7\u7f29\u653e\u5f71\u54cd\u5b9a\u65f6\u5668\u66f4\u65b0\n\n            while ((item = m_ScaleTimeHeap.Top()) != null)\n            {\n                if (!item.isEnable)\n                {\n                    m_ScaleTimeHeap.Pop();\n                    item.Recycle2Cache();\n                    continue;\n                }\n\n                if (item.SortScore < m_CurrentScaleTime)\n                {\n                    m_ScaleTimeHeap.Pop();\n\n                    item.OnTimeTick();\n\n                    if (item.isEnable && item.NeedRepeat())\n                    {\n                        Post2Scale(item);\n                    }\n                    else\n                    {\n                        item.Recycle2Cache();\n                    }\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            #endregion\n        }\n\n        public void Dump()\n        {\n\n        }\n    }\n}", "cropped_inputs": "using System;\nusing UnityEngine;\n\n\nnamespace NodeGraphProcessor\n{\n    public class Timer : MonoBehaviour\n    {\n        private readonly BinaryHeap<TimeItem> m_UnScaleTimeHeap = new BinaryHeap<TimeItem>(128, BinaryHeapSortMode.kMin);\n        private readonly BinaryHeap<TimeItem> m_ScaleTimeHeap = new BinaryHeap<TimeItem>(128, BinaryHeapSortMode.kMin);\n        private float m_CurrentUnScaleTime = -1;\n        private float m_CurrentScaleTime = -1;\n\n        private static Timer _instance;\n        public static Timer Instance\n        {\n            get\n            {\n                if (_instance == null)\n                {\n                    var obj = new GameObject(\"[Utils]/[Timer]\");\n                    _instance = obj.AddComponent<Timer>();\n                    _instance.OnSingletonInit();\n                    DontDestroyOnLoad(obj);\n                }\n\n                return _instance;\n            }\n        }\n\n\n        public float currentScaleTime\n        {\n            get { return m_CurrentScaleTime; }\n        }\n\n        public float currentUnScaleTime\n        {\n            get { return m_CurrentUnScaleTime; }\n        }\n\n        void OnSingletonInit()\n        {\n            m_UnScaleTimeHeap.Clear();\n            m_ScaleTimeHeap.Clear();\n\n            m_CurrentUnScaleTime = Time.unscaledTime;\n            m_CurrentScaleTime = Time.time;\n        }\n\n        public void ResetMgr()\n        {\n            m_UnScaleTimeHeap.Clear();\n            m_ScaleTimeHeap.Clear();\n        }\n\n        public void StartMgr()\n        {\n            m_CurrentUnScaleTime = Time.unscaledTime;\n            m_CurrentScaleTime = Time.time;\n        }\n\n        #region \u6295\u9012\u53d7\u7f29\u653e\u5f71\u54cd\u5b9a\u65f6\u5668\n\n        public TimeItem Post2Scale(Action<Allocate(callback, delay, repeat);\n            Post2Scale(item);\n            return item;\n        }\n\n        public TimeItem Post2Scale(Action<int> callback, float delay)\n        {\n            TimeItem item = TimeItem.Allocate(callback, delay);\n            Post2Scale(item);\n            return item;\n        }\n\n        public void Post2Scale(TimeItem item)\n        {\n            item.SortScore = m_CurrentScaleTime + item.DelayTime();\n            m_ScaleTimeHeap.Insert(item);\n        }\n\n        #endregion\n\n        #region \u6295\u9012\u771f\u5b9e\u65f6\u95f4\u5b9a\u65f6\u5668\n\n        //\u6295\u9012\u6307\u5b9a\u65f6\u95f4\u8ba1\u65f6\u5668\uff1a\u53ea\u652f\u6301\u6807\u51c6\u65f6\u95f4\n        public TimeItem Post2Really(Action<int> callback, DateTime toTime)\n        {\n            float passTick = (toTime.Ticks - DateTime.Now.Ticks) / 10000000;\n            if (passTick < 0)\n            {\n                passTick = 0;\n            }\n            return Post2Really(callback, passTick);\n        }\n\n        public TimeItem Post2Really(Action<int> callback, float delay, int repeat)\n        {\n            TimeItem item = TimeItem.Allocate(callback, delay, repeat);\n            Post2Really(item);\n            return item;\n        }\n\n        public TimeItem Post2Really(Action<int> callback, float delay)\n        {\n            TimeItem item = TimeItem.Allocate(callback, delay);\n            Post2Really(item);\n            return item;\n        }\n\n        public void Post2Really(TimeItem item)\n        {\n            item.SortScore = m_CurrentUnScaleTime + item.DelayTime();\n            m_UnScaleTimeHeap.Insert(item);\n        }\n\n        #endregion\n\n        void Update()\n        {\n            UpdateMgr();\n        }\n\n        public void UpdateMgr()\n        {\n            TimeItem item = null;\n            m_CurrentUnScaleTime = Time.unscaledTime;\n            m_CurrentScaleTime = Time.time;\n\n            #region \u4e0d\u53d7\u7f29\u653e\u5f71\u54cd\u5b9a\u65f6\u5668\u66f4\u65b0\n\n            while ((item = m_UnScaleTimeHeap.Top())!= null)\n            {\n                if (!item.isEnable)\n                {\n                    m_UnScaleTimeHeap.Pop();\n                    item.Recycle2Cache();\n                    continue;\n                }\n\n                if (item.SortScore < m_CurrentUnScaleTime)\n                {\n                    m_UnScaleTimeHeap.Pop();\n\n                    item.OnTimeTick();\n\n                    if (item.isEnable && item.NeedRepeat())\n                    {\n                        Post2Really(item);\n                    }\n                    else\n                    {\n                        item.Recycle2Cache();\n                    }\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            #endregion\n\n            #region \u53d7\u7f29\u653e\u5f71\u54cd\u5b9a\u65f6\u5668\u66f4\u65b0\n\n            while ((item = m_ScaleTimeHeap.Top())!= null)\n            {\n                if (!item.isEnable)\n                {\n                    m_ScaleTimeHeap.Pop();\n                    item.Recycle2Cache();\n                    continue;\n                }\n\n                if (item.SortScore < m_CurrentScaleTime)\n                {\n                    m_ScaleTimeHeap.Pop();\n\n                    item.OnTimeTick();\n\n                    if (item.isEnable && item.NeedRepeat())\n                    {\n                        Post2Scale(item);\n                    }\n                    else\n                    {\n                        item.Recycle2Cache();\n                    }\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            #endregion\n        }\n\n        public void Dump()\n        {\n\n        }\n    }\n}", "starcoder_inputs": "<fim_prefix>using System;\nusing UnityEngine;\n\n\nnamespace NodeGraphProcessor\n{\n    public class Timer : MonoBehaviour\n    {\n        private readonly BinaryHeap<TimeItem> m_UnScaleTimeHeap = new BinaryHeap<TimeItem>(128, BinaryHeapSortMode.kMin);\n        private readonly BinaryHeap<TimeItem> m_ScaleTimeHeap = new BinaryHeap<TimeItem>(128, BinaryHeapSortMode.kMin);\n        private float m_CurrentUnScaleTime = -1;\n        private float m_CurrentScaleTime = -1;\n\n        private static Timer _instance;\n        public static Timer Instance\n        {\n            get\n            {\n                if (_instance == null)\n                {\n                    var obj = new GameObject(\"[Utils]/[Timer]\");\n                    _instance = obj.AddComponent<Timer>();\n                    _instance.OnSingletonInit();\n                    DontDestroyOnLoad(obj);\n                }\n\n                return _instance;\n            }\n        }\n\n\n        public float currentScaleTime\n        {\n            get { return m_CurrentScaleTime; }\n        }\n\n        public float currentUnScaleTime\n        {\n            get { return m_CurrentUnScaleTime; }\n        }\n\n        void OnSingletonInit()\n        {\n            m_UnScaleTimeHeap.Clear();\n            m_ScaleTimeHeap.Clear();\n\n            m_CurrentUnScaleTime = Time.unscaledTime;\n            m_CurrentScaleTime = Time.time;\n        }\n\n        public void ResetMgr()\n        {\n            m_UnScaleTimeHeap.Clear();\n            m_ScaleTimeHeap.Clear();\n        }\n\n        public void StartMgr()\n        {\n            m_CurrentUnScaleTime = Time.unscaledTime;\n            m_CurrentScaleTime = Time.time;\n        }\n\n        #region \u6295\u9012\u53d7\u7f29\u653e\u5f71\u54cd\u5b9a\u65f6\u5668\n\n        public TimeItem Post2Scale(Action<<fim_suffix>Allocate(callback, delay, repeat);\n            Post2Scale(item);\n            return item;\n        }\n\n        public TimeItem Post2Scale(Action<int> callback, float delay)\n        {\n            TimeItem item = TimeItem.Allocate(callback, delay);\n            Post2Scale(item);\n            return item;\n        }\n\n        public void Post2Scale(TimeItem item)\n        {\n            item.SortScore = m_CurrentScaleTime + item.DelayTime();\n            m_ScaleTimeHeap.Insert(item);\n        }\n\n        #endregion\n\n        #region \u6295\u9012\u771f\u5b9e\u65f6\u95f4\u5b9a\u65f6\u5668\n\n        //\u6295\u9012\u6307\u5b9a\u65f6\u95f4\u8ba1\u65f6\u5668\uff1a\u53ea\u652f\u6301\u6807\u51c6\u65f6\u95f4\n        public TimeItem Post2Really(Action<int> callback, DateTime toTime)\n        {\n            float passTick = (toTime.Ticks - DateTime.Now.Ticks) / 10000000;\n            if (passTick < 0)\n            {\n                passTick = 0;\n            }\n            return Post2Really(callback, passTick);\n        }\n\n        public TimeItem Post2Really(Action<int> callback, float delay, int repeat)\n        {\n            TimeItem item = TimeItem.Allocate(callback, delay, repeat);\n            Post2Really(item);\n            return item;\n        }\n\n        public TimeItem Post2Really(Action<int> callback, float delay)\n        {\n            TimeItem item = TimeItem.Allocate(callback, delay);\n            Post2Really(item);\n            return item;\n        }\n\n        public void Post2Really(TimeItem item)\n        {\n            item.SortScore = m_CurrentUnScaleTime + item.DelayTime();\n            m_UnScaleTimeHeap.Insert(item);\n        }\n\n        #endregion\n\n        void Update()\n        {\n            UpdateMgr();\n        }\n\n        public void UpdateMgr()\n        {\n            TimeItem item = null;\n            m_CurrentUnScaleTime = Time.unscaledTime;\n            m_CurrentScaleTime = Time.time;\n\n            #region \u4e0d\u53d7\u7f29\u653e\u5f71\u54cd\u5b9a\u65f6\u5668\u66f4\u65b0\n\n            while ((item = m_UnScaleTimeHeap.Top())!= null)\n            {\n                if (!item.isEnable)\n                {\n                    m_UnScaleTimeHeap.Pop();\n                    item.Recycle2Cache();\n                    continue;\n                }\n\n                if (item.SortScore < m_CurrentUnScaleTime)\n                {\n                    m_UnScaleTimeHeap.Pop();\n\n                    item.OnTimeTick();\n\n                    if (item.isEnable && item.NeedRepeat())\n                    {\n                        Post2Really(item);\n                    }\n                    else\n                    {\n                        item.Recycle2Cache();\n                    }\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            #endregion\n\n            #region \u53d7\u7f29\u653e\u5f71\u54cd\u5b9a\u65f6\u5668\u66f4\u65b0\n\n            while ((item = m_ScaleTimeHeap.Top())!= null)\n            {\n                if (!item.isEnable)\n                {\n                    m_ScaleTimeHeap.Pop();\n                    item.Recycle2Cache();\n                    continue;\n                }\n\n                if (item.SortScore < m_CurrentScaleTime)\n                {\n                    m_ScaleTimeHeap.Pop();\n\n                    item.OnTimeTick();\n\n                    if (item.isEnable && item.NeedRepeat())\n                    {\n                        Post2Scale(item);\n                    }\n                    else\n                    {\n                        item.Recycle2Cache();\n                    }\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            #endregion\n        }\n\n        public void Dump()\n        {\n\n        }\n    }\n}<fim_middle>"}
{"inputs": "namespace NodeGraphProcessor\n{\n/****************************************************************************\n * Copyright (c) 2017 snowcold\n * Copyright (c) 2017 liangxie\n****************************************************************************/\n\n    using System;\n\n    public enum BinaryHeapBuildMode\n    {\n        kNLog = 1,\n        kN = 2,\n    }\n\n    public enum BinaryHeapSortMode\n    {\n        kMin = 0,\n        kMax = 1,\n    }\n\n    //\u4f18\u5148\u961f\u5217&\u4e8c\u53c9\u5806\n    public class BinaryHeap<T> where T : IBinaryHeapElement\n    {\n        protected T[] mArray;\n\n        protected float mGrowthFactor = 1.6f;\n        protected int mLastChildIndex; //\u6700\u540e\u5b50\u8282\u70b9\u7684\u4f4d\u7f6e\n        protected BinaryHeapSortMode mSortMode;\n\n        public BinaryHeap(int minSize, BinaryHeapSortMode sortMode)\n        {\n            mSortMode = sortMode;\n            mArray = new T[minSize];\n            mLastChildIndex = 0;\n        }\n\n        public BinaryHeap(T[] dataArray, BinaryHeapSortMode sortMode)\n        {\n            mSortMode = sortMode;\n            int minSize = 10;\n            if (dataArray != null)\n            {\n                minSize = dataArray.Length + 1;\n            }\n\n            mArray = new T[minSize];\n            mLastChildIndex = 0;\n            Insert(dataArray, BinaryHeapBuildMode.kN);\n        }\n\n        #region \u516c\u5f00\u65b9\u6cd5\n\n        #region \u6e05\u7a7a\n\n        public void Clear()\n        {\n            mArray = new T[10];\n            mLastChildIndex = 0;\n        }\n\n        #endregion\n\n        #region \u63d2\u5165\n\n        public void Insert(T[] dataArray, BinaryHeapBuildMode buildMode)\n        {\n            if (dataArray == null)\n            {\n                throw new NullReferenceException(\"BinaryHeap Not Support Insert Null Object\");\n            }\n\n            int totalLength = mLastChildIndex + dataArray.Length + 1;\n            if (mArray.Length < totalLength)\n            {\n                ResizeArray(totalLength);\n            }\n\n            if (buildMode == BinaryHeapBuildMode.kNLog)\n            {\n                //\u65b9\u5f0f1:\u76f4\u63a5\u6dfb\u52a0\uff0c\u6bcf\u6b21\u6dfb\u52a0\u90fd\u4f1a\u4e0a\u6d6e\n                for (int i = 0; i < dataArray.Length; ++i)\n                {\n                    Insert(dataArray[i]);\n                }\n            }\n            else\n            {\n                //\u6570\u91cf\u6bd4\u8f83\u5927\u7684\u60c5\u51b5\u4e0b\u4f1a\u5feb\u4e00\u4e9b\n                //\u65b9\u5f0f2:\u5148\u6dfb\u52a0\u5b8c\uff0c\u7136\u540e\u6392\u5e8f\n                for (int i = 0; i < dataArray.Length; ++i)\n                {\n                    mArray[++mLastChildIndex] = dataArray[i];\n                }\n\n                SortAsCurrentMode();\n            }\n        }\n\n        public void Insert(T element)\n        {\n            if (element == null)\n            {\n                throw new NullReferenceException(\"BinaryHeap Not Support Insert Null Object\");\n            }\n\n            int index = ++mLastChildIndex;\n\n            if (index == mArray.Length)\n            {\n                ResizeArray();\n            }\n\n            mArray[index] = element;\n\n            ProcolateUp(index);\n        }\n\n        #endregion\n\n        #region \u5f39\u51fa\n\n        public T Pop()\n        {\n            if (mLastChildIndex < 1)\n            {\n                return default(T);\n            }\n\n            T result = mArray[1];\n            mArray[1] = mArray[mLastChildIndex--];\n            ProcolateDown(1);\n            return result;\n        }\n\n        public T Top()\n        {\n            if (mLastChildIndex < 1)\n            {\n                return default(T);\n            }\n\n            return mArray[1];\n        }\n\n        #endregion\n\n        #region \u91cd\u65b0\u6392\u5e8f\n\n        public void Sort(BinaryHeapSortMode sortMode)\n        {\n            if (mSortMode == sortMode)\n            {\n                return;\n            }\n            mSortMode = sortMode;\n            SortAsCurrentMode();\n        }\n\n        public void RebuildAtIndex(int index)\n        {\n            if (index > mLastChildIndex)\n            {\n                return;\n            }\n\n            //1.\u9996\u5148\u627e\u7236\u8282\u70b9\uff0c\u662f\u5426\u6bd4\u7236\u8282\u70b9\u5c0f\uff0c\u5982\u679c\u6ee1\u8db3\u5219\u4e0a\u6d6e,\u4e0d\u6ee1\u8db3\u4e0b\u6c89\n            var element = mArray[index];\n\n            int parentIndex = index >> 1;\n            if (parentIndex > 0)\n            {\n                if (mSortMode == BinaryHeapSortMode.kMin)\n                {\n                    if (element.SortScore < mArray[parentIndex].SortScore)\n                    {\n                        ProcolateUp(index);\n                    }\n                    else\n                    {\n                        ProcolateDown(index);\n                    }\n                }\n                else\n                {\n                    if (element.SortScore > mArray[parentIndex].SortScore)\n                    {\n                        ProcolateUp(index);\n                    }\n                    else\n                    {\n                        ProcolateDown(index);\n                    }\n                }\n            }\n            else\n            {\n                ProcolateDown(index);\n            }\n        }\n\n        private void SortAsCurrentMode()\n        {\n            int startChild = mLastChildIndex >> 1;\n            for (int i = startChild; i > 0; --i)\n            {\n                ProcolateDown(i);\n            }\n        }\n\n        #endregion\n\n        #region \u6307\u5b9a\u4f4d\u7f6e\u5220\u9664\n\n        public void RemoveAt(int index)\n        {\n            if (index > mLastChildIndex || index < 1)\n            {\n                return;\n            }\n\n            if (index == mLastChildIndex)\n            {\n                --mLastChildIndex;\n                mArray[index] = default(T);\n                return;\n            }\n\n            mArray[index] = mArray[mLastChildIndex--];\n            mArray[index].HeapIndex = index;\n            RebuildAtIndex(index);\n        }\n\n        #endregion\n\n        #region \u7d22\u5f15\u67e5\u627e\n\n        //\u8fd9\u4e2a\u7d22\u5f15\u548c\u5927\u5c0f\u6392\u5e8f\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\n        public T GetElement(int index)\n        {\n            if (index > mLastChildIndex)\n            {\n                return default(T);\n            }\n            return mArray[index];\n        }\n\n        #endregion\n\n        #region \u5224\u5b9a\u8f85\u52a9\n\n        public bool HasValue()\n        {\n            return mLastChildIndex > 0;\n        }\n\n        #endregion\n\n        #region \u5185\u90e8\u65b9\u6cd5\n\n        protected void ResizeArray(int newSize = -1)\n        {\n            if (newSize < 0)\n            {\n                newSize = System.Math.Max(mArray.Length + 4, (int) System.Math.Round(mArray.Length * mGrowthFactor));\n            }\n\n            if (newSize > 1 << 30)\n            {\n                throw new System.Exception(\n                    \"Binary Heap Size really large (2^18). A heap size this large is probably the cause of pathfinding running in an infinite loop. \" +\n                    \"\\nRemove this check (in BinaryHeap.cs) if you are sure that it is not caused by a bug\");\n            }\n\n            T[] tmp = new T[newSize];\n            for (int i = 0; i < mArray.Length; i++)\n            {\n                tmp[i] = mArray[i];\n            }\n\n            mArray = tmp;\n        }\n\n        //\u4e0a\u6d6e:\u7a7a\u7a74\u601d\u60f3\n        protected void ProcolateUp(int index)\n        {\n            var element = mArray[index];\n            if (element == null)\n            {\n                return;\n            }\n\n            float sortScore = element.SortScore;\n\n            int parentIndex = index >> 1;\n\n            if (mSortMode == BinaryHeapSortMode.kMin)\n            {\n                while (parentIndex >= 1 && sortScore < mArray[parentIndex].SortScore)\n                {\n                    mArray[index] = mArray[parentIndex];\n                    mArray[index].HeapIndex = index;\n                    index = parentIndex;\n                    parentIndex = index >> 1;\n                }\n            }\n            else\n            {\n                while (parentIndex >= 1 && sortScore > mArray[parentIndex].SortScore)\n                {\n                    mArray[index] = mArray[parentIndex];\n                    mArray[index].HeapIndex = index;\n                    index = parentIndex;\n                    parentIndex = index >> 1;\n                }\n            }\n            mArray[index] = element;\n            mArray[index].HeapIndex = index;\n        }\n\n        protected void ProcolateDown(int index)\n        {\n            var element = mArray[index];\n            if (element == null)\n            {\n                return;\n            }\n\n            int childIndex = index << 1;\n\n            if (mSortMode == BinaryHeapSortMode.kMin)\n            {\n                while (childIndex <= mLastChildIndex)\n                {\n                    if (childIndex != mLastChildIndex)\n                    {\n                        if (mArray[childIndex + 1].SortScore < mArray[childIndex].SortScore)\n                        {\n                            childIndex = childIndex + 1;\n                        }\n                    }\n\n                    if (mArray[childIndex].SortScore < element.SortScore)\n                    {\n                        mArray[index] = mArray[childIndex];\n                        mArray[index].HeapIndex = index;\n                    }\n                    else\n                    {\n                        break;\n                    }\n\n                    index = childIndex;\n                    childIndex = index << 1;\n                }\n            }\n            else\n            {\n                while (childIndex <= mLastChildIndex)\n                {\n                    if (childIndex != mLastChildIndex)\n                    {\n                        if (mArray[childIndex + 1].SortScore > mArray[childIndex].SortScore)\n                        {\n                            childIndex = childIndex + 1;\n                        }\n                    }\n\n                    if (mArray[childIndex].SortScore > element.SortScore)\n                    {\n                        mArray[index] = mArray[childIndex];\n                        mArray[index].HeapIndex = index;\n                    }\n                    else\n                    {\n                        break;\n                    }\n\n                    index = childIndex;\n                    childIndex = index << 1;\n                }\n            }\n\n            mArray[index] = element;\n            mArray[index].HeapIndex = index;\n        }\n        #endregion\n        #endregion\n    }\n}", "cropped_inputs": "namespace NodeGraphProcessor\n{\n/****************************************************************************\n * Copyright (c) 2017 snowcold\n * Copyright (c) 2017 liangxie\n****************************************************************************/\n\n    using System;\n\n    public enum BinaryHeapBuildMode\n    {\n        kNLog = 1,\n        kN = 2,\n    }\n\n    public enum BinaryHeapSortMode\n    {\n        kMin = 0,\n        kMax = 1,\n    }\n\n    //\u4f18\u5148\u961f\u5217&\u4e8c\u53c9\u5806\n    public class BinaryHeap<T> where T : IBinaryHeapElement\n    {\n        protected T[] mArray;\n\n        protected float mGrowthFactor = 1.6f;\n        protected int mLastChildIndex; //\u6700\u540e\u5b50\u8282\u70b9\u7684\u4f4d\u7f6e\n        protected BinaryHeapSortMode mSortMode;\n\n        public BinaryHeap(int minSize, BinaryHeapSortMode sortMode)\n        {\n            mSortMode = sortMode;\n            mArray = new T[minSize];\n            mLastChildIndex = 0;\n        }\n\n        public BinaryHeap(T[] dataArray, BinaryHeapSortMode sortMode)\n        {\n            mSortMode = sortMode;\n            int minSize = 10;\n            if (dataArray!= null)\n            {\n                minSize = dataArray.Length + 1;\n            }\n\n            mArray = new T[minSize];\n            mLastChildIndex = 0;\n            Insert(dataArray, BinaryHeapBuildMode.kN);\n        }\n\n        #region \u516c\u5f00\u65b9\u6cd5\n\n        #region \u6e05\u7a7a\n\n        public void Clear()\n        {\n            mArray = new T[10];\n            mLastChildIndex = 0;\n        }\n\n        #endregion\n\n        #region \u63d2\u5165\n\n        public void Insert(T[] dataArray, BinaryHeapBuildMode buildMode)\n        {\n            if (dataArray == null)\n            {\n                throw new NullReferenceException(\"BinaryHeap Not Support Insert Null Object\");\n            }\n\n            int totalLength = mLastChildIndex + dataArray.Length + 1;\n            if (mArray.Length < totalLength)\n            {\n                ResizeArray(totalLength);\n            }\n\n            if (buildMode == BinaryHeapBuildMode.kNLog)\n            {\n                //\u65b9\u5f0f1:\u76f4\u63a5\u6dfb\u52a0\uff0c\u6bcf\u6b21\u6dfb\u52a0\u90fd\u4f1a\u4e0a\u6d6e\n                for (int i = 0; i < dataArray.Length; ++i)\n                {\n                    Insert(dataArray[i]);\n                }\n            }\n            else\n            {\n                //\u6570\u91cf\u6bd4\u8f83\u5927\u7684\u60c5\u51b5\u4e0b\u4f1a\u5feb\u4e00\u4e9b\n                //\u65b9\u5f0f2:\u5148\u6dfb\u52a0\u5b8c\uff0c\u7136\u540e\u6392\u5e8f\n                for (int i = 0; i < dataArray.Length; ++i)\n                {\n                    mArray[++mLastChildIndex] = dataArray[i];\n                }\n\n                SortAsCurrentMode();\n            }\n        }\n\n        public void Insert(T element)\n        {\n            if (element == null)\n            {\n                throw new NullReferenceException(\"BinaryHeap Not Support Insert Null Object\");\n            }\n\n            int index = ++mLastChildIndex;\n\n            if (index == mArray.Length)\n            {\n                ResizeArray();\n            }\n\n            mArray[index] = element;\n\n            ProcolateUp(index);\n        }\n\n        #endregion\n\n        #region \u5f39\u51fa\n\n        public T Pop()\n        {\n            if (mLastChildIndex < 1)\n            {\n                return default(T);\n            }\n\n            T result = mArray[1];\n           1);\n            return result;\n        }\n\n        public T Top()\n        {\n            if (mLastChildIndex < 1)\n            {\n                return default(T);\n            }\n\n            return mArray[1];\n        }\n\n        #endregion\n\n        #region \u91cd\u65b0\u6392\u5e8f\n\n        public void Sort(BinaryHeapSortMode sortMode)\n        {\n            if (mSortMode == sortMode)\n            {\n                return;\n            }\n            mSortMode = sortMode;\n            SortAsCurrentMode();\n        }\n\n        public void RebuildAtIndex(int index)\n        {\n            if (index > mLastChildIndex)\n            {\n                return;\n            }\n\n            //1.\u9996\u5148\u627e\u7236\u8282\u70b9\uff0c\u662f\u5426\u6bd4\u7236\u8282\u70b9\u5c0f\uff0c\u5982\u679c\u6ee1\u8db3\u5219\u4e0a\u6d6e,\u4e0d\u6ee1\u8db3\u4e0b\u6c89\n            var element = mArray[index];\n\n            int parentIndex = index >> 1;\n            if (parentIndex > 0)\n            {\n                if (mSortMode == BinaryHeapSortMode.kMin)\n                {\n                    if (element.SortScore < mArray[parentIndex].SortScore)\n                    {\n                        ProcolateUp(index);\n                    }\n                    else\n                    {\n                        ProcolateDown(index);\n                    }\n                }\n                else\n                {\n                    if (element.SortScore > mArray[parentIndex].SortScore)\n                    {\n                        ProcolateUp(index);\n                    }\n                    else\n                    {\n                        ProcolateDown(index);\n                    }\n                }\n            }\n            else\n            {\n                ProcolateDown(index);\n            }\n        }\n\n        private void SortAsCurrentMode()\n        {\n            int startChild = mLastChildIndex >> 1;\n            for (int i = startChild; i > 0; --i)\n            {\n                ProcolateDown(i);\n            }\n        }\n\n        #endregion\n\n        #region \u6307\u5b9a\u4f4d\u7f6e\u5220\u9664\n\n        public void RemoveAt(int index)\n        {\n            if (index > mLastChildIndex || index < 1)\n            {\n                return;\n            }\n\n            if (index == mLastChildIndex)\n            {\n                --mLastChildIndex;\n                mArray[index] = default(T);\n                return;\n            }\n\n            mArray[index] = mArray[mLastChildIndex--];\n            mArray[index].HeapIndex = index;\n            RebuildAtIndex(index);\n        }\n\n        #endregion\n\n        #region \u7d22\u5f15\u67e5\u627e\n\n        //\u8fd9\u4e2a\u7d22\u5f15\u548c\u5927\u5c0f\u6392\u5e8f\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\n        public T GetElement(int index)\n        {\n            if (index > mLastChildIndex)\n            {\n                return default(T);\n            }\n            return mArray[index];\n        }\n\n        #endregion\n\n        #region \u5224\u5b9a\u8f85\u52a9\n\n        public bool HasValue()\n        {\n            return mLastChildIndex > 0;\n        }\n\n        #endregion\n\n        #region \u5185\u90e8\u65b9\u6cd5\n\n        protected void ResizeArray(int newSize = -1)\n        {\n            if (newSize < 0)\n            {\n                newSize = System.Math.Max(mArray.Length + 4, (int) System.Math.Round(mArray.Length * mGrowthFactor));\n            }\n\n            if (newSize > 1 << 30)\n            {\n                throw new System.Exception(\n                    \"Binary Heap Size really large (2^18). A heap size this large is probably the cause of pathfinding running in an infinite loop. \" +\n                    \"\\nRemove this check (in BinaryHeap.cs) if you are sure that it is not caused by a bug\");\n            }\n\n            T[] tmp = new T[newSize];\n            for (int i = 0; i < mArray.Length; i++)\n            {\n                tmp[i] = mArray[i];\n            }\n\n            mArray = tmp;\n        }\n\n        //\u4e0a\u6d6e:\u7a7a\u7a74\u601d\u60f3\n        protected void ProcolateUp(int index)\n        {\n            var element = mArray[index];\n            if (element == null)\n            {\n                return;\n            }\n\n            float sortScore = element.SortScore;\n\n            int parentIndex = index >> 1;\n\n            if (mSortMode == BinaryHeapSortMode.kMin)\n            {\n                while (parentIndex >= 1 && sortScore < mArray[parentIndex].SortScore)\n                {\n                    mArray[index] = mArray[parentIndex];\n                    mArray[index].HeapIndex = index;\n                    index = parentIndex;\n                    parentIndex = index >> 1;\n                }\n            }\n            else\n            {\n                while (parentIndex >= 1 && sortScore > mArray[parentIndex].SortScore)\n                {\n                    mArray[index] = mArray[parentIndex];\n                    mArray[index].HeapIndex = index;\n                    index = parentIndex;\n                    parentIndex = index >> 1;\n                }\n            }\n            mArray[index] = element;\n            mArray[index].HeapIndex = index;\n        }\n\n        protected void ProcolateDown(int index)\n        {\n            var element = mArray[index];\n            if (element == null)\n            {\n                return;\n            }\n\n            int childIndex = index << 1;\n\n            if (mSortMode == BinaryHeapSortMode.kMin)\n            {\n                while (childIndex <= mLastChildIndex)\n                {\n                    if (childIndex!= mLastChildIndex)\n                    {\n                        if (mArray[childIndex + 1].SortScore < mArray[childIndex].SortScore)\n                        {\n                            childIndex = childIndex + 1;\n                        }\n                    }\n\n                    if (mArray[childIndex].SortScore < element.SortScore)\n                    {\n                        mArray[index] = mArray[childIndex];\n                        mArray[index].HeapIndex = index;\n                    }\n                    else\n                    {\n                        break;\n                    }\n\n                    index = childIndex;\n                    childIndex = index << 1;\n                }\n            }\n            else\n            {\n                while (childIndex <= mLastChildIndex)\n                {\n                    if (childIndex!= mLastChildIndex)\n                    {\n                        if (mArray[childIndex + 1].SortScore > mArray[childIndex].SortScore)\n                        {\n                            childIndex = childIndex + 1;\n                        }\n                    }\n\n                    if (mArray[childIndex].SortScore > element.SortScore)\n                    {\n                        mArray[index] = mArray[childIndex];\n                        mArray[index].HeapIndex = index;\n                    }\n                    else\n                    {\n                        break;\n                    }\n\n                    index = childIndex;\n                    childIndex = index << 1;\n                }\n            }\n\n            mArray[index] = element;\n            mArray[index].HeapIndex = index;\n        }\n        #endregion\n        #endregion\n    }\n}", "starcoder_inputs": "<fim_prefix>namespace NodeGraphProcessor\n{\n/****************************************************************************\n * Copyright (c) 2017 snowcold\n * Copyright (c) 2017 liangxie\n****************************************************************************/\n\n    using System;\n\n    public enum BinaryHeapBuildMode\n    {\n        kNLog = 1,\n        kN = 2,\n    }\n\n    public enum BinaryHeapSortMode\n    {\n        kMin = 0,\n        kMax = 1,\n    }\n\n    //\u4f18\u5148\u961f\u5217&\u4e8c\u53c9\u5806\n    public class BinaryHeap<T> where T : IBinaryHeapElement\n    {\n        protected T[] mArray;\n\n        protected float mGrowthFactor = 1.6f;\n        protected int mLastChildIndex; //\u6700\u540e\u5b50\u8282\u70b9\u7684\u4f4d\u7f6e\n        protected BinaryHeapSortMode mSortMode;\n\n        public BinaryHeap(int minSize, BinaryHeapSortMode sortMode)\n        {\n            mSortMode = sortMode;\n            mArray = new T[minSize];\n            mLastChildIndex = 0;\n        }\n\n        public BinaryHeap(T[] dataArray, BinaryHeapSortMode sortMode)\n        {\n            mSortMode = sortMode;\n            int minSize = 10;\n            if (dataArray!= null)\n            {\n                minSize = dataArray.Length + 1;\n            }\n\n            mArray = new T[minSize];\n            mLastChildIndex = 0;\n            Insert(dataArray, BinaryHeapBuildMode.kN);\n        }\n\n        #region \u516c\u5f00\u65b9\u6cd5\n\n        #region \u6e05\u7a7a\n\n        public void Clear()\n        {\n            mArray = new T[10];\n            mLastChildIndex = 0;\n        }\n\n        #endregion\n\n        #region \u63d2\u5165\n\n        public void Insert(T[] dataArray, BinaryHeapBuildMode buildMode)\n        {\n            if (dataArray == null)\n            {\n                throw new NullReferenceException(\"BinaryHeap Not Support Insert Null Object\");\n            }\n\n            int totalLength = mLastChildIndex + dataArray.Length + 1;\n            if (mArray.Length < totalLength)\n            {\n                ResizeArray(totalLength);\n            }\n\n            if (buildMode == BinaryHeapBuildMode.kNLog)\n            {\n                //\u65b9\u5f0f1:\u76f4\u63a5\u6dfb\u52a0\uff0c\u6bcf\u6b21\u6dfb\u52a0\u90fd\u4f1a\u4e0a\u6d6e\n                for (int i = 0; i < dataArray.Length; ++i)\n                {\n                    Insert(dataArray[i]);\n                }\n            }\n            else\n            {\n                //\u6570\u91cf\u6bd4\u8f83\u5927\u7684\u60c5\u51b5\u4e0b\u4f1a\u5feb\u4e00\u4e9b\n                //\u65b9\u5f0f2:\u5148\u6dfb\u52a0\u5b8c\uff0c\u7136\u540e\u6392\u5e8f\n                for (int i = 0; i < dataArray.Length; ++i)\n                {\n                    mArray[++mLastChildIndex] = dataArray[i];\n                }\n\n                SortAsCurrentMode();\n            }\n        }\n\n        public void Insert(T element)\n        {\n            if (element == null)\n            {\n                throw new NullReferenceException(\"BinaryHeap Not Support Insert Null Object\");\n            }\n\n            int index = ++mLastChildIndex;\n\n            if (index == mArray.Length)\n            {\n                ResizeArray();\n            }\n\n            mArray[index] = element;\n\n            ProcolateUp(index);\n        }\n\n        #endregion\n\n        #region \u5f39\u51fa\n\n        public T Pop()\n        {\n            if (mLastChildIndex < 1)\n            {\n                return default(T);\n            }\n\n            T result = mArray[1];\n           <fim_suffix>1);\n            return result;\n        }\n\n        public T Top()\n        {\n            if (mLastChildIndex < 1)\n            {\n                return default(T);\n            }\n\n            return mArray[1];\n        }\n\n        #endregion\n\n        #region \u91cd\u65b0\u6392\u5e8f\n\n        public void Sort(BinaryHeapSortMode sortMode)\n        {\n            if (mSortMode == sortMode)\n            {\n                return;\n            }\n            mSortMode = sortMode;\n            SortAsCurrentMode();\n        }\n\n        public void RebuildAtIndex(int index)\n        {\n            if (index > mLastChildIndex)\n            {\n                return;\n            }\n\n            //1.\u9996\u5148\u627e\u7236\u8282\u70b9\uff0c\u662f\u5426\u6bd4\u7236\u8282\u70b9\u5c0f\uff0c\u5982\u679c\u6ee1\u8db3\u5219\u4e0a\u6d6e,\u4e0d\u6ee1\u8db3\u4e0b\u6c89\n            var element = mArray[index];\n\n            int parentIndex = index >> 1;\n            if (parentIndex > 0)\n            {\n                if (mSortMode == BinaryHeapSortMode.kMin)\n                {\n                    if (element.SortScore < mArray[parentIndex].SortScore)\n                    {\n                        ProcolateUp(index);\n                    }\n                    else\n                    {\n                        ProcolateDown(index);\n                    }\n                }\n                else\n                {\n                    if (element.SortScore > mArray[parentIndex].SortScore)\n                    {\n                        ProcolateUp(index);\n                    }\n                    else\n                    {\n                        ProcolateDown(index);\n                    }\n                }\n            }\n            else\n            {\n                ProcolateDown(index);\n            }\n        }\n\n        private void SortAsCurrentMode()\n        {\n            int startChild = mLastChildIndex >> 1;\n            for (int i = startChild; i > 0; --i)\n            {\n                ProcolateDown(i);\n            }\n        }\n\n        #endregion\n\n        #region \u6307\u5b9a\u4f4d\u7f6e\u5220\u9664\n\n        public void RemoveAt(int index)\n        {\n            if (index > mLastChildIndex || index < 1)\n            {\n                return;\n            }\n\n            if (index == mLastChildIndex)\n            {\n                --mLastChildIndex;\n                mArray[index] = default(T);\n                return;\n            }\n\n            mArray[index] = mArray[mLastChildIndex--];\n            mArray[index].HeapIndex = index;\n            RebuildAtIndex(index);\n        }\n\n        #endregion\n\n        #region \u7d22\u5f15\u67e5\u627e\n\n        //\u8fd9\u4e2a\u7d22\u5f15\u548c\u5927\u5c0f\u6392\u5e8f\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\n        public T GetElement(int index)\n        {\n            if (index > mLastChildIndex)\n            {\n                return default(T);\n            }\n            return mArray[index];\n        }\n\n        #endregion\n\n        #region \u5224\u5b9a\u8f85\u52a9\n\n        public bool HasValue()\n        {\n            return mLastChildIndex > 0;\n        }\n\n        #endregion\n\n        #region \u5185\u90e8\u65b9\u6cd5\n\n        protected void ResizeArray(int newSize = -1)\n        {\n            if (newSize < 0)\n            {\n                newSize = System.Math.Max(mArray.Length + 4, (int) System.Math.Round(mArray.Length * mGrowthFactor));\n            }\n\n            if (newSize > 1 << 30)\n            {\n                throw new System.Exception(\n                    \"Binary Heap Size really large (2^18). A heap size this large is probably the cause of pathfinding running in an infinite loop. \" +\n                    \"\\nRemove this check (in BinaryHeap.cs) if you are sure that it is not caused by a bug\");\n            }\n\n            T[] tmp = new T[newSize];\n            for (int i = 0; i < mArray.Length; i++)\n            {\n                tmp[i] = mArray[i];\n            }\n\n            mArray = tmp;\n        }\n\n        //\u4e0a\u6d6e:\u7a7a\u7a74\u601d\u60f3\n        protected void ProcolateUp(int index)\n        {\n            var element = mArray[index];\n            if (element == null)\n            {\n                return;\n            }\n\n            float sortScore = element.SortScore;\n\n            int parentIndex = index >> 1;\n\n            if (mSortMode == BinaryHeapSortMode.kMin)\n            {\n                while (parentIndex >= 1 && sortScore < mArray[parentIndex].SortScore)\n                {\n                    mArray[index] = mArray[parentIndex];\n                    mArray[index].HeapIndex = index;\n                    index = parentIndex;\n                    parentIndex = index >> 1;\n                }\n            }\n            else\n            {\n                while (parentIndex >= 1 && sortScore > mArray[parentIndex].SortScore)\n                {\n                    mArray[index] = mArray[parentIndex];\n                    mArray[index].HeapIndex = index;\n                    index = parentIndex;\n                    parentIndex = index >> 1;\n                }\n            }\n            mArray[index] = element;\n            mArray[index].HeapIndex = index;\n        }\n\n        protected void ProcolateDown(int index)\n        {\n            var element = mArray[index];\n            if (element == null)\n            {\n                return;\n            }\n\n            int childIndex = index << 1;\n\n            if (mSortMode == BinaryHeapSortMode.kMin)\n            {\n                while (childIndex <= mLastChildIndex)\n                {\n                    if (childIndex!= mLastChildIndex)\n                    {\n                        if (mArray[childIndex + 1].SortScore < mArray[childIndex].SortScore)\n                        {\n                            childIndex = childIndex + 1;\n                        }\n                    }\n\n                    if (mArray[childIndex].SortScore < element.SortScore)\n                    {\n                        mArray[index] = mArray[childIndex];\n                        mArray[index].HeapIndex = index;\n                    }\n                    else\n                    {\n                        break;\n                    }\n\n                    index = childIndex;\n                    childIndex = index << 1;\n                }\n            }\n            else\n            {\n                while (childIndex <= mLastChildIndex)\n                {\n                    if (childIndex!= mLastChildIndex)\n                    {\n                        if (mArray[childIndex + 1].SortScore > mArray[childIndex].SortScore)\n                        {\n                            childIndex = childIndex + 1;\n                        }\n                    }\n\n                    if (mArray[childIndex].SortScore > element.SortScore)\n                    {\n                        mArray[index] = mArray[childIndex];\n                        mArray[index].HeapIndex = index;\n                    }\n                    else\n                    {\n                        break;\n                    }\n\n                    index = childIndex;\n                    childIndex = index << 1;\n                }\n            }\n\n            mArray[index] = element;\n            mArray[index].HeapIndex = index;\n        }\n        #endregion\n        #endregion\n    }\n}<fim_middle>"}
{"inputs": "\ufeffusing Framework.GalaSports.Service;\nusing GraphProcessor;\nusing NodeGraphProcessor;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\n\nnamespace NodeGraphProcessor\n{\n    public class NoviceProcedure : BaseGraphProcessor\n    {\n        List<BaseNode> processList;\n        List<StartNode> startNodeList;\n        List<WaitableNode> currentWaitables = new List<WaitableNode> ();\n        Dictionary<BaseNode, List<BaseNode>> nonConditionalDependenciesCache = new Dictionary<BaseNode, List<BaseNode>>();\n\n        public IEnumerator<BaseNode> currentGraphExecution { get; private set; } = null;\n\n        public NoviceProcedure(BaseGraph graph) : base(graph) { }\n\n        public override void UpdateComputeOrder()\n        {\n            startNodeList = graph.nodes.Where(n => n is StartNode).Select(n => n as StartNode).ToList();\n\n            if (startNodeList.Count == 0)\n            {\n                processList = graph.nodes.OrderBy(n => n.computeOrder).ToList();\n            }\n            else\n            {\n                nonConditionalDependenciesCache.Clear();\n            }\n        }\n\n        public override void Run()\n        {\n            if (currentWaitables == null)\n                currentWaitables = new List<WaitableNode>();\n            else\n                this.Destroy();\n\n            IEnumerator<BaseNode> enumerator;\n\n            if (startNodeList.Count == 0)\n            {\n                enumerator = RunTheGraph();\n            }\n            else\n            {\n                Stack<BaseNode> nodeToExecute = new Stack<BaseNode>();\n                startNodeList.ForEach(s => nodeToExecute.Push(s));\n                enumerator = RunTheGraph(nodeToExecute);\n            }\n\n            while (enumerator.MoveNext())\n                ;\n\n        }\n\n        public override void Run(Stack<BaseNode> baseNode)\n        {\n            if (currentWaitables == null)\n                currentWaitables = new List<WaitableNode>();\n            else\n                Destroy();\n            WaitedRun(baseNode);\n        }\n\n        public override void Destroy()\n        {\n            for (int i = 0; i < currentWaitables.Count; i++)\n            {\n                currentWaitables[i].onProcessFinished = null;\n                currentWaitables[i].Dispose();\n            }\n            currentWaitables.Clear();\n        }\n\n        private void WaitedRun(Stack<BaseNode> nodesToRun)\n        {\n            var enumerator = RunTheGraph(nodesToRun);\n            while (enumerator.MoveNext()) ;\n\n            if (currentWaitables != null && currentWaitables.Count == 0)\n            {\n                Platform.EventDispatcher.TriggerEvent(\"PROCEDURE_END\", this.graph.name);\n            }\n        }\n\n        IEnumerable<BaseNode> GatherNonConditionalDependencies(BaseNode node)\n        {\n            Stack<BaseNode> dependencies = new Stack<BaseNode>();\n\n            dependencies.Push(node);\n\n            while (dependencies.Count > 0)\n            {\n                var dependency = dependencies.Pop();\n\n                var inputNodes = dependency.GetInputNodes();\n\n                if (inputNodes != null)\n                {\n                    foreach (var d in inputNodes.Where(n => !(n is IConditionalNode)))\n                        dependencies.Push(d);\n\n                    if (dependency != node)\n                        yield return dependency;\n                }\n            }\n        }\n\n        private IEnumerator<BaseNode> RunTheGraph()\n        {\n            int count = processList.Count;\n\n            for (int i = 0; i < count; i++)\n            {\n                processList[i].OnProcess();\n                yield return processList[i];\n            }\n        }\n\n        private IEnumerator<BaseNode> RunTheGraph(Stack<BaseNode> nodeToExecute)\n        {\n            HashSet<BaseNode> nodeDependenciesGathered = new HashSet<BaseNode>();\n            HashSet<BaseNode> skipConditionalHandling = new HashSet<BaseNode>();\n\n            while (nodeToExecute.Count > 0)\n            {\n                var node = nodeToExecute.Pop();\n                if (node is IConditionalNode && !skipConditionalHandling.Contains(node))\n                {\n                    if (nodeDependenciesGathered.Contains(node))\n                    {\n#if UNITY_EDITOR\n                        AllGraphWindow.HighLightNode(node);\n#endif\n                        node.OnProcess();\n                        yield return node;\n\n                        switch (node)\n                        {\n                            case ForLoopNode forLoopNode:\n                                forLoopNode.index = forLoopNode.start - 1;\n                                foreach (var n in forLoopNode.GetExecutedNodesLoopCompleted())\n                                    nodeToExecute.Push(n);\n                                for (int i = forLoopNode.start; i < forLoopNode.end; i++)\n                                {\n                                    foreach (var n in forLoopNode.GetExecutedNodesLoopBody())\n                                        nodeToExecute.Push(n);\n\n                                    nodeToExecute.Push(node);\n                                }\n\n                                skipConditionalHandling.Add(node);\n                                break;\n                            case WaitableNode waitableNode:\n                                foreach (var n in waitableNode.GetExecutedNodes())\n                                    nodeToExecute.Push(n);\n                                currentWaitables.Add(waitableNode);\n                                waitableNode.onProcessFinished += (waitedNode) =>\n                                {\n                                    currentWaitables.Remove(waitedNode);\n                                    var netNodes = waitedNode.GetExecuteAfterNodes();\n                                    if (netNodes != null)\n                                    {\n                                        Stack<BaseNode> waitedNodes = new Stack<BaseNode>();\n                                        foreach (var n in netNodes)\n                                            waitedNodes.Push(n);\n                                        WaitedRun(waitedNodes);\n                                    }\n                                    waitableNode.onProcessFinished = null;\n                                };\n                                break;\n                            case IConditionalNode cNode:\n                                var executs = cNode.GetExecutedNodes();\n                                if (executs != null && executs.Count() > 0)\n                                    foreach (var n in executs)\n                                    {\n                                        nodeToExecute.Push(n);\n                                    }\n                                break;\n                            default:\n                                DebugEX.LogError($\"Conditional node {node} not handled\");\n                                break;\n                        }\n                        nodeDependenciesGathered.Remove(node);\n                    }\n                    else\n                    {\n                        nodeToExecute.Push(node);\n                        nodeDependenciesGathered.Add(node);\n                        foreach (var nonConditionalNode in GatherNonConditionalDependencies(node))\n                        {\n                            nodeToExecute.Push(nonConditionalNode);\n                        }\n                    }\n                }\n                else\n                {\n#if UNITY_EDITOR\n                    AllGraphWindow.HighLightNode(node);\n#endif\n                    node.OnProcess();\n                    yield return node;\n                }\n            }\n        }\n\n        public void Step()\n        {\n            if (currentGraphExecution == null)\n            {\n                Stack<BaseNode> nodeToExecute = new Stack<BaseNode>();\n                if (startNodeList.Count > 0)\n                    startNodeList.ForEach(s => nodeToExecute.Push(s));\n\n                currentGraphExecution = startNodeList.Count == 0 ? RunTheGraph() : RunTheGraph(nodeToExecute);\n                currentGraphExecution.MoveNext(); // Advance to the first node\n            }\n            else\n            if (!currentGraphExecution.MoveNext())\n                currentGraphExecution = null;\n        }\n    }\n}\n\n", "cropped_inputs": "\ufeffusing Framework.GalaSports.Service;\nusing GraphProcessor;\nusing NodeGraphProcessor;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\n\nnamespace NodeGraphProcessor\n{\n    public class NoviceProcedure : BaseGraphProcessor\n    {\n        List<BaseNode> processList;\n        List<StartNode> startNodeList;\n        List<WaitableNode> currentWaitables = new List<WaitableNode> ();\n        Dictionary<BaseNode, List<BaseNode>> nonConditionalDependenciesCache = new Dictionary<BaseNode, List<BaseNode>>();\n\n        public IEnumerator<BaseNode> currentGraphExecution { get; private set; } = null;\n\n        public NoviceProcedure(BaseGraph graph) : base(graph) { }\n\n        public override void UpdateComputeOrder()\n        {\n            startNodeList = graph.nodes.Where(n => n is StartNode).Select(n => n as StartNode).ToList();\n\n            if (startNodeList.Count == 0)\n            {\n                processList = graph.nodes.OrderBy(n => n.computeOrder).ToList();\n            }\n            else\n            {\n                nonConditionalDependenciesCache.Clear();\n            }\n        }\n\n        public override void Run()\n        {\n            if (currentWaitables == null)\n                currentWaitables = new List<WaitableNode>();\n            else\n                this.Destroy();\n\n            IEnumerator<BaseNode> enumerator;\n\n            if (startNodeList.Count == 0)\n            {\n                enumerator = RunTheGraph();\n            }\n            else\n            {\n                Stack<BaseNode> nodeToExecute = new Stack<BaseNode>();\n                startNodeList.ForEach(s => nodeToExecute.Push(s));\n                enumerator = RunTheGraph(nodeToExecute);\n            }\n\n            while (enumerator.MoveNext())\n                ;\n\n        }\n\n        public override void Run(Stack<BaseNode> baseNode)\n        {\n            if (currentWaitables == null)\n                currentWaitables = new List<WaitableNode>();\n            else\n                Destroy();\n            WaitedRun(baseNode);\n        }\n\n        public override void Destroy()\n        {\n            for (int i = 0; i < currentWaitables.Count; i++)\n            {\n                currentWaitables[i].onProcessFinished = null;\n                currentWaitables[i].Dispose();\n            }\n            currentWaitables.Clear();\n        }\n\n        private void WaitedRun(Stack<BaseNode> nodesenumerator.MoveNext()) ;\n\n            if (currentWaitables!= null && currentWaitables.Count == 0)\n            {\n                Platform.EventDispatcher.TriggerEvent(\"PROCEDURE_END\", this.graph.name);\n            }\n        }\n\n        IEnumerable<BaseNode> GatherNonConditionalDependencies(BaseNode node)\n        {\n            Stack<BaseNode> dependencies = new Stack<BaseNode>();\n\n            dependencies.Push(node);\n\n            while (dependencies.Count > 0)\n            {\n                var dependency = dependencies.Pop();\n\n                var inputNodes = dependency.GetInputNodes();\n\n                if (inputNodes!= null)\n                {\n                    foreach (var d in inputNodes.Where(n =>!(n is IConditionalNode)))\n                        dependencies.Push(d);\n\n                    if (dependency!= node)\n                        yield return dependency;\n                }\n            }\n        }\n\n        private IEnumerator<BaseNode> RunTheGraph()\n        {\n            int count = processList.Count;\n\n            for (int i = 0; i < count; i++)\n            {\n                processList[i].OnProcess();\n                yield return processList[i];\n            }\n        }\n\n        private IEnumerator<BaseNode> RunTheGraph(Stack<BaseNode> nodeToExecute)\n        {\n            HashSet<BaseNode> nodeDependenciesGathered = new HashSet<BaseNode>();\n            HashSet<BaseNode> skipConditionalHandling = new HashSet<BaseNode>();\n\n            while (nodeToExecute.Count > 0)\n            {\n                var node = nodeToExecute.Pop();\n                if (node is IConditionalNode &&!skipConditionalHandling.Contains(node))\n                {\n                    if (nodeDependenciesGathered.Contains(node))\n                    {\n#if UNITY_EDITOR\n                        AllGraphWindow.HighLightNode(node);\n#endif\n                        node.OnProcess();\n                        yield return node;\n\n                        switch (node)\n                        {\n                            case ForLoopNode forLoopNode:\n                                forLoopNode.index = forLoopNode.start - 1;\n                                foreach (var n in forLoopNode.GetExecutedNodesLoopCompleted())\n                                    nodeToExecute.Push(n);\n                                for (int i = forLoopNode.start; i < forLoopNode.end; i++)\n                                {\n                                    foreach (var n in forLoopNode.GetExecutedNodesLoopBody())\n                                        nodeToExecute.Push(n);\n\n                                    nodeToExecute.Push(node);\n                                }\n\n                                skipConditionalHandling.Add(node);\n                                break;\n                            case WaitableNode waitableNode:\n                                foreach (var n in waitableNode.GetExecutedNodes())\n                                    nodeToExecute.Push(n);\n                                currentWaitables.Add(waitableNode);\n                                waitableNode.onProcessFinished += (waitedNode) =>\n                                {\n                                    currentWaitables.Remove(waitedNode);\n                                    var netNodes = waitedNode.GetExecuteAfterNodes();\n                                    if (netNodes!= null)\n                                    {\n                                        Stack<BaseNode> waitedNodes = new Stack<BaseNode>();\n                                        foreach (var n in netNodes)\n                                            waitedNodes.Push(n);\n                                        WaitedRun(waitedNodes);\n                                    }\n                                    waitableNode.onProcessFinished = null;\n                                };\n                                break;\n                            case IConditionalNode cNode:\n                                var executs = cNode.GetExecutedNodes();\n                                if (executs!= null && executs.Count() > 0)\n                                    foreach (var n in executs)\n                                    {\n                                        nodeToExecute.Push(n);\n                                    }\n                                break;\n                            default:\n                                DebugEX.LogError($\"Conditional node {node} not handled\");\n                                break;\n                        }\n                        nodeDependenciesGathered.Remove(node);\n                    }\n                    else\n                    {\n                        nodeToExecute.Push(node);\n                        nodeDependenciesGathered.Add(node);\n                        foreach (var nonConditionalNode in GatherNonConditionalDependencies(node))\n                        {\n                            nodeToExecute.Push(nonConditionalNode);\n                        }\n                    }\n                }\n                else\n                {\n#if UNITY_EDITOR\n                    AllGraphWindow.HighLightNode(node);\n#endif\n                    node.OnProcess();\n                    yield return node;\n                }\n            }\n        }\n\n        public void Step()\n        {\n            if (currentGraphExecution == null)\n            {\n                Stack<BaseNode> nodeToExecute = new Stack<BaseNode>();\n                if (startNodeList.Count > 0)\n                    startNodeList.ForEach(s => nodeToExecute.Push(s));\n\n                currentGraphExecution = startNodeList.Count == 0? RunTheGraph() : RunTheGraph(nodeToExecute);\n                currentGraphExecution.MoveNext(); // Advance to the first node\n            }\n            else\n            if (!currentGraphExecution.MoveNext())\n                currentGraphExecution = null;\n        }\n    }\n}\n\n", "starcoder_inputs": "<fim_prefix>\ufeffusing Framework.GalaSports.Service;\nusing GraphProcessor;\nusing NodeGraphProcessor;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\n\nnamespace NodeGraphProcessor\n{\n    public class NoviceProcedure : BaseGraphProcessor\n    {\n        List<BaseNode> processList;\n        List<StartNode> startNodeList;\n        List<WaitableNode> currentWaitables = new List<WaitableNode> ();\n        Dictionary<BaseNode, List<BaseNode>> nonConditionalDependenciesCache = new Dictionary<BaseNode, List<BaseNode>>();\n\n        public IEnumerator<BaseNode> currentGraphExecution { get; private set; } = null;\n\n        public NoviceProcedure(BaseGraph graph) : base(graph) { }\n\n        public override void UpdateComputeOrder()\n        {\n            startNodeList = graph.nodes.Where(n => n is StartNode).Select(n => n as StartNode).ToList();\n\n            if (startNodeList.Count == 0)\n            {\n                processList = graph.nodes.OrderBy(n => n.computeOrder).ToList();\n            }\n            else\n            {\n                nonConditionalDependenciesCache.Clear();\n            }\n        }\n\n        public override void Run()\n        {\n            if (currentWaitables == null)\n                currentWaitables = new List<WaitableNode>();\n            else\n                this.Destroy();\n\n            IEnumerator<BaseNode> enumerator;\n\n            if (startNodeList.Count == 0)\n            {\n                enumerator = RunTheGraph();\n            }\n            else\n            {\n                Stack<BaseNode> nodeToExecute = new Stack<BaseNode>();\n                startNodeList.ForEach(s => nodeToExecute.Push(s));\n                enumerator = RunTheGraph(nodeToExecute);\n            }\n\n            while (enumerator.MoveNext())\n                ;\n\n        }\n\n        public override void Run(Stack<BaseNode> baseNode)\n        {\n            if (currentWaitables == null)\n                currentWaitables = new List<WaitableNode>();\n            else\n                Destroy();\n            WaitedRun(baseNode);\n        }\n\n        public override void Destroy()\n        {\n            for (int i = 0; i < currentWaitables.Count; i++)\n            {\n                currentWaitables[i].onProcessFinished = null;\n                currentWaitables[i].Dispose();\n            }\n            currentWaitables.Clear();\n        }\n\n        private void WaitedRun(Stack<BaseNode> nodes<fim_suffix>enumerator.MoveNext()) ;\n\n            if (currentWaitables!= null && currentWaitables.Count == 0)\n            {\n                Platform.EventDispatcher.TriggerEvent(\"PROCEDURE_END\", this.graph.name);\n            }\n        }\n\n        IEnumerable<BaseNode> GatherNonConditionalDependencies(BaseNode node)\n        {\n            Stack<BaseNode> dependencies = new Stack<BaseNode>();\n\n            dependencies.Push(node);\n\n            while (dependencies.Count > 0)\n            {\n                var dependency = dependencies.Pop();\n\n                var inputNodes = dependency.GetInputNodes();\n\n                if (inputNodes!= null)\n                {\n                    foreach (var d in inputNodes.Where(n =>!(n is IConditionalNode)))\n                        dependencies.Push(d);\n\n                    if (dependency!= node)\n                        yield return dependency;\n                }\n            }\n        }\n\n        private IEnumerator<BaseNode> RunTheGraph()\n        {\n            int count = processList.Count;\n\n            for (int i = 0; i < count; i++)\n            {\n                processList[i].OnProcess();\n                yield return processList[i];\n            }\n        }\n\n        private IEnumerator<BaseNode> RunTheGraph(Stack<BaseNode> nodeToExecute)\n        {\n            HashSet<BaseNode> nodeDependenciesGathered = new HashSet<BaseNode>();\n            HashSet<BaseNode> skipConditionalHandling = new HashSet<BaseNode>();\n\n            while (nodeToExecute.Count > 0)\n            {\n                var node = nodeToExecute.Pop();\n                if (node is IConditionalNode &&!skipConditionalHandling.Contains(node))\n                {\n                    if (nodeDependenciesGathered.Contains(node))\n                    {\n#if UNITY_EDITOR\n                        AllGraphWindow.HighLightNode(node);\n#endif\n                        node.OnProcess();\n                        yield return node;\n\n                        switch (node)\n                        {\n                            case ForLoopNode forLoopNode:\n                                forLoopNode.index = forLoopNode.start - 1;\n                                foreach (var n in forLoopNode.GetExecutedNodesLoopCompleted())\n                                    nodeToExecute.Push(n);\n                                for (int i = forLoopNode.start; i < forLoopNode.end; i++)\n                                {\n                                    foreach (var n in forLoopNode.GetExecutedNodesLoopBody())\n                                        nodeToExecute.Push(n);\n\n                                    nodeToExecute.Push(node);\n                                }\n\n                                skipConditionalHandling.Add(node);\n                                break;\n                            case WaitableNode waitableNode:\n                                foreach (var n in waitableNode.GetExecutedNodes())\n                                    nodeToExecute.Push(n);\n                                currentWaitables.Add(waitableNode);\n                                waitableNode.onProcessFinished += (waitedNode) =>\n                                {\n                                    currentWaitables.Remove(waitedNode);\n                                    var netNodes = waitedNode.GetExecuteAfterNodes();\n                                    if (netNodes!= null)\n                                    {\n                                        Stack<BaseNode> waitedNodes = new Stack<BaseNode>();\n                                        foreach (var n in netNodes)\n                                            waitedNodes.Push(n);\n                                        WaitedRun(waitedNodes);\n                                    }\n                                    waitableNode.onProcessFinished = null;\n                                };\n                                break;\n                            case IConditionalNode cNode:\n                                var executs = cNode.GetExecutedNodes();\n                                if (executs!= null && executs.Count() > 0)\n                                    foreach (var n in executs)\n                                    {\n                                        nodeToExecute.Push(n);\n                                    }\n                                break;\n                            default:\n                                DebugEX.LogError($\"Conditional node {node} not handled\");\n                                break;\n                        }\n                        nodeDependenciesGathered.Remove(node);\n                    }\n                    else\n                    {\n                        nodeToExecute.Push(node);\n                        nodeDependenciesGathered.Add(node);\n                        foreach (var nonConditionalNode in GatherNonConditionalDependencies(node))\n                        {\n                            nodeToExecute.Push(nonConditionalNode);\n                        }\n                    }\n                }\n                else\n                {\n#if UNITY_EDITOR\n                    AllGraphWindow.HighLightNode(node);\n#endif\n                    node.OnProcess();\n                    yield return node;\n                }\n            }\n        }\n\n        public void Step()\n        {\n            if (currentGraphExecution == null)\n            {\n                Stack<BaseNode> nodeToExecute = new Stack<BaseNode>();\n                if (startNodeList.Count > 0)\n                    startNodeList.ForEach(s => nodeToExecute.Push(s));\n\n                currentGraphExecution = startNodeList.Count == 0? RunTheGraph() : RunTheGraph(nodeToExecute);\n                currentGraphExecution.MoveNext(); // Advance to the first node\n            }\n            else\n            if (!currentGraphExecution.MoveNext())\n                currentGraphExecution = null;\n        }\n    }\n}\n\n<fim_middle>"}
{"inputs": "using System.ComponentModel;\nusing System.Diagnostics;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System;\nusing GraphProcessor;\nusing Platform;\nusing UniRx;\nusing Framework.GalaSports.Service;\n\n\nnamespace NodeGraphProcessor\n{\n    [Serializable, NodeMenuItem(\"Button/MaskButton\")]\n    public class MaskButtonNode : WaitableNode\n    {\n        [SerializeField, Input(name = \"In\")]\n        public GameObject btn;\n        public string Desc;\n        float Speed = 0.3f;\n        public float AutoCloseAfter = 0f;\n        public bool ShowArrow = true;\n        public bool needMask = true;\n        public bool ClickScreenClose;\n        public Vector2 BtnPosOffset;\n        public Vector2 BtnSizeOffset;\n        public Vector2 DescOffSet;\n        public bool NeedShowSecondHightLight;\n        [VisibleIf(nameof(NeedShowSecondHightLight), true)]\n        [SerializeField, Input(name = \"SecondIn\")]\n        public GameObject SecondHightLight =null;\n        [VisibleIf(nameof(NeedShowSecondHightLight), true)]\n        public Vector2 SecondPosOffset;\n        [VisibleIf(nameof(NeedShowSecondHightLight), true)]\n        public Vector2 SecondSizeOffset;\n\n        private GameObject instantFocus;\n        private System.IDisposable disposable;\n        TimeItem timeItem;\n\n        //\u91cd\u65b0\u5f3a\u5236\u5f15\u5bfc10\u6b21\uff0c\u6bcf\u6b21\u95f4\u96940.5\u79d2\uff0c\u5982\u679c\u90fd\u672a\u6210\u529f\uff0c\u5219\u8df3\u8fc7\u8fd9\u4e00\u6b65\u65b0\u624b\uff0c\u9632\u6b62\u5361\u6b7b\n        private int retryNum = 10;\n\n        protected override void Enable()\n        {\n            base.Enable();\n            retryNum = 10;\n        }\n\n        //TODO  \u4fee\u590d \u754c\u9762\u672a\u5237\u65b0 \u65b0\u624b\u52a0\u8f7d\u5b8c\u7684\u60c5\u51b5\u5bfc\u81f4 \u65b0\u624b\u4e0d\u5f15\u5bfc\u7684\u5f02\u5e38\n        protected override async void Process()\n        {\n\n            if (btn == null)\n            {\n                if (retryNum > 0)\n                {\n                    await GAsync.WaitSeconds(0.5f);\n                    retryNum--;\n                    Process();\n                    return;\n                }\n                DebugEX.LogError(\"\u65b0\u624b\u5f15\u5bfc\u5f3a\u5236\u5f15\u5bfc\u5931\u8d25,\u8df3\u51fa\u5f53\u524d\u5f15\u5bfc\");\n                // this.ProcessFinished();\n                return;\n            }\n\n            var canvas = btn.GetComponentInParent<Canvas>();\n            Vector2 descoffset = DescOffSet * canvas.scaleFactor;\n\n            var realDesc = string.IsNullOrEmpty(Desc)?\"\":LanguageKit.Get(Desc);\n            Action clickAction = null;\n            MaskParameter maskParameter = new MaskParameter();\n            maskParameter.HighLight1 = new HighLightParameter()\n            {\n                Pos = GetRealPos(btn,BtnPosOffset),\n                Size = GetSize(btn,BtnSizeOffset),\n                Desc = realDesc,\n                DescPos = descoffset,\n                IsNeedFocas = ShowArrow,\n                IsNeedMask = needMask\n            };\n            if(NeedShowSecondHightLight)\n            {\n                maskParameter.HighLight2 = new HighLightParameter()\n                {\n                    Pos = GetRealPos(SecondHightLight,SecondPosOffset),\n                    Size = GetSize(SecondHightLight,SecondSizeOffset),\n                    IsNeedFocas = false,\n                    IsNeedMask = needMask\n                };\n            }\n            maskParameter.Delay = Speed;\n            maskParameter.BackAction = clickAction;\n            if (ClickScreenClose)\n            {\n                maskParameter.BackAction = () => { this.ProcessFinished(); };\n            }\n            else\n            {\n                UGUIExecuteEventMask.ShieldingClickEvent(() =>\n                {\n                    GuideMaskController.Instance.ShowMask(maskParameter);\n                });\n            }\n            GuideMaskController.Instance.ShowMask(maskParameter);\n\n            if (AutoCloseAfter > 0)\n            {\n                UGUIExecuteEventMask.ShieldingClickEvent();\n                timeItem = Timer.Instance.Post2Scale((x) =>\n                {\n                    this.ProcessFinished();\n                }, AutoCloseAfter);\n            }\n            else\n            {\n                var uguiPassCom = btn.GetComponent<ExecutePassComponent>();\n                if (uguiPassCom == null)\n                    uguiPassCom = btn.AddComponent<ExecutePassComponent>();\n                uguiPassCom.SetPassCallBackEvent(this.ProcessFinished);\n            }\n        }\n        private Vector2 GetRealPos(GameObject btn,Vector2 posOffset)\n        {\n            Vector2 realPos = Vector2.zero;\n            var canvas = btn.GetComponentInParent<Canvas>();\n            if (canvas.worldCamera != null)\n            {\n                realPos = canvas.worldCamera.WorldToScreenPoint(btn.transform.position);\n            }\n            else\n                realPos = btn.transform.position;\n            UnityEngine.EventSystems.EventSystem.current.pixelDragThreshold = 10000;\n            realPos += posOffset * canvas.scaleFactor;\n            return realPos;\n        }\n        private Vector2 GetSize(GameObject btn,Vector2 sizeOffset)\n        {\n            var canvas = btn.GetComponentInParent<Canvas>();\n            var rect = btn.GetComponent<RectTransform>().rect;\n            var width = rect.width * canvas.scaleFactor + sizeOffset.x * canvas.scaleFactor;\n            var height = rect.height * canvas.scaleFactor + sizeOffset.y * canvas.scaleFactor;\n            Vector2 size = new Vector2(width,height);\n            return size;\n        }\n\n        protected override void ProcessFinished()\n        {\n            if (onProcessFinished == null)\n            {\n                DebugEX.Log(\"Button onProcessFinished null\");\n                return;\n            }\n            Dispose();\n            base.ProcessFinished();\n        }\n\n        public override void Dispose()\n        {\n            //Platform.EventDispatcher.RemoveEventListener(\"ReCalculateGuide\", ReCalculateButtonPos);\n            UnityEngine.EventSystems.EventSystem.current.pixelDragThreshold = 10;\n            if (instantFocus != null)\n            {\n                ResourceMgr.Instance.UnloadGameObject(instantFocus);\n            }\n            if (btn != null)\n            {\n                var uguiPassCom = btn.GetComponent<ExecutePassComponent>();\n                if (uguiPassCom)\n                {\n                    GameObject.Destroy(uguiPassCom);\n                }\n            }\n            UGUIExecuteEventMask.RecoverClickEvent();\n            GuideMaskController.Instance.HideMask();\n            if (timeItem != null)\n                timeItem.Cancel();\n            if (disposable != null)\n                disposable.Dispose();\n        }\n    }\n}\n", "cropped_inputs": "using System.ComponentModel;\nusing System.Diagnostics;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System;\nusing GraphProcessor;\nusing Platform;\nusing UniRx;\nusing Framework.GalaSports.Service;\n\n\nnamespace NodeGraphProcessor\n{\n    [Serializable, NodeMenuItem(\"Button/MaskButton\")]\n    public class MaskButtonNode : WaitableNode\n    {\n        [SerializeField, Input(name = \"In\")]\n        public GameObject btn;\n        public string Desc;\n        float Speed = 0.3f;\n        public float AutoCloseAfter = 0f;\n        public bool ShowArrow = true;\n        public bool needMask = true;\n        public bool ClickScreenClose;\n        public Vector2 BtnPosOffset;\n        public Vector2 BtnSizeOffset;\n        public Vector2 DescOffSet;\n        public bool NeedShowSecondHightLight;\n        [VisibleIf(nameof(NeedShowSecondHightLight), true)]\n        [SerializeField, Input(name = \"SecondIn\")]\n        public GameObject SecondHightLight =null;\n        [VisibleIf(nameof(NeedShowSecondHightLight), true)]\n        public Vector2 SecondPosOffset;\n        [VisibleIf(nameof(NeedShowSecondHightLight), true)]\n        public Vector2 SecondSizeOffset;\n\n        private GameObject instantFocus;\n        private System.IDisposable disposable;\n        TimeItem timeItem;\n\n        //\u91cd\u65b0\u5f3a\u5236\u5f15\u5bfc10\u6b21\uff0c\u6bcf\u6b21\u95f4\u96940.5\u79d2\uff0c\u5982\u679c\u90fd\u672a\u6210\u529f\uff0c\u5219\u8df3\u8fc7\u8fd9\u4e00\u6b65\u65b0\u624b\uff0c\u9632\u6b62\u5361\u6b7b\n        private int retryNum = 10;\n\n        protected override void Enable()\n        {\n            base.Enable();\n            retryNum = 10;\n        }\n\n        //TODO  \u4fee\u590d \u754c\u9762\u672a\u5237\u65b0 \u65b0\u624b\u52a0\u8f7d\u5b8c\u7684\u60c5\u51b5\u5bfc\u81f4 \u65b0\u624b\u4e0d\u5f15\u5bfc\u7684\u5f02\u5e38\n        protected override async void Process()\n        {\n\n            if (btn == null)\n            {\n                if (retryNum > 0)\n                {\n                    await GAsync.WaitSeconds(0.5f);\n                    retryNum--;\n                    Process();\n                    return;\n                }\n                DebugEX.LogError(\"ProcessFinished();\n                return;\n            }\n\n            var canvas = btn.GetComponentInParent<Canvas>();\n            Vector2 descoffset = DescOffSet * canvas.scaleFactor;\n\n            var realDesc = string.IsNullOrEmpty(Desc)?\"\":LanguageKit.Get(Desc);\n            Action clickAction = null;\n            MaskParameter maskParameter = new MaskParameter();\n            maskParameter.HighLight1 = new HighLightParameter()\n            {\n                Pos = GetRealPos(btn,BtnPosOffset),\n                Size = GetSize(btn,BtnSizeOffset),\n                Desc = realDesc,\n                DescPos = descoffset,\n                IsNeedFocas = ShowArrow,\n                IsNeedMask = needMask\n            };\n            if(NeedShowSecondHightLight)\n            {\n                maskParameter.HighLight2 = new HighLightParameter()\n                {\n                    Pos = GetRealPos(SecondHightLight,SecondPosOffset),\n                    Size = GetSize(SecondHightLight,SecondSizeOffset),\n                    IsNeedFocas = false,\n                    IsNeedMask = needMask\n                };\n            }\n            maskParameter.Delay = Speed;\n            maskParameter.BackAction = clickAction;\n            if (ClickScreenClose)\n            {\n                maskParameter.BackAction = () => { this.ProcessFinished(); };\n            }\n            else\n            {\n                UGUIExecuteEventMask.ShieldingClickEvent(() =>\n                {\n                    GuideMaskController.Instance.ShowMask(maskParameter);\n                });\n            }\n            GuideMaskController.Instance.ShowMask(maskParameter);\n\n            if (AutoCloseAfter > 0)\n            {\n                UGUIExecuteEventMask.ShieldingClickEvent();\n                timeItem = Timer.Instance.Post2Scale((x) =>\n                {\n                    this.ProcessFinished();\n                }, AutoCloseAfter);\n            }\n            else\n            {\n                var uguiPassCom = btn.GetComponent<ExecutePassComponent>();\n                if (uguiPassCom == null)\n                    uguiPassCom = btn.AddComponent<ExecutePassComponent>();\n                uguiPassCom.SetPassCallBackEvent(this.ProcessFinished);\n            }\n        }\n        private Vector2 GetRealPos(GameObject btn,Vector2 posOffset)\n        {\n            Vector2 realPos = Vector2.zero;\n            var canvas = btn.GetComponentInParent<Canvas>();\n            if (canvas.worldCamera!= null)\n            {\n                realPos = canvas.worldCamera.WorldToScreenPoint(btn.transform.position);\n            }\n            else\n                realPos = btn.transform.position;\n            UnityEngine.EventSystems.EventSystem.current.pixelDragThreshold = 10000;\n            realPos += posOffset * canvas.scaleFactor;\n            return realPos;\n        }\n        private Vector2 GetSize(GameObject btn,Vector2 sizeOffset)\n        {\n            var canvas = btn.GetComponentInParent<Canvas>();\n            var rect = btn.GetComponent<RectTransform>().rect;\n            var width = rect.width * canvas.scaleFactor + sizeOffset.x * canvas.scaleFactor;\n            var height = rect.height * canvas.scaleFactor + sizeOffset.y * canvas.scaleFactor;\n            Vector2 size = new Vector2(width,height);\n            return size;\n        }\n\n        protected override void ProcessFinished()\n        {\n            if (onProcessFinished == null)\n            {\n                DebugEX.Log(\"Button onProcessFinished null\");\n                return;\n            }\n            Dispose();\n            base.ProcessFinished();\n        }\n\n        public override void Dispose()\n        {\n            //Platform.EventDispatcher.RemoveEventListener(\"ReCalculateGuide\", ReCalculateButtonPos);\n            UnityEngine.EventSystems.EventSystem.current.pixelDragThreshold = 10;\n            if (instantFocus!= null)\n            {\n                ResourceMgr.Instance.UnloadGameObject(instantFocus);\n            }\n            if (btn!= null)\n            {\n                var uguiPassCom = btn.GetComponent<ExecutePassComponent>();\n                if (uguiPassCom)\n                {\n                    GameObject.Destroy(uguiPassCom);\n                }\n            }\n            UGUIExecuteEventMask.RecoverClickEvent();\n            GuideMaskController.Instance.HideMask();\n            if (timeItem!= null)\n                timeItem.Cancel();\n            if (disposable!= null)\n                disposable.Dispose();\n        }\n    }\n}\n", "starcoder_inputs": "<fim_prefix>using System.ComponentModel;\nusing System.Diagnostics;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System;\nusing GraphProcessor;\nusing Platform;\nusing UniRx;\nusing Framework.GalaSports.Service;\n\n\nnamespace NodeGraphProcessor\n{\n    [Serializable, NodeMenuItem(\"Button/MaskButton\")]\n    public class MaskButtonNode : WaitableNode\n    {\n        [SerializeField, Input(name = \"In\")]\n        public GameObject btn;\n        public string Desc;\n        float Speed = 0.3f;\n        public float AutoCloseAfter = 0f;\n        public bool ShowArrow = true;\n        public bool needMask = true;\n        public bool ClickScreenClose;\n        public Vector2 BtnPosOffset;\n        public Vector2 BtnSizeOffset;\n        public Vector2 DescOffSet;\n        public bool NeedShowSecondHightLight;\n        [VisibleIf(nameof(NeedShowSecondHightLight), true)]\n        [SerializeField, Input(name = \"SecondIn\")]\n        public GameObject SecondHightLight =null;\n        [VisibleIf(nameof(NeedShowSecondHightLight), true)]\n        public Vector2 SecondPosOffset;\n        [VisibleIf(nameof(NeedShowSecondHightLight), true)]\n        public Vector2 SecondSizeOffset;\n\n        private GameObject instantFocus;\n        private System.IDisposable disposable;\n        TimeItem timeItem;\n\n        //\u91cd\u65b0\u5f3a\u5236\u5f15\u5bfc10\u6b21\uff0c\u6bcf\u6b21\u95f4\u96940.5\u79d2\uff0c\u5982\u679c\u90fd\u672a\u6210\u529f\uff0c\u5219\u8df3\u8fc7\u8fd9\u4e00\u6b65\u65b0\u624b\uff0c\u9632\u6b62\u5361\u6b7b\n        private int retryNum = 10;\n\n        protected override void Enable()\n        {\n            base.Enable();\n            retryNum = 10;\n        }\n\n        //TODO  \u4fee\u590d \u754c\u9762\u672a\u5237\u65b0 \u65b0\u624b\u52a0\u8f7d\u5b8c\u7684\u60c5\u51b5\u5bfc\u81f4 \u65b0\u624b\u4e0d\u5f15\u5bfc\u7684\u5f02\u5e38\n        protected override async void Process()\n        {\n\n            if (btn == null)\n            {\n                if (retryNum > 0)\n                {\n                    await GAsync.WaitSeconds(0.5f);\n                    retryNum--;\n                    Process();\n                    return;\n                }\n                DebugEX.LogError(\"<fim_suffix>ProcessFinished();\n                return;\n            }\n\n            var canvas = btn.GetComponentInParent<Canvas>();\n            Vector2 descoffset = DescOffSet * canvas.scaleFactor;\n\n            var realDesc = string.IsNullOrEmpty(Desc)?\"\":LanguageKit.Get(Desc);\n            Action clickAction = null;\n            MaskParameter maskParameter = new MaskParameter();\n            maskParameter.HighLight1 = new HighLightParameter()\n            {\n                Pos = GetRealPos(btn,BtnPosOffset),\n                Size = GetSize(btn,BtnSizeOffset),\n                Desc = realDesc,\n                DescPos = descoffset,\n                IsNeedFocas = ShowArrow,\n                IsNeedMask = needMask\n            };\n            if(NeedShowSecondHightLight)\n            {\n                maskParameter.HighLight2 = new HighLightParameter()\n                {\n                    Pos = GetRealPos(SecondHightLight,SecondPosOffset),\n                    Size = GetSize(SecondHightLight,SecondSizeOffset),\n                    IsNeedFocas = false,\n                    IsNeedMask = needMask\n                };\n            }\n            maskParameter.Delay = Speed;\n            maskParameter.BackAction = clickAction;\n            if (ClickScreenClose)\n            {\n                maskParameter.BackAction = () => { this.ProcessFinished(); };\n            }\n            else\n            {\n                UGUIExecuteEventMask.ShieldingClickEvent(() =>\n                {\n                    GuideMaskController.Instance.ShowMask(maskParameter);\n                });\n            }\n            GuideMaskController.Instance.ShowMask(maskParameter);\n\n            if (AutoCloseAfter > 0)\n            {\n                UGUIExecuteEventMask.ShieldingClickEvent();\n                timeItem = Timer.Instance.Post2Scale((x) =>\n                {\n                    this.ProcessFinished();\n                }, AutoCloseAfter);\n            }\n            else\n            {\n                var uguiPassCom = btn.GetComponent<ExecutePassComponent>();\n                if (uguiPassCom == null)\n                    uguiPassCom = btn.AddComponent<ExecutePassComponent>();\n                uguiPassCom.SetPassCallBackEvent(this.ProcessFinished);\n            }\n        }\n        private Vector2 GetRealPos(GameObject btn,Vector2 posOffset)\n        {\n            Vector2 realPos = Vector2.zero;\n            var canvas = btn.GetComponentInParent<Canvas>();\n            if (canvas.worldCamera!= null)\n            {\n                realPos = canvas.worldCamera.WorldToScreenPoint(btn.transform.position);\n            }\n            else\n                realPos = btn.transform.position;\n            UnityEngine.EventSystems.EventSystem.current.pixelDragThreshold = 10000;\n            realPos += posOffset * canvas.scaleFactor;\n            return realPos;\n        }\n        private Vector2 GetSize(GameObject btn,Vector2 sizeOffset)\n        {\n            var canvas = btn.GetComponentInParent<Canvas>();\n            var rect = btn.GetComponent<RectTransform>().rect;\n            var width = rect.width * canvas.scaleFactor + sizeOffset.x * canvas.scaleFactor;\n            var height = rect.height * canvas.scaleFactor + sizeOffset.y * canvas.scaleFactor;\n            Vector2 size = new Vector2(width,height);\n            return size;\n        }\n\n        protected override void ProcessFinished()\n        {\n            if (onProcessFinished == null)\n            {\n                DebugEX.Log(\"Button onProcessFinished null\");\n                return;\n            }\n            Dispose();\n            base.ProcessFinished();\n        }\n\n        public override void Dispose()\n        {\n            //Platform.EventDispatcher.RemoveEventListener(\"ReCalculateGuide\", ReCalculateButtonPos);\n            UnityEngine.EventSystems.EventSystem.current.pixelDragThreshold = 10;\n            if (instantFocus!= null)\n            {\n                ResourceMgr.Instance.UnloadGameObject(instantFocus);\n            }\n            if (btn!= null)\n            {\n                var uguiPassCom = btn.GetComponent<ExecutePassComponent>();\n                if (uguiPassCom)\n                {\n                    GameObject.Destroy(uguiPassCom);\n                }\n            }\n            UGUIExecuteEventMask.RecoverClickEvent();\n            GuideMaskController.Instance.HideMask();\n            if (timeItem!= null)\n                timeItem.Cancel();\n            if (disposable!= null)\n                disposable.Dispose();\n        }\n    }\n}\n<fim_middle>"}
{"inputs": "using System.ComponentModel;\nusing System.Diagnostics;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System;\nusing GraphProcessor;\nusing Platform;\nusing UniRx;\nusing Framework.GalaSports.Service;\n\n\nnamespace NodeGraphProcessor\n{\n    [Serializable, NodeMenuItem(\"Button/TwoMaskButton\")]\n    public class TwoMaskButtonNode : WaitableNode\n    {\n        [SerializeField, Input(name = \"FirstIn\")]\n        public GameObject FirstBtn;\n        public string Desc;\n        public string Desc2;\n        float Speed = 0.3f;\n        public float AutoCloseAfter = 0f;\n        public bool ClickScreenClose;\n        public Vector2 BtnPosOffset;\n        public Vector2 BtnSizeOffset;\n        public Vector2 DescOffSet;\n        [SerializeField, Input(name = \"SecondIn\")]\n        public GameObject SecondBtn =null;\n        public Vector2 SecondPosOffset;\n        public Vector2 SecondSizeOffset;\n        public Vector2 SecondDescOffSet;\n        [SerializeField,Output(name = \"ClickFirst\")]\n        bool ClickFirstBtn;\n        private System.IDisposable disposable;\n        TimeItem timeItem;\n\n        //\u91cd\u65b0\u5f3a\u5236\u5f15\u5bfc10\u6b21\uff0c\u6bcf\u6b21\u95f4\u96940.5\u79d2\uff0c\u5982\u679c\u90fd\u672a\u6210\u529f\uff0c\u5219\u8df3\u8fc7\u8fd9\u4e00\u6b65\u65b0\u624b\uff0c\u9632\u6b62\u5361\u6b7b\n        private int retryNum = 10;\n\n        protected override void Enable()\n        {\n            base.Enable();\n            retryNum = 10;\n        }\n\n        //TODO  \u4fee\u590d \u754c\u9762\u672a\u5237\u65b0 \u65b0\u624b\u52a0\u8f7d\u5b8c\u7684\u60c5\u51b5\u5bfc\u81f4 \u65b0\u624b\u4e0d\u5f15\u5bfc\u7684\u5f02\u5e38\n        protected override async void Process()\n        {\n\n            if (FirstBtn == null)\n            {\n                if (retryNum > 0)\n                {\n                    await GAsync.WaitSeconds(0.5f);\n                    retryNum--;\n                    Process();\n                    return;\n                }\n                DebugEX.LogError(\"\u65b0\u624b\u5f15\u5bfc\u5f3a\u5236\u5f15\u5bfc\u5931\u8d25,\u8df3\u51fa\u5f53\u524d\u5f15\u5bfc\");\n                // this.ProcessFinished();\n                return;\n            }\n            //\u8ba1\u7b97\u6309\u94ae\u771f\u5b9e\u4f4d\u7f6e\u5c3a\u5bf8\n            var canvas = FirstBtn.GetComponentInParent<Canvas>();\n            Vector2 descoffset = DescOffSet * canvas.scaleFactor;\n            Vector2 descoffset2 = SecondDescOffSet * canvas.scaleFactor;\n            Action clickAction = null;\n            MaskParameter maskParameter = new MaskParameter();\n            maskParameter.HighLight1 = new HighLightParameter()\n            {\n                Pos = GetRealPos(FirstBtn,BtnPosOffset),\n                Size = GetSize(FirstBtn,BtnSizeOffset),\n                Desc = string.IsNullOrEmpty(this.Desc) ? \"\" : LanguageKit.Get(this.Desc),\n                DescPos = descoffset\n            };\n            maskParameter.HighLight2 = new HighLightParameter()\n            {\n                Pos = GetRealPos(SecondBtn,SecondPosOffset),\n                Size = GetSize(SecondBtn,SecondSizeOffset),\n                Desc = string.IsNullOrEmpty(this.Desc2) ? \"\" : LanguageKit.Get(this.Desc2),\n                DescPos = descoffset2\n            };\n            maskParameter.Delay = Speed;\n            maskParameter.BackAction = clickAction;\n            if (ClickScreenClose)\n            {\n                maskParameter.BackAction = () => { this.ProcessFinished(); };\n            }\n            else\n            {\n                UGUIExecuteEventMask.ShieldingClickEvent();\n            }\n            GuideMaskController.Instance.ShowMask(maskParameter);\n\n            if (AutoCloseAfter > 0)\n            {\n                timeItem = Timer.Instance.Post2Scale((x) =>\n                {\n                    this.ProcessFinished();\n                }, AutoCloseAfter);\n            }\n\n            var uguiPassCom = FirstBtn.GetComponent<ExecutePassComponent>();\n            if (uguiPassCom == null)\n                uguiPassCom = FirstBtn.AddComponent<ExecutePassComponent>();\n            var uguiPassCom2 = SecondBtn.GetComponent<ExecutePassComponent>();\n            if (uguiPassCom2 == null)\n                uguiPassCom2 = SecondBtn.AddComponent<ExecutePassComponent>();\n            uguiPassCom.SetPassCallBackEvent(() =>\n            {\n                ClickFirstBtn = true;\n                this.ProcessFinished();\n            });\n            uguiPassCom2.SetPassCallBackEvent(() =>\n            {\n                ClickFirstBtn = false;\n                this.ProcessFinished();\n            });\n        }\n        private Vector2 GetRealPos(GameObject btn,Vector2 posOffset)\n        {\n            Vector2 realPos = Vector2.zero;\n            var canvas = btn.GetComponentInParent<Canvas>();\n            Vector2 descoffset = DescOffSet * canvas.scaleFactor;\n            if (canvas.worldCamera != null)\n            {\n                realPos = canvas.worldCamera.WorldToScreenPoint(btn.transform.position);\n            }\n            else\n                realPos = btn.transform.position;\n            UnityEngine.EventSystems.EventSystem.current.pixelDragThreshold = 10000;\n            realPos += posOffset * canvas.scaleFactor;\n            return realPos;\n        }\n        private Vector2 GetSize(GameObject btn,Vector2 sizeOffset)\n        {\n            var canvas = btn.GetComponentInParent<Canvas>();\n            var rect = btn.GetComponent<RectTransform>().rect;\n            var width = rect.width * canvas.scaleFactor + sizeOffset.x * canvas.scaleFactor;\n            var height = rect.height * canvas.scaleFactor + sizeOffset.y * canvas.scaleFactor;\n            Vector2 size = new Vector2(width,height);\n            return size;\n        }\n        protected override void ProcessFinished()\n        {\n            if (onProcessFinished == null)\n            {\n                DebugEX.Log(\"Button onProcessFinished null\");\n                return;\n            }\n            Dispose();\n            base.ProcessFinished();\n        }\n\n        public override void Dispose()\n        {\n            UnityEngine.EventSystems.EventSystem.current.pixelDragThreshold = 10;\n            if (FirstBtn != null)\n            {\n                var uguiPassCom = FirstBtn.GetComponent<ExecutePassComponent>();\n                if (uguiPassCom)\n                {\n                    GameObject.Destroy(uguiPassCom);\n                }\n            }\n            if (SecondBtn != null)\n            {\n                var uguiPassCom = SecondBtn.GetComponent<ExecutePassComponent>();\n                if (uguiPassCom)\n                {\n                    GameObject.Destroy(uguiPassCom);\n                }\n            }\n            UGUIExecuteEventMask.RecoverClickEvent();\n            GuideMaskController.Instance.HideMask();\n            if (timeItem != null)\n                timeItem.Cancel();\n            if (disposable != null)\n                disposable.Dispose();\n        }\n    }\n}\n", "cropped_inputs": "using System.ComponentModel;\nusing System.Diagnostics;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System;\nusing GraphProcessor;\nusing Platform;\nusing UniRx;\nusing Framework.GalaSports.Service;\n\n\nnamespace NodeGraphProcessor\n{\n    [Serializable, NodeMenuItem(\"Button/TwoMaskButton\")]\n    public class TwoMaskButtonNode : WaitableNode\n    {\n        [SerializeField, Input(name = \"FirstIn\")]\n        public GameObject FirstBtn;\n        public string Desc;\n        public string Desc2;\n        float Speed = 0.3f;\n        public float AutoCloseAfter = 0f;\n        public bool ClickScreenClose;\n        public Vector2 BtnPosOffset;\n        public Vector2 BtnSizeOffset;\n        public Vector2 DescOffSet;\n        [SerializeField, Input(name = \"SecondIn\")]\n        public GameObject SecondBtn =null;\n        public Vector2 SecondPosOffset;\n        public Vector2 SecondSizeOffset;\n        public Vector2 SecondDescOffSet;\n        [SerializeField,Output(name = \"ClickFirst\")]\n        bool ClickFirstBtn;\n        private System.IDisposable disposable;\n        TimeItem timeItem;\n\n        //\u91cd\u65b0\u5f3a\u5236\u5f15\u5bfc10\u6b21\uff0c\u6bcf\u6b21\u95f4\u96940.5\u79d2\uff0c\u5982\u679c\u90fd\u672a\u6210\u529f\uff0c\u5219\u8df3\u8fc7\u8fd9\u4e00\u6b65\u65b0\u624b\uff0c\u9632\u6b62\u5361\u6b7b\n        private int retryNum = 10;\n\n        protected override void Enable()\n        {\n            base.Enable();\n            retryNum = 10;\n        }\n\n        //TODO  \u4fee\u590d \u754c\u9762\u672a\u5237\u65b0 \u65b0\u624b\u52a0\u8f7d\u5b8c\u7684\u60c5\u51b5\u5bfc\u81f4 \u65b0\u624b\u4e0d\u5f15\u5bfc\u7684\u5f02\u5e38\n        protected override async void Process()\n        {\n\n            if (FirstBtn == null)\n            {\n                if (retryNum > 0)\n                {\n                    await GAsync.WaitSeconds(0.5f);\n                    retryNum--;\n                    Process();\n                    return;\n                }\n                DebugEX.LogError(\"\u65b0\u624b\u5f15\u5bfc\u5f3a\u5236\u5f15\u5bfc\u5931\u8d25,\u8df3\u51fa\u5f53\u524d\u5f15\u5bfc\");\n                // this.ProcessFinished();\n                return;\n            }\n            //\u8ba1\u7b97\u6309\u94ae\u771f\u5b9e\u4f4d\u7f6e\u5c3a\u5bf8\n            var canvas = FirstBtn.GetComponentInParent<Canvas>();\n            Vector2 descoffset = Desc * canvas.scaleFactor;\n            Action clickAction = null;\n            MaskParameter maskParameter = new MaskParameter();\n            maskParameter.HighLight1 = new HighLightParameter()\n            {\n                Pos = GetRealPos(FirstBtn,BtnPosOffset),\n                Size = GetSize(FirstBtn,BtnSizeOffset),\n                Desc = string.IsNullOrEmpty(this.Desc)? \"\" : LanguageKit.Get(this.Desc),\n                DescPos = descoffset\n            };\n            maskParameter.HighLight2 = new HighLightParameter()\n            {\n                Pos = GetRealPos(SecondBtn,SecondPosOffset),\n                Size = GetSize(SecondBtn,SecondSizeOffset),\n                Desc = string.IsNullOrEmpty(this.Desc2)? \"\" : LanguageKit.Get(this.Desc2),\n                DescPos = descoffset2\n            };\n            maskParameter.Delay = Speed;\n            maskParameter.BackAction = clickAction;\n            if (ClickScreenClose)\n            {\n                maskParameter.BackAction = () => { this.ProcessFinished(); };\n            }\n            else\n            {\n                UGUIExecuteEventMask.ShieldingClickEvent();\n            }\n            GuideMaskController.Instance.ShowMask(maskParameter);\n\n            if (AutoCloseAfter > 0)\n            {\n                timeItem = Timer.Instance.Post2Scale((x) =>\n                {\n                    this.ProcessFinished();\n                }, AutoCloseAfter);\n            }\n\n            var uguiPassCom = FirstBtn.GetComponent<ExecutePassComponent>();\n            if (uguiPassCom == null)\n                uguiPassCom = FirstBtn.AddComponent<ExecutePassComponent>();\n            var uguiPassCom2 = SecondBtn.GetComponent<ExecutePassComponent>();\n            if (uguiPassCom2 == null)\n                uguiPassCom2 = SecondBtn.AddComponent<ExecutePassComponent>();\n            uguiPassCom.SetPassCallBackEvent(() =>\n            {\n                ClickFirstBtn = true;\n                this.ProcessFinished();\n            });\n            uguiPassCom2.SetPassCallBackEvent(() =>\n            {\n                ClickFirstBtn = false;\n                this.ProcessFinished();\n            });\n        }\n        private Vector2 GetRealPos(GameObject btn,Vector2 posOffset)\n        {\n            Vector2 realPos = Vector2.zero;\n            var canvas = btn.GetComponentInParent<Canvas>();\n            Vector2 descoffset = DescOffSet * canvas.scaleFactor;\n            if (canvas.worldCamera!= null)\n            {\n                realPos = canvas.worldCamera.WorldToScreenPoint(btn.transform.position);\n            }\n            else\n                realPos = btn.transform.position;\n            UnityEngine.EventSystems.EventSystem.current.pixelDragThreshold = 10000;\n            realPos += posOffset * canvas.scaleFactor;\n            return realPos;\n        }\n        private Vector2 GetSize(GameObject btn,Vector2 sizeOffset)\n        {\n            var canvas = btn.GetComponentInParent<Canvas>();\n            var rect = btn.GetComponent<RectTransform>().rect;\n            var width = rect.width * canvas.scaleFactor + sizeOffset.x * canvas.scaleFactor;\n            var height = rect.height * canvas.scaleFactor + sizeOffset.y * canvas.scaleFactor;\n            Vector2 size = new Vector2(width,height);\n            return size;\n        }\n        protected override void ProcessFinished()\n        {\n            if (onProcessFinished == null)\n            {\n                DebugEX.Log(\"Button onProcessFinished null\");\n                return;\n            }\n            Dispose();\n            base.ProcessFinished();\n        }\n\n        public override void Dispose()\n        {\n            UnityEngine.EventSystems.EventSystem.current.pixelDragThreshold = 10;\n            if (FirstBtn!= null)\n            {\n                var uguiPassCom = FirstBtn.GetComponent<ExecutePassComponent>();\n                if (uguiPassCom)\n                {\n                    GameObject.Destroy(uguiPassCom);\n                }\n            }\n            if (SecondBtn!= null)\n            {\n                var uguiPassCom = SecondBtn.GetComponent<ExecutePassComponent>();\n                if (uguiPassCom)\n                {\n                    GameObject.Destroy(uguiPassCom);\n                }\n            }\n            UGUIExecuteEventMask.RecoverClickEvent();\n            GuideMaskController.Instance.HideMask();\n            if (timeItem!= null)\n                timeItem.Cancel();\n            if (disposable!= null)\n                disposable.Dispose();\n        }\n    }\n}\n", "starcoder_inputs": "<fim_prefix>using System.ComponentModel;\nusing System.Diagnostics;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System;\nusing GraphProcessor;\nusing Platform;\nusing UniRx;\nusing Framework.GalaSports.Service;\n\n\nnamespace NodeGraphProcessor\n{\n    [Serializable, NodeMenuItem(\"Button/TwoMaskButton\")]\n    public class TwoMaskButtonNode : WaitableNode\n    {\n        [SerializeField, Input(name = \"FirstIn\")]\n        public GameObject FirstBtn;\n        public string Desc;\n        public string Desc2;\n        float Speed = 0.3f;\n        public float AutoCloseAfter = 0f;\n        public bool ClickScreenClose;\n        public Vector2 BtnPosOffset;\n        public Vector2 BtnSizeOffset;\n        public Vector2 DescOffSet;\n        [SerializeField, Input(name = \"SecondIn\")]\n        public GameObject SecondBtn =null;\n        public Vector2 SecondPosOffset;\n        public Vector2 SecondSizeOffset;\n        public Vector2 SecondDescOffSet;\n        [SerializeField,Output(name = \"ClickFirst\")]\n        bool ClickFirstBtn;\n        private System.IDisposable disposable;\n        TimeItem timeItem;\n\n        //\u91cd\u65b0\u5f3a\u5236\u5f15\u5bfc10\u6b21\uff0c\u6bcf\u6b21\u95f4\u96940.5\u79d2\uff0c\u5982\u679c\u90fd\u672a\u6210\u529f\uff0c\u5219\u8df3\u8fc7\u8fd9\u4e00\u6b65\u65b0\u624b\uff0c\u9632\u6b62\u5361\u6b7b\n        private int retryNum = 10;\n\n        protected override void Enable()\n        {\n            base.Enable();\n            retryNum = 10;\n        }\n\n        //TODO  \u4fee\u590d \u754c\u9762\u672a\u5237\u65b0 \u65b0\u624b\u52a0\u8f7d\u5b8c\u7684\u60c5\u51b5\u5bfc\u81f4 \u65b0\u624b\u4e0d\u5f15\u5bfc\u7684\u5f02\u5e38\n        protected override async void Process()\n        {\n\n            if (FirstBtn == null)\n            {\n                if (retryNum > 0)\n                {\n                    await GAsync.WaitSeconds(0.5f);\n                    retryNum--;\n                    Process();\n                    return;\n                }\n                DebugEX.LogError(\"\u65b0\u624b\u5f15\u5bfc\u5f3a\u5236\u5f15\u5bfc\u5931\u8d25,\u8df3\u51fa\u5f53\u524d\u5f15\u5bfc\");\n                // this.ProcessFinished();\n                return;\n            }\n            //\u8ba1\u7b97\u6309\u94ae\u771f\u5b9e\u4f4d\u7f6e\u5c3a\u5bf8\n            var canvas = FirstBtn.GetComponentInParent<Canvas>();\n            Vector2 descoffset = Desc<fim_suffix> * canvas.scaleFactor;\n            Action clickAction = null;\n            MaskParameter maskParameter = new MaskParameter();\n            maskParameter.HighLight1 = new HighLightParameter()\n            {\n                Pos = GetRealPos(FirstBtn,BtnPosOffset),\n                Size = GetSize(FirstBtn,BtnSizeOffset),\n                Desc = string.IsNullOrEmpty(this.Desc)? \"\" : LanguageKit.Get(this.Desc),\n                DescPos = descoffset\n            };\n            maskParameter.HighLight2 = new HighLightParameter()\n            {\n                Pos = GetRealPos(SecondBtn,SecondPosOffset),\n                Size = GetSize(SecondBtn,SecondSizeOffset),\n                Desc = string.IsNullOrEmpty(this.Desc2)? \"\" : LanguageKit.Get(this.Desc2),\n                DescPos = descoffset2\n            };\n            maskParameter.Delay = Speed;\n            maskParameter.BackAction = clickAction;\n            if (ClickScreenClose)\n            {\n                maskParameter.BackAction = () => { this.ProcessFinished(); };\n            }\n            else\n            {\n                UGUIExecuteEventMask.ShieldingClickEvent();\n            }\n            GuideMaskController.Instance.ShowMask(maskParameter);\n\n            if (AutoCloseAfter > 0)\n            {\n                timeItem = Timer.Instance.Post2Scale((x) =>\n                {\n                    this.ProcessFinished();\n                }, AutoCloseAfter);\n            }\n\n            var uguiPassCom = FirstBtn.GetComponent<ExecutePassComponent>();\n            if (uguiPassCom == null)\n                uguiPassCom = FirstBtn.AddComponent<ExecutePassComponent>();\n            var uguiPassCom2 = SecondBtn.GetComponent<ExecutePassComponent>();\n            if (uguiPassCom2 == null)\n                uguiPassCom2 = SecondBtn.AddComponent<ExecutePassComponent>();\n            uguiPassCom.SetPassCallBackEvent(() =>\n            {\n                ClickFirstBtn = true;\n                this.ProcessFinished();\n            });\n            uguiPassCom2.SetPassCallBackEvent(() =>\n            {\n                ClickFirstBtn = false;\n                this.ProcessFinished();\n            });\n        }\n        private Vector2 GetRealPos(GameObject btn,Vector2 posOffset)\n        {\n            Vector2 realPos = Vector2.zero;\n            var canvas = btn.GetComponentInParent<Canvas>();\n            Vector2 descoffset = DescOffSet * canvas.scaleFactor;\n            if (canvas.worldCamera!= null)\n            {\n                realPos = canvas.worldCamera.WorldToScreenPoint(btn.transform.position);\n            }\n            else\n                realPos = btn.transform.position;\n            UnityEngine.EventSystems.EventSystem.current.pixelDragThreshold = 10000;\n            realPos += posOffset * canvas.scaleFactor;\n            return realPos;\n        }\n        private Vector2 GetSize(GameObject btn,Vector2 sizeOffset)\n        {\n            var canvas = btn.GetComponentInParent<Canvas>();\n            var rect = btn.GetComponent<RectTransform>().rect;\n            var width = rect.width * canvas.scaleFactor + sizeOffset.x * canvas.scaleFactor;\n            var height = rect.height * canvas.scaleFactor + sizeOffset.y * canvas.scaleFactor;\n            Vector2 size = new Vector2(width,height);\n            return size;\n        }\n        protected override void ProcessFinished()\n        {\n            if (onProcessFinished == null)\n            {\n                DebugEX.Log(\"Button onProcessFinished null\");\n                return;\n            }\n            Dispose();\n            base.ProcessFinished();\n        }\n\n        public override void Dispose()\n        {\n            UnityEngine.EventSystems.EventSystem.current.pixelDragThreshold = 10;\n            if (FirstBtn!= null)\n            {\n                var uguiPassCom = FirstBtn.GetComponent<ExecutePassComponent>();\n                if (uguiPassCom)\n                {\n                    GameObject.Destroy(uguiPassCom);\n                }\n            }\n            if (SecondBtn!= null)\n            {\n                var uguiPassCom = SecondBtn.GetComponent<ExecutePassComponent>();\n                if (uguiPassCom)\n                {\n                    GameObject.Destroy(uguiPassCom);\n                }\n            }\n            UGUIExecuteEventMask.RecoverClickEvent();\n            GuideMaskController.Instance.HideMask();\n            if (timeItem!= null)\n                timeItem.Cancel();\n            if (disposable!= null)\n                disposable.Dispose();\n        }\n    }\n}\n<fim_middle>"}
