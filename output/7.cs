<fim_prefix>// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace PlatformHotfix {

  #region Messages
  public partial class GameClientInfo : ViewModel {
    public static readonly pb::MessageParser<GameClientInfo> Parser = new pb::MessageParser<GameClientInfo>(() => (GameClientInfo)MessagePool.Instance.Fetch(typeof(GameClientInfo)));
    /// <summary>
    ///游戏大区
    /// </summary>
    public PropertyValue<string> Channel;
    /// <summary>
    ///游戏客户端渠道标识
    /// </summary>
    public PropertyValue<string> ChannelInfo;
    /// <summary>
    ///游戏客户端版本
    /// </summary>
    public PropertyValue<string> ClientVersion;
    public override void WriteTo(pb::CodedOutputStream output) {
      if (!string.IsNullOrEmpty(Channel.Value)) {
        output.WriteRawTag(10);
        output.WriteString(Channel.Value);
      }
      if (!string.IsNullOrEmpty(ChannelInfo.Value)) {
        output.WriteRawTag(18);
        output.WriteString(ChannelInfo.Value);
      }
      if (!string.IsNullOrEmpty(ClientVersion.Value)) {
        output.WriteRawTag(26);
        output.WriteString(ClientVersion.Value);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (!string.IsNullOrEmpty(Channel.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel.Value);
      }
      if (!string.IsNullOrEmpty(ChannelInfo.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelInfo.Value);
      }
      if (!string.IsNullOrEmpty(ClientVersion.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      int flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            flag |= 1 << 1;
            Channel.Value = input.ReadString();
            break;
          }
          case 18: {
            flag |= 1 << 2;
            ChannelInfo.Value = input.ReadString();
            break;
          }
          case 26: {
            flag |= 1 << 3;
            ClientVersion.Value = input.ReadString();
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        Channel.Value = "";
      }
      if((flag & 1 << 2) == 0)
      {
        ChannelInfo.Value = "";
      }
      if((flag & 1 << 3) == 0)
      {
        ClientVersion.Value = "";
      }
    }

    public void MergeFrom(GameClientInfo from) {
      Channel.Value = from.Channel.Value;
      ChannelInfo.Value = from.ChannelInfo.Value;
      ClientVersion.Value = from.ClientVersion.Value;
    }

    public override void ResetDefaults() {
      Channel.Value = "";
      ChannelInfo.Value = "";
      ClientVersion.Value = "";
    }

    public override void Bind(){
      Channel = new PropertyValue<string>(this,"Channel");
      ChannelInfo = new PropertyValue<string>(this,"ChannelInfo");
      ClientVersion = new PropertyValue<string>(this,"ClientVersion");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(Channel)); 
      list.Add(new ViewModelPropertyInfo(ChannelInfo)); 
      list.Add(new ViewModelPropertyInfo(ClientVersion)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("Channel:").Append(Channel.Value);
      stringBuilder.Append(", ChannelInfo:").Append(ChannelInfo.Value);
      stringBuilder.Append(", ClientVersion:").Append(ClientVersion.Value);
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  /// <summary>
  ///绑定游客/平台账号
  /// </summary>
  public partial class BindChannelAccountReq : ViewModel {
    public static readonly pb::MessageParser<BindChannelAccountReq> Parser = new pb::MessageParser<BindChannelAccountReq>(() => (BindChannelAccountReq)MessagePool.Instance.Fetch(typeof(BindChannelAccountReq)));
    /// <summary>
    /// 游戏类型
    /// </summary>
    public PropertyValue<int> GameType;
    /// <summary>
    ///accountId
    /// </summary>
    public PropertyValue<string> AccountId;
    /// <summary>
    ///token
    /// </summary>
    public PropertyValue<string> Token;
    /// <summary>
    ///1 绑定游客账号  2 绑定平台账号
    /// </summary>
    public PropertyValue<int> BindType;
    /// <summary>
    ///渠道登录映射标识
    /// </summary>
    public PropertyValue<string> FullChannel;
    private static readonly Map<fim_suffix>string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    /// <summary>
    ///渠道参数(透传)
    /// </summary>
    public MapCollection<string, string> ChannelArgs;
    /// <summary>
    ///sdk渠道
    /// </summary>
    public PropertyValue<string> SdkChannel;
    /// <summary>
    ///SDK版本
    /// </summary>
    public PropertyValue<int> SdkVersion;
    /// <summary>
    ///SDK参数版本
    /// </summary>
    public PropertyValue<int> SdkParamVersion;
    /// <summary>
    ///游戏客户端信息
    /// </summary>
    public global::PlatformHotfix.GameClientInfo GameClientInfo;

    public override void WriteTo(pb::CodedOutputStream output) {
      if (GameType.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(GameType.Value);
      }
      if (!string.IsNullOrEmpty(AccountId.Value)) {
        output.WriteRawTag(18);
        output.WriteString(AccountId.Value);
      }
      if (!string.IsNullOrEmpty(Token.Value)) {
        output.WriteRawTag(26);
        output.WriteString(Token.Value);
      }
      if (BindType.Value!= 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(BindType.Value);
      }
      if (!string.IsNullOrEmpty(FullChannel.Value)) {
        output.WriteRawTag(42);
        output.WriteString(FullChannel.Value);
      }
      ChannelArgs.WriteTo(output, _map_channelArgs_codec);
      if (!string.IsNullOrEmpty(SdkChannel.Value)) {
        output.WriteRawTag(58);
        output.WriteString(SdkChannel.Value);
      }
      if (SdkVersion.Value!= 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(SdkVersion.Value);
      }
      if (SdkParamVersion.Value!= 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(SdkParamVersion.Value);
      }
      if (GameClientInfo!= null &&GameClientInfo.CalculateSize()!= 0) {
        output.WriteRawTag(82);
        output.WriteMessage(GameClientInfo);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (GameType.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);
      }
      if (!string.IsNullOrEmpty(AccountId.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);
      }
      if (!string.IsNullOrEmpty(Token.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token.Value);
      }
      if (BindType.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BindType.Value);
      }
      if (!string.IsNullOrEmpty(FullChannel.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullChannel.Value);
      }
      size += ChannelArgs.CalculateSize(_map_channelArgs_codec);
      if (!string.IsNullOrEmpty(SdkChannel.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkChannel.Value);
      }
      if (SdkVersion.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SdkVersion.Value);
      }
      if (SdkParamVersion.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SdkParamVersion.Value);
      }
      if (GameClientInfo!= null &&GameClientInfo.CalculateSize()!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameClientInfo);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      int flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag |= 1 << 1;
            GameType.Value = input.ReadSInt32();
            break;
          }
          case 18: {
            flag |= 1 << 2;
            AccountId.Value = input.ReadString();
            break;
          }
          case 26: {
            flag |= 1 << 3;
            Token.Value = input.ReadString();
            break;
          }
          case 32: {
            flag |= 1 << 4;
            BindType.Value = input.ReadSInt32();
            break;
          }
          case 42: {
            flag |= 1 << 5;
            FullChannel.Value = input.ReadString();
            break;
          }
          case 50: {
            flag |= 1 << 6;
            ChannelArgs.Clear();
            ChannelArgs.AddEntriesFrom(input, _map_channelArgs_codec);
            break;
          }
          case 58: {
            flag |= 1 << 7;
            SdkChannel.Value = input.ReadString();
            break;
          }
          case 64: {
            flag |= 1 << 8;
            SdkVersion.Value = input.ReadSInt32();
            break;
          }
          case 72: {
            flag |= 1 << 9;
            SdkParamVersion.Value = input.ReadSInt32();
            break;
          }
          case 82: {
            flag |= 1 << 10;
            if (GameClientInfo == null) {
              GameClientInfo = new global::PlatformHotfix.GameClientInfo();
            }
            input.ReadMessage(GameClientInfo);
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        GameType.Value = 0;
      }
      if((flag & 1 << 2) == 0)
      {
        AccountId.Value = "";
      }
      if((flag & 1 << 3) == 0)
      {
        Token.Value = "";
      }
      if((flag & 1 << 4) == 0)
      {
        BindType.Value = 0;
      }
      if((flag & 1 << 5) == 0)
      {
        FullChannel.Value = "";
      }
      if((flag & 1 << 6) == 0)
      {
        ChannelArgs.Clear();
      }
      if((flag & 1 << 7) == 0)
      {
        SdkChannel.Value = "";
      }
      if((flag & 1 << 8) == 0)
      {
        SdkVersion.Value = 0;
      }
      if((flag & 1 << 9) == 0)
      {
        SdkParamVersion.Value = 0;
      }
      if((flag & 1 << 10) == 0)
      {
        if (GameClientInfo!= null)GameClientInfo.ResetDefaults();
      }
    }

    public void MergeFrom(BindChannelAccountReq from) {
      GameType.Value = from.GameType.Value;
      AccountId.Value = from.AccountId.Value;
      Token.Value = from.Token.Value;
      BindType.Value = from.BindType.Value;
      FullChannel.Value = from.FullChannel.Value;
      SdkChannel.Value = from.SdkChannel.Value;
      SdkVersion.Value = from.SdkVersion.Value;
      SdkParamVersion.Value = from.SdkParamVersion.Value;
      GameClientInfo.MergeFrom(from.GameClientInfo);
    }

    public override void ResetDefaults() {
      GameType.Value = 0;
      AccountId.Value = "";
      Token.Value = "";
      BindType.Value = 0;
      FullChannel.Value = "";
      ChannelArgs.Clear();
      SdkChannel.Value = "";
      SdkVersion.Value = 0;
      SdkParamVersion.Value = 0;
      if (GameClientInfo!= null)GameClientInfo.ResetDefaults();
    }

    public override void Bind(){
      GameType = new PropertyValue<int>(this,"GameType");
      AccountId = new PropertyValue<string>(this,"AccountId");
      Token = new PropertyValue<string>(this,"Token");
      BindType = new PropertyValue<int>(this,"BindType");
      FullChannel = new PropertyValue<string>(this,"FullChannel");
      ChannelArgs = new MapCollection<string, string>(this,"ChannelArgs");
      SdkChannel = new PropertyValue<string>(this,"SdkChannel");
      SdkVersion = new PropertyValue<int>(this,"SdkVersion");
      SdkParamVersion = new PropertyValue<int>(this,"SdkParamVersion");
      this.AddBinding(GameClientInfo?? (GameClientInfo = new global::PlatformHotfix.GameClientInfo())); 
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(GameType)); 
      list.Add(new ViewModelPropertyInfo(AccountId)); 
      list.Add(new ViewModelPropertyInfo(Token)); 
      list.Add(new ViewModelPropertyInfo(BindType)); 
      list.Add(new ViewModelPropertyInfo(FullChannel)); 
      list.Add(new ViewModelPropertyInfo(ChannelArgs)); 
      list.Add(new ViewModelPropertyInfo(SdkChannel)); 
      list.Add(new ViewModelPropertyInfo(SdkVersion)); 
      list.Add(new ViewModelPropertyInfo(SdkParamVersion)); 
      list.Add(new ViewModelPropertyInfo(GameClientInfo)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      // stringBuilder.Append("GameType:").Append(GameType.Value);
      // stringBuilder.Append(", AccountId:").Append(AccountId.Value);
      // stringBuilder.Append(", Token:").Append(Token.Value);
      // stringBuilder.Append(", BindType:").Append(BindType.Value);
      // stringBuilder.Append(", FullChannel:").Append(FullChannel.Value);
      // stringBuilder.Append("��ModelCollection_ChannelArgs:{");for (int i = 0; i < ChannelArgs.Count; i++) {stringBuilder.Append("{");
      //  stringBuilder.Append(ChannelArgs[i].ToString());stringBuilder.Append("}"); if(i>0) stringBuilder.Append(",");
      // }stringBuilder.Append("}");
      // stringBuilder.Append(", SdkChannel:").Append(SdkChannel.Value);
      // stringBuilder.Append(", SdkVersion:").Append(SdkVersion.Value);
      // stringBuilder.Append(", SdkParamVersion:").Append(SdkParamVersion.Value);
      // stringBuilder.Append(", GameClientInfo:"+GameClientInfo.ToString());
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  #endregion

}

#endregion Designer generated code
<fim_middle>Field<string, string> _map_channelArgs_codec
        = new MapField<<|endoftext|>