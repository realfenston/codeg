<fim_prefix>﻿// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marquee.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace PlatformHotfix {

  #region Messages
  /// <summary>
  /// 跑马灯返回
  /// </summary>
  public partial class MarqueeRes : ViewModel {
    public static readonly pb::MessageParser<MarqueeRes> Parser = new pb::MessageParser<MarqueeRes>(() => (MarqueeRes)MessagePool.Instance.Fetch(typeof(MarqueeRes)));
    /// <summary>
    ///响应码
    /// </summary>
    public PropertyValue<int> Ret;
    /// <summary>
    ///文案
    /// </summary>
    public PropertyValue<string> Content;
    /// <summary>
    ///发送频率
    /// </summary>
    public PropertyValue<int> Frequency;
    /// <summary>
    ///发送速度
    /// </summary>
    public PropertyValue<int> Rate;
    /// <summary>
    ///发送次数
    /// </summary>
    public PropertyValue<int> Num;
    /// <summary>
    ///活动开始时间
    /// </summary>
    public PropertyValue<long> BeginDate;
    /// <summary>
    ///活动结束时间
    /// </summary>
    public PropertyValue<long> EndDate;
    public override void WriteTo(pb::CodedOutputStream output) {
      if (Ret.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret.Value);
      }
      if (!string.IsNullOrEmpty(Content.Value)) {
        output.WriteRawTag(18);
        output.WriteString(Content.Value);
      }
      if (Frequency.Value!= 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Frequency.Value);
      }
      if (Rate.Value!= 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Rate.Value);
      }
      if (Num.Value!= 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Num.Value);
      }
      if (BeginDate.Value!= 0L) {
        output.WriteRawTag(48);
        output.WriteSInt64(BeginDate.Value);
      }
      if (EndDate.Value!= 0L) {
        output.WriteRawTag(56);
        output.WriteSInt64(EndDate.Value);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (Ret.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);
     <fim_suffix>::CodedOutputStream.ComputeStringSize(Content.Value);
      }
      if (Frequency.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Frequency.Value);
      }
      if (Rate.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Rate.Value);
      }
      if (Num.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Num.Value);
      }
      if (BeginDate.Value!= 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BeginDate.Value);
      }
      if (EndDate.Value!= 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndDate.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      int flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag |= 1 << 1;
            Ret.Value = input.ReadSInt32();
            break;
          }
          case 18: {
            flag |= 1 << 2;
            Content.Value = input.ReadString();
            break;
          }
          case 24: {
            flag |= 1 << 3;
            Frequency.Value = input.ReadSInt32();
            break;
          }
          case 32: {
            flag |= 1 << 4;
            Rate.Value = input.ReadSInt32();
            break;
          }
          case 40: {
            flag |= 1 << 5;
            Num.Value = input.ReadSInt32();
            break;
          }
          case 48: {
            flag |= 1 << 6;
            BeginDate.Value = input.ReadSInt64();
            break;
          }
          case 56: {
            flag |= 1 << 7;
            EndDate.Value = input.ReadSInt64();
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        Ret.Value = 0;
      }
      if((flag & 1 << 2) == 0)
      {
        Content.Value = "";
      }
      if((flag & 1 << 3) == 0)
      {
        Frequency.Value = 0;
      }
      if((flag & 1 << 4) == 0)
      {
        Rate.Value = 0;
      }
      if((flag & 1 << 5) == 0)
      {
        Num.Value = 0;
      }
      if((flag & 1 << 6) == 0)
      {
        BeginDate.Value = 0;
      }
      if((flag & 1 << 7) == 0)
      {
        EndDate.Value = 0;
      }
    }

    public void MergeFrom(MarqueeRes from) {
      Ret.Value = from.Ret.Value;
      Content.Value = from.Content.Value;
      Frequency.Value = from.Frequency.Value;
      Rate.Value = from.Rate.Value;
      Num.Value = from.Num.Value;
      BeginDate.Value = from.BeginDate.Value;
      EndDate.Value = from.EndDate.Value;
    }

    public override void ResetDefaults() {
      Ret.Value = 0;
      Content.Value = "";
      Frequency.Value = 0;
      Rate.Value = 0;
      Num.Value = 0;
      BeginDate.Value = 0;
      EndDate.Value = 0;
    }

    public override void Bind(){
      Ret = new PropertyValue<int>(this,"Ret");
      Content = new PropertyValue<string>(this,"Content");
      Frequency = new PropertyValue<int>(this,"Frequency");
      Rate = new PropertyValue<int>(this,"Rate");
      Num = new PropertyValue<int>(this,"Num");
      BeginDate = new PropertyValue<long>(this,"BeginDate");
      EndDate = new PropertyValue<long>(this,"EndDate");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(Ret)); 
      list.Add(new ViewModelPropertyInfo(Content)); 
      list.Add(new ViewModelPropertyInfo(Frequency)); 
      list.Add(new ViewModelPropertyInfo(Rate)); 
      list.Add(new ViewModelPropertyInfo(Num)); 
      list.Add(new ViewModelPropertyInfo(BeginDate)); 
      list.Add(new ViewModelPropertyInfo(EndDate)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("Ret:").Append(Ret.Value);
      stringBuilder.Append(", Content:").Append(Content.Value);
      stringBuilder.Append(", Frequency:").Append(Frequency.Value);
      stringBuilder.Append(", Rate:").Append(Rate.Value);
      stringBuilder.Append(", Num:").Append(Num.Value);
      stringBuilder.Append(", BeginDate:").Append(BeginDate.Value);
      stringBuilder.Append(", EndDate:").Append(EndDate.Value);
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  #endregion

}

#endregion Designer generated code
<fim_middle> }
      if (!string.IsNullOrEmpty(Content.Value)) {
        size += 1 + pb<|endoftext|>