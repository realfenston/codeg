<fim_prefix>// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame_room.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace PlatformHotfix {

  #region Messages
  /// <summary>
  /// </summary>
  public partial class SimpleFramePB : ViewModel {
    private static readonly pb::MessageParser<SimpleFramePB> _parser = new pb::MessageParser<SimpleFramePB>(() => (SimpleFramePB)MessagePool.Instance.Fetch(typeof(SimpleFramePB)));
    public static pb::MessageParser<SimpleFramePB> Parser { get { return _parser; } }

    private PropertyValue<int> turnId_;
    /// <summary>
    ///逻辑帧id
    /// </summary>
    public PropertyValue<int> TurnId {
      get { return turnId_; }
      set {
        turnId_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_ctrls_codec
        = pb::FieldCodec.ForString(18);
    private ModelCollection<string> ctrls_;
    /// <summary>
    ///操作
    /// </summary>
    public ModelCollection<string> Ctrls {
      get { return ctrls_; }
      set { ctrls_ = value; }
    }

    public override void WriteTo(pb::CodedOutputStream output) {
      if (TurnId.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(TurnId.Value);
      }
      ctrls_.WriteTo(output, _repeated_ctrls_codec);
    }

    public override int CalculateSize() {
      int size = 0;
      if (TurnId.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TurnId.Value);
      }
      size += ctrls_.CalculateSize(_repeated_ctrls_codec);
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      ResetDefaults();
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TurnId.Value = input.ReadSInt32();
            break;
          }
          case 18: {
            ctrls_.AddEntriesFrom(input, _repeated_ctrls_codec);
            break;
          }
        }
      }
    }

    public override void ResetDefaults() {
      ///turnId
      turnId_.Value = 0;
      ctrls_.Clear();
    }

    public override void Bind(){
      TurnId = new PropertyValue<int>(this,"TurnId");
      Ctrls = new ModelCollection<string>(this,"Ctrls");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(TurnId)); 
      list.Add(new ViewModelPropertyInfo(Ctrls)); 
      FillOtherProperties(list);
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  public partial class OnceSend : ViewModel {
    private static readonly pb::MessageParser<OnceSend> _parser = new pb::MessageParser<OnceSend>(() => (OnceSend)MessagePool.Instance.Fetch(typeof(OnceSend)));
    public static pb::MessageParser<OnceSend> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::PlatformHotfix.SimpleFramePB> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(10, global::PlatformHotfix.SimpleFramePB.Parser);
    private ModelCollection<global::PlatformHotfix.SimpleFramePB> frames_ ;
    public ModelCollection<global::PlatformHotfix.SimpleFramePB> Frames {
      get { return frames_; }
      set { frames_ = value; }
    }

    public override void WriteTo(pb::CodedOutputStream output) {
      frames_.WriteTo(<fim_suffix> int size = 0;
      size += frames_.CalculateSize(_repeated_frames_codec);
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      ResetDefaults();
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
        }
      }
    }

    public override void ResetDefaults() {
      for (int i = 0; i < frames_.Count; i++) { frames_[i].Destroy(); MessagePool.Instance.Recycle(frames_[i]); }
      frames_.Clear();
    }

    public override void Bind(){
      Frames = new ModelCollection<global::PlatformHotfix.SimpleFramePB>(this,"Frames");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(Frames)); 
      FillOtherProperties(list);
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  public partial class SyncTurnReq : ViewModel {
    private static readonly pb::MessageParser<SyncTurnReq> _parser = new pb::MessageParser<SyncTurnReq>(() => (SyncTurnReq)MessagePool.Instance.Fetch(typeof(SyncTurnReq)));
    public static pb::MessageParser<SyncTurnReq> Parser { get { return _parser; } }

    private PropertyValue<int> turnId_;
    /// <summary>
    ///逻辑帧id
    /// </summary>
    public PropertyValue<int> TurnId {
      get { return turnId_; }
      set {
        turnId_ = value;
      }
    }

    public override void WriteTo(pb::CodedOutputStream output) {
      if (TurnId.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(TurnId.Value);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (TurnId.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TurnId.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      ResetDefaults();
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TurnId.Value = input.ReadSInt32();
            break;
          }
        }
      }
    }

    public override void ResetDefaults() {
      ///turnId
      turnId_.Value = 0;
    }

    public override void Bind(){
      TurnId = new PropertyValue<int>(this,"TurnId");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(TurnId)); 
      FillOtherProperties(list);
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  public partial class SyncTurnRes : ViewModel {
    private static readonly pb::MessageParser<SyncTurnRes> _parser = new pb::MessageParser<SyncTurnRes>(() => (SyncTurnRes)MessagePool.Instance.Fetch(typeof(SyncTurnRes)));
    public static pb::MessageParser<SyncTurnRes> Parser { get { return _parser; } }

    private PropertyValue<int> ret_;
    public PropertyValue<int> Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    public override void WriteTo(pb::CodedOutputStream output) {
      if (Ret.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret.Value);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (Ret.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      ResetDefaults();
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret.Value = input.ReadSInt32();
            break;
          }
        }
      }
    }

    public override void ResetDefaults() {
      ///ret
      ret_.Value = 0;
    }

    public override void Bind(){
      Ret = new PropertyValue<int>(this,"Ret");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(Ret)); 
      FillOtherProperties(list);
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  public partial class OneOption : ViewModel {
    private static readonly pb::MessageParser<OneOption> _parser = new pb::MessageParser<OneOption>(() => (OneOption)MessagePool.Instance.Fetch(typeof(OneOption)));
    public static pb::MessageParser<OneOption> Parser { get { return _parser; } }

    private PropertyValue<int> turnId_;
    public PropertyValue<int> TurnId {
      get { return turnId_; }
      set {
        turnId_ = value;
      }
    }

    private PropertyValue<string> option_;
    public PropertyValue<string> Option {
      get { return option_; }
      set {
        option_ = value;
      }
    }

    public override void WriteTo(pb::CodedOutputStream output) {
      if (TurnId.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(TurnId.Value);
      }
      if (!string.IsNullOrEmpty(Option.Value)) {
        output.WriteRawTag(18);
        output.WriteString(Option.Value);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (TurnId.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TurnId.Value);
      }
      if (!string.IsNullOrEmpty(Option.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Option.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      ResetDefaults();
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TurnId.Value = input.ReadSInt32();
            break;
          }
          case 18: {
            Option.Value = input.ReadString();
            break;
          }
        }
      }
    }

    public override void ResetDefaults() {
      ///turnId
      turnId_.Value = 0;
      ///option
      option_.Value = "";
    }

    public override void Bind(){
      TurnId = new PropertyValue<int>(this,"TurnId");
      Option = new PropertyValue<string>(this,"Option");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(TurnId)); 
      list.Add(new ViewModelPropertyInfo(Option)); 
      FillOtherProperties(list);
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  #endregion

}

#endregion Designer generated code
<fim_middle>output, _repeated_frames_codec);
    }

    public override int CalculateSize() {
     <|endoftext|>