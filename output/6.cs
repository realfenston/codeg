<fim_prefix>// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: achievement.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace PlatformHotfix {

  #region Messages
  public partial class TeamAchievementRes : ViewModel {
    public static readonly pb::MessageParser<TeamAchievementRes> Parser = new pb::MessageParser<TeamAchievementRes>(() => (TeamAchievementRes)MessagePool.Instance.Fetch(typeof(TeamAchievementRes)));
    /// <summary>
    ///响应码
    /// </summary>
    public PropertyValue<int> Ret;
    private static readonly pb::FieldCodec<global::PlatformHotfix.TeamAchievementPB> _repeated_teamAchievements_codec
        = pb::FieldCodec.ForMessage(18, global::PlatformHotfix.TeamAchievementPB.Parser);
    /// <summary>
    ///任务详情
    /// </summary>
    public ModelCollection<global::PlatformHotfix.TeamAchievementPB> TeamAchievements;
    public override void WriteTo(pb::CodedOutputStream output) {
      if (Ret.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret.Value);
      }
      TeamAchievements.WriteTo(output, _repeated_teamAchievements_codec);
    }

    public override int CalculateSize() {
      int size = 0;
      if (Ret.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);
      }
      size += TeamAchievements.CalculateSize(_repeated_teamAchievements_codec);
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      long flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag |= 1 << 1;
            Ret.Value = input.ReadSInt32();
            break;
          }
          case 18: {
            flag |= 1 << 2;
            TeamAchievements.Clear();
            TeamAchievements.AddEntriesFrom(input, _repeated_teamAchievements_codec);
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        Ret.Value = 0;
      }
      if((flag & 1 << 2) == 0)
      {
        for (int i = 0; i < TeamAchievements.Count; i++) { TeamAchievements[i].Destroy(); MessagePool.Instance.Recycle(TeamAchievements[i]); }
        TeamAchievements.Clear();
      }
    }

    public void MergeFrom(TeamAchievementRes from) {
      Ret.Value = from.Ret.Value;
      for (int i = 0; i < TeamAchievements.Count; i++) { TeamAchievements[i].Destroy(); MessagePool.Instance.Recycle(TeamAchievements[i]); }
      TeamAchievements.Clear();
      for (int i = 0; i < from.TeamAchievements.Count; i++) { var temp = (PlatformHotfix.TeamAchievementPB)MessagePool.Instance.Fetch(typeof(PlatformHotfix.TeamAchievementPB)); temp.MergeFrom(from.TeamAchievements[i]);TeamAchievements.Add(temp); }
    }

    public override void ResetDefaults() {
      Ret.Value = 0;
      for (int i = 0; i < TeamAchievements.Count; i++) { TeamAchievements[i].Destroy(); MessagePool.Instance.Recycle(TeamAchievements[i]); }
      TeamAchievements.Clear();
    }

    public override void Bind(){
      Ret = new PropertyValue<int>(this,"Ret");
      TeamAchievements = new ModelCollection<global::PlatformHotfix.TeamAchievementPB>(this,"TeamAchievements");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(Ret)); 
      list.Add(new ViewModelPropertyInfo(TeamAchievements)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("Ret:").Append(Ret.Value);
      stringBuilder.Append("��ModelCollection_TeamAchievements:{");for (int i = 0; i < TeamAchievements.Count; i++) {stringBuilder.Append("{");
       stringBuilder.Append(TeamAchievements[i].ToString());stringBuilder.Append("}"); if(i>0) stringBuilder.Append(",");
      }stringBuilder.Append("}");
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  public partial class TeamAchievementPB : ViewModel {
    public static readonly pb::MessageParser<TeamAchievementPB> Parser = new pb::MessageParser<TeamAchievementPB>(() => (TeamAchievementPB)MessagePool.Instance.Fetch(typeof(TeamAchievementPB)));
    /// <summary>
    ///成就ID
    /// </summary>
    public PropertyValue<int> AchievementId;
    /// <summary>
    ///进度
    /// </summary>
    public PropertyValue<int> Progress;
    /// <summary>
    ///状态 1 未完成 2 未领取 3已领取
    /// </summary>
    public PropertyValue<int> Status;
    /// <summary>
    ///成就目标
    /// </summary>
    public PropertyValue<int> AchievementTarget;
    public override void WriteTo(pb::CodedOutputStream output) {
      if (AchievementId.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(AchievementId.Value);
      }
      if (Progress.Value!= 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Progress.Value);
      }
      if (Status.Value!= 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Status.Value);
      }
      if (AchievementTarget.Value!= 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(AchievementTarget.Value);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (AchievementId.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AchievementId.Value);
      }
      if (Progress.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Progress.Value);
      }
      if (Status.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Status.Value);
      }
      if (AchievementTarget.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AchievementTarget.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      long flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag |= 1 << 1;
            AchievementId.Value = input.ReadSInt32();
            break;
          }
          case 16: {
            flag |= 1 << 2;
            Progress.Value = input.ReadSInt32();
            break;
          }
          case 24: {
            flag |= 1 << 3;
            Status.Value = input.ReadSInt32();
            break;
          }
          case 32: {
            flag |= 1 << 4;
            AchievementTarget.Value = input.ReadSInt32();
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        AchievementId.Value = 0;
      }
      if((flag & 1 << 2) == 0)
      {
        Progress.Value = 0;
      }
      if((flag & 1 << 3) == 0)
      {
        Status.Value = 0;
      }
      if((flag & 1 << 4) == 0)
      {
        AchievementTarget.Value = 0;
      }
    }

    public void MergeFrom(TeamAchievementPB from<fim_suffix>.Value = from.Progress.Value;
      Status.Value = from.Status.Value;
      AchievementTarget.Value = from.AchievementTarget.Value;
    }

    public override void ResetDefaults() {
      AchievementId.Value = 0;
      Progress.Value = 0;
      Status.Value = 0;
      AchievementTarget.Value = 0;
    }

    public override void Bind(){
      AchievementId = new PropertyValue<int>(this,"AchievementId");
      Progress = new PropertyValue<int>(this,"Progress");
      Status = new PropertyValue<int>(this,"Status");
      AchievementTarget = new PropertyValue<int>(this,"AchievementTarget");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(AchievementId)); 
      list.Add(new ViewModelPropertyInfo(Progress)); 
      list.Add(new ViewModelPropertyInfo(Status)); 
      list.Add(new ViewModelPropertyInfo(AchievementTarget)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("AchievementId:").Append(AchievementId.Value);
      stringBuilder.Append(", Progress:").Append(Progress.Value);
      stringBuilder.Append(", Status:").Append(Status.Value);
      stringBuilder.Append(", AchievementTarget:").Append(AchievementTarget.Value);
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  /// <summary>
  /// 玩家所有称号
  /// </summary>
  public partial class TeamAchieveTitleRes : ViewModel {
    public static readonly pb::MessageParser<TeamAchieveTitleRes> Parser = new pb::MessageParser<TeamAchieveTitleRes>(() => (TeamAchieveTitleRes)MessagePool.Instance.Fetch(typeof(TeamAchieveTitleRes)));
    /// <summary>
    /// 响应码
    /// </summary>
    public PropertyValue<int> Ret;
    private static readonly pb::FieldCodec<global::PlatformHotfix.TeamAchieveTitlePB> _repeated_titles_codec
        = pb::FieldCodec.ForMessage(18, global::PlatformHotfix.TeamAchieveTitlePB.Parser);
    /// <summary>
    /// 任务详情
    /// </summary>
    public ModelCollection<global::PlatformHotfix.TeamAchieveTitlePB> Titles;
    public override void WriteTo(pb::CodedOutputStream output) {
      if (Ret.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret.Value);
      }
      Titles.WriteTo(output, _repeated_titles_codec);
    }

    public override int CalculateSize() {
      int size = 0;
      if (Ret.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);
      }
      size += Titles.CalculateSize(_repeated_titles_codec);
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      long flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag |= 1 << 1;
            Ret.Value = input.ReadSInt32();
            break;
          }
          case 18: {
            flag |= 1 << 2;
            Titles.Clear();
            Titles.AddEntriesFrom(input, _repeated_titles_codec);
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        Ret.Value = 0;
      }
      if((flag & 1 << 2) == 0)
      {
        for (int i = 0; i < Titles.Count; i++) { Titles[i].Destroy(); MessagePool.Instance.Recycle(Titles[i]); }
        Titles.Clear();
      }
    }

    public void MergeFrom(TeamAchieveTitleRes from) {
      Ret.Value = from.Ret.Value;
      for (int i = 0; i < Titles.Count; i++) { Titles[i].Destroy(); MessagePool.Instance.Recycle(Titles[i]); }
      Titles.Clear();
      for (int i = 0; i < from.Titles.Count; i++) { var temp = (PlatformHotfix.TeamAchieveTitlePB)MessagePool.Instance.Fetch(typeof(PlatformHotfix.TeamAchieveTitlePB)); temp.MergeFrom(from.Titles[i]);Titles.Add(temp); }
    }

    public override void ResetDefaults() {
      Ret.Value = 0;
      for (int i = 0; i < Titles.Count; i++) { Titles[i].Destroy(); MessagePool.Instance.Recycle(Titles[i]); }
      Titles.Clear();
    }

    public override void Bind(){
      Ret = new PropertyValue<int>(this,"Ret");
      Titles = new ModelCollection<global::PlatformHotfix.TeamAchieveTitlePB>(this,"Titles");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(Ret)); 
      list.Add(new ViewModelPropertyInfo(Titles)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("Ret:").Append(Ret.Value);
      stringBuilder.Append("��ModelCollection_Titles:{");for (int i = 0; i < Titles.Count; i++) {stringBuilder.Append("{");
       stringBuilder.Append(Titles[i].ToString());stringBuilder.Append("}"); if(i>0) stringBuilder.Append(",");
      }stringBuilder.Append("}");
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  public partial class TeamAchieveTitlePB : ViewModel {
    public static readonly pb::MessageParser<TeamAchieveTitlePB> Parser = new pb::MessageParser<TeamAchieveTitlePB>(() => (TeamAchieveTitlePB)MessagePool.Instance.Fetch(typeof(TeamAchieveTitlePB)));
    /// <summary>
    /// 称号ID
    /// </summary>
    public PropertyValue<int> TitleId;
    /// <summary>
    /// 子称号
    /// </summary>
    public PropertyValue<int> SubTitleId;
    /// <summary>
    /// 赛季
    /// </summary>
    public PropertyValue<int> Season;
    /// <summary>
    /// 进度
    /// </summary>
    public PropertyValue<int> Progress;
    /// <summary>
    /// 称号获取时间
    /// </summary>
    public PropertyValue<long> Time;
    /// <summary>
    /// 是否新获得的称号, 1是0否
    /// </summary>
    public PropertyValue<int> IsNew;
    public override void WriteTo(pb::CodedOutputStream output) {
      if (TitleId.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(TitleId.Value);
      }
      if (SubTitleId.Value!= 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(SubTitleId.Value);
      }
      if (Season.Value!= 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Season.Value);
      }
      if (Progress.Value!= 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Progress.Value);
      }
      if (Time.Value!= 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(Time.Value);
      }
      if (IsNew.Value!= 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(IsNew.Value);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (TitleId.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TitleId.Value);
      }
      if (SubTitleId.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SubTitleId.Value);
      }
      if (Season.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Season.Value);
      }
      if (Progress.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Progress.Value);
      }
      if (Time.Value!= 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Time.Value);
      }
      if (IsNew.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IsNew.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      long flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag |= 1 << 1;
            TitleId.Value = input.ReadSInt32();
            break;
          }
          case 16: {
            flag |= 1 << 2;
            SubTitleId.Value = input.ReadSInt32();
            break;
          }
          case 24: {
            flag |= 1 << 3;
            Season.Value = input.ReadSInt32();
            break;
          }
          case 32: {
            flag |= 1 << 4;
            Progress.Value = input.ReadSInt32();
            break;
          }
          case 40: {
            flag |= 1 << 5;
            Time.Value = input.ReadSInt64();
            break;
          }
          case 48: {
            flag |= 1 << 6;
            IsNew.Value = input.ReadSInt32();
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        TitleId.Value = 0;
      }
      if((flag & 1 << 2) == 0)
      {
        SubTitleId.Value = 0;
      }
      if((flag & 1 << 3) == 0)
      {
        Season.Value = 0;
      }
      if((flag & 1 << 4) == 0)
      {
        Progress.Value = 0;
      }
      if((flag & 1 << 5) == 0)
      {
        Time.Value = 0;
      }
      if((flag & 1 << 6) == 0)
      {
        IsNew.Value = 0;
      }
    }

    public void MergeFrom(TeamAchieveTitlePB from) {
      TitleId.Value = from.TitleId.Value;
      SubTitleId.Value = from.SubTitleId.Value;
      Season.Value = from.Season.Value;
      Progress.Value = from.Progress.Value;
      Time.Value = from.Time.Value;
      IsNew.Value = from.IsNew.Value;
    }

    public override void ResetDefaults() {
      TitleId.Value = 0;
      SubTitleId.Value = 0;
      Season.Value = 0;
      Progress.Value = 0;
      Time.Value = 0;
      IsNew.Value = 0;
    }

    public override void Bind(){
      TitleId = new PropertyValue<int>(this,"TitleId");
      SubTitleId = new PropertyValue<int>(this,"SubTitleId");
      Season = new PropertyValue<int>(this,"Season");
      Progress = new PropertyValue<int>(this,"Progress");
      Time = new PropertyValue<long>(this,"Time");
      IsNew = new PropertyValue<int>(this,"IsNew");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(TitleId)); 
      list.Add(new ViewModelPropertyInfo(SubTitleId)); 
      list.Add(new ViewModelPropertyInfo(Season)); 
      list.Add(new ViewModelPropertyInfo(Progress)); 
      list.Add(new ViewModelPropertyInfo(Time)); 
      list.Add(new ViewModelPropertyInfo(IsNew)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("TitleId:").Append(TitleId.Value);
      stringBuilder.Append(", SubTitleId:").Append(SubTitleId.Value);
      stringBuilder.Append(", Season:").Append(Season.Value);
      stringBuilder.Append(", Progress:").Append(Progress.Value);
      stringBuilder.Append(", Time:").Append(Time.Value);
      stringBuilder.Append(", IsNew:").Append(IsNew.Value);
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  public partial class TeamTitleInUseRes : ViewModel {
    public static readonly pb::MessageParser<TeamTitleInUseRes> Parser = new pb::MessageParser<TeamTitleInUseRes>(() => (TeamTitleInUseRes)MessagePool.Instance.Fetch(typeof(TeamTitleInUseRes)));
    /// <summary>
    /// </summary>
    public PropertyValue<int> Ret;
    /// <summary>
    ///称号信息
    /// </summary>
    public global::PlatformHotfix.TeamTitlePB TeamTitle;

    public override void WriteTo(pb::CodedOutputStream output) {
      if (Ret.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret.Value);
      }
      if (TeamTitle!= null &&TeamTitle.CalculateSize()!= 0) {
        output.WriteRawTag(18);
        output.WriteMessage(TeamTitle);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (Ret.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);
      }
      if (TeamTitle!= null &&TeamTitle.CalculateSize()!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamTitle);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      long flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag |= 1 << 1;
            Ret.Value = input.ReadSInt32();
            break;
          }
          case 18: {
            flag |= 1 << 2;
            if (TeamTitle == null) {
              TeamTitle = new global::PlatformHotfix.TeamTitlePB();
            }
            input.ReadMessage(TeamTitle);
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        Ret.Value = 0;
      }
      if((flag & 1 << 2) == 0)
      {
        if (TeamTitle!= null)TeamTitle.ResetDefaults();
      }
    }

    public void MergeFrom(TeamTitleInUseRes from) {
      Ret.Value = from.Ret.Value;
      TeamTitle.MergeFrom(from.TeamTitle);
    }

    public override void ResetDefaults() {
      Ret.Value = 0;
      if (TeamTitle!= null)TeamTitle.ResetDefaults();
    }

    public override void Bind(){
      Ret = new PropertyValue<int>(this,"Ret");
      this.AddBinding(TeamTitle?? (TeamTitle = new global::PlatformHotfix.TeamTitlePB())); 
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(Ret)); 
      list.Add(new ViewModelPropertyInfo(TeamTitle)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("Ret:").Append(Ret.Value);
      stringBuilder.Append(", TeamTitle:"+TeamTitle.ToString());
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  #endregion

}

#endregion Designer generated code
<fim_middle>) {
      AchievementId.Value = from.AchievementId.Value;
      Progress<|endoftext|>