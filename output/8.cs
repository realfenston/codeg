<fim_prefix>// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communtity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace PlatformHotfix {

  #region Messages
  public partial class checkNoticeReq : ViewModel {
    public static readonly pb::MessageParser<checkNoticeReq> Parser = new pb::MessageParser<checkNoticeReq>(() => (checkNoticeReq)MessagePool.Instance.Fetch(typeof(checkNoticeReq)));
    /// <summary>
    ///account
    /// </summary>
    public PropertyValue<string> AccountId;
    /// <summary>
    ///token
    /// </summary>
    public PropertyValue<string> Token;
    /// <summary>
    ///服务器
    /// </summary>
    public PropertyValue<string> ServerId;
    /// <summary>
    ///角色
    /// </summary>
    public PropertyValue<string> RoleId;
    /// <summary>
    ///游戏类型
    /// </summary>
    public PropertyValue<int> GameType;
    public override void WriteTo(pb::CodedOutputStream output) {
      if (!string.IsNullOrEmpty(AccountId.Value)) {
        output.WriteRawTag(10);
        output.WriteString(AccountId.Value);
      }
      if (!string.IsNullOrEmpty(Token.Value)) {
        output.WriteRawTag(18);
        output.WriteString(Token.Value);
      }
      if (!string.IsNullOrEmpty(ServerId.Value)) {
        output.WriteRawTag(26);
        output.WriteString(ServerId.Value);
      }
      if (!string.IsNullOrEmpty(RoleId.Value)) {
        output.WriteRawTag(34);
        output.WriteString(RoleId.Value);
      }
      if (GameType.Value!= 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(GameType.Value);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (!string.IsNullOrEmpty(AccountId.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);
      }
      if (!string.IsNullOrEmpty(Token.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token.Value);
      }
      if (!string.IsNullOrEmpty(ServerId.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId.Value);
      }
      if (!string.IsNullOrEmpty(RoleId.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleId.Value);
      }
      if (GameType.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      int flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            flag |= 1 << 1;
            AccountId.Value = input.ReadString();
            break;
          }
          case 18: {
            flag |= 1 << 2;
            Token.Value = input.ReadString();
            break;
          }
          case 26: {
            flag |= 1 << 3;
            ServerId.Value = input.ReadString();
            break;
          }
          case 34: {
            flag |= 1 << 4;
            RoleId.Value = input.ReadString();
            break;
          }
          case 40: {
            flag |= 1 << 5;
            GameType.Value = input.ReadSInt32();
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        AccountId.Value = "";
      }
      if((flag & 1 << 2) == 0)
      {
        Token.Value = "";
      }
      if((flag & 1 << 3) == 0)
      {
        ServerId.Value = "";
      }
      if((flag & 1 << 4) == 0)
      {
        RoleId.Value = "";
      }
      if((flag & 1 << 5) == 0)
      {
        GameType.Value = 0;
      }
    }

    public void MergeFrom(checkNoticeReq from) {
      AccountId.Value = from.AccountId.Value;
      Token.Value = from.Token.Value;
      ServerId.Value = from.ServerId.Value;
      RoleId.Value = from.RoleId.Value;
      GameType.Value = from.GameType.Value;
    }

    public override void ResetDefaults() {
      AccountId.Value = "";
      Token.Value = "";
      ServerId.Value = "";
      RoleId.Value = "";
      GameType.Value = 0;
    }

    public override void Bind(){
      AccountId = new PropertyValue<string>(this,"AccountId");
      Token = new PropertyValue<string>(this,"Token");
      ServerId = new PropertyValue<string>(this,"ServerId");
      RoleId = new PropertyValue<string>(this,"RoleId");
      GameType = new PropertyValue<int>(this,"GameType");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(AccountId)); 
      list.Add(new ViewModelPropertyInfo(Token)); 
      list.Add(new ViewModelPropertyInfo(ServerId)); 
      list.Add(new ViewModelPropertyInfo(RoleId)); 
      list.Add(new ViewModelPropertyInfo(GameType)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("AccountId:").Append(AccountId.Value);
      stringBuilder.Append(", Token:").Append(Token.Value);
      stringBuilder.Append(", ServerId:").Append(ServerId.Value);
      stringBuilder.Append(", RoleId:").Append(RoleId.Value);
      stringBuilder.Append(", GameType:").Append(GameType.Value);
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  public partial class checkNoticeRes : ViewModel {
    public static readonly pb::MessageParser<checkNoticeRes> Parser = new pb::MessageParser<checkNoticeRes>(() => (checkNoticeRes)MessagePool.Instance.Fetch(typeof(checkNoticeRes)));
    /// <summary>
    ///响应码
    /// </summary>
    public PropertyValue<int> Ret;
    /// <summary>
    ///1.展示红点 2.不展示
    /// </summary>
    public PropertyValue<int> Notice;
    public override void WriteTo(pb::CodedOutputStream output) {
      if (Ret.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret.Value);
      }
      if (Notice.Value!= 0) {
        output.WriteRawTag(16);<fim_suffix> int CalculateSize() {
      int size = 0;
      if (Ret.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);
      }
      if (Notice.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Notice.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      int flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag |= 1 << 1;
            Ret.Value = input.ReadSInt32();
            break;
          }
          case 16: {
            flag |= 1 << 2;
            Notice.Value = input.ReadSInt32();
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        Ret.Value = 0;
      }
      if((flag & 1 << 2) == 0)
      {
        Notice.Value = 0;
      }
    }

    public void MergeFrom(checkNoticeRes from) {
      Ret.Value = from.Ret.Value;
      Notice.Value = from.Notice.Value;
    }

    public override void ResetDefaults() {
      Ret.Value = 0;
      Notice.Value = 0;
    }

    public override void Bind(){
      Ret = new PropertyValue<int>(this,"Ret");
      Notice = new PropertyValue<int>(this,"Notice");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(Ret)); 
      list.Add(new ViewModelPropertyInfo(Notice)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("Ret:").Append(Ret.Value);
      stringBuilder.Append(", Notice:").Append(Notice.Value);
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  public partial class PopupInfoReq : ViewModel {
    public static readonly pb::MessageParser<PopupInfoReq> Parser = new pb::MessageParser<PopupInfoReq>(() => (PopupInfoReq)MessagePool.Instance.Fetch(typeof(PopupInfoReq)));
    /// <summary>
    ///account
    /// </summary>
    public PropertyValue<string> AccountId;
    /// <summary>
    ///token
    /// </summary>
    public PropertyValue<string> Token;
    /// <summary>
    ///服务器
    /// </summary>
    public PropertyValue<string> ServerId;
    /// <summary>
    ///角色
    /// </summary>
    public PropertyValue<string> RoleId;
    /// <summary>
    ///游戏类型
    /// </summary>
    public PropertyValue<int> GameType;
    /// <summary>
    ///语言
    /// </summary>
    public PropertyValue<string> Language;
    public override void WriteTo(pb::CodedOutputStream output) {
      if (!string.IsNullOrEmpty(AccountId.Value)) {
        output.WriteRawTag(10);
        output.WriteString(AccountId.Value);
      }
      if (!string.IsNullOrEmpty(Token.Value)) {
        output.WriteRawTag(18);
        output.WriteString(Token.Value);
      }
      if (!string.IsNullOrEmpty(ServerId.Value)) {
        output.WriteRawTag(26);
        output.WriteString(ServerId.Value);
      }
      if (!string.IsNullOrEmpty(RoleId.Value)) {
        output.WriteRawTag(34);
        output.WriteString(RoleId.Value);
      }
      if (GameType.Value!= 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(GameType.Value);
      }
      if (!string.IsNullOrEmpty(Language.Value)) {
        output.WriteRawTag(50);
        output.WriteString(Language.Value);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (!string.IsNullOrEmpty(AccountId.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId.Value);
      }
      if (!string.IsNullOrEmpty(Token.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token.Value);
      }
      if (!string.IsNullOrEmpty(ServerId.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId.Value);
      }
      if (!string.IsNullOrEmpty(RoleId.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleId.Value);
      }
      if (GameType.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType.Value);
      }
      if (!string.IsNullOrEmpty(Language.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      int flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            flag |= 1 << 1;
            AccountId.Value = input.ReadString();
            break;
          }
          case 18: {
            flag |= 1 << 2;
            Token.Value = input.ReadString();
            break;
          }
          case 26: {
            flag |= 1 << 3;
            ServerId.Value = input.ReadString();
            break;
          }
          case 34: {
            flag |= 1 << 4;
            RoleId.Value = input.ReadString();
            break;
          }
          case 40: {
            flag |= 1 << 5;
            GameType.Value = input.ReadSInt32();
            break;
          }
          case 50: {
            flag |= 1 << 6;
            Language.Value = input.ReadString();
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        AccountId.Value = "";
      }
      if((flag & 1 << 2) == 0)
      {
        Token.Value = "";
      }
      if((flag & 1 << 3) == 0)
      {
        ServerId.Value = "";
      }
      if((flag & 1 << 4) == 0)
      {
        RoleId.Value = "";
      }
      if((flag & 1 << 5) == 0)
      {
        GameType.Value = 0;
      }
      if((flag & 1 << 6) == 0)
      {
        Language.Value = "";
      }
    }

    public void MergeFrom(PopupInfoReq from) {
      AccountId.Value = from.AccountId.Value;
      Token.Value = from.Token.Value;
      ServerId.Value = from.ServerId.Value;
      RoleId.Value = from.RoleId.Value;
      GameType.Value = from.GameType.Value;
      Language.Value = from.Language.Value;
    }

    public override void ResetDefaults() {
      AccountId.Value = "";
      Token.Value = "";
      ServerId.Value = "";
      RoleId.Value = "";
      GameType.Value = 0;
      Language.Value = "";
    }

    public override void Bind(){
      AccountId = new PropertyValue<string>(this,"AccountId");
      Token = new PropertyValue<string>(this,"Token");
      ServerId = new PropertyValue<string>(this,"ServerId");
      RoleId = new PropertyValue<string>(this,"RoleId");
      GameType = new PropertyValue<int>(this,"GameType");
      Language = new PropertyValue<string>(this,"Language");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(AccountId)); 
      list.Add(new ViewModelPropertyInfo(Token)); 
      list.Add(new ViewModelPropertyInfo(ServerId)); 
      list.Add(new ViewModelPropertyInfo(RoleId)); 
      list.Add(new ViewModelPropertyInfo(GameType)); 
      list.Add(new ViewModelPropertyInfo(Language)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("AccountId:").Append(AccountId.Value);
      stringBuilder.Append(", Token:").Append(Token.Value);
      stringBuilder.Append(", ServerId:").Append(ServerId.Value);
      stringBuilder.Append(", RoleId:").Append(RoleId.Value);
      stringBuilder.Append(", GameType:").Append(GameType.Value);
      stringBuilder.Append(", Language:").Append(Language.Value);
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  public partial class PopupInfoRes : ViewModel {
    public static readonly pb::MessageParser<PopupInfoRes> Parser = new pb::MessageParser<PopupInfoRes>(() => (PopupInfoRes)MessagePool.Instance.Fetch(typeof(PopupInfoRes)));
    /// <summary>
    ///错误码
    /// </summary>
    public PropertyValue<int> Ret;
    /// <summary>
    ///标题
    /// </summary>
    public PropertyValue<string> Title;
    /// <summary>
    ///内容
    /// </summary>
    public PropertyValue<string> Content;
    /// <summary>
    ///跳转
    /// </summary>
    public PropertyValue<string> Ref;
    public override void WriteTo(pb::CodedOutputStream output) {
      if (Ret.Value!= 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret.Value);
      }
      if (!string.IsNullOrEmpty(Title.Value)) {
        output.WriteRawTag(18);
        output.WriteString(Title.Value);
      }
      if (!string.IsNullOrEmpty(Content.Value)) {
        output.WriteRawTag(26);
        output.WriteString(Content.Value);
      }
      if (!string.IsNullOrEmpty(Ref.Value)) {
        output.WriteRawTag(34);
        output.WriteString(Ref.Value);
      }
    }

    public override int CalculateSize() {
      int size = 0;
      if (Ret.Value!= 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret.Value);
      }
      if (!string.IsNullOrEmpty(Title.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title.Value);
      }
      if (!string.IsNullOrEmpty(Content.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content.Value);
      }
      if (!string.IsNullOrEmpty(Ref.Value)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ref.Value);
      }
      return size;
    }

    public override void MergeFrom(pb::CodedInputStream input) {
      int flag = 0;
      uint tag;
      while ((tag = input.ReadTag())!= 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            flag |= 1 << 1;
            Ret.Value = input.ReadSInt32();
            break;
          }
          case 18: {
            flag |= 1 << 2;
            Title.Value = input.ReadString();
            break;
          }
          case 26: {
            flag |= 1 << 3;
            Content.Value = input.ReadString();
            break;
          }
          case 34: {
            flag |= 1 << 4;
            Ref.Value = input.ReadString();
            break;
          }
        }
      }
      if((flag & 1 << 1) == 0)
      {
        Ret.Value = 0;
      }
      if((flag & 1 << 2) == 0)
      {
        Title.Value = "";
      }
      if((flag & 1 << 3) == 0)
      {
        Content.Value = "";
      }
      if((flag & 1 << 4) == 0)
      {
        Ref.Value = "";
      }
    }

    public void MergeFrom(PopupInfoRes from) {
      Ret.Value = from.Ret.Value;
      Title.Value = from.Title.Value;
      Content.Value = from.Content.Value;
      Ref.Value = from.Ref.Value;
    }

    public override void ResetDefaults() {
      Ret.Value = 0;
      Title.Value = "";
      Content.Value = "";
      Ref.Value = "";
    }

    public override void Bind(){
      Ret = new PropertyValue<int>(this,"Ret");
      Title = new PropertyValue<string>(this,"Title");
      Content = new PropertyValue<string>(this,"Content");
      Ref = new PropertyValue<string>(this,"Ref");
      BindOther();
    }

    protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list){
      list.Add(new ViewModelPropertyInfo(Ret)); 
      list.Add(new ViewModelPropertyInfo(Title)); 
      list.Add(new ViewModelPropertyInfo(Content)); 
      list.Add(new ViewModelPropertyInfo(Ref)); 
      FillOtherProperties(list);
    }

    public override string ToString() {
      System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
      stringBuilder.Append("Ret:").Append(Ret.Value);
      stringBuilder.Append(", Title:").Append(Title.Value);
      stringBuilder.Append(", Content:").Append(Content.Value);
      stringBuilder.Append(", Ref:").Append(Ref.Value);
      return stringBuilder.ToString();
    }

    protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list)
    {
      FillOtherCommands(list); 
    }
    partial void BindOther();
    partial void FillOtherProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list);
    partial void FillOtherCommands(System.Collections.Generic.List<ViewModelCommandInfo> list);
  }

  #endregion

}

#endregion Designer generated code
<fim_middle>
        output.WriteSInt32(Notice.Value);
      }
    }

    public override<|endoftext|>